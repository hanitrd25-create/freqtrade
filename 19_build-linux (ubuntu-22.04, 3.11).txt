2025-08-30T09:52:57.0936267Z Current runner version: '2.328.0'
2025-08-30T09:52:57.0970906Z ##[group]Runner Image Provisioner
2025-08-30T09:52:57.0972106Z Hosted Compute Agent
2025-08-30T09:52:57.0973127Z Version: 20250825.382
2025-08-30T09:52:57.0974281Z Commit: 7109f2abf901479dac39397456e363ac0cca0730
2025-08-30T09:52:57.0975386Z Build Date: 2025-08-25T22:55:50Z
2025-08-30T09:52:57.0976446Z ##[endgroup]
2025-08-30T09:52:57.0977278Z ##[group]Operating System
2025-08-30T09:52:57.0978203Z Ubuntu
2025-08-30T09:52:57.0979131Z 22.04.5
2025-08-30T09:52:57.0979988Z LTS
2025-08-30T09:52:57.0980730Z ##[endgroup]
2025-08-30T09:52:57.0981762Z ##[group]Runner Image
2025-08-30T09:52:57.0982726Z Image: ubuntu-22.04
2025-08-30T09:52:57.0983888Z Version: 20250825.1.0
2025-08-30T09:52:57.0985904Z Included Software: https://github.com/actions/runner-images/blob/ubuntu22/20250825.1/images/ubuntu/Ubuntu2204-Readme.md
2025-08-30T09:52:57.0988678Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu22%2F20250825.1
2025-08-30T09:52:57.0990539Z ##[endgroup]
2025-08-30T09:52:57.0992408Z ##[group]GITHUB_TOKEN Permissions
2025-08-30T09:52:57.0995561Z Metadata: read
2025-08-30T09:52:57.0996418Z RepositoryProjects: read
2025-08-30T09:52:57.0997387Z ##[endgroup]
2025-08-30T09:52:57.1000701Z Secret source: Actions
2025-08-30T09:52:57.1002140Z Prepare workflow directory
2025-08-30T09:52:57.1474875Z Prepare all required actions
2025-08-30T09:52:57.1532346Z Getting action download info
2025-08-30T09:52:57.4611967Z Download action repository 'actions/checkout@v5' (SHA:08c6903cd8c0fde910a37f88322edcfb5dd907a8)
2025-08-30T09:52:57.5894924Z Download action repository 'actions/setup-python@v5' (SHA:a26af69be951a213d495a4c3e4e4022e16d87065)
2025-08-30T09:52:57.6686471Z Download action repository 'astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b' (SHA:4959332f0f014c5280e7eac8b70c90cb574c9f9b)
2025-08-30T09:52:58.0448793Z Download action repository 'rjstone/discord-webhook-notify@c2597273488aeda841dd1e891321952b51f7996f' (SHA:c2597273488aeda841dd1e891321952b51f7996f)
2025-08-30T09:52:58.3792762Z Complete job name: build-linux (ubuntu-22.04, 3.11)
2025-08-30T09:52:58.4533067Z ##[group]Run actions/checkout@v5
2025-08-30T09:52:58.4534180Z with:
2025-08-30T09:52:58.4534608Z   persist-credentials: false
2025-08-30T09:52:58.4535117Z   repository: grebois/freqtrade
2025-08-30T09:52:58.4535767Z   token: ***
2025-08-30T09:52:58.4536169Z   ssh-strict: true
2025-08-30T09:52:58.4536572Z   ssh-user: git
2025-08-30T09:52:58.4536955Z   clean: true
2025-08-30T09:52:58.4537365Z   sparse-checkout-cone-mode: true
2025-08-30T09:52:58.4537852Z   fetch-depth: 1
2025-08-30T09:52:58.4538260Z   fetch-tags: false
2025-08-30T09:52:58.4538660Z   show-progress: true
2025-08-30T09:52:58.4539076Z   lfs: false
2025-08-30T09:52:58.4539661Z   submodules: false
2025-08-30T09:52:58.4540165Z   set-safe-directory: true
2025-08-30T09:52:58.4541030Z ##[endgroup]
2025-08-30T09:52:58.5489440Z Syncing repository: grebois/freqtrade
2025-08-30T09:52:58.5491398Z ##[group]Getting Git version info
2025-08-30T09:52:58.5492407Z Working directory is '/home/runner/work/freqtrade/freqtrade'
2025-08-30T09:52:58.5494348Z [command]/usr/bin/git version
2025-08-30T09:52:58.5531748Z git version 2.51.0
2025-08-30T09:52:58.5555009Z ##[endgroup]
2025-08-30T09:52:58.5568876Z Temporarily overriding HOME='/home/runner/work/_temp/05a601e4-8159-46f2-98b4-ac2de9ab8119' before making global git config changes
2025-08-30T09:52:58.5570923Z Adding repository directory to the temporary git global config as a safe directory
2025-08-30T09:52:58.5574218Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/freqtrade/freqtrade
2025-08-30T09:52:58.5605494Z Deleting the contents of '/home/runner/work/freqtrade/freqtrade'
2025-08-30T09:52:58.5608639Z ##[group]Initializing the repository
2025-08-30T09:52:58.5613012Z [command]/usr/bin/git init /home/runner/work/freqtrade/freqtrade
2025-08-30T09:52:58.5690012Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-08-30T09:52:58.5692483Z hint: is subject to change. To configure the initial branch name to use in all
2025-08-30T09:52:58.5694524Z hint: of your new repositories, which will suppress this warning, call:
2025-08-30T09:52:58.5695910Z hint:
2025-08-30T09:52:58.5696620Z hint: 	git config --global init.defaultBranch <name>
2025-08-30T09:52:58.5697310Z hint:
2025-08-30T09:52:58.5697993Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-08-30T09:52:58.5699777Z hint: 'development'. The just-created branch can be renamed via this command:
2025-08-30T09:52:58.5701215Z hint:
2025-08-30T09:52:58.5701723Z hint: 	git branch -m <name>
2025-08-30T09:52:58.5702291Z hint:
2025-08-30T09:52:58.5703251Z hint: Disable this message with "git config set advice.defaultBranchName false"
2025-08-30T09:52:58.5705200Z Initialized empty Git repository in /home/runner/work/freqtrade/freqtrade/.git/
2025-08-30T09:52:58.5707312Z [command]/usr/bin/git remote add origin https://github.com/grebois/freqtrade
2025-08-30T09:52:58.5738058Z ##[endgroup]
2025-08-30T09:52:58.5738972Z ##[group]Disabling automatic garbage collection
2025-08-30T09:52:58.5742548Z [command]/usr/bin/git config --local gc.auto 0
2025-08-30T09:52:58.5769656Z ##[endgroup]
2025-08-30T09:52:58.5771418Z ##[group]Setting up auth
2025-08-30T09:52:58.5777087Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-08-30T09:52:58.5808351Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-08-30T09:52:58.6119868Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-08-30T09:52:58.6151301Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-08-30T09:52:58.6368531Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-08-30T09:52:58.6402803Z ##[endgroup]
2025-08-30T09:52:58.6404521Z ##[group]Fetching the repository
2025-08-30T09:52:58.6411749Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +1488bf0c1884299db2e23000c94f6ce106d1c298:refs/remotes/origin/develop
2025-08-30T09:53:00.0102558Z From https://github.com/grebois/freqtrade
2025-08-30T09:53:00.0104730Z  * [new ref]         1488bf0c1884299db2e23000c94f6ce106d1c298 -> origin/develop
2025-08-30T09:53:00.0131981Z ##[endgroup]
2025-08-30T09:53:00.0132904Z ##[group]Determining the checkout info
2025-08-30T09:53:00.0135613Z ##[endgroup]
2025-08-30T09:53:00.0140798Z [command]/usr/bin/git sparse-checkout disable
2025-08-30T09:53:00.0181244Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-08-30T09:53:00.0208116Z ##[group]Checking out the ref
2025-08-30T09:53:00.0212208Z [command]/usr/bin/git checkout --progress --force -B develop refs/remotes/origin/develop
2025-08-30T09:53:00.2704576Z Switched to a new branch 'develop'
2025-08-30T09:53:00.2705567Z branch 'develop' set up to track 'origin/develop'.
2025-08-30T09:53:00.2762724Z ##[endgroup]
2025-08-30T09:53:00.2767079Z [command]/usr/bin/git log -1 --format=%H
2025-08-30T09:53:00.2790072Z 1488bf0c1884299db2e23000c94f6ce106d1c298
2025-08-30T09:53:00.2800496Z ##[group]Removing auth
2025-08-30T09:53:00.2804394Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-08-30T09:53:00.2834448Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-08-30T09:53:00.3069846Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-08-30T09:53:00.3105771Z http.https://github.com/.extraheader
2025-08-30T09:53:00.3115709Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-08-30T09:53:00.3144980Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-08-30T09:53:00.3357933Z ##[endgroup]
2025-08-30T09:53:00.3646530Z ##[group]Run actions/setup-python@v5
2025-08-30T09:53:00.3646845Z with:
2025-08-30T09:53:00.3647040Z   python-version: 3.11
2025-08-30T09:53:00.3647256Z   check-latest: false
2025-08-30T09:53:00.3647589Z   token: ***
2025-08-30T09:53:00.3647780Z   update-environment: true
2025-08-30T09:53:00.3648002Z   allow-prereleases: false
2025-08-30T09:53:00.3648231Z   freethreaded: false
2025-08-30T09:53:00.3648453Z ##[endgroup]
2025-08-30T09:53:00.5298152Z ##[group]Installed versions
2025-08-30T09:53:00.5432407Z Successfully set up CPython (3.11.13)
2025-08-30T09:53:00.5433139Z ##[endgroup]
2025-08-30T09:53:00.5591956Z ##[group]Run astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b
2025-08-30T09:53:00.5592341Z with:
2025-08-30T09:53:00.5592523Z   activate-environment: true
2025-08-30T09:53:00.5592746Z   enable-cache: true
2025-08-30T09:53:00.5592936Z   python-version: 3.11
2025-08-30T09:53:00.5593164Z   cache-dependency-glob: requirements**.txt
2025-08-30T09:53:00.5593702Z   cache-suffix: 3.11
2025-08-30T09:53:00.5593918Z   prune-cache: false
2025-08-30T09:53:00.5594172Z   working-directory: /home/runner/work/freqtrade/freqtrade
2025-08-30T09:53:00.5594487Z   server-url: https://github.com
2025-08-30T09:53:00.5594858Z   github-token: ***
2025-08-30T09:53:00.5595061Z   ignore-nothing-to-cache: false
2025-08-30T09:53:00.5595301Z   ignore-empty-workdir: false
2025-08-30T09:53:00.5595529Z   add-problem-matchers: true
2025-08-30T09:53:00.5595730Z env:
2025-08-30T09:53:00.5595955Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:00.5596389Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-30T09:53:00.5596776Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:00.5597135Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:00.5597478Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:00.5597812Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-30T09:53:00.5598098Z ##[endgroup]
2025-08-30T09:53:00.8116628Z Trying to find version for uv in: /home/runner/work/freqtrade/freqtrade/uv.toml
2025-08-30T09:53:00.8118656Z Could not find file: /home/runner/work/freqtrade/freqtrade/uv.toml
2025-08-30T09:53:00.8119495Z Trying to find version for uv in: /home/runner/work/freqtrade/freqtrade/pyproject.toml
2025-08-30T09:53:00.8160092Z Could not determine uv version from uv.toml or pyproject.toml. Falling back to latest.
2025-08-30T09:53:00.8161518Z Getting latest version from GitHub API...
2025-08-30T09:53:01.0944260Z manifest-file not provided, reading from local file.
2025-08-30T09:53:01.1007846Z manifest-file does not contain version 0.8.14, arch x86_64, platform unknown-linux-gnu. Falling back to GitHub releases.
2025-08-30T09:53:01.1009226Z Downloading uv from "https://github.com/astral-sh/uv/releases/download/0.8.14/uv-x86_64-unknown-linux-gnu.tar.gz" ...
2025-08-30T09:53:01.3417583Z [command]/usr/bin/tar xz --warning=no-unknown-keyword --overwrite -C /home/runner/work/_temp/e2a7ed31-edb4-49db-a360-f1e60452d7b9 -f /home/runner/work/_temp/0617280e-f501-4b0d-b5fd-de9aabf271e7
2025-08-30T09:53:01.7261679Z Added /home/runner/.local/bin to the path
2025-08-30T09:53:01.7266078Z Added /opt/hostedtoolcache/uv/0.8.14/x86_64 to the path
2025-08-30T09:53:01.7266897Z Set UV_PYTHON to 3.11
2025-08-30T09:53:01.7267893Z Activating python venv...
2025-08-30T09:53:01.7287608Z [command]/opt/hostedtoolcache/uv/0.8.14/x86_64/uv venv .venv --directory /home/runner/work/freqtrade/freqtrade
2025-08-30T09:53:02.2384306Z Using CPython 3.11.13 interpreter at: /opt/hostedtoolcache/Python/3.11.13/x64/bin/python3.11
2025-08-30T09:53:02.2384790Z Creating virtual environment at: .venv
2025-08-30T09:53:02.2389640Z Activate with: source .venv/bin/activate
2025-08-30T09:53:02.2417518Z Set UV_CACHE_DIR to /home/runner/work/_temp/setup-uv-cache
2025-08-30T09:53:02.2417862Z Successfully installed uv version 0.8.14
2025-08-30T09:53:02.2418332Z Searching files using cache dependency glob: /home/runner/work/freqtrade/freqtrade/requirements**.txt
2025-08-30T09:53:02.2473311Z /home/runner/work/freqtrade/freqtrade/requirements-dev.txt
2025-08-30T09:53:02.2495885Z /home/runner/work/freqtrade/freqtrade/requirements-freqai-rl.txt
2025-08-30T09:53:02.2503549Z /home/runner/work/freqtrade/freqtrade/requirements-freqai.txt
2025-08-30T09:53:02.2510287Z /home/runner/work/freqtrade/freqtrade/requirements-hyperopt.txt
2025-08-30T09:53:02.2516791Z /home/runner/work/freqtrade/freqtrade/requirements-plot.txt
2025-08-30T09:53:02.2523775Z /home/runner/work/freqtrade/freqtrade/requirements.txt
2025-08-30T09:53:02.2529744Z Found 6 files to hash.
2025-08-30T09:53:02.2585126Z Trying to restore uv cache from GitHub Actions cache with key: setup-uv-1-x86_64-unknown-linux-gnu-3.11-e8b9996dc1fdc703994a34900dbeb75b52019d67e2f4cd8ac011d856f77b4ceb-3.11
2025-08-30T09:53:02.2924516Z No GitHub Actions cache found for key: setup-uv-1-x86_64-unknown-linux-gnu-3.11-e8b9996dc1fdc703994a34900dbeb75b52019d67e2f4cd8ac011d856f77b4ceb-3.11
2025-08-30T09:53:02.3042352Z ##[group]Run uv pip install --upgrade wheel
2025-08-30T09:53:02.3042724Z [36;1muv pip install --upgrade wheel[0m
2025-08-30T09:53:02.3043024Z [36;1muv pip install -r requirements-dev.txt[0m
2025-08-30T09:53:02.3043309Z [36;1muv pip install -e ft_client/[0m
2025-08-30T09:53:02.3043885Z [36;1muv pip install -e .[0m
2025-08-30T09:53:02.3078059Z shell: /usr/bin/bash -e {0}
2025-08-30T09:53:02.3078292Z env:
2025-08-30T09:53:02.3078531Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:02.3078941Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-30T09:53:02.3079331Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:02.3079713Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:02.3080053Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:02.3080397Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-30T09:53:02.3080711Z   UV_PYTHON: 3.11
2025-08-30T09:53:02.3080934Z   VIRTUAL_ENV: /home/runner/work/freqtrade/freqtrade/.venv
2025-08-30T09:53:02.3081251Z   UV_CACHE_DIR: /home/runner/work/_temp/setup-uv-cache
2025-08-30T09:53:02.3081510Z ##[endgroup]
2025-08-30T09:53:02.3872349Z Resolved 1 package in 24ms
2025-08-30T09:53:02.3953727Z Prepared 1 package in 8ms
2025-08-30T09:53:02.3989685Z Installed 1 package in 3ms
2025-08-30T09:53:02.3990074Z  + wheel==0.45.1
2025-08-30T09:53:04.3817945Z Resolved 207 packages in 1.97s
2025-08-30T09:53:04.3938302Z Downloading tensorboard (5.3MiB)
2025-08-30T09:53:04.3938781Z Downloading sympy (6.0MiB)
2025-08-30T09:53:04.3940330Z Downloading virtualenv (5.7MiB)
2025-08-30T09:53:04.3943793Z Downloading fonttools (4.7MiB)
2025-08-30T09:53:04.3944247Z Downloading cryptography (4.3MiB)
2025-08-30T09:53:04.3945426Z Downloading aiohttp (1.7MiB)
2025-08-30T09:53:04.3946870Z Downloading pygments (1.2MiB)
2025-08-30T09:53:04.3948653Z Downloading nvidia-cufile-cu12 (1.1MiB)
2025-08-30T09:53:04.3964553Z Downloading tensorboard-data-server (6.3MiB)
2025-08-30T09:53:04.3966619Z Downloading babel (9.7MiB)
2025-08-30T09:53:04.3969796Z Downloading xgboost (90.5MiB)
2025-08-30T09:53:04.3970957Z Downloading lightgbm (3.4MiB)
2025-08-30T09:53:04.3975133Z Downloading nvidia-cusparse-cu12 (274.9MiB)
2025-08-30T09:53:04.3975983Z Downloading pydantic-core (1.9MiB)
2025-08-30T09:53:04.3981364Z Downloading pandas (11.8MiB)
2025-08-30T09:53:04.3983991Z Downloading nvidia-nvjitlink-cu12 (37.4MiB)
2025-08-30T09:53:04.3987019Z Downloading matplotlib (8.3MiB)
2025-08-30T09:53:04.3988169Z Downloading plotly (9.3MiB)
2025-08-30T09:53:04.3991378Z Downloading nvidia-curand-cu12 (60.7MiB)
2025-08-30T09:53:04.3996261Z Downloading nvidia-cusparselt-cu12 (273.9MiB)
2025-08-30T09:53:04.3996951Z Downloading networkx (1.9MiB)
2025-08-30T09:53:04.3999454Z Downloading nvidia-cusolver-cu12 (255.1MiB)
2025-08-30T09:53:04.4001891Z Downloading mypy (12.0MiB)
2025-08-30T09:53:04.4004828Z Downloading nvidia-cublas-cu12 (566.8MiB)
2025-08-30T09:53:04.4007105Z Downloading scikit-learn (9.3MiB)
2025-08-30T09:53:04.4009502Z Downloading mkdocs (3.7MiB)
2025-08-30T09:53:04.4011983Z Downloading sqlalchemy (3.1MiB)
2025-08-30T09:53:04.4014558Z Downloading nvidia-nccl-cu12 (307.4MiB)
2025-08-30T09:53:04.4017027Z Downloading nvidia-cuda-cupti-cu12 (9.8MiB)
2025-08-30T09:53:04.4019506Z Downloading numpy (16.2MiB)
2025-08-30T09:53:04.4022019Z Downloading pip (1.7MiB)
2025-08-30T09:53:04.4024692Z Downloading scipy (33.7MiB)
2025-08-30T09:53:04.4027314Z Downloading nvidia-cufft-cu12 (184.2MiB)
2025-08-30T09:53:04.4029897Z Downloading grpcio (5.9MiB)
2025-08-30T09:53:04.4032518Z Downloading nvidia-cudnn-cu12 (674.0MiB)
2025-08-30T09:53:04.4076327Z Downloading kiwisolver (1.4MiB)
2025-08-30T09:53:04.4079489Z Downloading pyarrow (40.8MiB)
2025-08-30T09:53:04.4083986Z Downloading ruff (12.5MiB)
2025-08-30T09:53:04.4086137Z Downloading pillow (6.3MiB)
2025-08-30T09:53:04.4089632Z Downloading python-rapidjson (1.6MiB)
2025-08-30T09:53:04.4094471Z Downloading torch (846.9MiB)
2025-08-30T09:53:04.4096801Z Downloading nvidia-cuda-nvrtc-cu12 (84.0MiB)
2025-08-30T09:53:04.4100308Z Downloading ccxt (5.4MiB)
2025-08-30T09:53:04.4104820Z Downloading mkdocs-material (8.8MiB)
2025-08-30T09:53:04.4160908Z Downloading ta-lib (3.9MiB)
2025-08-30T09:53:04.4183759Z Downloading triton (148.3MiB)
2025-08-30T09:53:04.4186668Z Downloading catboost (94.6MiB)
2025-08-30T09:53:04.9794060Z  Downloading nvidia-cufile-cu12
2025-08-30T09:53:05.1330933Z  Downloading kiwisolver
2025-08-30T09:53:05.2420519Z  Downloading aiohttp
2025-08-30T09:53:05.2780405Z  Downloading python-rapidjson
2025-08-30T09:53:05.3317133Z  Downloading pygments
2025-08-30T09:53:05.3783578Z  Downloading pydantic-core
2025-08-30T09:53:05.5334732Z  Downloading pip
2025-08-30T09:53:05.7216100Z  Downloading networkx
2025-08-30T09:53:06.1031993Z  Downloading sqlalchemy
2025-08-30T09:53:06.1626015Z  Downloading lightgbm
2025-08-30T09:53:06.4120470Z  Downloading mkdocs
2025-08-30T09:53:06.5095779Z  Downloading ta-lib
2025-08-30T09:53:06.7440363Z    Building sdnotify==0.3.2
2025-08-30T09:53:06.7723147Z  Downloading cryptography
2025-08-30T09:53:06.8948203Z  Downloading fonttools
2025-08-30T09:53:07.0225568Z       Built sdnotify==0.3.2
2025-08-30T09:53:07.0952990Z  Downloading tensorboard
2025-08-30T09:53:07.1994372Z  Downloading virtualenv
2025-08-30T09:53:07.2343977Z  Downloading ccxt
2025-08-30T09:53:07.2738681Z  Downloading sympy
2025-08-30T09:53:07.2980912Z  Downloading grpcio
2025-08-30T09:53:07.3965668Z  Downloading tensorboard-data-server
2025-08-30T09:53:07.4942664Z  Downloading pillow
2025-08-30T09:53:08.0303220Z  Downloading matplotlib
2025-08-30T09:53:08.0943504Z  Downloading scikit-learn
2025-08-30T09:53:08.1595663Z  Downloading nvidia-cuda-cupti-cu12
2025-08-30T09:53:08.2074982Z  Downloading babel
2025-08-30T09:53:08.2095239Z  Downloading plotly
2025-08-30T09:53:08.7707459Z  Downloading ruff
2025-08-30T09:53:08.8750472Z  Downloading pandas
2025-08-30T09:53:09.3379244Z  Downloading numpy
2025-08-30T09:53:09.6354828Z  Downloading mypy
2025-08-30T09:53:11.8014606Z  Downloading scipy
2025-08-30T09:53:11.9332069Z  Downloading nvidia-nvjitlink-cu12
2025-08-30T09:53:12.5986636Z  Downloading pyarrow
2025-08-30T09:53:14.2956293Z  Downloading nvidia-curand-cu12
2025-08-30T09:53:16.2978893Z  Downloading nvidia-cuda-nvrtc-cu12
2025-08-30T09:53:16.8402612Z  Downloading xgboost
2025-08-30T09:53:17.0633765Z  Downloading catboost
2025-08-30T09:53:20.2514820Z  Downloading triton
2025-08-30T09:53:22.0438822Z  Downloading nvidia-cufft-cu12
2025-08-30T09:53:24.8546892Z  Downloading nvidia-cusolver-cu12
2025-08-30T09:53:25.4254388Z  Downloading nvidia-cusparse-cu12
2025-08-30T09:53:25.5194126Z  Downloading nvidia-cusparselt-cu12
2025-08-30T09:53:26.2749704Z  Downloading nvidia-nccl-cu12
2025-08-30T09:53:29.7940958Z  Downloading nvidia-cublas-cu12
2025-08-30T09:53:31.0895250Z  Downloading nvidia-cudnn-cu12
2025-08-30T09:53:36.0188907Z  Downloading mkdocs-material
2025-08-30T09:53:36.0405030Z  Downloading torch
2025-08-30T09:53:36.0499462Z Prepared 206 packages in 31.66s
2025-08-30T09:53:37.6568912Z Installed 207 packages in 1.60s
2025-08-30T09:53:37.6570758Z  + absl-py==2.3.1
2025-08-30T09:53:37.6573332Z  + aiodns==3.5.0
2025-08-30T09:53:37.6573875Z  + aiofiles==24.1.0
2025-08-30T09:53:37.6574210Z  + aiohappyeyeballs==2.6.1
2025-08-30T09:53:37.6574573Z  + aiohttp==3.12.15
2025-08-30T09:53:37.6574860Z  + aiosignal==1.4.0
2025-08-30T09:53:37.6575145Z  + alembic==1.16.5
2025-08-30T09:53:37.6575447Z  + annotated-types==0.7.0
2025-08-30T09:53:37.6575770Z  + anyio==4.10.0
2025-08-30T09:53:37.6576064Z  + ast-comments==1.2.3
2025-08-30T09:53:37.6576374Z  + attrs==25.3.0
2025-08-30T09:53:37.6576652Z  + babel==2.17.0
2025-08-30T09:53:37.6576957Z  + backrefs==5.9
2025-08-30T09:53:37.6577254Z  + beautifulsoup4==4.13.5
2025-08-30T09:53:37.6577575Z  + bleach==6.2.0
2025-08-30T09:53:37.6577968Z  + bottleneck==1.5.0
2025-08-30T09:53:37.6582978Z  + build==1.3.0
2025-08-30T09:53:37.6583334Z  + cachetools==6.1.0
2025-08-30T09:53:37.6583832Z  + catboost==1.2.8
2025-08-30T09:53:37.6584388Z  + ccxt==4.5.2
2025-08-30T09:53:37.6584684Z  + certifi==2025.8.3
2025-08-30T09:53:37.6584976Z  + cffi==1.17.1
2025-08-30T09:53:37.6585255Z  + cfgv==3.4.0
2025-08-30T09:53:37.6585551Z  + charset-normalizer==3.4.3
2025-08-30T09:53:37.6585896Z  + click==8.2.1
2025-08-30T09:53:37.6586180Z  + cloudpickle==3.1.1
2025-08-30T09:53:37.6586483Z  + cmaes==0.12.0
2025-08-30T09:53:37.6586760Z  + colorama==0.4.6
2025-08-30T09:53:37.6587044Z  + colorlog==6.9.0
2025-08-30T09:53:37.6587323Z  + contourpy==1.3.3
2025-08-30T09:53:37.6587612Z  + coverage==7.10.6
2025-08-30T09:53:37.6587910Z  + cryptography==45.0.6
2025-08-30T09:53:37.6588214Z  + cycler==0.12.1
2025-08-30T09:53:37.6588515Z  + datasieve==0.1.9
2025-08-30T09:53:37.6588798Z  + defusedxml==0.7.1
2025-08-30T09:53:37.6589092Z  + distlib==0.4.0
2025-08-30T09:53:37.6589369Z  + execnet==2.1.1
2025-08-30T09:53:37.6589680Z  + farama-notifications==0.0.4
2025-08-30T09:53:37.6590030Z  + fastapi==0.116.1
2025-08-30T09:53:37.6590339Z  + fastjsonschema==2.21.2
2025-08-30T09:53:37.6590664Z  + filelock==3.19.1
2025-08-30T09:53:37.6590951Z  + fonttools==4.59.2
2025-08-30T09:53:37.6591246Z  + frozenlist==1.7.0
2025-08-30T09:53:37.6591533Z  + fsspec==2025.7.0
2025-08-30T09:53:37.6591831Z  + ft-pandas-ta==0.3.15
2025-08-30T09:53:37.6592150Z  + ghp-import==2.1.0
2025-08-30T09:53:37.6592464Z  + graphviz==0.21
2025-08-30T09:53:37.6592742Z  + greenlet==3.2.4
2025-08-30T09:53:37.6593022Z  + grpcio==1.74.0
2025-08-30T09:53:37.6593298Z  + gymnasium==0.29.1
2025-08-30T09:53:37.6593726Z  + h11==0.16.0
2025-08-30T09:53:37.6593992Z  + httpcore==1.0.9
2025-08-30T09:53:37.6594281Z  + httpx==0.28.1
2025-08-30T09:53:37.6594560Z  + humanize==4.12.3
2025-08-30T09:53:37.6594852Z  + identify==2.6.13
2025-08-30T09:53:37.6595139Z  + idna==3.10
2025-08-30T09:53:37.6595425Z  + importlib-metadata==8.7.0
2025-08-30T09:53:37.6595809Z  + importlib-resources==6.5.2
2025-08-30T09:53:37.6596161Z  + iniconfig==2.1.0
2025-08-30T09:53:37.6596442Z  + isort==6.0.1
2025-08-30T09:53:37.6596709Z  + janus==2.0.0
2025-08-30T09:53:37.6596986Z  + jinja2==3.1.6
2025-08-30T09:53:37.6597284Z  + joblib==1.5.2
2025-08-30T09:53:37.6597555Z  + jsonschema==4.25.1
2025-08-30T09:53:37.6598004Z  + jsonschema-specifications==2025.4.1
2025-08-30T09:53:37.6598452Z  + jupyter-client==8.6.3
2025-08-30T09:53:37.6598786Z  + jupyter-core==5.8.1
2025-08-30T09:53:37.6599119Z  + jupyterlab-pygments==0.3.0
2025-08-30T09:53:37.6599471Z  + kiwisolver==1.4.9
2025-08-30T09:53:37.6599767Z  + lightgbm==4.6.0
2025-08-30T09:53:37.6600036Z  + mako==1.3.10
2025-08-30T09:53:37.6600310Z  + markdown==3.8.2
2025-08-30T09:53:37.6600599Z  + markdown-it-py==4.0.0
2025-08-30T09:53:37.6600927Z  + markupsafe==3.0.2
2025-08-30T09:53:37.6601456Z  + matplotlib==3.10.6
2025-08-30T09:53:37.6601752Z  + mdurl==0.1.2
2025-08-30T09:53:37.6602044Z  + mdx-truly-sane-lists==1.3
2025-08-30T09:53:37.6602396Z  + mergedeep==1.3.4
2025-08-30T09:53:37.6602676Z  + mike==2.1.3
2025-08-30T09:53:37.6603036Z  + mistune==3.1.4
2025-08-30T09:53:37.6603316Z  + mkdocs==1.6.1
2025-08-30T09:53:37.6603769Z  + mkdocs-get-deps==0.2.0
2025-08-30T09:53:37.6604121Z  + mkdocs-material==9.6.18
2025-08-30T09:53:37.6604479Z  + mkdocs-material-extensions==1.3.1
2025-08-30T09:53:37.6604861Z  + mpmath==1.3.0
2025-08-30T09:53:37.6605136Z  + multidict==6.6.4
2025-08-30T09:53:37.6605423Z  + mypy==1.17.1
2025-08-30T09:53:37.6605718Z  + mypy-extensions==1.1.0
2025-08-30T09:53:37.6606049Z  + narwhals==2.2.0
2025-08-30T09:53:37.6606332Z  + nbclient==0.10.2
2025-08-30T09:53:37.6606628Z  + nbconvert==7.16.6
2025-08-30T09:53:37.6606926Z  + nbformat==5.10.4
2025-08-30T09:53:37.6607201Z  + networkx==3.5
2025-08-30T09:53:37.6607481Z  + nodeenv==1.9.1
2025-08-30T09:53:37.6607768Z  + numexpr==2.11.0
2025-08-30T09:53:37.6608058Z  + numpy==2.3.2
2025-08-30T09:53:37.6608361Z  + numpy-typing-compat==20250818.2.3
2025-08-30T09:53:37.6608771Z  + nvidia-cublas-cu12==12.8.4.1
2025-08-30T09:53:37.6609142Z  + nvidia-cuda-cupti-cu12==12.8.90
2025-08-30T09:53:37.6609542Z  + nvidia-cuda-nvrtc-cu12==12.8.93
2025-08-30T09:53:37.6610103Z  + nvidia-cuda-runtime-cu12==12.8.90
2025-08-30T09:53:37.6610512Z  + nvidia-cudnn-cu12==9.10.2.21
2025-08-30T09:53:37.6610880Z  + nvidia-cufft-cu12==11.3.3.83
2025-08-30T09:53:37.6611231Z  + nvidia-cufile-cu12==1.13.1.3
2025-08-30T09:53:37.6611598Z  + nvidia-curand-cu12==10.3.9.90
2025-08-30T09:53:37.6611979Z  + nvidia-cusolver-cu12==11.7.3.90
2025-08-30T09:53:37.6612364Z  + nvidia-cusparse-cu12==12.5.8.93
2025-08-30T09:53:37.6612750Z  + nvidia-cusparselt-cu12==0.7.1
2025-08-30T09:53:37.6613127Z  + nvidia-nccl-cu12==2.27.3
2025-08-30T09:53:37.6613630Z  + nvidia-nvjitlink-cu12==12.8.93
2025-08-30T09:53:37.6614018Z  + nvidia-nvtx-cu12==12.8.90
2025-08-30T09:53:37.6614390Z  + optuna==4.5.0
2025-08-30T09:53:37.6614671Z  + optype==0.13.4
2025-08-30T09:53:37.6614964Z  + orjson==3.11.2
2025-08-30T09:53:37.6615246Z  + packaging==25.0
2025-08-30T09:53:37.6615545Z  + paginate==0.5.7
2025-08-30T09:53:37.6615823Z  + pandas==2.3.2
2025-08-30T09:53:37.6616118Z  + pandocfilters==1.5.1
2025-08-30T09:53:37.6616439Z  + pathspec==0.12.1
2025-08-30T09:53:37.6616737Z  + pillow==11.3.0
2025-08-30T09:53:37.6617008Z  + pip==25.2
2025-08-30T09:53:37.6617290Z  + platformdirs==4.4.0
2025-08-30T09:53:37.6617604Z  + plotly==6.3.0
2025-08-30T09:53:37.6617876Z  + pluggy==1.6.0
2025-08-30T09:53:37.6618164Z  + pre-commit==4.3.0
2025-08-30T09:53:37.6618482Z  + prompt-toolkit==3.0.51
2025-08-30T09:53:37.6618810Z  + propcache==0.3.2
2025-08-30T09:53:37.6619092Z  + protobuf==6.32.0
2025-08-30T09:53:37.6619378Z  + psutil==7.0.0
2025-08-30T09:53:37.6619654Z  + pyarrow==21.0.0
2025-08-30T09:53:37.6619941Z  + pycares==4.10.0
2025-08-30T09:53:37.6620227Z  + pycoingecko==3.2.0
2025-08-30T09:53:37.6620533Z  + pycparser==2.22
2025-08-30T09:53:37.6620837Z  + pydantic==2.11.7
2025-08-30T09:53:37.6621130Z  + pydantic-core==2.33.2
2025-08-30T09:53:37.6621457Z  + pygments==2.19.2
2025-08-30T09:53:37.6621741Z  + pyjwt==2.10.1
2025-08-30T09:53:37.6622053Z  + pymdown-extensions==10.16.1
2025-08-30T09:53:37.6622415Z  + pyparsing==3.2.3
2025-08-30T09:53:37.6622734Z  + pyproject-hooks==1.2.0
2025-08-30T09:53:37.6623047Z  + pytest==8.4.1
2025-08-30T09:53:37.6623468Z  + pytest-asyncio==1.1.0
2025-08-30T09:53:37.6623764Z  + pytest-cov==6.2.1
2025-08-30T09:53:37.6624064Z  + pytest-mock==3.14.1
2025-08-30T09:53:37.6624424Z  + pytest-random-order==1.2.0
2025-08-30T09:53:37.6624766Z  + pytest-timeout==2.4.0
2025-08-30T09:53:37.6625093Z  + pytest-xdist==3.8.0
2025-08-30T09:53:37.6625417Z  + python-dateutil==2.9.0.post0
2025-08-30T09:53:37.6625794Z  + python-rapidjson==1.21
2025-08-30T09:53:37.6626143Z  + python-telegram-bot==22.3
2025-08-30T09:53:37.6626481Z  + pytz==2025.2
2025-08-30T09:53:37.6626740Z  + pyyaml==6.0.2
2025-08-30T09:53:37.6627001Z  + pyyaml-env-tag==1.1
2025-08-30T09:53:37.6627478Z  + pyzmq==27.0.2
2025-08-30T09:53:37.6627738Z  + questionary==2.1.0
2025-08-30T09:53:37.6628007Z  + referencing==0.36.2
2025-08-30T09:53:37.6628266Z  + requests==2.32.5
2025-08-30T09:53:37.6628509Z  + rich==14.1.0
2025-08-30T09:53:37.6628745Z  + rpds-py==0.27.1
2025-08-30T09:53:37.6628998Z  + ruff==0.12.10
2025-08-30T09:53:37.6629244Z  + sb3-contrib==2.7.0
2025-08-30T09:53:37.6629508Z  + schedule==1.2.2
2025-08-30T09:53:37.6629760Z  + scikit-learn==1.7.1
2025-08-30T09:53:37.6630031Z  + scipy==1.16.1
2025-08-30T09:53:37.6630275Z  + scipy-stubs==1.16.1.1
2025-08-30T09:53:37.6630565Z  + sdnotify==0.3.2
2025-08-30T09:53:37.6630816Z  + setuptools==80.9.0
2025-08-30T09:53:37.6631078Z  + six==1.17.0
2025-08-30T09:53:37.6631315Z  + sniffio==1.3.1
2025-08-30T09:53:37.6631585Z  + soupsieve==2.8
2025-08-30T09:53:37.6631874Z  + sqlalchemy==2.0.43
2025-08-30T09:53:37.6632182Z  + stable-baselines3==2.7.0
2025-08-30T09:53:37.6632513Z  + starlette==0.47.3
2025-08-30T09:53:37.6632804Z  + sympy==1.14.0
2025-08-30T09:53:37.6633073Z  + ta-lib==0.6.5
2025-08-30T09:53:37.6633550Z  + tabulate==0.9.0
2025-08-30T09:53:37.6633842Z  + technical==1.5.3
2025-08-30T09:53:37.6634130Z  + tensorboard==2.20.0
2025-08-30T09:53:37.6634461Z  + tensorboard-data-server==0.7.2
2025-08-30T09:53:37.6634841Z  + threadpoolctl==3.6.0
2025-08-30T09:53:37.6635319Z  + time-machine==2.19.0
2025-08-30T09:53:37.6635606Z  + tinycss2==1.4.0
2025-08-30T09:53:37.6635848Z  + torch==2.8.0
2025-08-30T09:53:37.6636088Z  + tornado==6.5.2
2025-08-30T09:53:37.6636328Z  + tqdm==4.67.1
2025-08-30T09:53:37.6636571Z  + traitlets==5.14.3
2025-08-30T09:53:37.6636825Z  + triton==3.4.0
2025-08-30T09:53:37.6637126Z  + types-cachetools==6.1.0.20250717
2025-08-30T09:53:37.6637454Z  + types-filelock==3.2.7
2025-08-30T09:53:37.6637770Z  + types-python-dateutil==2.9.0.20250822
2025-08-30T09:53:37.6638137Z  + types-requests==2.32.4.20250809
2025-08-30T09:53:37.6638456Z  + types-tabulate==0.9.0.20241207
2025-08-30T09:53:37.6638812Z  + typing-extensions==4.15.0
2025-08-30T09:53:37.6639162Z  + typing-inspection==0.4.1
2025-08-30T09:53:37.6639454Z  + tzdata==2025.2
2025-08-30T09:53:37.6639712Z  + urllib3==2.5.0
2025-08-30T09:53:37.6639984Z  + uvicorn==0.35.0
2025-08-30T09:53:37.6640267Z  + verspec==0.1.0
2025-08-30T09:53:37.6640548Z  + virtualenv==20.34.0
2025-08-30T09:53:37.6640904Z  + watchdog==6.0.0
2025-08-30T09:53:37.6641166Z  + wcwidth==0.2.13
2025-08-30T09:53:37.6641430Z  + webencodings==0.5.1
2025-08-30T09:53:37.6641706Z  + websockets==15.0.1
2025-08-30T09:53:37.6641983Z  + werkzeug==3.1.3
2025-08-30T09:53:37.6642259Z  + xgboost==3.0.4
2025-08-30T09:53:37.6642511Z  + yarl==1.20.1
2025-08-30T09:53:37.6642759Z  + zipp==3.23.0
2025-08-30T09:53:38.8626555Z Resolved 7 packages in 1.12s
2025-08-30T09:53:38.8630626Z    Building freqtrade-client @ file:///home/runner/work/freqtrade/freqtrade/ft_client
2025-08-30T09:53:39.0484079Z       Built freqtrade-client @ file:///home/runner/work/freqtrade/freqtrade/ft_client
2025-08-30T09:53:39.0492995Z Prepared 1 package in 186ms
2025-08-30T09:53:39.0504792Z Installed 1 package in 1ms
2025-08-30T09:53:39.0505416Z  + freqtrade-client==2025.8.dev0 (from file:///home/runner/work/freqtrade/freqtrade/ft_client)
2025-08-30T09:53:39.8078435Z Resolved 81 packages in 685ms
2025-08-30T09:53:39.8091578Z    Building freqtrade @ file:///home/runner/work/freqtrade/freqtrade
2025-08-30T09:53:40.0710516Z       Built freqtrade @ file:///home/runner/work/freqtrade/freqtrade
2025-08-30T09:53:40.0722035Z Prepared 1 package in 263ms
2025-08-30T09:53:40.0733632Z Installed 1 package in 1ms
2025-08-30T09:53:40.0734194Z  + freqtrade==2025.8.dev0 (from file:///home/runner/work/freqtrade/freqtrade)
2025-08-30T09:53:40.0960049Z ##[group]Run python build_helpers/freqtrade_client_version_align.py
2025-08-30T09:53:40.0960576Z [36;1mpython build_helpers/freqtrade_client_version_align.py[0m
2025-08-30T09:53:40.0989399Z shell: /usr/bin/bash -e {0}
2025-08-30T09:53:40.0989621Z env:
2025-08-30T09:53:40.0989862Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.0990478Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-30T09:53:40.0990884Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.0991231Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.0991582Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.0991936Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-30T09:53:40.0992232Z   UV_PYTHON: 3.11
2025-08-30T09:53:40.0992458Z   VIRTUAL_ENV: /home/runner/work/freqtrade/freqtrade/.venv
2025-08-30T09:53:40.0992802Z   UV_CACHE_DIR: /home/runner/work/_temp/setup-uv-cache
2025-08-30T09:53:40.0993058Z ##[endgroup]
2025-08-30T09:53:40.3287975Z Versions match: ft: 2025.8-dev-1488bf0, client: 2025.8-dev-1488bf0
2025-08-30T09:53:40.3469173Z ##[group]Run pytest --random-order
2025-08-30T09:53:40.3469491Z [36;1mpytest --random-order[0m
2025-08-30T09:53:40.3498369Z shell: /usr/bin/bash -e {0}
2025-08-30T09:53:40.3498604Z env:
2025-08-30T09:53:40.3498839Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.3499247Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-30T09:53:40.3499634Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.3499962Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.3500302Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:53:40.3500644Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-30T09:53:40.3500924Z   UV_PYTHON: 3.11
2025-08-30T09:53:40.3501144Z   VIRTUAL_ENV: /home/runner/work/freqtrade/freqtrade/.venv
2025-08-30T09:53:40.3501459Z   UV_CACHE_DIR: /home/runner/work/_temp/setup-uv-cache
2025-08-30T09:53:40.3501742Z ##[endgroup]
2025-08-30T09:54:01.9033701Z ============================= test session starts ==============================
2025-08-30T09:54:01.9034405Z platform linux -- Python 3.11.13, pytest-8.4.1, pluggy-1.6.0
2025-08-30T09:54:01.9034899Z Using --random-order-bucket=module
2025-08-30T09:54:01.9035234Z Using --random-order-seed=591328
2025-08-30T09:54:01.9035450Z 
2025-08-30T09:54:01.9035595Z rootdir: /home/runner/work/freqtrade/freqtrade
2025-08-30T09:54:01.9035970Z configfile: pyproject.toml
2025-08-30T09:54:01.9036585Z plugins: mock-3.14.1, xdist-3.8.0, anyio-4.10.0, timeout-2.4.0, time-machine-2.19.0, random-order-1.2.0, cov-6.2.1, asyncio-1.1.0
2025-08-30T09:54:01.9037389Z asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
2025-08-30T09:54:01.9037900Z collected 4580 items / 396 deselected / 4184 selected
2025-08-30T09:54:01.9038102Z 
2025-08-30T09:54:04.9964628Z tests/data/test_trade_converter_kraken.py .                              [  0%]
2025-08-30T09:54:07.0704082Z tests/test_plotting.py F.....F........F.FF...F                           [  0%]
2025-08-30T09:54:08.1467287Z tests/data/test_datahandler.py .............F....F...................... [  1%]
2025-08-30T09:54:08.7822528Z sF..F........                                                            [  1%]
2025-08-30T09:54:10.8595150Z tests/rpc/test_rpc_telegram.py ......................................... [  2%]
2025-08-30T09:54:14.8545784Z ....................................................................     [  4%]
2025-08-30T09:54:15.9085452Z tests/optimize/test_lookahead_analysis.py ...........F.....F.            [  4%]
2025-08-30T09:54:15.9719504Z tests/persistence/test_trade_fromjson.py ...                             [  4%]
2025-08-30T09:54:17.0561591Z tests/rpc/test_rpc_manager.py ...............                            [  5%]
2025-08-30T09:54:33.6616616Z tests/freqai/test_freqai_interface.py FFFF.FFF..FFFF..FFF.FFFFFFF.FFFFFF [  6%]
2025-08-30T09:54:37.9272746Z FFFF.FFFFF                                                               [  6%]
2025-08-30T09:54:38.1457675Z tests/exchange/test_kraken.py ................                           [  6%]
2025-08-30T09:54:38.5535170Z tests/test_arguments.py ...........................                      [  7%]
2025-08-30T09:54:38.5671282Z tests/persistence/test_db_context.py FFF                                 [  7%]
2025-08-30T09:54:38.8430964Z tests/data/test_dataprovider.py ......................                   [  8%]
2025-08-30T09:54:39.0097648Z tests/optimize/test_hyperoptloss.py .................                    [  8%]
2025-08-30T09:55:02.0943936Z tests/optimize/test_backtesting.py .FF.F.FFFFFFF....F...FFF.FFF.FFF.FFF. [  9%]
2025-08-30T09:55:31.6394945Z FFFF.FFF.FFF.....F.FFFFFF.FF..F.FFF.FFFF.FFF.FFFFFFF.F.FFF.F.FF..FF.FFFF [ 11%]
2025-08-30T09:55:37.8386936Z ..F.....                                                                 [ 11%]
2025-08-30T09:55:37.9819204Z tests/exchange/test_bybit.py .............                               [ 11%]
2025-08-30T09:55:37.9918917Z tests/exchange/test_bitpanda.py .                                        [ 11%]
2025-08-30T09:55:38.2069158Z tests/data/test_historic_precision.py .F.                                [ 11%]
2025-08-30T09:55:39.1514961Z tests/exchange/test_exchange_ws.py ....                                  [ 11%]
2025-08-30T09:55:39.2151178Z tests/strategy/test_strategy_safe_wrapper.py ............                [ 12%]
2025-08-30T09:55:39.3815912Z tests/test_misc.py ................................                      [ 12%]
2025-08-30T09:55:40.7075194Z tests/rpc/test_rpc_emc.py ............                                   [ 13%]
2025-08-30T09:55:41.8349512Z tests/strategy/test_interface.py ....F.................................. [ 14%]
2025-08-30T09:55:42.0915078Z .F...                                                                    [ 14%]
2025-08-30T09:55:43.7381359Z tests/plugins/test_pairlist.py ......................................... [ 15%]
2025-08-30T09:55:46.3544382Z ........................................................................ [ 16%]
2025-08-30T09:55:51.0005627Z ........................................................................ [ 18%]
2025-08-30T09:55:53.8633217Z ........................................................................ [ 20%]
2025-08-30T09:55:55.2657683Z .......................                                                  [ 20%]
2025-08-30T09:55:55.6194548Z tests/test_main.py ...........                                           [ 21%]
2025-08-30T09:55:55.6844097Z tests/test_strategy_updater.py ..........                                [ 21%]
2025-08-30T09:55:57.0304806Z tests/optimize/test_recursive_analysis.py .FF...F.                       [ 21%]
2025-08-30T09:55:58.4342420Z tests/data/test_entryexitanalysis.py FFF                                 [ 21%]
2025-08-30T09:55:58.5355424Z tests/plugins/test_pairlocks.py ......                                   [ 21%]
2025-08-30T09:56:06.8833915Z tests/commands/test_commands.py ..........................F............. [ 22%]
2025-08-30T09:56:08.5184420Z ..................                                                       [ 23%]
2025-08-30T09:56:08.5312456Z tests/test_timerange.py ...                                              [ 23%]
2025-08-30T09:56:09.5128104Z tests/optimize/test_optimize_reports.py ........F......                  [ 23%]
2025-08-30T09:56:09.7763250Z tests/plugins/test_percentchangepairlist.py ........                     [ 23%]
2025-08-30T09:56:10.2751255Z tests/freqai/test_freqai_backtesting.py ....F.                           [ 23%]
2025-08-30T09:56:11.3094524Z tests/exchange/test_exchange.py ........s.s............................. [ 24%]
2025-08-30T09:56:13.7586108Z ........................................................................ [ 26%]
2025-08-30T09:56:15.7478780Z ........s............................................................... [ 28%]
2025-08-30T09:56:17.3442356Z ...................................................................s.... [ 29%]
2025-08-30T09:56:18.3915465Z ........................................................................ [ 31%]
2025-08-30T09:56:23.3911868Z ....................................................................s... [ 33%]
2025-08-30T09:56:24.4103230Z ........................................................................ [ 35%]
2025-08-30T09:56:25.4244039Z ........................................................................ [ 36%]
2025-08-30T09:56:27.2597473Z ........................................................................ [ 38%]
2025-08-30T09:56:29.2743987Z ........................................................................ [ 40%]
2025-08-30T09:56:31.3783247Z ...s.................................................................... [ 42%]
2025-08-30T09:56:33.2760025Z ........................................................................ [ 43%]
2025-08-30T09:56:34.9119735Z ........................................................................ [ 45%]
2025-08-30T09:56:36.2431491Z ............................s...............s........................... [ 47%]
2025-08-30T09:56:41.1361675Z ...................................................s.................... [ 48%]
2025-08-30T09:56:42.1768215Z ........................................................................ [ 50%]
2025-08-30T09:56:44.2863625Z ............s........................................................... [ 52%]
2025-08-30T09:56:46.0324687Z ........................................................................ [ 54%]
2025-08-30T09:56:48.0081463Z ......................s......................s........................   [ 55%]
2025-08-30T09:56:48.4286598Z tests/optimize/test_hyperopt_integration.py .FFFF..FFF.                  [ 56%]
2025-08-30T09:56:48.4930375Z tests/leverage/test_candletype.py ............                           [ 56%]
2025-08-30T09:56:49.2278193Z tests/test_configuration.py ............................................ [ 57%]
2025-08-30T09:56:49.7565578Z ..............................                                           [ 58%]
2025-08-30T09:56:50.3396421Z 2025-08-30 09:56:50,339 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:50.3404610Z 2025-08-30 09:56:50,340 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:50.3409953Z 2025-08-30 09:56:50,340 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:50.3414779Z 2025-08-30 09:56:50,341 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:51.3661235Z tests/data/test_btanalysis.py ...F...F.F..............F....F...F.....    [ 59%]
2025-08-30T09:56:54.0532892Z tests/exchange/test_binance_public_data.py ...................           [ 59%]
2025-08-30T09:56:55.7465720Z 2025-08-30 09:56:55,745 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:55.7474002Z 2025-08-30 09:56:55,746 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:57.1890653Z 2025-08-30 09:56:57,188 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:57.1899963Z 2025-08-30 09:56:57,189 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:57.1908200Z 2025-08-30 09:56:57,190 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:56:57.2805543Z tests/freqai/test_freqai_datakitchen.py F.F.FF.F...F.                    [ 59%]
2025-08-30T09:56:57.2814065Z test_ipc_reading.py .                                                    [ 59%]
2025-08-30T09:56:57.3767497Z tests/rpc/test_fiat_convert.py ...............                           [ 60%]
2025-08-30T09:56:58.9696878Z tests/plugins/test_protections.py ...................................... [ 61%]
2025-08-30T09:56:59.1392443Z ......                                                                   [ 61%]
2025-08-30T09:56:59.5920574Z tests/optimize/test_performance_benchmark.py F...                        [ 61%]
2025-08-30T09:56:59.6596002Z tests/util/test_datetime_helpers.py ............                         [ 61%]
2025-08-30T09:57:00.4593996Z tests/strategy/test_strategy_helpers.py ...........................      [ 62%]
2025-08-30T09:57:02.3336142Z tests/data/test_history.py ..........F..........F....................    [ 63%]
2025-08-30T09:57:03.8842225Z tests/exchange/test_binance.py ......................................... [ 64%]
2025-08-30T09:57:04.1031492Z ........                                                                 [ 64%]
2025-08-30T09:57:07.0495560Z tests/rpc/test_rpc.py ..................................                 [ 65%]
2025-08-30T09:57:07.9894618Z 2025-08-30 09:57:07,988 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9919352Z 2025-08-30 09:57:07,991 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9929872Z 2025-08-30 09:57:07,992 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9939421Z 2025-08-30 09:57:07,993 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9950173Z 2025-08-30 09:57:07,994 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9960618Z 2025-08-30 09:57:07,995 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9969659Z 2025-08-30 09:57:07,996 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9979060Z 2025-08-30 09:57:07,997 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9988075Z 2025-08-30 09:57:07,998 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:07.9997376Z 2025-08-30 09:57:07,999 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0007073Z 2025-08-30 09:57:08,000 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0016061Z 2025-08-30 09:57:08,001 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0025164Z 2025-08-30 09:57:08,002 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0033929Z 2025-08-30 09:57:08,003 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0043666Z 2025-08-30 09:57:08,004 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0054876Z 2025-08-30 09:57:08,005 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0063759Z 2025-08-30 09:57:08,006 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0072055Z 2025-08-30 09:57:08,006 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0081639Z 2025-08-30 09:57:08,007 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0090813Z 2025-08-30 09:57:08,008 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0100653Z 2025-08-30 09:57:08,009 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0107896Z 2025-08-30 09:57:08,010 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:08.0118122Z 2025-08-30 09:57:08,011 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:09.4144153Z 2025-08-30 09:57:09,413 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:09.4166015Z 2025-08-30 09:57:09,416 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:09.5208301Z tests/freqai/test_freqai_datadrawer.py F.F...FF                          [ 65%]
2025-08-30T09:57:09.5274221Z tests/util/test_periodiccache.py .                                       [ 65%]
2025-08-30T09:57:09.7206456Z tests/optimize/test_shared_memory_manager.py .F...F..F...FF.F.           [ 65%]
2025-08-30T09:57:09.8094304Z tests/exchange/test_hyperliquid.py .....                                 [ 65%]
2025-08-30T09:57:10.0744451Z tests/commands/test_startup_time.py .                                    [ 65%]
2025-08-30T09:57:10.5051745Z tests/persistence/test_migrations.py ...............                     [ 66%]
2025-08-30T09:57:10.9509719Z tests/optimize/test_backtesting_adjust_position.py FFF                   [ 66%]
2025-08-30T09:57:11.2269924Z tests/optimize/test_hyperopt_simple_shared_memory.py ......              [ 66%]
2025-08-30T09:57:11.2834424Z tests/leverage/test_interest.py .........                                [ 66%]
2025-08-30T09:57:11.4076878Z tests/data/test_lazy_loading.py ...                                      [ 66%]
2025-08-30T09:57:11.4499577Z tests/leverage/test_update_liquidation_price.py ....                     [ 66%]
2025-08-30T09:57:11.5316314Z tests/optimize/test_simple_shared_memory.py ...                          [ 67%]
2025-08-30T09:57:14.6746811Z tests/test_wallets.py .........................................          [ 67%]
2025-08-30T09:57:14.8855966Z tests/exchange/test_exchange_utils.py .................................. [ 68%]
2025-08-30T09:57:16.2975226Z ........................................................................ [ 70%]
2025-08-30T09:57:16.4098192Z ..................                                                       [ 70%]
2025-08-30T09:57:16.6929304Z 2025-08-30 09:57:16,692 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:16.6969253Z tests/persistence/test_trade_custom_data.py ...F                         [ 71%]
2025-08-30T09:57:16.7038232Z tests/util/test_rendering_utils.py .                                     [ 71%]
2025-08-30T09:57:19.7459775Z tests/freqtradebot/test_stoploss_on_exchange.py ........................ [ 71%]
2025-08-30T09:57:21.2285259Z ......                                                                   [ 71%]
2025-08-30T09:57:21.2380805Z tests/test_indicators.py .                                               [ 71%]
2025-08-30T09:57:22.0904455Z tests/strategy/test_strategy_loading.py ...........................      [ 72%]
2025-08-30T09:57:22.1482699Z ft_client/test_client/test_rest_client.py .............................. [ 73%]
2025-08-30T09:57:22.2317025Z ...............................................                          [ 74%]
2025-08-30T09:57:22.6567409Z tests/rpc/test_rpc_webhook.py .......                                    [ 74%]
2025-08-30T09:57:22.7887730Z tests/data/test_download_data.py ....                                    [ 74%]
2025-08-30T09:57:22.8122821Z 2025-08-30 09:57:22,811 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:22.8712019Z tests/optimize/test_hyperopt_shared_memory_integration.py .F..FF         [ 74%]
2025-08-30T09:57:22.9726956Z tests/exchange/test_gate.py ......                                       [ 74%]
2025-08-30T09:57:23.1035696Z tests/optimize/test_indicator_cache.py ...............                   [ 75%]
2025-08-30T09:57:23.1709886Z tests/test_log_setup.py ......s.                                         [ 75%]
2025-08-30T09:57:23.2360364Z tests/optimize/test_vectorized_backtesting.py ........                   [ 75%]
2025-08-30T09:57:23.2426423Z tests/util/test_ccxt_precise.py .                                        [ 75%]
2025-08-30T09:57:23.2745238Z tests/util/test_formatters.py .....                                      [ 75%]
2025-08-30T09:57:24.1027739Z tests/data/test_converter_orderflow.py ..........                        [ 75%]
2025-08-30T09:57:24.1320013Z tests/util/test_funding_rate_migration.py .                              [ 76%]
2025-08-30T09:57:24.1585289Z tests/strategy/test_strategy_parameters.py ....                          [ 76%]
2025-08-30T09:57:24.1652909Z tests/test_talib.py .                                                    [ 76%]
2025-08-30T09:57:24.5467163Z tests/plugins/test_remotepairlist.py ...........                         [ 76%]
2025-08-30T09:57:24.6888743Z tests/exchange/test_htx.py .....                                         [ 76%]
2025-08-30T09:57:27.0707072Z tests/optimize/test_backtest_detail.py ................................. [ 77%]
2025-08-30T09:57:28.5292657Z ....F......................                                              [ 77%]
2025-08-30T09:57:29.6444482Z tests/freqtradebot/test_worker.py ...............                        [ 78%]
2025-08-30T09:57:29.6958866Z tests/util/test_binance_mig.py ...                                       [ 78%]
2025-08-30T09:57:33.6122345Z tests/data/test_converter.py ....F..................................F... [ 79%]
2025-08-30T09:57:33.8874636Z ...                                                                      [ 79%]
2025-08-30T09:57:33.9452302Z tests/test_directory_operations.py .......                               [ 79%]
2025-08-30T09:57:34.0044533Z tests/persistence/test_key_value_store.py ..                             [ 79%]
2025-08-30T09:57:34.5803834Z tests/exchange/test_bitget.py ...                                        [ 79%]
2025-08-30T09:57:34.6842809Z tests/strategy/test_default_strategy.py ...                              [ 79%]
2025-08-30T09:57:35.7411154Z tests/commands/test_build_config.py ........                             [ 80%]
2025-08-30T09:57:35.8319666Z tests/optimize/test_hyperopt_resource_optimizer.py ...........           [ 80%]
2025-08-30T09:57:35.8764586Z tests/optimize/test_backtesting_vectorized_integration.py ...            [ 80%]
2025-08-30T09:57:36.1402110Z tests/optimize/test_hyperopt_tools.py ..........................         [ 80%]
2025-08-30T09:57:36.7275006Z tests/persistence/test_persistence.py .................................. [ 81%]
2025-08-30T09:57:38.0764340Z ........................................................................ [ 83%]
2025-08-30T09:57:39.3242268Z ........................................................................ [ 85%]
2025-08-30T09:57:40.6258521Z ........................................................................ [ 86%]
2025-08-30T09:57:41.3031250Z ........................................                                 [ 87%]
2025-08-30T09:57:50.3683021Z 2025-08-30 09:57:50,367 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:50.3687645Z 2025-08-30 09:57:50,368 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:50.3696712Z 2025-08-30 09:57:50,369 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:50.3705210Z 2025-08-30 09:57:50,370 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:57:52.1342185Z tests/optimize/test_hyperopt.py ......F..F.....F...FF.....FF......       [ 88%]
2025-08-30T09:57:59.9945019Z tests/rpc/test_rpc_apiserver.py ..................F..F.................F [ 89%]
2025-08-30T09:58:01.0458771Z 2025-08-30 09:58:01,045 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0485571Z 2025-08-30 09:58:01,048 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0495250Z 2025-08-30 09:58:01,049 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0506673Z 2025-08-30 09:58:01,050 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0523965Z 2025-08-30 09:58:01,051 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0540238Z 2025-08-30 09:58:01,053 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0556291Z 2025-08-30 09:58:01,055 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0571672Z 2025-08-30 09:58:01,056 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0587352Z 2025-08-30 09:58:01,058 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0604327Z 2025-08-30 09:58:01,060 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0619823Z 2025-08-30 09:58:01,061 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0635223Z 2025-08-30 09:58:01,063 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0650591Z 2025-08-30 09:58:01,064 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0668127Z 2025-08-30 09:58:01,066 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:01.0687934Z 2025-08-30 09:58:01,068 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:06.9789775Z ..F...............F......................                                [ 90%]
2025-08-30T09:58:10.4635678Z tests/freqtradebot/test_freqtradebot.py ................................ [ 91%]
2025-08-30T09:58:17.8862189Z ........................................................................ [ 93%]
2025-08-30T09:58:25.5421740Z ........................................................................ [ 94%]
2025-08-30T09:58:33.6246710Z ........................................................................ [ 96%]
2025-08-30T09:58:40.9236899Z ........................................................................ [ 98%]
2025-08-30T09:58:41.1431338Z ..                                                                       [ 98%]
2025-08-30T09:58:41.1512022Z tests/util/test_measure_time.py .                                        [ 98%]
2025-08-30T09:58:45.8470406Z tests/freqtradebot/test_integration.py .................                 [ 98%]
2025-08-30T09:58:46.2391987Z tests/exchange/test_kucoin.py ................                           [ 99%]
2025-08-30T09:58:46.2701734Z tests/util/test_wallet_util.py ....                                      [ 99%]
2025-08-30T09:58:46.7059991Z tests/exchange/test_okx.py .....................                         [ 99%]
2025-08-30T09:58:47.0139139Z tests/optimize/test_numpy_ops.py ..........                              [100%]
2025-08-30T09:58:47.0139869Z 
2025-08-30T09:58:47.0140101Z =================================== FAILURES ===================================
2025-08-30T09:58:47.0140716Z ________________________________ test_add_areas ________________________________
2025-08-30T09:58:47.0141245Z 
2025-08-30T09:58:47.0142698Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.0145124Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0146051Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e979ec10>
2025-08-30T09:58:47.0146439Z 
2025-08-30T09:58:47.0146623Z     def test_add_areas(default_conf, testdatadir, caplog):
2025-08-30T09:58:47.0147047Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.0147428Z         timerange = TimeRange(None, "line", 0, -1000)
2025-08-30T09:58:47.0147803Z     
2025-08-30T09:58:47.0148051Z         data = history.load_pair_history(
2025-08-30T09:58:47.0148548Z             pair=pair, timeframe="1m", datadir=testdatadir, timerange=timerange
2025-08-30T09:58:47.0149011Z         )
2025-08-30T09:58:47.0149242Z         indicators = {
2025-08-30T09:58:47.0149507Z             "macd": {
2025-08-30T09:58:47.0149764Z                 "color": "red",
2025-08-30T09:58:47.0150072Z                 "fill_color": "black",
2025-08-30T09:58:47.0150754Z                 "fill_to": "macdhist",
2025-08-30T09:58:47.0151094Z                 "fill_label": "MACD Fill",
2025-08-30T09:58:47.0151415Z             }
2025-08-30T09:58:47.0151637Z         }
2025-08-30T09:58:47.0151851Z     
2025-08-30T09:58:47.0152177Z         ind_no_label = {"macd": {"fill_color": "red", "fill_to": "macdhist"}}
2025-08-30T09:58:47.0152612Z     
2025-08-30T09:58:47.0152864Z         ind_plain = {"macd": {"fill_to": "macdhist"}}
2025-08-30T09:58:47.0153332Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.0153951Z     
2025-08-30T09:58:47.0154165Z         # Generate entry/exit signals and indicators
2025-08-30T09:58:47.0154527Z         data = strategy.analyze_ticker(data, {"pair": pair})
2025-08-30T09:58:47.0155012Z         fig = generate_empty_figure()
2025-08-30T09:58:47.0155233Z     
2025-08-30T09:58:47.0155418Z         # indicator mentioned in fill_to does not exist
2025-08-30T09:58:47.0155793Z         fig1 = add_areas(fig, 1, data, {"ema10": {"fill_to": "no_fill_indicator"}})
2025-08-30T09:58:47.0156121Z         assert fig == fig1
2025-08-30T09:58:47.0156406Z         assert log_has_re(r'fill_to: "no_fill_indicator" ignored\..*', caplog)
2025-08-30T09:58:47.0156704Z     
2025-08-30T09:58:47.0156854Z         # indicator does not exist
2025-08-30T09:58:47.0157146Z         fig2 = add_areas(fig, 1, data, {"no_indicator": {"fill_to": "ema10"}})
2025-08-30T09:58:47.0157453Z         assert fig == fig2
2025-08-30T09:58:47.0157724Z         assert log_has_re(r'Indicator "no_indicator" ignored\..*', caplog)
2025-08-30T09:58:47.0158011Z     
2025-08-30T09:58:47.0158186Z         # everything given in plot config, row 3
2025-08-30T09:58:47.0158454Z >       fig3 = add_areas(fig, 3, data, indicators)
2025-08-30T09:58:47.0158710Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0158866Z 
2025-08-30T09:58:47.0158955Z tests/test_plotting.py:144: 
2025-08-30T09:58:47.0159192Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0159488Z freqtrade/plot/plotting.py:392: in add_areas
2025-08-30T09:58:47.0159724Z     fig = plot_area(
2025-08-30T09:58:47.0159931Z freqtrade/plot/plotting.py:363: in plot_area
2025-08-30T09:58:47.0160292Z     trace_a = go.Scatter(x=data.date, y=data[indicator_a], showlegend=False, line=line)
2025-08-30T09:58:47.0160642Z                            ^^^^^^^^^
2025-08-30T09:58:47.0160881Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0161068Z 
2025-08-30T09:58:47.0161181Z self =                           index      open  ...  exit_long  exit_short
2025-08-30T09:58:47.0161505Z 0     2017-11-04 23:02:00+00:00   0.00162  ...  ...       1.0         NaN
2025-08-30T09:58:47.0161835Z 14397 2017-11-14 22:59:00+00:00    0.0027  ...        NaN         NaN
2025-08-30T09:58:47.0162051Z 
2025-08-30T09:58:47.0162120Z [14398 rows x 25 columns]
2025-08-30T09:58:47.0162306Z name = 'date'
2025-08-30T09:58:47.0162401Z 
2025-08-30T09:58:47.0162466Z     @final
2025-08-30T09:58:47.0162634Z     def __getattr__(self, name: str):
2025-08-30T09:58:47.0162839Z         """
2025-08-30T09:58:47.0163056Z         After regular attribute access, try looking up the name
2025-08-30T09:58:47.0163644Z         This allows simpler access to columns for interactive use.
2025-08-30T09:58:47.0164000Z         """
2025-08-30T09:58:47.0164231Z         # Note: obj.x will always call obj.__getattribute__('x') prior to
2025-08-30T09:58:47.0164542Z         # calling obj.__getattr__('x').
2025-08-30T09:58:47.0164753Z         if (
2025-08-30T09:58:47.0164941Z             name not in self._internal_names_set
2025-08-30T09:58:47.0165193Z             and name not in self._metadata
2025-08-30T09:58:47.0165420Z             and name not in self._accessors
2025-08-30T09:58:47.0165718Z             and self._info_axis._can_hold_identifiers_and_holds_name(name)
2025-08-30T09:58:47.0165995Z         ):
2025-08-30T09:58:47.0166151Z             return self[name]
2025-08-30T09:58:47.0166521Z >       return object.__getattribute__(self, name)
2025-08-30T09:58:47.0166793Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0167306Z E       AttributeError: 'DataFrame' object has no attribute 'date'
2025-08-30T09:58:47.0167623Z 
2025-08-30T09:58:47.0167974Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:6318: AttributeError
2025-08-30T09:58:47.0168694Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0169243Z 2025-08-30 09:54:05 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.0170056Z 2025-08-30 09:54:05 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0171206Z 2025-08-30 09:54:05 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.0171811Z 2025-08-30 09:54:05 INFO Found no parameter file.
2025-08-30T09:58:47.0172272Z 2025-08-30 09:54:05 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0172806Z 2025-08-30 09:54:05 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0173255Z 2025-08-30 09:54:05 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0173942Z 2025-08-30 09:54:05 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0174412Z 2025-08-30 09:54:05 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0174953Z 2025-08-30 09:54:05 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0175487Z 2025-08-30 09:54:05 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0175954Z 2025-08-30 09:54:05 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0176342Z 2025-08-30 09:54:05 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0176627Z 2025-08-30 09:54:05 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0176931Z 2025-08-30 09:54:05 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0177270Z 2025-08-30 09:54:05 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0177660Z 2025-08-30 09:54:05 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0178031Z 2025-08-30 09:54:05 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0178393Z 2025-08-30 09:54:05 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0178936Z 2025-08-30 09:54:05 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.0179510Z 2025-08-30 09:54:05 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.0179910Z 2025-08-30 09:54:05 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0180215Z 2025-08-30 09:54:05 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0180532Z 2025-08-30 09:54:05 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.0180912Z 2025-08-30 09:54:05 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0181284Z 2025-08-30 09:54:05 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0181608Z 2025-08-30 09:54:05 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0181953Z 2025-08-30 09:54:05 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0182303Z 2025-08-30 09:54:05 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0182643Z 2025-08-30 09:54:05 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0183019Z 2025-08-30 09:54:05 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0183613Z 2025-08-30 09:54:05 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0184231Z 2025-08-30 09:54:05 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0184600Z 2025-08-30 09:54:05 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0185040Z 2025-08-30 09:54:05 INFO fill_to: "no_fill_indicator" ignored. Reason: This indicator is not in your strategy.
2025-08-30T09:58:47.0185609Z 2025-08-30 09:54:05 INFO Indicator "no_indicator" ignored. Reason: This indicator is not found in your strategy.
2025-08-30T09:58:47.0186071Z _______________________________ test_add_profit ________________________________
2025-08-30T09:58:47.0186282Z 
2025-08-30T09:58:47.0186485Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0186780Z 
2025-08-30T09:58:47.0187043Z     def test_add_profit(testdatadir):
2025-08-30T09:58:47.0187370Z         filename = testdatadir / "backtest_results/backtest-result.json"
2025-08-30T09:58:47.0187705Z         bt_data = load_backtest_data(filename)
2025-08-30T09:58:47.0188012Z         timerange = TimeRange.parse_timerange("20180110-20180112")
2025-08-30T09:58:47.0188282Z     
2025-08-30T09:58:47.0188444Z         df = history.load_pair_history(
2025-08-30T09:58:47.0188764Z             pair="TRX/BTC", timeframe="5m", datadir=testdatadir, timerange=timerange
2025-08-30T09:58:47.0189080Z         )
2025-08-30T09:58:47.0189238Z         fig = generate_empty_figure()
2025-08-30T09:58:47.0189440Z     
2025-08-30T09:58:47.0189593Z         cum_profits = create_cum_profit(
2025-08-30T09:58:47.0189940Z >           df.set_index("date"), bt_data[bt_data["pair"] == "TRX/BTC"], "cum_profits", timeframe="5m"
2025-08-30T09:58:47.0190281Z             ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0190464Z         )
2025-08-30T09:58:47.0190548Z 
2025-08-30T09:58:47.0190638Z tests/test_plotting.py:332: 
2025-08-30T09:58:47.0190872Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0191065Z 
2025-08-30T09:58:47.0191178Z self =                         index      open  ...     close         volume
2025-08-30T09:58:47.0191488Z 0   2018-01-10 04:55:00+00:00  0.000108  ...  0....   0.00011   147770.52813
2025-08-30T09:58:47.0191808Z 517 2018-01-12 00:00:00+00:00   0.00011  ...  0.000109  357208.363199
2025-08-30T09:58:47.0192005Z 
2025-08-30T09:58:47.0192076Z [518 rows x 6 columns]
2025-08-30T09:58:47.0192244Z keys = ['date']
2025-08-30T09:58:47.0192342Z 
2025-08-30T09:58:47.0192412Z     def set_index(
2025-08-30T09:58:47.0192567Z         self,
2025-08-30T09:58:47.0192713Z         keys,
2025-08-30T09:58:47.0192851Z         *,
2025-08-30T09:58:47.0193006Z         drop: bool = True,
2025-08-30T09:58:47.0193196Z         append: bool = False,
2025-08-30T09:58:47.0193529Z         inplace: bool = False,
2025-08-30T09:58:47.0193744Z         verify_integrity: bool = False,
2025-08-30T09:58:47.0193967Z     ) -> DataFrame | None:
2025-08-30T09:58:47.0194143Z         """
2025-08-30T09:58:47.0194327Z         Set the DataFrame index using existing columns.
2025-08-30T09:58:47.0194573Z     
2025-08-30T09:58:47.0194825Z         Set the DataFrame index (row labels) using one or more existing
2025-08-30T09:58:47.0195197Z         columns or arrays (of the correct length). The index can replace the
2025-08-30T09:58:47.0195509Z         existing index or expand on it.
2025-08-30T09:58:47.0195716Z     
2025-08-30T09:58:47.0195850Z         Parameters
2025-08-30T09:58:47.0196011Z         ----------
2025-08-30T09:58:47.0196214Z         keys : label or array-like or list of labels/arrays
2025-08-30T09:58:47.0196565Z             This parameter can be either a single column key, a single array of
2025-08-30T09:58:47.0196947Z             the same length as the calling DataFrame, or a list containing an
2025-08-30T09:58:47.0197326Z             arbitrary combination of column keys and arrays. Here, "array"
2025-08-30T09:58:47.0197711Z             encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
2025-08-30T09:58:47.0198061Z             instances of :class:`~collections.abc.Iterator`.
2025-08-30T09:58:47.0198579Z         drop : bool, default True
2025-08-30T09:58:47.0198816Z             Delete columns to be used as the new index.
2025-08-30T09:58:47.0199071Z         append : bool, default False
2025-08-30T09:58:47.0199319Z             Whether to append columns to existing index.
2025-08-30T09:58:47.0199575Z         inplace : bool, default False
2025-08-30T09:58:47.0199862Z             Whether to modify the DataFrame rather than creating a new one.
2025-08-30T09:58:47.0200180Z         verify_integrity : bool, default False
2025-08-30T09:58:47.0200492Z             Check the new index for duplicates. Otherwise defer the check until
2025-08-30T09:58:47.0200879Z             necessary. Setting to False will improve the performance of this
2025-08-30T09:58:47.0201297Z             method.
2025-08-30T09:58:47.0201453Z     
2025-08-30T09:58:47.0201588Z         Returns
2025-08-30T09:58:47.0201738Z         -------
2025-08-30T09:58:47.0201903Z         DataFrame or None
2025-08-30T09:58:47.0202126Z             Changed row labels or None if ``inplace=True``.
2025-08-30T09:58:47.0202374Z     
2025-08-30T09:58:47.0202513Z         See Also
2025-08-30T09:58:47.0202663Z         --------
2025-08-30T09:58:47.0202867Z         DataFrame.reset_index : Opposite of set_index.
2025-08-30T09:58:47.0203191Z         DataFrame.reindex : Change to new indices or expand indices.
2025-08-30T09:58:47.0203767Z         DataFrame.reindex_like : Change to same indices as other DataFrame.
2025-08-30T09:58:47.0204064Z     
2025-08-30T09:58:47.0204202Z         Examples
2025-08-30T09:58:47.0204353Z         --------
2025-08-30T09:58:47.0204545Z         >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
2025-08-30T09:58:47.0204805Z         ...                    'year': [2012, 2014, 2013, 2014],
2025-08-30T09:58:47.0205066Z         ...                    'sale': [55, 40, 84, 31]})
2025-08-30T09:58:47.0205291Z         >>> df
2025-08-30T09:58:47.0205447Z            month  year  sale
2025-08-30T09:58:47.0205645Z         0      1  2012    55
2025-08-30T09:58:47.0205818Z         1      4  2014    40
2025-08-30T09:58:47.0205993Z         2      7  2013    84
2025-08-30T09:58:47.0206163Z         3     10  2014    31
2025-08-30T09:58:47.0206334Z     
2025-08-30T09:58:47.0206499Z         Set the index to become the 'month' column:
2025-08-30T09:58:47.0206730Z     
2025-08-30T09:58:47.0206879Z         >>> df.set_index('month')
2025-08-30T09:58:47.0207078Z                year  sale
2025-08-30T09:58:47.0207249Z         month
2025-08-30T09:58:47.0207395Z         1      2012    55
2025-08-30T09:58:47.0207562Z         4      2014    40
2025-08-30T09:58:47.0207725Z         7      2013    84
2025-08-30T09:58:47.0207890Z         10     2014    31
2025-08-30T09:58:47.0208046Z     
2025-08-30T09:58:47.0208246Z         Create a MultiIndex using columns 'year' and 'month':
2025-08-30T09:58:47.0208495Z     
2025-08-30T09:58:47.0208655Z         >>> df.set_index(['year', 'month'])
2025-08-30T09:58:47.0208877Z                     sale
2025-08-30T09:58:47.0209052Z         year  month
2025-08-30T09:58:47.0209212Z         2012  1     55
2025-08-30T09:58:47.0209369Z         2014  4     40
2025-08-30T09:58:47.0209528Z         2013  7     84
2025-08-30T09:58:47.0209680Z         2014  10    31
2025-08-30T09:58:47.0209835Z     
2025-08-30T09:58:47.0210012Z         Create a MultiIndex using an Index and a column:
2025-08-30T09:58:47.0210252Z     
2025-08-30T09:58:47.0210424Z         >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
2025-08-30T09:58:47.0210668Z                  month  sale
2025-08-30T09:58:47.0210847Z            year
2025-08-30T09:58:47.0210998Z         1  2012  1      55
2025-08-30T09:58:47.0211173Z         2  2014  4      40
2025-08-30T09:58:47.0211341Z         3  2013  7      84
2025-08-30T09:58:47.0211510Z         4  2014  10     31
2025-08-30T09:58:47.0211673Z     
2025-08-30T09:58:47.0211836Z         Create a MultiIndex using two Series:
2025-08-30T09:58:47.0212051Z     
2025-08-30T09:58:47.0212202Z         >>> s = pd.Series([1, 2, 3, 4])
2025-08-30T09:58:47.0212550Z         >>> df.set_index([s, s**2])
2025-08-30T09:58:47.0212765Z               month  year  sale
2025-08-30T09:58:47.0213612Z         1 1       1  2012    55
2025-08-30T09:58:47.0214140Z         2 4       4  2014    40
2025-08-30T09:58:47.0214573Z         3 9       7  2013    84
2025-08-30T09:58:47.0215050Z         4 16     10  2014    31
2025-08-30T09:58:47.0215475Z         """
2025-08-30T09:58:47.0216085Z         inplace = validate_bool_kwarg(inplace, "inplace")
2025-08-30T09:58:47.0216772Z         self._check_inplace_and_allows_duplicate_labels(inplace)
2025-08-30T09:58:47.0217597Z         if not isinstance(keys, list):
2025-08-30T09:58:47.0266460Z             keys = [keys]
2025-08-30T09:58:47.0266796Z     
2025-08-30T09:58:47.0267042Z         err_msg = (
2025-08-30T09:58:47.0267745Z             'The parameter "keys" may be a column key, one-dimensional '
2025-08-30T09:58:47.0268371Z             "array, or a list containing only valid column keys and "
2025-08-30T09:58:47.0268871Z             "one-dimensional arrays."
2025-08-30T09:58:47.0269229Z         )
2025-08-30T09:58:47.0269463Z     
2025-08-30T09:58:47.0269727Z         missing: list[Hashable] = []
2025-08-30T09:58:47.0270092Z         for col in keys:
2025-08-30T09:58:47.0270562Z             if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):
2025-08-30T09:58:47.0271172Z                 # arrays are fine as long as they are one-dimensional
2025-08-30T09:58:47.0271671Z                 # iterators get converted to list below
2025-08-30T09:58:47.0272103Z                 if getattr(col, "ndim", 1) != 1:
2025-08-30T09:58:47.0272499Z                     raise ValueError(err_msg)
2025-08-30T09:58:47.0272851Z             else:
2025-08-30T09:58:47.0273201Z                 # everything else gets tried as a key; see GH 24969
2025-08-30T09:58:47.0273948Z                 try:
2025-08-30T09:58:47.0274248Z                     found = col in self.columns
2025-08-30T09:58:47.0274660Z                 except TypeError as err:
2025-08-30T09:58:47.0275096Z                     raise TypeError(
2025-08-30T09:58:47.0275536Z                         f"{err_msg}. Received column of type {type(col)}"
2025-08-30T09:58:47.0276007Z                     ) from err
2025-08-30T09:58:47.0276341Z                 else:
2025-08-30T09:58:47.0276650Z                     if not found:
2025-08-30T09:58:47.0277029Z                         missing.append(col)
2025-08-30T09:58:47.0277410Z     
2025-08-30T09:58:47.0277655Z         if missing:
2025-08-30T09:58:47.0278058Z >           raise KeyError(f"None of {missing} are in the columns")
2025-08-30T09:58:47.0278617Z E           KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.0278963Z 
2025-08-30T09:58:47.0279278Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6129: KeyError
2025-08-30T09:58:47.0279994Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0280924Z 2025-08-30 09:54:05 INFO Loading backtest result from /home/runner/work/freqtrade/freqtrade/tests/testdata/backtest_results/backtest-result.json
2025-08-30T09:58:47.0281605Z 2025-08-30 09:54:05 WARNING TRX/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0281989Z _____________________________ test_add_indicators ______________________________
2025-08-30T09:58:47.0282214Z 
2025-08-30T09:58:47.0282369Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume', 'adx', 'macd',
2025-08-30T09:58:47.0282712Z        'macdsignal', 'macdhist', 'minus_di', ...,
2025-08-30T09:58:47.0283021Z        'enter_tag', 'enter_long', 'enter_short', 'exit_tag', 'exit_long',
2025-08-30T09:58:47.0283314Z        'exit_short'],
2025-08-30T09:58:47.0283742Z       dtype='object')
2025-08-30T09:58:47.0283911Z key = 'date'
2025-08-30T09:58:47.0284004Z 
2025-08-30T09:58:47.0284081Z     def get_loc(self, key):
2025-08-30T09:58:47.0284267Z         """
2025-08-30T09:58:47.0284500Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0284984Z     
2025-08-30T09:58:47.0285130Z         Parameters
2025-08-30T09:58:47.0285297Z         ----------
2025-08-30T09:58:47.0285459Z         key : label
2025-08-30T09:58:47.0285613Z     
2025-08-30T09:58:47.0285756Z         Returns
2025-08-30T09:58:47.0285906Z         -------
2025-08-30T09:58:47.0286123Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0286382Z     
2025-08-30T09:58:47.0286523Z         Examples
2025-08-30T09:58:47.0286675Z         --------
2025-08-30T09:58:47.0286859Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0287109Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0287312Z         1
2025-08-30T09:58:47.0287452Z     
2025-08-30T09:58:47.0287619Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0287993Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0288218Z         slice(1, 3, None)
2025-08-30T09:58:47.0288391Z     
2025-08-30T09:58:47.0288565Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0288835Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0289072Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0289288Z         """
2025-08-30T09:58:47.0289469Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0289692Z         try:
2025-08-30T09:58:47.0289872Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0290109Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0290265Z 
2025-08-30T09:58:47.0290438Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0290790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0291151Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0291457Z     ???
2025-08-30T09:58:47.0291813Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0292328Z     ???
2025-08-30T09:58:47.0292694Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0293107Z     ???
2025-08-30T09:58:47.0293292Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0293728Z 
2025-08-30T09:58:47.0293790Z >   ???
2025-08-30T09:58:47.0293936Z E   KeyError: 'date'
2025-08-30T09:58:47.0294052Z 
2025-08-30T09:58:47.0294176Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0294377Z 
2025-08-30T09:58:47.0294546Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0294785Z 
2025-08-30T09:58:47.0295376Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.0296227Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0296682Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e5997090>
2025-08-30T09:58:47.0296926Z 
2025-08-30T09:58:47.0297061Z     def test_add_indicators(default_conf, testdatadir, caplog):
2025-08-30T09:58:47.0297352Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.0297558Z         timerange = TimeRange()
2025-08-30T09:58:47.0297745Z     
2025-08-30T09:58:47.0297908Z         data = history.load_pair_history(
2025-08-30T09:58:47.0298225Z             pair=pair, timeframe="1m", datadir=testdatadir, timerange=timerange
2025-08-30T09:58:47.0298523Z         )
2025-08-30T09:58:47.0298676Z         indicators1 = {"ema10": {}}
2025-08-30T09:58:47.0298910Z         indicators2 = {"macd": {"color": "red"}}
2025-08-30T09:58:47.0299127Z     
2025-08-30T09:58:47.0299339Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.0299603Z     
2025-08-30T09:58:47.0299775Z         # Generate entry/exit signals and indicators
2025-08-30T09:58:47.0300067Z         data = strategy.analyze_ticker(data, {"pair": pair})
2025-08-30T09:58:47.0300513Z         fig = generate_empty_figure()
2025-08-30T09:58:47.0300714Z     
2025-08-30T09:58:47.0300851Z         # Row 1
2025-08-30T09:58:47.0301142Z >       fig1 = add_indicators(fig=deepcopy(fig), row=1, indicators=indicators1, data=data)
2025-08-30T09:58:47.0301500Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0301678Z 
2025-08-30T09:58:47.0301759Z tests/test_plotting.py:89: 
2025-08-30T09:58:47.0301986Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0302284Z freqtrade/plot/plotting.py:122: in add_indicators
2025-08-30T09:58:47.0302618Z     kwargs = {"x": data["date"], "y": data[indicator].values, "name": indicator}
2025-08-30T09:58:47.0303016Z                    ^^^^^^^^^^^^
2025-08-30T09:58:47.0303336Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0303945Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0304179Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0304411Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0304694Z 
2025-08-30T09:58:47.0304850Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume', 'adx', 'macd',
2025-08-30T09:58:47.0305193Z        'macdsignal', 'macdhist', 'minus_di', ...,
2025-08-30T09:58:47.0305496Z        'enter_tag', 'enter_long', 'enter_short', 'exit_tag', 'exit_long',
2025-08-30T09:58:47.0305784Z        'exit_short'],
2025-08-30T09:58:47.0305949Z       dtype='object')
2025-08-30T09:58:47.0306113Z key = 'date'
2025-08-30T09:58:47.0306204Z 
2025-08-30T09:58:47.0306276Z     def get_loc(self, key):
2025-08-30T09:58:47.0306458Z         """
2025-08-30T09:58:47.0306695Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0306983Z     
2025-08-30T09:58:47.0307125Z         Parameters
2025-08-30T09:58:47.0307286Z         ----------
2025-08-30T09:58:47.0307448Z         key : label
2025-08-30T09:58:47.0307595Z     
2025-08-30T09:58:47.0307729Z         Returns
2025-08-30T09:58:47.0307880Z         -------
2025-08-30T09:58:47.0308092Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0308346Z     
2025-08-30T09:58:47.0308482Z         Examples
2025-08-30T09:58:47.0308632Z         --------
2025-08-30T09:58:47.0308812Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0309052Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0309258Z         1
2025-08-30T09:58:47.0309389Z     
2025-08-30T09:58:47.0309558Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0309806Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0310021Z         slice(1, 3, None)
2025-08-30T09:58:47.0310195Z     
2025-08-30T09:58:47.0310367Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0310629Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0310872Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0311086Z         """
2025-08-30T09:58:47.0311258Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0311485Z         try:
2025-08-30T09:58:47.0311662Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0311898Z         except KeyError as err:
2025-08-30T09:58:47.0312117Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0312366Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0312663Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0312918Z             ):
2025-08-30T09:58:47.0313094Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0313326Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0313740Z E           KeyError: 'date'
2025-08-30T09:58:47.0313869Z 
2025-08-30T09:58:47.0314061Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0314606Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0315057Z 2025-08-30 09:54:05 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.0315860Z 2025-08-30 09:54:05 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0316848Z 2025-08-30 09:54:05 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.0317895Z 2025-08-30 09:54:05 INFO Found no parameter file.
2025-08-30T09:58:47.0318409Z 2025-08-30 09:54:05 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0319088Z 2025-08-30 09:54:05 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0319532Z 2025-08-30 09:54:05 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0320000Z 2025-08-30 09:54:05 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0320468Z 2025-08-30 09:54:05 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0321000Z 2025-08-30 09:54:05 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0321537Z 2025-08-30 09:54:05 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0322008Z 2025-08-30 09:54:05 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0322396Z 2025-08-30 09:54:05 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0322692Z 2025-08-30 09:54:05 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0322986Z 2025-08-30 09:54:05 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0323333Z 2025-08-30 09:54:05 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0323936Z 2025-08-30 09:54:05 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0324309Z 2025-08-30 09:54:05 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0324654Z 2025-08-30 09:54:05 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0325177Z 2025-08-30 09:54:05 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.0325783Z 2025-08-30 09:54:05 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.0326171Z 2025-08-30 09:54:05 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0326477Z 2025-08-30 09:54:05 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0326793Z 2025-08-30 09:54:05 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.0327170Z 2025-08-30 09:54:05 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0327548Z 2025-08-30 09:54:05 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0327863Z 2025-08-30 09:54:05 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0328207Z 2025-08-30 09:54:05 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0328560Z 2025-08-30 09:54:05 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0328897Z 2025-08-30 09:54:05 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0329271Z 2025-08-30 09:54:05 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0329647Z 2025-08-30 09:54:05 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0330016Z 2025-08-30 09:54:05 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0330349Z 2025-08-30 09:54:05 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0330709Z _____________ test_generate_candlestick_graph_no_signals_no_trades _____________
2025-08-30T09:58:47.0330963Z 
2025-08-30T09:58:47.0331550Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.0332519Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e5969890>
2025-08-30T09:58:47.0332963Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0333599Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e977e9d0>
2025-08-30T09:58:47.0333862Z 
2025-08-30T09:58:47.0334110Z     def test_generate_candlestick_graph_no_signals_no_trades(default_conf, mocker, testdatadir, caplog):
2025-08-30T09:58:47.0334524Z         row_mock = mocker.patch(
2025-08-30T09:58:47.0335003Z             "freqtrade.plot.plotting.add_indicators", MagicMock(side_effect=fig_generating_mock)
2025-08-30T09:58:47.0335369Z         )
2025-08-30T09:58:47.0335530Z         trades_mock = mocker.patch(
2025-08-30T09:58:47.0335882Z             "freqtrade.plot.plotting.plot_trades", MagicMock(side_effect=fig_generating_mock)
2025-08-30T09:58:47.0336232Z         )
2025-08-30T09:58:47.0336365Z     
2025-08-30T09:58:47.0336516Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.0336745Z         timerange = TimeRange(None, "line", 0, -1000)
2025-08-30T09:58:47.0337011Z         data = history.load_pair_history(
2025-08-30T09:58:47.0337319Z             pair=pair, timeframe="1m", datadir=testdatadir, timerange=timerange
2025-08-30T09:58:47.0337610Z         )
2025-08-30T09:58:47.0337757Z         data["enter_long"] = 0
2025-08-30T09:58:47.0337958Z         data["exit_long"] = 0
2025-08-30T09:58:47.0338150Z         data["enter_short"] = 0
2025-08-30T09:58:47.0338348Z         data["exit_short"] = 0
2025-08-30T09:58:47.0338526Z     
2025-08-30T09:58:47.0338667Z         indicators1 = []
2025-08-30T09:58:47.0338860Z         indicators2 = []
2025-08-30T09:58:47.0339059Z >       fig = generate_candlestick_graph(
2025-08-30T09:58:47.0339412Z             pair=pair, data=data, trades=None, indicators1=indicators1, indicators2=indicators2
2025-08-30T09:58:47.0339750Z         )
2025-08-30T09:58:47.0339838Z 
2025-08-30T09:58:47.0339916Z tests/test_plotting.py:227: 
2025-08-30T09:58:47.0340147Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0340480Z freqtrade/plot/plotting.py:476: in generate_candlestick_graph
2025-08-30T09:58:47.0340926Z     x=data.date, open=data.open, high=data.high, low=data.low, close=data.close, name="Price"
2025-08-30T09:58:47.0341268Z       ^^^^^^^^^
2025-08-30T09:58:47.0341461Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0341708Z 
2025-08-30T09:58:47.0341916Z self =                           index      open  ...  enter_short  exit_short
2025-08-30T09:58:47.0342382Z 0     2017-11-04 23:02:00+00:00   0.00162  ......       0           0
2025-08-30T09:58:47.0342706Z 14397 2017-11-14 22:59:00+00:00    0.0027  ...            0           0
2025-08-30T09:58:47.0342912Z 
2025-08-30T09:58:47.0342977Z [14398 rows x 10 columns]
2025-08-30T09:58:47.0343155Z name = 'date'
2025-08-30T09:58:47.0343248Z 
2025-08-30T09:58:47.0343305Z     @final
2025-08-30T09:58:47.0343682Z     def __getattr__(self, name: str):
2025-08-30T09:58:47.0343900Z         """
2025-08-30T09:58:47.0344117Z         After regular attribute access, try looking up the name
2025-08-30T09:58:47.0344460Z         This allows simpler access to columns for interactive use.
2025-08-30T09:58:47.0344733Z         """
2025-08-30T09:58:47.0344959Z         # Note: obj.x will always call obj.__getattribute__('x') prior to
2025-08-30T09:58:47.0345255Z         # calling obj.__getattr__('x').
2025-08-30T09:58:47.0345464Z         if (
2025-08-30T09:58:47.0345642Z             name not in self._internal_names_set
2025-08-30T09:58:47.0345891Z             and name not in self._metadata
2025-08-30T09:58:47.0346119Z             and name not in self._accessors
2025-08-30T09:58:47.0346411Z             and self._info_axis._can_hold_identifiers_and_holds_name(name)
2025-08-30T09:58:47.0346844Z         ):
2025-08-30T09:58:47.0346995Z             return self[name]
2025-08-30T09:58:47.0347214Z >       return object.__getattribute__(self, name)
2025-08-30T09:58:47.0347457Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0347747Z E       AttributeError: 'DataFrame' object has no attribute 'date'
2025-08-30T09:58:47.0347969Z 
2025-08-30T09:58:47.0348167Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:6318: AttributeError
2025-08-30T09:58:47.0348603Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0349059Z 2025-08-30 09:54:06 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.0349614Z __________________________ test_generate_profit_graph __________________________
2025-08-30T09:58:47.0349840Z 
2025-08-30T09:58:47.0349922Z pairs = ['TRX/BTC', 'XLM/BTC']
2025-08-30T09:58:47.0350265Z data = <freqtrade.data.history.history_utils.LazyDataLoader object at 0x7f65e5b82c10>
2025-08-30T09:58:47.0350754Z trades =        pair  stake_amount  max_stake_amount  ...  enter_tag orders funding_fees
2025-08-30T09:58:47.0351119Z 0   TRX/BTC         0.001             ...one          0.0
2025-08-30T09:58:47.0351419Z 27  XLM/BTC         0.001             0.001  ...       None   None          0.0
2025-08-30T09:58:47.0351623Z 
2025-08-30T09:58:47.0351692Z [6 rows x 28 columns]
2025-08-30T09:58:47.0351931Z timeframe = '5m', stake_currency = 'BTC', starting_balance = 0
2025-08-30T09:58:47.0352147Z 
2025-08-30T09:58:47.0352223Z     def generate_profit_graph(
2025-08-30T09:58:47.0352416Z         pairs: str,
2025-08-30T09:58:47.0352601Z         data: dict[str, pd.DataFrame],
2025-08-30T09:58:47.0352822Z         trades: pd.DataFrame,
2025-08-30T09:58:47.0353021Z         timeframe: str,
2025-08-30T09:58:47.0353208Z         stake_currency: str,
2025-08-30T09:58:47.0353616Z         starting_balance: float,
2025-08-30T09:58:47.0353827Z     ) -> go.Figure:
2025-08-30T09:58:47.0354076Z         # Combine close-values for all pairs, rename columns to "pair"
2025-08-30T09:58:47.0354363Z         try:
2025-08-30T09:58:47.0354559Z >           df_comb = combine_dataframes_with_mean(data, "close")
2025-08-30T09:58:47.0354831Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0354990Z 
2025-08-30T09:58:47.0355075Z freqtrade/plot/plotting.py:531: 
2025-08-30T09:58:47.0355313Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0355643Z freqtrade/data/metrics.py:94: in combine_dataframes_with_mean
2025-08-30T09:58:47.0355974Z     df_comb = combine_dataframes_by_column(data, column)
2025-08-30T09:58:47.0356235Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0356486Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0356674Z 
2025-08-30T09:58:47.0356888Z data = <freqtrade.data.history.history_utils.LazyDataLoader object at 0x7f65e5b82c10>
2025-08-30T09:58:47.0357251Z column = 'close'
2025-08-30T09:58:47.0357350Z 
2025-08-30T09:58:47.0357436Z     def combine_dataframes_by_column(
2025-08-30T09:58:47.0357700Z         data: dict[str, pd.DataFrame], column: str = "close"
2025-08-30T09:58:47.0357957Z     ) -> pd.DataFrame:
2025-08-30T09:58:47.0358127Z         """
2025-08-30T09:58:47.0358299Z         Combine multiple dataframes "column"
2025-08-30T09:58:47.0358588Z         :param data: Dict of Dataframes, dict key should be pair.
2025-08-30T09:58:47.0358919Z         :param column: Column in the original dataframes to use
2025-08-30T09:58:47.0359250Z         :return: DataFrame with the column renamed to the dict key.
2025-08-30T09:58:47.0359557Z         :raise: ValueError if no data is provided.
2025-08-30T09:58:47.0359786Z         """
2025-08-30T09:58:47.0359938Z         if not data:
2025-08-30T09:58:47.0360129Z >           raise ValueError("No data provided.")
2025-08-30T09:58:47.0360380Z E           ValueError: No data provided.
2025-08-30T09:58:47.0360676Z 
2025-08-30T09:58:47.0360761Z freqtrade/data/metrics.py:56: ValueError
2025-08-30T09:58:47.0360930Z 
2025-08-30T09:58:47.0361084Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0361319Z 
2025-08-30T09:58:47.0361524Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0361808Z 
2025-08-30T09:58:47.0361911Z     def test_generate_profit_graph(testdatadir):
2025-08-30T09:58:47.0362245Z         filename = testdatadir / "backtest_results/backtest-result.json"
2025-08-30T09:58:47.0362564Z         trades = load_backtest_data(filename)
2025-08-30T09:58:47.0362859Z         timerange = TimeRange.parse_timerange("20180110-20180112")
2025-08-30T09:58:47.0363149Z         pairs = ["TRX/BTC", "XLM/BTC"]
2025-08-30T09:58:47.0363787Z         trades = trades[trades["close_date"] < pd.Timestamp("2018-01-12", tz="UTC")]
2025-08-30T09:58:47.0364111Z     
2025-08-30T09:58:47.0364426Z         data = history.load_data(datadir=testdatadir, pairs=pairs, timeframe="5m", timerange=timerange)
2025-08-30T09:58:47.0364810Z     
2025-08-30T09:58:47.0364980Z         trades = trades[trades["pair"].isin(pairs)]
2025-08-30T09:58:47.0365211Z     
2025-08-30T09:58:47.0365359Z >       fig = generate_profit_graph(
2025-08-30T09:58:47.0365686Z             pairs, data, trades, timeframe="5m", stake_currency="BTC", starting_balance=0
2025-08-30T09:58:47.0366063Z         )
2025-08-30T09:58:47.0366218Z 
2025-08-30T09:58:47.0366353Z tests/test_plotting.py:353: 
2025-08-30T09:58:47.0366764Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0366979Z 
2025-08-30T09:58:47.0367057Z pairs = ['TRX/BTC', 'XLM/BTC']
2025-08-30T09:58:47.0367406Z data = <freqtrade.data.history.history_utils.LazyDataLoader object at 0x7f65e5b82c10>
2025-08-30T09:58:47.0367888Z trades =        pair  stake_amount  max_stake_amount  ...  enter_tag orders funding_fees
2025-08-30T09:58:47.0368248Z 0   TRX/BTC         0.001             ...one          0.0
2025-08-30T09:58:47.0368546Z 27  XLM/BTC         0.001             0.001  ...       None   None          0.0
2025-08-30T09:58:47.0368751Z 
2025-08-30T09:58:47.0368817Z [6 rows x 28 columns]
2025-08-30T09:58:47.0369054Z timeframe = '5m', stake_currency = 'BTC', starting_balance = 0
2025-08-30T09:58:47.0369266Z 
2025-08-30T09:58:47.0369342Z     def generate_profit_graph(
2025-08-30T09:58:47.0369533Z         pairs: str,
2025-08-30T09:58:47.0369717Z         data: dict[str, pd.DataFrame],
2025-08-30T09:58:47.0369940Z         trades: pd.DataFrame,
2025-08-30T09:58:47.0370135Z         timeframe: str,
2025-08-30T09:58:47.0370315Z         stake_currency: str,
2025-08-30T09:58:47.0370513Z         starting_balance: float,
2025-08-30T09:58:47.0370705Z     ) -> go.Figure:
2025-08-30T09:58:47.0370952Z         # Combine close-values for all pairs, rename columns to "pair"
2025-08-30T09:58:47.0371235Z         try:
2025-08-30T09:58:47.0371436Z             df_comb = combine_dataframes_with_mean(data, "close")
2025-08-30T09:58:47.0371703Z         except ValueError:
2025-08-30T09:58:47.0371905Z >           raise OperationalException(
2025-08-30T09:58:47.0372198Z                 "No data found. Please make sure that data is available for "
2025-08-30T09:58:47.0372503Z                 "the timerange and pairs selected."
2025-08-30T09:58:47.0372727Z             )
2025-08-30T09:58:47.0373200Z E           freqtrade.exceptions.OperationalException: No data found. Please make sure that data is available for the timerange and pairs selected.
2025-08-30T09:58:47.0373789Z 
2025-08-30T09:58:47.0373910Z freqtrade/plot/plotting.py:533: OperationalException
2025-08-30T09:58:47.0374250Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0374884Z 2025-08-30 09:54:06 INFO Loading backtest result from /home/runner/work/freqtrade/freqtrade/tests/testdata/backtest_results/backtest-result.json
2025-08-30T09:58:47.0375536Z __________________ test_generate_candlestick_graph_no_trades ___________________
2025-08-30T09:58:47.0375925Z 
2025-08-30T09:58:47.0376512Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.0377324Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4c2b590>
2025-08-30T09:58:47.0377759Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0378036Z 
2025-08-30T09:58:47.0378232Z     def test_generate_candlestick_graph_no_trades(default_conf, mocker, testdatadir):
2025-08-30T09:58:47.0378593Z         row_mock = mocker.patch(
2025-08-30T09:58:47.0379070Z             "freqtrade.plot.plotting.add_indicators", MagicMock(side_effect=fig_generating_mock)
2025-08-30T09:58:47.0379433Z         )
2025-08-30T09:58:47.0379598Z         trades_mock = mocker.patch(
2025-08-30T09:58:47.0379946Z             "freqtrade.plot.plotting.plot_trades", MagicMock(side_effect=fig_generating_mock)
2025-08-30T09:58:47.0380300Z         )
2025-08-30T09:58:47.0380450Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.0380680Z         timerange = TimeRange(None, "line", 0, -1000)
2025-08-30T09:58:47.0380934Z         data = history.load_pair_history(
2025-08-30T09:58:47.0381249Z             pair=pair, timeframe="1m", datadir=testdatadir, timerange=timerange
2025-08-30T09:58:47.0381545Z         )
2025-08-30T09:58:47.0381674Z     
2025-08-30T09:58:47.0381880Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.0382141Z     
2025-08-30T09:58:47.0382310Z         # Generate buy/sell signals and indicators
2025-08-30T09:58:47.0382595Z         data = strategy.analyze_ticker(data, {"pair": pair})
2025-08-30T09:58:47.0382846Z     
2025-08-30T09:58:47.0382990Z         indicators1 = []
2025-08-30T09:58:47.0383176Z         indicators2 = []
2025-08-30T09:58:47.0383529Z >       fig = generate_candlestick_graph(
2025-08-30T09:58:47.0383937Z             pair=pair, data=data, trades=None, indicators1=indicators1, indicators2=indicators2
2025-08-30T09:58:47.0384279Z         )
2025-08-30T09:58:47.0384360Z 
2025-08-30T09:58:47.0384438Z tests/test_plotting.py:271: 
2025-08-30T09:58:47.0384676Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0385005Z freqtrade/plot/plotting.py:476: in generate_candlestick_graph
2025-08-30T09:58:47.0385433Z     x=data.date, open=data.open, high=data.high, low=data.low, close=data.close, name="Price"
2025-08-30T09:58:47.0385776Z       ^^^^^^^^^
2025-08-30T09:58:47.0385972Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0386156Z 
2025-08-30T09:58:47.0386276Z self =                           index      open  ...  exit_long  exit_short
2025-08-30T09:58:47.0386584Z 0     2017-11-04 23:02:00+00:00   0.00162  ...  ...       1.0         NaN
2025-08-30T09:58:47.0386901Z 14397 2017-11-14 22:59:00+00:00    0.0027  ...        NaN         NaN
2025-08-30T09:58:47.0387107Z 
2025-08-30T09:58:47.0387176Z [14398 rows x 25 columns]
2025-08-30T09:58:47.0387355Z name = 'date'
2025-08-30T09:58:47.0387449Z 
2025-08-30T09:58:47.0387509Z     @final
2025-08-30T09:58:47.0387668Z     def __getattr__(self, name: str):
2025-08-30T09:58:47.0387875Z         """
2025-08-30T09:58:47.0388090Z         After regular attribute access, try looking up the name
2025-08-30T09:58:47.0388434Z         This allows simpler access to columns for interactive use.
2025-08-30T09:58:47.0388701Z         """
2025-08-30T09:58:47.0388925Z         # Note: obj.x will always call obj.__getattribute__('x') prior to
2025-08-30T09:58:47.0389219Z         # calling obj.__getattr__('x').
2025-08-30T09:58:47.0389429Z         if (
2025-08-30T09:58:47.0389615Z             name not in self._internal_names_set
2025-08-30T09:58:47.0390053Z             and name not in self._metadata
2025-08-30T09:58:47.0390414Z             and name not in self._accessors
2025-08-30T09:58:47.0390851Z             and self._info_axis._can_hold_identifiers_and_holds_name(name)
2025-08-30T09:58:47.0391130Z         ):
2025-08-30T09:58:47.0391283Z             return self[name]
2025-08-30T09:58:47.0391504Z >       return object.__getattribute__(self, name)
2025-08-30T09:58:47.0391745Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0392040Z E       AttributeError: 'DataFrame' object has no attribute 'date'
2025-08-30T09:58:47.0392261Z 
2025-08-30T09:58:47.0392466Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:6318: AttributeError
2025-08-30T09:58:47.0392880Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0393328Z 2025-08-30 09:54:06 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.0394361Z 2025-08-30 09:54:06 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0395360Z 2025-08-30 09:54:06 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.0395953Z 2025-08-30 09:54:06 INFO Found no parameter file.
2025-08-30T09:58:47.0396410Z 2025-08-30 09:54:06 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0396950Z 2025-08-30 09:54:06 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0397383Z 2025-08-30 09:54:06 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0397842Z 2025-08-30 09:54:06 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0398318Z 2025-08-30 09:54:06 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0398853Z 2025-08-30 09:54:06 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0399396Z 2025-08-30 09:54:06 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0399855Z 2025-08-30 09:54:06 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0400238Z 2025-08-30 09:54:06 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0400524Z 2025-08-30 09:54:06 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0400819Z 2025-08-30 09:54:06 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0401165Z 2025-08-30 09:54:06 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0401549Z 2025-08-30 09:54:06 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0401917Z 2025-08-30 09:54:06 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0402263Z 2025-08-30 09:54:06 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0402785Z 2025-08-30 09:54:06 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.0403516Z 2025-08-30 09:54:06 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.0403952Z 2025-08-30 09:54:06 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0404260Z 2025-08-30 09:54:06 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0404572Z 2025-08-30 09:54:06 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.0404945Z 2025-08-30 09:54:06 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0405313Z 2025-08-30 09:54:06 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0405626Z 2025-08-30 09:54:06 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0405975Z 2025-08-30 09:54:06 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0406313Z 2025-08-30 09:54:06 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0406651Z 2025-08-30 09:54:06 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0407152Z 2025-08-30 09:54:06 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0407532Z 2025-08-30 09:54:06 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0407901Z 2025-08-30 09:54:06 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0408230Z 2025-08-30 09:54:06 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0408700Z _ test_generic_datahandler_ohlcv_load_and_resave[feather-UNITTEST/BTC-5m-spot--2018-01-15-2018-01-19] _
2025-08-30T09:58:47.0409043Z 
2025-08-30T09:58:47.0409126Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0409354Z [Timestamp('2018-01-10 04:55:00+0000', tz='UTC'),
2025-08-30T09:58:47.0409656Z  Timestamp('2018-01-10 05:00:00+0000', tz='UTC...0000', tz='UTC'),
2025-08-30T09:58:47.0410063Z  Timestamp('2018-01-30 04:50:00+0000', tz='UTC')]
2025-08-30T09:58:47.0410354Z Length: 5760, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0410631Z other = '2018-01-15', op = <built-in function lt>
2025-08-30T09:58:47.0410812Z 
2025-08-30T09:58:47.0410895Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0411136Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0411435Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0411708Z             try:
2025-08-30T09:58:47.0411920Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0412225Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0412511Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0412814Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0413104Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0413505Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0413769Z         elif is_scalar(other):
2025-08-30T09:58:47.0414078Z             try:
2025-08-30T09:58:47.0414457Z >               result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0414800Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0414968Z 
2025-08-30T09:58:47.0415160Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:737: 
2025-08-30T09:58:47.0415530Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0415884Z .venv/lib/python3.11/site-packages/pyarrow/compute.py:252: in wrapper
2025-08-30T09:58:47.0416218Z     return func.call(args, None, memory_pool)
2025-08-30T09:58:47.0416454Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0416746Z pyarrow/_compute.pyx:399: in pyarrow._compute.Function.call
2025-08-30T09:58:47.0417023Z     ???
2025-08-30T09:58:47.0417275Z pyarrow/error.pxi:155: in pyarrow.lib.pyarrow_internal_check_status
2025-08-30T09:58:47.0417571Z     ???
2025-08-30T09:58:47.0417751Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0417939Z 
2025-08-30T09:58:47.0417994Z >   ???
2025-08-30T09:58:47.0418409Z E   pyarrow.lib.ArrowNotImplementedError: Function 'less' has no kernel matching input types (timestamp[ns, tz=UTC], string)
2025-08-30T09:58:47.0418825Z 
2025-08-30T09:58:47.0418937Z pyarrow/error.pxi:92: ArrowNotImplementedError
2025-08-30T09:58:47.0419118Z 
2025-08-30T09:58:47.0419270Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0419510Z 
2025-08-30T09:58:47.0419592Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0419818Z [Timestamp('2018-01-10 04:55:00+0000', tz='UTC'),
2025-08-30T09:58:47.0420120Z  Timestamp('2018-01-10 05:00:00+0000', tz='UTC...0000', tz='UTC'),
2025-08-30T09:58:47.0420417Z  Timestamp('2018-01-30 04:50:00+0000', tz='UTC')]
2025-08-30T09:58:47.0420687Z Length: 5760, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0420964Z other = '2018-01-15', op = <built-in function lt>
2025-08-30T09:58:47.0421135Z 
2025-08-30T09:58:47.0421359Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0421596Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0421892Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0422163Z             try:
2025-08-30T09:58:47.0422403Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0422698Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0422983Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0423275Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0423789Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0424084Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0424464Z         elif is_scalar(other):
2025-08-30T09:58:47.0424657Z             try:
2025-08-30T09:58:47.0424866Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0425227Z             except (pa.lib.ArrowNotImplementedError, pa.lib.ArrowInvalid):
2025-08-30T09:58:47.0425548Z                 mask = isna(self) | isna(other)
2025-08-30T09:58:47.0425809Z                 valid = ~mask
2025-08-30T09:58:47.0426028Z                 result = np.zeros(len(self), dtype="bool")
2025-08-30T09:58:47.0426285Z                 np_array = np.array(self)
2025-08-30T09:58:47.0426493Z                 try:
2025-08-30T09:58:47.0426689Z >                   result[valid] = op(np_array[valid], other)
2025-08-30T09:58:47.0426939Z                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0427261Z E                   TypeError: '<' not supported between instances of 'Timestamp' and 'str'
2025-08-30T09:58:47.0427522Z 
2025-08-30T09:58:47.0427749Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:744: TypeError
2025-08-30T09:58:47.0428051Z 
2025-08-30T09:58:47.0428211Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0428460Z 
2025-08-30T09:58:47.0428532Z datahandler = 'feather'
2025-08-30T09:58:47.0428815Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e979f490>
2025-08-30T09:58:47.0429250Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0429738Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_generic_datahandler_ohlcv0')
2025-08-30T09:58:47.0430160Z pair = 'UNITTEST/BTC', timeframe = '5m', candle_type = 'spot'
2025-08-30T09:58:47.0430503Z candle_append = '', startdt = '2018-01-15', enddt = '2018-01-19'
2025-08-30T09:58:47.0430880Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e519ed50>
2025-08-30T09:58:47.0431126Z 
2025-08-30T09:58:47.0431210Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0431499Z         "pair,timeframe,candle_type,candle_append,startdt,enddt",
2025-08-30T09:58:47.0431773Z         [
2025-08-30T09:58:47.0431944Z             # Data goes from 2018-01-10 - 2018-01-30
2025-08-30T09:58:47.0432237Z             ("UNITTEST/BTC", "5m", "spot", "", "2018-01-15", "2018-01-19"),
2025-08-30T09:58:47.0432541Z             # Mark data goes from to 2021-11-15 2021-11-19
2025-08-30T09:58:47.0432867Z             ("UNITTEST/USDT:USDT", "1h", "mark", "-mark", "2021-11-16", "2021-11-18"),
2025-08-30T09:58:47.0433153Z         ],
2025-08-30T09:58:47.0433296Z     )
2025-08-30T09:58:47.0433722Z     @pytest.mark.parametrize("datahandler", ["feather", "parquet"])
2025-08-30T09:58:47.0434071Z     def test_generic_datahandler_ohlcv_load_and_resave(
2025-08-30T09:58:47.0434321Z         datahandler,
2025-08-30T09:58:47.0434487Z         mocker,
2025-08-30T09:58:47.0434641Z         testdatadir,
2025-08-30T09:58:47.0434805Z         tmp_path,
2025-08-30T09:58:47.0434959Z         pair,
2025-08-30T09:58:47.0435112Z         timeframe,
2025-08-30T09:58:47.0435279Z         candle_type,
2025-08-30T09:58:47.0435443Z         candle_append,
2025-08-30T09:58:47.0435610Z         startdt,
2025-08-30T09:58:47.0435760Z         enddt,
2025-08-30T09:58:47.0436041Z         caplog,
2025-08-30T09:58:47.0436184Z     ):
2025-08-30T09:58:47.0436339Z         tmpdir2 = tmp_path
2025-08-30T09:58:47.0436538Z         if candle_type not in ("", "spot"):
2025-08-30T09:58:47.0436775Z             tmpdir2 = tmp_path / "futures"
2025-08-30T09:58:47.0436995Z             tmpdir2.mkdir()
2025-08-30T09:58:47.0437249Z         # Load data from one common file
2025-08-30T09:58:47.0437515Z         dhbase = get_datahandler(testdatadir, "feather")
2025-08-30T09:58:47.0437872Z         ohlcv = dhbase._ohlcv_load(pair, timeframe, None, candle_type=candle_type)
2025-08-30T09:58:47.0438368Z         assert isinstance(ohlcv, DataFrame)
2025-08-30T09:58:47.0438784Z         assert len(ohlcv) > 0
2025-08-30T09:58:47.0438975Z     
2025-08-30T09:58:47.0439119Z         # Get data to test
2025-08-30T09:58:47.0439492Z         dh = get_datahandler(testdatadir, datahandler)
2025-08-30T09:58:47.0439726Z     
2025-08-30T09:58:47.0440005Z         file = tmpdir2 / f"UNITTEST_NEW-{timeframe}{candle_append}.{dh._get_file_extension()}"
2025-08-30T09:58:47.0440375Z         assert not file.is_file()
2025-08-30T09:58:47.0440566Z     
2025-08-30T09:58:47.0440743Z         dh1 = get_datahandler(tmp_path, datahandler)
2025-08-30T09:58:47.0441090Z         dh1.ohlcv_store("UNITTEST/NEW", timeframe, ohlcv, candle_type=candle_type)
2025-08-30T09:58:47.0441420Z         assert file.is_file()
2025-08-30T09:58:47.0441597Z     
2025-08-30T09:58:47.0441779Z >       assert not ohlcv[ohlcv["date"] < startdt].empty
2025-08-30T09:58:47.0442028Z                          ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0442188Z 
2025-08-30T09:58:47.0442272Z tests/data/test_datahandler.py:376: 
2025-08-30T09:58:47.0442528Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0442916Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0443271Z     return method(self, other)
2025-08-30T09:58:47.0443678Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0443986Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0444343Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0444585Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0444918Z .venv/lib/python3.11/site-packages/pandas/core/series.py:6130: in _cmp_method
2025-08-30T09:58:47.0445303Z     res_values = ops.comparison_op(lvalues, rvalues, op)
2025-08-30T09:58:47.0445578Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0445942Z .venv/lib/python3.11/site-packages/pandas/core/ops/array_ops.py:330: in comparison_op
2025-08-30T09:58:47.0446325Z     res_values = op(lvalues, rvalues)
2025-08-30T09:58:47.0446541Z                  ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0446870Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0447217Z     return method(self, other)
2025-08-30T09:58:47.0447409Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0447706Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0448057Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0448296Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0448667Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:746: in _cmp_method
2025-08-30T09:58:47.0449090Z     result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0449352Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0449599Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0449793Z 
2025-08-30T09:58:47.0449880Z left = <ArrowExtensionArray>
2025-08-30T09:58:47.0450105Z [Timestamp('2018-01-10 04:55:00+0000', tz='UTC'),
2025-08-30T09:58:47.0450413Z  Timestamp('2018-01-10 05:00:00+0000', tz='UTC...0000', tz='UTC'),
2025-08-30T09:58:47.0450713Z  Timestamp('2018-01-30 04:50:00+0000', tz='UTC')]
2025-08-30T09:58:47.0450985Z Length: 5760, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0451403Z right = '2018-01-15', op = <built-in function lt>
2025-08-30T09:58:47.0451575Z 
2025-08-30T09:58:47.0451729Z     def invalid_comparison(left, right, op) -> npt.NDArray[np.bool_]:
2025-08-30T09:58:47.0452024Z         """
2025-08-30T09:58:47.0452272Z         If a comparison has mismatched types and is not necessarily meaningful,
2025-08-30T09:58:47.0452604Z         follow python3 conventions by:
2025-08-30T09:58:47.0452806Z     
2025-08-30T09:58:47.0452976Z             - returning all-False for equality
2025-08-30T09:58:47.0453233Z             - returning all-True for inequality
2025-08-30T09:58:47.0453583Z             - raising TypeError otherwise
2025-08-30T09:58:47.0453797Z     
2025-08-30T09:58:47.0453936Z         Parameters
2025-08-30T09:58:47.0454217Z         ----------
2025-08-30T09:58:47.0454387Z         left : array-like
2025-08-30T09:58:47.0454587Z         right : scalar, array-like
2025-08-30T09:58:47.0454808Z         op : operator.{eq, ne, lt, le, gt}
2025-08-30T09:58:47.0455026Z     
2025-08-30T09:58:47.0455157Z         Raises
2025-08-30T09:58:47.0455309Z         ------
2025-08-30T09:58:47.0455485Z         TypeError : on inequality comparisons
2025-08-30T09:58:47.0455707Z         """
2025-08-30T09:58:47.0455868Z         if op is operator.eq:
2025-08-30T09:58:47.0456101Z             res_values = np.zeros(left.shape, dtype=bool)
2025-08-30T09:58:47.0456363Z         elif op is operator.ne:
2025-08-30T09:58:47.0456597Z             res_values = np.ones(left.shape, dtype=bool)
2025-08-30T09:58:47.0456835Z         else:
2025-08-30T09:58:47.0456997Z             typ = type(right).__name__
2025-08-30T09:58:47.0457332Z >           raise TypeError(f"Invalid comparison between dtype={left.dtype} and {typ}")
2025-08-30T09:58:47.0457827Z E           TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.0458126Z 
2025-08-30T09:58:47.0458316Z .venv/lib/python3.11/site-packages/pandas/core/ops/invalid.py:40: TypeError
2025-08-30T09:58:47.0458894Z _ test_generic_datahandler_ohlcv_load_and_resave[feather-UNITTEST/USDT:USDT-1h-mark--mark-2021-11-16-2021-11-18] _
2025-08-30T09:58:47.0459283Z 
2025-08-30T09:58:47.0459362Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0459594Z [Timestamp('2021-11-15 07:00:00+0000', tz='UTC'),
2025-08-30T09:58:47.0459906Z  Timestamp('2021-11-15 08:00:00+0000', tz='UTC...+0000', tz='UTC'),
2025-08-30T09:58:47.0460208Z  Timestamp('2021-11-19 10:00:00+0000', tz='UTC')]
2025-08-30T09:58:47.0460482Z Length: 100, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0460755Z other = '2021-11-16', op = <built-in function lt>
2025-08-30T09:58:47.0460930Z 
2025-08-30T09:58:47.0461012Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0461249Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0461553Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0461823Z             try:
2025-08-30T09:58:47.0462038Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0462586Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0462976Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0463280Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0463766Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0464063Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0464311Z         elif is_scalar(other):
2025-08-30T09:58:47.0464501Z             try:
2025-08-30T09:58:47.0464715Z >               result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0464987Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0465151Z 
2025-08-30T09:58:47.0465351Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:737: 
2025-08-30T09:58:47.0465721Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0466220Z .venv/lib/python3.11/site-packages/pyarrow/compute.py:252: in wrapper
2025-08-30T09:58:47.0466559Z     return func.call(args, None, memory_pool)
2025-08-30T09:58:47.0466795Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0467084Z pyarrow/_compute.pyx:399: in pyarrow._compute.Function.call
2025-08-30T09:58:47.0467358Z     ???
2025-08-30T09:58:47.0467602Z pyarrow/error.pxi:155: in pyarrow.lib.pyarrow_internal_check_status
2025-08-30T09:58:47.0467894Z     ???
2025-08-30T09:58:47.0468070Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0468256Z 
2025-08-30T09:58:47.0468312Z >   ???
2025-08-30T09:58:47.0468843Z E   pyarrow.lib.ArrowNotImplementedError: Function 'less' has no kernel matching input types (timestamp[ns, tz=UTC], string)
2025-08-30T09:58:47.0469295Z 
2025-08-30T09:58:47.0469433Z pyarrow/error.pxi:92: ArrowNotImplementedError
2025-08-30T09:58:47.0469615Z 
2025-08-30T09:58:47.0469767Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0470012Z 
2025-08-30T09:58:47.0470094Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0470318Z [Timestamp('2021-11-15 07:00:00+0000', tz='UTC'),
2025-08-30T09:58:47.0470622Z  Timestamp('2021-11-15 08:00:00+0000', tz='UTC...+0000', tz='UTC'),
2025-08-30T09:58:47.0470921Z  Timestamp('2021-11-19 10:00:00+0000', tz='UTC')]
2025-08-30T09:58:47.0471186Z Length: 100, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0471459Z other = '2021-11-16', op = <built-in function lt>
2025-08-30T09:58:47.0471632Z 
2025-08-30T09:58:47.0471727Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0471986Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0472277Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0472554Z             try:
2025-08-30T09:58:47.0472767Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0473059Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0473501Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0473829Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0474129Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0474416Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0474667Z         elif is_scalar(other):
2025-08-30T09:58:47.0474853Z             try:
2025-08-30T09:58:47.0475059Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0475412Z             except (pa.lib.ArrowNotImplementedError, pa.lib.ArrowInvalid):
2025-08-30T09:58:47.0475735Z                 mask = isna(self) | isna(other)
2025-08-30T09:58:47.0475969Z                 valid = ~mask
2025-08-30T09:58:47.0476187Z                 result = np.zeros(len(self), dtype="bool")
2025-08-30T09:58:47.0476444Z                 np_array = np.array(self)
2025-08-30T09:58:47.0476659Z                 try:
2025-08-30T09:58:47.0476860Z >                   result[valid] = op(np_array[valid], other)
2025-08-30T09:58:47.0477113Z                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0477435Z E                   TypeError: '<' not supported between instances of 'Timestamp' and 'str'
2025-08-30T09:58:47.0477692Z 
2025-08-30T09:58:47.0477926Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:744: TypeError
2025-08-30T09:58:47.0478226Z 
2025-08-30T09:58:47.0478382Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0478625Z 
2025-08-30T09:58:47.0478694Z datahandler = 'feather'
2025-08-30T09:58:47.0478970Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4c249d0>
2025-08-30T09:58:47.0479404Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0479896Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_generic_datahandler_ohlcv1')
2025-08-30T09:58:47.0480459Z pair = 'UNITTEST/USDT:USDT', timeframe = '1h', candle_type = 'mark'
2025-08-30T09:58:47.0480831Z candle_append = '-mark', startdt = '2021-11-16', enddt = '2021-11-18'
2025-08-30T09:58:47.0481208Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e4a2c210>
2025-08-30T09:58:47.0481455Z 
2025-08-30T09:58:47.0481540Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0481819Z         "pair,timeframe,candle_type,candle_append,startdt,enddt",
2025-08-30T09:58:47.0482091Z         [
2025-08-30T09:58:47.0482262Z             # Data goes from 2018-01-10 - 2018-01-30
2025-08-30T09:58:47.0482551Z             ("UNITTEST/BTC", "5m", "spot", "", "2018-01-15", "2018-01-19"),
2025-08-30T09:58:47.0482856Z             # Mark data goes from to 2021-11-15 2021-11-19
2025-08-30T09:58:47.0483285Z             ("UNITTEST/USDT:USDT", "1h", "mark", "-mark", "2021-11-16", "2021-11-18"),
2025-08-30T09:58:47.0483787Z         ],
2025-08-30T09:58:47.0483934Z     )
2025-08-30T09:58:47.0484168Z     @pytest.mark.parametrize("datahandler", ["feather", "parquet"])
2025-08-30T09:58:47.0484516Z     def test_generic_datahandler_ohlcv_load_and_resave(
2025-08-30T09:58:47.0484767Z         datahandler,
2025-08-30T09:58:47.0484937Z         mocker,
2025-08-30T09:58:47.0485090Z         testdatadir,
2025-08-30T09:58:47.0485254Z         tmp_path,
2025-08-30T09:58:47.0485408Z         pair,
2025-08-30T09:58:47.0485564Z         timeframe,
2025-08-30T09:58:47.0485728Z         candle_type,
2025-08-30T09:58:47.0485893Z         candle_append,
2025-08-30T09:58:47.0486060Z         startdt,
2025-08-30T09:58:47.0486230Z         enddt,
2025-08-30T09:58:47.0486512Z         caplog,
2025-08-30T09:58:47.0486763Z     ):
2025-08-30T09:58:47.0487031Z         tmpdir2 = tmp_path
2025-08-30T09:58:47.0487264Z         if candle_type not in ("", "spot"):
2025-08-30T09:58:47.0487517Z             tmpdir2 = tmp_path / "futures"
2025-08-30T09:58:47.0487739Z             tmpdir2.mkdir()
2025-08-30T09:58:47.0487951Z         # Load data from one common file
2025-08-30T09:58:47.0488228Z         dhbase = get_datahandler(testdatadir, "feather")
2025-08-30T09:58:47.0488588Z         ohlcv = dhbase._ohlcv_load(pair, timeframe, None, candle_type=candle_type)
2025-08-30T09:58:47.0488935Z         assert isinstance(ohlcv, DataFrame)
2025-08-30T09:58:47.0489164Z         assert len(ohlcv) > 0
2025-08-30T09:58:47.0489357Z     
2025-08-30T09:58:47.0489501Z         # Get data to test
2025-08-30T09:58:47.0489722Z         dh = get_datahandler(testdatadir, datahandler)
2025-08-30T09:58:47.0489952Z     
2025-08-30T09:58:47.0490234Z         file = tmpdir2 / f"UNITTEST_NEW-{timeframe}{candle_append}.{dh._get_file_extension()}"
2025-08-30T09:58:47.0490597Z         assert not file.is_file()
2025-08-30T09:58:47.0490790Z     
2025-08-30T09:58:47.0490966Z         dh1 = get_datahandler(tmp_path, datahandler)
2025-08-30T09:58:47.0491318Z         dh1.ohlcv_store("UNITTEST/NEW", timeframe, ohlcv, candle_type=candle_type)
2025-08-30T09:58:47.0491651Z         assert file.is_file()
2025-08-30T09:58:47.0491835Z     
2025-08-30T09:58:47.0492018Z >       assert not ohlcv[ohlcv["date"] < startdt].empty
2025-08-30T09:58:47.0492269Z                          ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0492430Z 
2025-08-30T09:58:47.0492514Z tests/data/test_datahandler.py:376: 
2025-08-30T09:58:47.0492768Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0493150Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0493621Z     return method(self, other)
2025-08-30T09:58:47.0493815Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0494115Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0494471Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0494717Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0495048Z .venv/lib/python3.11/site-packages/pandas/core/series.py:6130: in _cmp_method
2025-08-30T09:58:47.0495430Z     res_values = ops.comparison_op(lvalues, rvalues, op)
2025-08-30T09:58:47.0495867Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0496232Z .venv/lib/python3.11/site-packages/pandas/core/ops/array_ops.py:330: in comparison_op
2025-08-30T09:58:47.0496616Z     res_values = op(lvalues, rvalues)
2025-08-30T09:58:47.0496829Z                  ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0497153Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0497503Z     return method(self, other)
2025-08-30T09:58:47.0497694Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0497996Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0498345Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0498700Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0499077Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:746: in _cmp_method
2025-08-30T09:58:47.0499496Z     result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0499768Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0500018Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0500206Z 
2025-08-30T09:58:47.0500293Z left = <ArrowExtensionArray>
2025-08-30T09:58:47.0500522Z [Timestamp('2021-11-15 07:00:00+0000', tz='UTC'),
2025-08-30T09:58:47.0500831Z  Timestamp('2021-11-15 08:00:00+0000', tz='UTC...+0000', tz='UTC'),
2025-08-30T09:58:47.0501134Z  Timestamp('2021-11-19 10:00:00+0000', tz='UTC')]
2025-08-30T09:58:47.0501407Z Length: 100, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0501684Z right = '2021-11-16', op = <built-in function lt>
2025-08-30T09:58:47.0501860Z 
2025-08-30T09:58:47.0502025Z     def invalid_comparison(left, right, op) -> npt.NDArray[np.bool_]:
2025-08-30T09:58:47.0502331Z         """
2025-08-30T09:58:47.0502587Z         If a comparison has mismatched types and is not necessarily meaningful,
2025-08-30T09:58:47.0502932Z         follow python3 conventions by:
2025-08-30T09:58:47.0503140Z     
2025-08-30T09:58:47.0503311Z             - returning all-False for equality
2025-08-30T09:58:47.0503770Z             - returning all-True for inequality
2025-08-30T09:58:47.0504026Z             - raising TypeError otherwise
2025-08-30T09:58:47.0504244Z     
2025-08-30T09:58:47.0504381Z         Parameters
2025-08-30T09:58:47.0504546Z         ----------
2025-08-30T09:58:47.0504711Z         left : array-like
2025-08-30T09:58:47.0517135Z         right : scalar, array-like
2025-08-30T09:58:47.0517600Z         op : operator.{eq, ne, lt, le, gt}
2025-08-30T09:58:47.0517939Z     
2025-08-30T09:58:47.0518085Z         Raises
2025-08-30T09:58:47.0518245Z         ------
2025-08-30T09:58:47.0518434Z         TypeError : on inequality comparisons
2025-08-30T09:58:47.0518687Z         """
2025-08-30T09:58:47.0518852Z         if op is operator.eq:
2025-08-30T09:58:47.0519111Z             res_values = np.zeros(left.shape, dtype=bool)
2025-08-30T09:58:47.0519573Z         elif op is operator.ne:
2025-08-30T09:58:47.0519812Z             res_values = np.ones(left.shape, dtype=bool)
2025-08-30T09:58:47.0520059Z         else:
2025-08-30T09:58:47.0520227Z             typ = type(right).__name__
2025-08-30T09:58:47.0520574Z >           raise TypeError(f"Invalid comparison between dtype={left.dtype} and {typ}")
2025-08-30T09:58:47.0521060Z E           TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.0521366Z 
2025-08-30T09:58:47.0521566Z .venv/lib/python3.11/site-packages/pandas/core/ops/invalid.py:40: TypeError
2025-08-30T09:58:47.0522109Z _ test_generic_datahandler_ohlcv_load_and_resave[parquet-UNITTEST/BTC-5m-spot--2018-01-15-2018-01-19] _
2025-08-30T09:58:47.0522459Z 
2025-08-30T09:58:47.0522548Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0522790Z [Timestamp('2018-01-10 04:55:00+0000', tz='UTC'),
2025-08-30T09:58:47.0523096Z  Timestamp('2018-01-10 05:00:00+0000', tz='UTC...0000', tz='UTC'),
2025-08-30T09:58:47.0523822Z  Timestamp('2018-01-30 04:50:00+0000', tz='UTC')]
2025-08-30T09:58:47.0523931Z Length: 5760, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0524031Z other = '2018-01-15', op = <built-in function lt>
2025-08-30T09:58:47.0524036Z 
2025-08-30T09:58:47.0524121Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0524213Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0524351Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0524417Z             try:
2025-08-30T09:58:47.0524541Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0524645Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0524765Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0524999Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0525119Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0525233Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0525308Z         elif is_scalar(other):
2025-08-30T09:58:47.0525369Z             try:
2025-08-30T09:58:47.0525498Z >               result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0525578Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0525582Z 
2025-08-30T09:58:47.0525810Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:737: 
2025-08-30T09:58:47.0525918Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0526095Z .venv/lib/python3.11/site-packages/pyarrow/compute.py:252: in wrapper
2025-08-30T09:58:47.0526190Z     return func.call(args, None, memory_pool)
2025-08-30T09:58:47.0526263Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0526416Z pyarrow/_compute.pyx:399: in pyarrow._compute.Function.call
2025-08-30T09:58:47.0526478Z     ???
2025-08-30T09:58:47.0526648Z pyarrow/error.pxi:155: in pyarrow.lib.pyarrow_internal_check_status
2025-08-30T09:58:47.0526715Z     ???
2025-08-30T09:58:47.0526818Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0526822Z 
2025-08-30T09:58:47.0526879Z >   ???
2025-08-30T09:58:47.0527226Z E   pyarrow.lib.ArrowNotImplementedError: Function 'less' has no kernel matching input types (timestamp[ns, tz=UTC], string)
2025-08-30T09:58:47.0527231Z 
2025-08-30T09:58:47.0527337Z pyarrow/error.pxi:92: ArrowNotImplementedError
2025-08-30T09:58:47.0527341Z 
2025-08-30T09:58:47.0527497Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0527502Z 
2025-08-30T09:58:47.0527588Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0527685Z [Timestamp('2018-01-10 04:55:00+0000', tz='UTC'),
2025-08-30T09:58:47.0527822Z  Timestamp('2018-01-10 05:00:00+0000', tz='UTC...0000', tz='UTC'),
2025-08-30T09:58:47.0527912Z  Timestamp('2018-01-30 04:50:00+0000', tz='UTC')]
2025-08-30T09:58:47.0528072Z Length: 5760, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0528239Z other = '2018-01-15', op = <built-in function lt>
2025-08-30T09:58:47.0528247Z 
2025-08-30T09:58:47.0528378Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0528503Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0528640Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0528702Z             try:
2025-08-30T09:58:47.0528827Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0528927Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0529043Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0529154Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0529272Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0529373Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0529587Z         elif is_scalar(other):
2025-08-30T09:58:47.0529652Z             try:
2025-08-30T09:58:47.0529765Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0529927Z             except (pa.lib.ArrowNotImplementedError, pa.lib.ArrowInvalid):
2025-08-30T09:58:47.0530015Z                 mask = isna(self) | isna(other)
2025-08-30T09:58:47.0530085Z                 valid = ~mask
2025-08-30T09:58:47.0530179Z                 result = np.zeros(len(self), dtype="bool")
2025-08-30T09:58:47.0530266Z                 np_array = np.array(self)
2025-08-30T09:58:47.0530328Z                 try:
2025-08-30T09:58:47.0530425Z >                   result[valid] = op(np_array[valid], other)
2025-08-30T09:58:47.0530500Z                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0530770Z E                   TypeError: '<' not supported between instances of 'Timestamp' and 'str'
2025-08-30T09:58:47.0530777Z 
2025-08-30T09:58:47.0531002Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:744: TypeError
2025-08-30T09:58:47.0531013Z 
2025-08-30T09:58:47.0531168Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0531179Z 
2025-08-30T09:58:47.0531253Z datahandler = 'parquet'
2025-08-30T09:58:47.0531411Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e95b9a50>
2025-08-30T09:58:47.0531613Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0531835Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_generic_datahandler_ohlcv2')
2025-08-30T09:58:47.0531968Z pair = 'UNITTEST/BTC', timeframe = '5m', candle_type = 'spot'
2025-08-30T09:58:47.0532098Z candle_append = '', startdt = '2018-01-15', enddt = '2018-01-19'
2025-08-30T09:58:47.0532269Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e526c4d0>
2025-08-30T09:58:47.0532274Z 
2025-08-30T09:58:47.0532356Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0532500Z         "pair,timeframe,candle_type,candle_append,startdt,enddt",
2025-08-30T09:58:47.0532568Z         [
2025-08-30T09:58:47.0532659Z             # Data goes from 2018-01-10 - 2018-01-30
2025-08-30T09:58:47.0532793Z             ("UNITTEST/BTC", "5m", "spot", "", "2018-01-15", "2018-01-19"),
2025-08-30T09:58:47.0532892Z             # Mark data goes from to 2021-11-15 2021-11-19
2025-08-30T09:58:47.0533038Z             ("UNITTEST/USDT:USDT", "1h", "mark", "-mark", "2021-11-16", "2021-11-18"),
2025-08-30T09:58:47.0533145Z         ],
2025-08-30T09:58:47.0533249Z     )
2025-08-30T09:58:47.0533665Z     @pytest.mark.parametrize("datahandler", ["feather", "parquet"])
2025-08-30T09:58:47.0533858Z     def test_generic_datahandler_ohlcv_load_and_resave(
2025-08-30T09:58:47.0533968Z         datahandler,
2025-08-30T09:58:47.0534076Z         mocker,
2025-08-30T09:58:47.0534205Z         testdatadir,
2025-08-30T09:58:47.0534283Z         tmp_path,
2025-08-30T09:58:47.0534345Z         pair,
2025-08-30T09:58:47.0534414Z         timeframe,
2025-08-30T09:58:47.0534485Z         candle_type,
2025-08-30T09:58:47.0534552Z         candle_append,
2025-08-30T09:58:47.0534618Z         startdt,
2025-08-30T09:58:47.0534676Z         enddt,
2025-08-30T09:58:47.0534734Z         caplog,
2025-08-30T09:58:47.0534792Z     ):
2025-08-30T09:58:47.0534870Z         tmpdir2 = tmp_path
2025-08-30T09:58:47.0534956Z         if candle_type not in ("", "spot"):
2025-08-30T09:58:47.0535038Z             tmpdir2 = tmp_path / "futures"
2025-08-30T09:58:47.0535117Z             tmpdir2.mkdir()
2025-08-30T09:58:47.0535196Z         # Load data from one common file
2025-08-30T09:58:47.0535308Z         dhbase = get_datahandler(testdatadir, "feather")
2025-08-30T09:58:47.0535495Z         ohlcv = dhbase._ohlcv_load(pair, timeframe, None, candle_type=candle_type)
2025-08-30T09:58:47.0535583Z         assert isinstance(ohlcv, DataFrame)
2025-08-30T09:58:47.0535656Z         assert len(ohlcv) > 0
2025-08-30T09:58:47.0535712Z     
2025-08-30T09:58:47.0535786Z         # Get data to test
2025-08-30T09:58:47.0536035Z         dh = get_datahandler(testdatadir, datahandler)
2025-08-30T09:58:47.0536095Z     
2025-08-30T09:58:47.0536307Z         file = tmpdir2 / f"UNITTEST_NEW-{timeframe}{candle_append}.{dh._get_file_extension()}"
2025-08-30T09:58:47.0536384Z         assert not file.is_file()
2025-08-30T09:58:47.0536439Z     
2025-08-30T09:58:47.0536538Z         dh1 = get_datahandler(tmp_path, datahandler)
2025-08-30T09:58:47.0536719Z         dh1.ohlcv_store("UNITTEST/NEW", timeframe, ohlcv, candle_type=candle_type)
2025-08-30T09:58:47.0536793Z         assert file.is_file()
2025-08-30T09:58:47.0536850Z     
2025-08-30T09:58:47.0536958Z >       assert not ohlcv[ohlcv["date"] < startdt].empty
2025-08-30T09:58:47.0537029Z                          ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0537035Z 
2025-08-30T09:58:47.0537249Z tests/data/test_datahandler.py:376: 
2025-08-30T09:58:47.0537361Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0537564Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0537647Z     return method(self, other)
2025-08-30T09:58:47.0537711Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0537897Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0537994Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0538066Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0538267Z .venv/lib/python3.11/site-packages/pandas/core/series.py:6130: in _cmp_method
2025-08-30T09:58:47.0538385Z     res_values = ops.comparison_op(lvalues, rvalues, op)
2025-08-30T09:58:47.0538459Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0538679Z .venv/lib/python3.11/site-packages/pandas/core/ops/array_ops.py:330: in comparison_op
2025-08-30T09:58:47.0538766Z     res_values = op(lvalues, rvalues)
2025-08-30T09:58:47.0538835Z                  ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0539027Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0539111Z     return method(self, other)
2025-08-30T09:58:47.0539174Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0539348Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0539450Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0539517Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0539743Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:746: in _cmp_method
2025-08-30T09:58:47.0539857Z     result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0539929Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0540029Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0540037Z 
2025-08-30T09:58:47.0540124Z left = <ArrowExtensionArray>
2025-08-30T09:58:47.0540219Z [Timestamp('2018-01-10 04:55:00+0000', tz='UTC'),
2025-08-30T09:58:47.0540352Z  Timestamp('2018-01-10 05:00:00+0000', tz='UTC...0000', tz='UTC'),
2025-08-30T09:58:47.0540445Z  Timestamp('2018-01-30 04:50:00+0000', tz='UTC')]
2025-08-30T09:58:47.0540557Z Length: 5760, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0540651Z right = '2018-01-15', op = <built-in function lt>
2025-08-30T09:58:47.0540656Z 
2025-08-30T09:58:47.0540813Z     def invalid_comparison(left, right, op) -> npt.NDArray[np.bool_]:
2025-08-30T09:58:47.0540878Z         """
2025-08-30T09:58:47.0541047Z         If a comparison has mismatched types and is not necessarily meaningful,
2025-08-30T09:58:47.0541132Z         follow python3 conventions by:
2025-08-30T09:58:47.0541195Z     
2025-08-30T09:58:47.0541286Z             - returning all-False for equality
2025-08-30T09:58:47.0541373Z             - returning all-True for inequality
2025-08-30T09:58:47.0541465Z             - raising TypeError otherwise
2025-08-30T09:58:47.0541522Z     
2025-08-30T09:58:47.0541586Z         Parameters
2025-08-30T09:58:47.0541649Z         ----------
2025-08-30T09:58:47.0541821Z         left : array-like
2025-08-30T09:58:47.0541899Z         right : scalar, array-like
2025-08-30T09:58:47.0541981Z         op : operator.{eq, ne, lt, le, gt}
2025-08-30T09:58:47.0542043Z     
2025-08-30T09:58:47.0542103Z         Raises
2025-08-30T09:58:47.0542165Z         ------
2025-08-30T09:58:47.0542257Z         TypeError : on inequality comparisons
2025-08-30T09:58:47.0542321Z         """
2025-08-30T09:58:47.0542399Z         if op is operator.eq:
2025-08-30T09:58:47.0542507Z             res_values = np.zeros(left.shape, dtype=bool)
2025-08-30T09:58:47.0542588Z         elif op is operator.ne:
2025-08-30T09:58:47.0542688Z             res_values = np.ones(left.shape, dtype=bool)
2025-08-30T09:58:47.0542747Z         else:
2025-08-30T09:58:47.0542904Z             typ = type(right).__name__
2025-08-30T09:58:47.0543102Z >           raise TypeError(f"Invalid comparison between dtype={left.dtype} and {typ}")
2025-08-30T09:58:47.0543317Z E           TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.0543328Z 
2025-08-30T09:58:47.0543750Z .venv/lib/python3.11/site-packages/pandas/core/ops/invalid.py:40: TypeError
2025-08-30T09:58:47.0544071Z _ test_generic_datahandler_ohlcv_load_and_resave[parquet-UNITTEST/USDT:USDT-1h-mark--mark-2021-11-16-2021-11-18] _
2025-08-30T09:58:47.0544077Z 
2025-08-30T09:58:47.0544159Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0544251Z [Timestamp('2021-11-15 07:00:00+0000', tz='UTC'),
2025-08-30T09:58:47.0544392Z  Timestamp('2021-11-15 08:00:00+0000', tz='UTC...+0000', tz='UTC'),
2025-08-30T09:58:47.0544481Z  Timestamp('2021-11-19 10:00:00+0000', tz='UTC')]
2025-08-30T09:58:47.0544588Z Length: 100, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0544692Z other = '2021-11-16', op = <built-in function lt>
2025-08-30T09:58:47.0544696Z 
2025-08-30T09:58:47.0544779Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0544869Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0545037Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0545104Z             try:
2025-08-30T09:58:47.0545225Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0545322Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0545443Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0545549Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0545661Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0545766Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0545838Z         elif is_scalar(other):
2025-08-30T09:58:47.0545897Z             try:
2025-08-30T09:58:47.0546019Z >               result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0546095Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0546099Z 
2025-08-30T09:58:47.0546294Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:737: 
2025-08-30T09:58:47.0546399Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0546559Z .venv/lib/python3.11/site-packages/pyarrow/compute.py:252: in wrapper
2025-08-30T09:58:47.0546652Z     return func.call(args, None, memory_pool)
2025-08-30T09:58:47.0546721Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0546868Z pyarrow/_compute.pyx:399: in pyarrow._compute.Function.call
2025-08-30T09:58:47.0546930Z     ???
2025-08-30T09:58:47.0547093Z pyarrow/error.pxi:155: in pyarrow.lib.pyarrow_internal_check_status
2025-08-30T09:58:47.0547155Z     ???
2025-08-30T09:58:47.0547256Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0547264Z 
2025-08-30T09:58:47.0547320Z >   ???
2025-08-30T09:58:47.0547667Z E   pyarrow.lib.ArrowNotImplementedError: Function 'less' has no kernel matching input types (timestamp[ns, tz=UTC], string)
2025-08-30T09:58:47.0547807Z 
2025-08-30T09:58:47.0547917Z pyarrow/error.pxi:92: ArrowNotImplementedError
2025-08-30T09:58:47.0547923Z 
2025-08-30T09:58:47.0548076Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0548081Z 
2025-08-30T09:58:47.0548167Z self = <ArrowExtensionArray>
2025-08-30T09:58:47.0548259Z [Timestamp('2021-11-15 07:00:00+0000', tz='UTC'),
2025-08-30T09:58:47.0548388Z  Timestamp('2021-11-15 08:00:00+0000', tz='UTC...+0000', tz='UTC'),
2025-08-30T09:58:47.0548481Z  Timestamp('2021-11-19 10:00:00+0000', tz='UTC')]
2025-08-30T09:58:47.0548584Z Length: 100, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0548675Z other = '2021-11-16', op = <built-in function lt>
2025-08-30T09:58:47.0548680Z 
2025-08-30T09:58:47.0548866Z     def _cmp_method(self, other, op):
2025-08-30T09:58:47.0548961Z         pc_func = ARROW_CMP_FUNCS[op.__name__]
2025-08-30T09:58:47.0549092Z         if isinstance(other, (ExtensionArray, np.ndarray, list)):
2025-08-30T09:58:47.0549158Z             try:
2025-08-30T09:58:47.0549278Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0549376Z             except pa.ArrowNotImplementedError:
2025-08-30T09:58:47.0549487Z                 # TODO: could this be wrong if other is object dtype?
2025-08-30T09:58:47.0549592Z                 #  in which case we need to operate pointwise?
2025-08-30T09:58:47.0549704Z                 result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0549802Z                 result = pa.array(result, type=pa.bool_())
2025-08-30T09:58:47.0549875Z         elif is_scalar(other):
2025-08-30T09:58:47.0549942Z             try:
2025-08-30T09:58:47.0550057Z                 result = pc_func(self._pa_array, self._box_pa(other))
2025-08-30T09:58:47.0550221Z             except (pa.lib.ArrowNotImplementedError, pa.lib.ArrowInvalid):
2025-08-30T09:58:47.0550307Z                 mask = isna(self) | isna(other)
2025-08-30T09:58:47.0550376Z                 valid = ~mask
2025-08-30T09:58:47.0550476Z                 result = np.zeros(len(self), dtype="bool")
2025-08-30T09:58:47.0550554Z                 np_array = np.array(self)
2025-08-30T09:58:47.0550621Z                 try:
2025-08-30T09:58:47.0550714Z >                   result[valid] = op(np_array[valid], other)
2025-08-30T09:58:47.0550788Z                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0550964Z E                   TypeError: '<' not supported between instances of 'Timestamp' and 'str'
2025-08-30T09:58:47.0550970Z 
2025-08-30T09:58:47.0551190Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:744: TypeError
2025-08-30T09:58:47.0551194Z 
2025-08-30T09:58:47.0551348Z During handling of the above exception, another exception occurred:
2025-08-30T09:58:47.0551353Z 
2025-08-30T09:58:47.0551432Z datahandler = 'parquet'
2025-08-30T09:58:47.0551592Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65ea137590>
2025-08-30T09:58:47.0551794Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.0552011Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_generic_datahandler_ohlcv3')
2025-08-30T09:58:47.0552155Z pair = 'UNITTEST/USDT:USDT', timeframe = '1h', candle_type = 'mark'
2025-08-30T09:58:47.0552294Z candle_append = '-mark', startdt = '2021-11-16', enddt = '2021-11-18'
2025-08-30T09:58:47.0552457Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e45ce110>
2025-08-30T09:58:47.0552462Z 
2025-08-30T09:58:47.0552544Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0552685Z         "pair,timeframe,candle_type,candle_append,startdt,enddt",
2025-08-30T09:58:47.0552745Z         [
2025-08-30T09:58:47.0552838Z             # Data goes from 2018-01-10 - 2018-01-30
2025-08-30T09:58:47.0552971Z             ("UNITTEST/BTC", "5m", "spot", "", "2018-01-15", "2018-01-19"),
2025-08-30T09:58:47.0553065Z             # Mark data goes from to 2021-11-15 2021-11-19
2025-08-30T09:58:47.0553216Z             ("UNITTEST/USDT:USDT", "1h", "mark", "-mark", "2021-11-16", "2021-11-18"),
2025-08-30T09:58:47.0553552Z         ],
2025-08-30T09:58:47.0553660Z     )
2025-08-30T09:58:47.0553829Z     @pytest.mark.parametrize("datahandler", ["feather", "parquet"])
2025-08-30T09:58:47.0553946Z     def test_generic_datahandler_ohlcv_load_and_resave(
2025-08-30T09:58:47.0554012Z         datahandler,
2025-08-30T09:58:47.0554074Z         mocker,
2025-08-30T09:58:47.0554142Z         testdatadir,
2025-08-30T09:58:47.0554204Z         tmp_path,
2025-08-30T09:58:47.0554263Z         pair,
2025-08-30T09:58:47.0554330Z         timeframe,
2025-08-30T09:58:47.0554394Z         candle_type,
2025-08-30T09:58:47.0554460Z         candle_append,
2025-08-30T09:58:47.0554519Z         startdt,
2025-08-30T09:58:47.0554582Z         enddt,
2025-08-30T09:58:47.0554773Z         caplog,
2025-08-30T09:58:47.0554835Z     ):
2025-08-30T09:58:47.0554910Z         tmpdir2 = tmp_path
2025-08-30T09:58:47.0554996Z         if candle_type not in ("", "spot"):
2025-08-30T09:58:47.0555085Z             tmpdir2 = tmp_path / "futures"
2025-08-30T09:58:47.0555157Z             tmpdir2.mkdir()
2025-08-30T09:58:47.0555242Z         # Load data from one common file
2025-08-30T09:58:47.0555352Z         dhbase = get_datahandler(testdatadir, "feather")
2025-08-30T09:58:47.0555529Z         ohlcv = dhbase._ohlcv_load(pair, timeframe, None, candle_type=candle_type)
2025-08-30T09:58:47.0555618Z         assert isinstance(ohlcv, DataFrame)
2025-08-30T09:58:47.0555690Z         assert len(ohlcv) > 0
2025-08-30T09:58:47.0555746Z     
2025-08-30T09:58:47.0555818Z         # Get data to test
2025-08-30T09:58:47.0555921Z         dh = get_datahandler(testdatadir, datahandler)
2025-08-30T09:58:47.0555977Z     
2025-08-30T09:58:47.0556185Z         file = tmpdir2 / f"UNITTEST_NEW-{timeframe}{candle_append}.{dh._get_file_extension()}"
2025-08-30T09:58:47.0556267Z         assert not file.is_file()
2025-08-30T09:58:47.0556325Z     
2025-08-30T09:58:47.0556422Z         dh1 = get_datahandler(tmp_path, datahandler)
2025-08-30T09:58:47.0556605Z         dh1.ohlcv_store("UNITTEST/NEW", timeframe, ohlcv, candle_type=candle_type)
2025-08-30T09:58:47.0556676Z         assert file.is_file()
2025-08-30T09:58:47.0556730Z     
2025-08-30T09:58:47.0556853Z >       assert not ohlcv[ohlcv["date"] < startdt].empty
2025-08-30T09:58:47.0556993Z                          ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0557002Z 
2025-08-30T09:58:47.0557153Z tests/data/test_datahandler.py:376: 
2025-08-30T09:58:47.0557331Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0557643Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0557722Z     return method(self, other)
2025-08-30T09:58:47.0557786Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0557979Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0558075Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0558145Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0558341Z .venv/lib/python3.11/site-packages/pandas/core/series.py:6130: in _cmp_method
2025-08-30T09:58:47.0558458Z     res_values = ops.comparison_op(lvalues, rvalues, op)
2025-08-30T09:58:47.0558533Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0558748Z .venv/lib/python3.11/site-packages/pandas/core/ops/array_ops.py:330: in comparison_op
2025-08-30T09:58:47.0558834Z     res_values = op(lvalues, rvalues)
2025-08-30T09:58:47.0558899Z                  ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0559085Z .venv/lib/python3.11/site-packages/pandas/core/ops/common.py:76: in new_method
2025-08-30T09:58:47.0559164Z     return method(self, other)
2025-08-30T09:58:47.0559226Z            ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0559404Z .venv/lib/python3.11/site-packages/pandas/core/arraylike.py:48: in __lt__
2025-08-30T09:58:47.0559501Z     return self._cmp_method(other, operator.lt)
2025-08-30T09:58:47.0559569Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0559956Z .venv/lib/python3.11/site-packages/pandas/core/arrays/arrow/array.py:746: in _cmp_method
2025-08-30T09:58:47.0560072Z     result = ops.invalid_comparison(self, other, op)
2025-08-30T09:58:47.0560149Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0560250Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0560255Z 
2025-08-30T09:58:47.0560337Z left = <ArrowExtensionArray>
2025-08-30T09:58:47.0560436Z [Timestamp('2021-11-15 07:00:00+0000', tz='UTC'),
2025-08-30T09:58:47.0560567Z  Timestamp('2021-11-15 08:00:00+0000', tz='UTC...+0000', tz='UTC'),
2025-08-30T09:58:47.0560654Z  Timestamp('2021-11-19 10:00:00+0000', tz='UTC')]
2025-08-30T09:58:47.0560845Z Length: 100, dtype: timestamp[ns, tz=UTC][pyarrow]
2025-08-30T09:58:47.0560942Z right = '2021-11-16', op = <built-in function lt>
2025-08-30T09:58:47.0560946Z 
2025-08-30T09:58:47.0561102Z     def invalid_comparison(left, right, op) -> npt.NDArray[np.bool_]:
2025-08-30T09:58:47.0561170Z         """
2025-08-30T09:58:47.0561338Z         If a comparison has mismatched types and is not necessarily meaningful,
2025-08-30T09:58:47.0561420Z         follow python3 conventions by:
2025-08-30T09:58:47.0561476Z     
2025-08-30T09:58:47.0561572Z             - returning all-False for equality
2025-08-30T09:58:47.0561660Z             - returning all-True for inequality
2025-08-30T09:58:47.0561742Z             - raising TypeError otherwise
2025-08-30T09:58:47.0561802Z     
2025-08-30T09:58:47.0561865Z         Parameters
2025-08-30T09:58:47.0561927Z         ----------
2025-08-30T09:58:47.0562002Z         left : array-like
2025-08-30T09:58:47.0562078Z         right : scalar, array-like
2025-08-30T09:58:47.0562159Z         op : operator.{eq, ne, lt, le, gt}
2025-08-30T09:58:47.0562218Z     
2025-08-30T09:58:47.0562281Z         Raises
2025-08-30T09:58:47.0562343Z         ------
2025-08-30T09:58:47.0562435Z         TypeError : on inequality comparisons
2025-08-30T09:58:47.0562499Z         """
2025-08-30T09:58:47.0562580Z         if op is operator.eq:
2025-08-30T09:58:47.0562688Z             res_values = np.zeros(left.shape, dtype=bool)
2025-08-30T09:58:47.0562768Z         elif op is operator.ne:
2025-08-30T09:58:47.0562868Z             res_values = np.ones(left.shape, dtype=bool)
2025-08-30T09:58:47.0562927Z         else:
2025-08-30T09:58:47.0563012Z             typ = type(right).__name__
2025-08-30T09:58:47.0563197Z >           raise TypeError(f"Invalid comparison between dtype={left.dtype} and {typ}")
2025-08-30T09:58:47.0563650Z E           TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.0563658Z 
2025-08-30T09:58:47.0563855Z .venv/lib/python3.11/site-packages/pandas/core/ops/invalid.py:40: TypeError
2025-08-30T09:58:47.0564004Z ________________________ test_biased_strategy[no_bias] _________________________
2025-08-30T09:58:47.0564008Z 
2025-08-30T09:58:47.0564170Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0564241Z key = 'date'
2025-08-30T09:58:47.0564246Z 
2025-08-30T09:58:47.0564318Z     def get_loc(self, key):
2025-08-30T09:58:47.0564375Z         """
2025-08-30T09:58:47.0564526Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0564587Z     
2025-08-30T09:58:47.0564650Z         Parameters
2025-08-30T09:58:47.0564711Z         ----------
2025-08-30T09:58:47.0564777Z         key : label
2025-08-30T09:58:47.0564832Z     
2025-08-30T09:58:47.0564889Z         Returns
2025-08-30T09:58:47.0564949Z         -------
2025-08-30T09:58:47.0565076Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0565131Z     
2025-08-30T09:58:47.0565189Z         Examples
2025-08-30T09:58:47.0565253Z         --------
2025-08-30T09:58:47.0565345Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0565421Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0565479Z         1
2025-08-30T09:58:47.0565676Z     
2025-08-30T09:58:47.0565769Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0565853Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0565923Z         slice(1, 3, None)
2025-08-30T09:58:47.0565977Z     
2025-08-30T09:58:47.0566075Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0566159Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0566246Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0566302Z         """
2025-08-30T09:58:47.0566393Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0566455Z         try:
2025-08-30T09:58:47.0566544Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0566615Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0566735Z 
2025-08-30T09:58:47.0566914Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0567015Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0567185Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0567242Z     ???
2025-08-30T09:58:47.0567402Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0567459Z     ???
2025-08-30T09:58:47.0567720Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0567783Z     ???
2025-08-30T09:58:47.0567881Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0567886Z 
2025-08-30T09:58:47.0567940Z >   ???
2025-08-30T09:58:47.0568010Z E   KeyError: 'date'
2025-08-30T09:58:47.0568015Z 
2025-08-30T09:58:47.0568133Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0568141Z 
2025-08-30T09:58:47.0568296Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0568301Z 
2025-08-30T09:58:47.0568897Z lookahead_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.0569062Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e48c19d0>
2025-08-30T09:58:47.0569222Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65def08810>
2025-08-30T09:58:47.0569292Z scenario = 'no_bias'
2025-08-30T09:58:47.0569297Z 
2025-08-30T09:58:47.0569433Z     @pytest.mark.parametrize("scenario", ["no_bias", "bias1"])
2025-08-30T09:58:47.0569611Z     def test_biased_strategy(lookahead_conf, mocker, caplog, scenario) -> None:
2025-08-30T09:58:47.0569690Z         patch_exchange(mocker)
2025-08-30T09:58:47.0569860Z         mocker.patch("freqtrade.data.history.get_timerange", get_timerange)
2025-08-30T09:58:47.0569970Z         mocker.patch(f"{EXMS}.get_fee", return_value=0.0)
2025-08-30T09:58:47.0570129Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.0570299Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.0570369Z         mocker.patch(
2025-08-30T09:58:47.0570553Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.0570667Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.0570725Z         )
2025-08-30T09:58:47.0570817Z         lookahead_conf["pairs"] = ["UNITTEST/USDT"]
2025-08-30T09:58:47.0570876Z     
2025-08-30T09:58:47.0570958Z         lookahead_conf["timeframe"] = "5m"
2025-08-30T09:58:47.0571058Z         lookahead_conf["timerange"] = "20180119-20180122"
2025-08-30T09:58:47.0571113Z     
2025-08-30T09:58:47.0571238Z         # Patch scenario Parameter to allow for easy selection
2025-08-30T09:58:47.0571308Z         mocker.patch(
2025-08-30T09:58:47.0571495Z             "freqtrade.strategy.hyper.HyperStrategyMixin.load_params_from_file",
2025-08-30T09:58:47.0571623Z             return_value={"params": {"buy": {"scenario": scenario}}},
2025-08-30T09:58:47.0571771Z         )
2025-08-30T09:58:47.0571825Z     
2025-08-30T09:58:47.0571970Z         strategy_obj = {"name": "strategy_test_v3_with_lookahead_bias"}
2025-08-30T09:58:47.0572105Z         instance = LookaheadAnalysis(lookahead_conf, strategy_obj)
2025-08-30T09:58:47.0572178Z >       instance.start()
2025-08-30T09:58:47.0572183Z 
2025-08-30T09:58:47.0572289Z tests/optimize/test_lookahead_analysis.py:474: 
2025-08-30T09:58:47.0572392Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0572518Z freqtrade/optimize/analysis/lookahead.py:204: in start
2025-08-30T09:58:47.0572580Z     super().start()
2025-08-30T09:58:47.0572714Z freqtrade/optimize/analysis/base_analysis.py:64: in start
2025-08-30T09:58:47.0572867Z     self.fill_full_varholder()
2025-08-30T09:58:47.0573048Z freqtrade/optimize/analysis/base_analysis.py:60: in fill_full_varholder
2025-08-30T09:58:47.0573209Z     self.prepare_data(self.full_varHolder, self.local_config["pairs"])
2025-08-30T09:58:47.0573471Z freqtrade/optimize/analysis/lookahead.py:127: in prepare_data
2025-08-30T09:58:47.0573629Z     varholder.data, varholder.timerange = backtesting.load_bt_data()
2025-08-30T09:58:47.0573709Z                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0573830Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.0573930Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.0574001Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0574144Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.0574209Z     timeranges = [
2025-08-30T09:58:47.0574341Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.0574504Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.0574561Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.0574749Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0574841Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0574905Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0575000Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0575005Z 
2025-08-30T09:58:47.0575164Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0575231Z key = 'date'
2025-08-30T09:58:47.0575235Z 
2025-08-30T09:58:47.0575306Z     def get_loc(self, key):
2025-08-30T09:58:47.0575363Z         """
2025-08-30T09:58:47.0575515Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0575570Z     
2025-08-30T09:58:47.0575631Z         Parameters
2025-08-30T09:58:47.0575696Z         ----------
2025-08-30T09:58:47.0575760Z         key : label
2025-08-30T09:58:47.0575814Z     
2025-08-30T09:58:47.0575876Z         Returns
2025-08-30T09:58:47.0575939Z         -------
2025-08-30T09:58:47.0576067Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0576121Z     
2025-08-30T09:58:47.0576184Z         Examples
2025-08-30T09:58:47.0576243Z         --------
2025-08-30T09:58:47.0576331Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0576408Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0576469Z         1
2025-08-30T09:58:47.0576524Z     
2025-08-30T09:58:47.0576617Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0576701Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0576768Z         slice(1, 3, None)
2025-08-30T09:58:47.0576821Z     
2025-08-30T09:58:47.0576920Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0577008Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0577092Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0577149Z         """
2025-08-30T09:58:47.0577244Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0577428Z         try:
2025-08-30T09:58:47.0577516Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0577589Z         except KeyError as err:
2025-08-30T09:58:47.0577681Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0577768Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0577877Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0577940Z             ):
2025-08-30T09:58:47.0578023Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0578100Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0578175Z E           KeyError: 'date'
2025-08-30T09:58:47.0578179Z 
2025-08-30T09:58:47.0578368Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0578616Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0578733Z 2025-08-30 09:54:14 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.0578865Z 2025-08-30 09:54:14 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0578941Z 2025-08-30 09:54:14 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0579034Z 2025-08-30 09:54:14 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0579159Z 2025-08-30 09:54:14 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.0579274Z 2025-08-30 09:54:14 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0579717Z 2025-08-30 09:54:14 DEBUG Searching for IStrategy strategy_test_v3_with_lookahead_bias in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias'
2025-08-30T09:58:47.0580052Z 2025-08-30 09:54:14 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias/__pycache__
2025-08-30T09:58:47.0581022Z 2025-08-30 09:54:14 INFO Using resolved strategy strategy_test_v3_with_lookahead_bias from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias/strategy_test_v3_with_lookahead_bias.py'...
2025-08-30T09:58:47.0581323Z 2025-08-30 09:54:14 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0581503Z 2025-08-30 09:54:14 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0581692Z 2025-08-30 09:54:14 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0581894Z 2025-08-30 09:54:14 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.0582088Z 2025-08-30 09:54:14 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.0582350Z 2025-08-30 09:54:14 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0582539Z 2025-08-30 09:54:14 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0582740Z 2025-08-30 09:54:14 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0582850Z 2025-08-30 09:54:14 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0582955Z 2025-08-30 09:54:14 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0583077Z 2025-08-30 09:54:14 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0583224Z 2025-08-30 09:54:14 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0583556Z 2025-08-30 09:54:14 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0583717Z 2025-08-30 09:54:14 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0583856Z 2025-08-30 09:54:14 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0584261Z 2025-08-30 09:54:14 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60}
2025-08-30T09:58:47.0584454Z 2025-08-30 09:54:14 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0584570Z 2025-08-30 09:54:14 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.0584850Z 2025-08-30 09:54:14 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.0584974Z 2025-08-30 09:54:14 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.0585146Z 2025-08-30 09:54:14 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0585263Z 2025-08-30 09:54:14 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0585385Z 2025-08-30 09:54:14 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0585530Z 2025-08-30 09:54:14 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0585648Z 2025-08-30 09:54:14 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0585786Z 2025-08-30 09:54:14 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0586046Z 2025-08-30 09:54:14 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0586195Z 2025-08-30 09:54:14 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0586342Z 2025-08-30 09:54:14 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0586453Z 2025-08-30 09:54:14 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0586557Z 2025-08-30 09:54:14 INFO Validating configuration ...
2025-08-30T09:58:47.0586916Z 2025-08-30 09:54:14 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.0587203Z 2025-08-30 09:54:14 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.0587641Z 2025-08-30 09:54:14 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.0587907Z 2025-08-30 09:54:14 DEBUG Pair UNITTEST/USDT is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.0588179Z 2025-08-30 09:54:14 WARNING Pair UNITTEST/USDT is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.0588284Z 2025-08-30 09:54:14 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.0588476Z 2025-08-30 09:54:14 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.0588601Z 2025-08-30 09:54:14 INFO Strategy Parameter: scenario = no_bias
2025-08-30T09:58:47.0588747Z 2025-08-30 09:54:14 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0588900Z 2025-08-30 09:54:14 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0589025Z 2025-08-30 09:54:14 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.0589169Z _________________________ test_biased_strategy[bias1] __________________________
2025-08-30T09:58:47.0589174Z 
2025-08-30T09:58:47.0589334Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0589397Z key = 'date'
2025-08-30T09:58:47.0589402Z 
2025-08-30T09:58:47.0589480Z     def get_loc(self, key):
2025-08-30T09:58:47.0589542Z         """
2025-08-30T09:58:47.0589694Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0589755Z     
2025-08-30T09:58:47.0589818Z         Parameters
2025-08-30T09:58:47.0589880Z         ----------
2025-08-30T09:58:47.0589945Z         key : label
2025-08-30T09:58:47.0590006Z     
2025-08-30T09:58:47.0590064Z         Returns
2025-08-30T09:58:47.0590122Z         -------
2025-08-30T09:58:47.0590249Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0590305Z     
2025-08-30T09:58:47.0590365Z         Examples
2025-08-30T09:58:47.0590423Z         --------
2025-08-30T09:58:47.0590517Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0590595Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0590652Z         1
2025-08-30T09:58:47.0590716Z     
2025-08-30T09:58:47.0590810Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0590888Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0591052Z         slice(1, 3, None)
2025-08-30T09:58:47.0591110Z     
2025-08-30T09:58:47.0591210Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0591292Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0591377Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0591433Z         """
2025-08-30T09:58:47.0591524Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0591586Z         try:
2025-08-30T09:58:47.0591675Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0591744Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0591748Z 
2025-08-30T09:58:47.0591916Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0592102Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0592270Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0592327Z     ???
2025-08-30T09:58:47.0592495Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0592550Z     ???
2025-08-30T09:58:47.0592810Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0592868Z     ???
2025-08-30T09:58:47.0592967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0592972Z 
2025-08-30T09:58:47.0593025Z >   ???
2025-08-30T09:58:47.0593093Z E   KeyError: 'date'
2025-08-30T09:58:47.0593102Z 
2025-08-30T09:58:47.0593219Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0593224Z 
2025-08-30T09:58:47.0593485Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0593491Z 
2025-08-30T09:58:47.0594091Z lookahead_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.0594251Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e435c210>
2025-08-30T09:58:47.0594408Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65dc545850>
2025-08-30T09:58:47.0594476Z scenario = 'bias1'
2025-08-30T09:58:47.0594481Z 
2025-08-30T09:58:47.0594621Z     @pytest.mark.parametrize("scenario", ["no_bias", "bias1"])
2025-08-30T09:58:47.0594797Z     def test_biased_strategy(lookahead_conf, mocker, caplog, scenario) -> None:
2025-08-30T09:58:47.0594872Z         patch_exchange(mocker)
2025-08-30T09:58:47.0595043Z         mocker.patch("freqtrade.data.history.get_timerange", get_timerange)
2025-08-30T09:58:47.0595151Z         mocker.patch(f"{EXMS}.get_fee", return_value=0.0)
2025-08-30T09:58:47.0595312Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.0595483Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.0595549Z         mocker.patch(
2025-08-30T09:58:47.0595736Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.0595841Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.0595897Z         )
2025-08-30T09:58:47.0595987Z         lookahead_conf["pairs"] = ["UNITTEST/USDT"]
2025-08-30T09:58:47.0596040Z     
2025-08-30T09:58:47.0596127Z         lookahead_conf["timeframe"] = "5m"
2025-08-30T09:58:47.0596228Z         lookahead_conf["timerange"] = "20180119-20180122"
2025-08-30T09:58:47.0596283Z     
2025-08-30T09:58:47.0596407Z         # Patch scenario Parameter to allow for easy selection
2025-08-30T09:58:47.0596472Z         mocker.patch(
2025-08-30T09:58:47.0596659Z             "freqtrade.strategy.hyper.HyperStrategyMixin.load_params_from_file",
2025-08-30T09:58:47.0596790Z             return_value={"params": {"buy": {"scenario": scenario}}},
2025-08-30T09:58:47.0596847Z         )
2025-08-30T09:58:47.0596901Z     
2025-08-30T09:58:47.0597039Z         strategy_obj = {"name": "strategy_test_v3_with_lookahead_bias"}
2025-08-30T09:58:47.0597303Z         instance = LookaheadAnalysis(lookahead_conf, strategy_obj)
2025-08-30T09:58:47.0597372Z >       instance.start()
2025-08-30T09:58:47.0597377Z 
2025-08-30T09:58:47.0597482Z tests/optimize/test_lookahead_analysis.py:474: 
2025-08-30T09:58:47.0597585Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0597708Z freqtrade/optimize/analysis/lookahead.py:204: in start
2025-08-30T09:58:47.0597770Z     super().start()
2025-08-30T09:58:47.0597904Z freqtrade/optimize/analysis/base_analysis.py:64: in start
2025-08-30T09:58:47.0597979Z     self.fill_full_varholder()
2025-08-30T09:58:47.0598155Z freqtrade/optimize/analysis/base_analysis.py:60: in fill_full_varholder
2025-08-30T09:58:47.0598418Z     self.prepare_data(self.full_varHolder, self.local_config["pairs"])
2025-08-30T09:58:47.0598572Z freqtrade/optimize/analysis/lookahead.py:127: in prepare_data
2025-08-30T09:58:47.0598728Z     varholder.data, varholder.timerange = backtesting.load_bt_data()
2025-08-30T09:58:47.0598811Z                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0598936Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.0599036Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.0599105Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0599249Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.0599312Z     timeranges = [
2025-08-30T09:58:47.0599444Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.0599601Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.0599660Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.0599851Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0599934Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0600004Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0600103Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0600108Z 
2025-08-30T09:58:47.0600269Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0600337Z key = 'date'
2025-08-30T09:58:47.0600342Z 
2025-08-30T09:58:47.0600413Z     def get_loc(self, key):
2025-08-30T09:58:47.0600472Z         """
2025-08-30T09:58:47.0600624Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0600679Z     
2025-08-30T09:58:47.0600740Z         Parameters
2025-08-30T09:58:47.0600801Z         ----------
2025-08-30T09:58:47.0600865Z         key : label
2025-08-30T09:58:47.0600919Z     
2025-08-30T09:58:47.0600976Z         Returns
2025-08-30T09:58:47.0601040Z         -------
2025-08-30T09:58:47.0601169Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0601224Z     
2025-08-30T09:58:47.0601284Z         Examples
2025-08-30T09:58:47.0601351Z         --------
2025-08-30T09:58:47.0601440Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0601518Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0601581Z         1
2025-08-30T09:58:47.0601636Z     
2025-08-30T09:58:47.0601728Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0601810Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0601882Z         slice(1, 3, None)
2025-08-30T09:58:47.0601937Z     
2025-08-30T09:58:47.0602035Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0602120Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0602200Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0602256Z         """
2025-08-30T09:58:47.0602350Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0602417Z         try:
2025-08-30T09:58:47.0602506Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0602580Z         except KeyError as err:
2025-08-30T09:58:47.0602763Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0602851Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0602962Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0603023Z             ):
2025-08-30T09:58:47.0603138Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0603279Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0603526Z E           KeyError: 'date'
2025-08-30T09:58:47.0603542Z 
2025-08-30T09:58:47.0603926Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0604123Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0604256Z 2025-08-30 09:54:15 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0604494Z 2025-08-30 09:54:15 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0604594Z 2025-08-30 09:54:15 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0604714Z 2025-08-30 09:54:15 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0605339Z 2025-08-30 09:54:15 INFO Using resolved strategy strategy_test_v3_with_lookahead_bias from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias/strategy_test_v3_with_lookahead_bias.py'...
2025-08-30T09:58:47.0605624Z 2025-08-30 09:54:15 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0605801Z 2025-08-30 09:54:15 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0605983Z 2025-08-30 09:54:15 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0606178Z 2025-08-30 09:54:15 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.0606368Z 2025-08-30 09:54:15 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.0606635Z 2025-08-30 09:54:15 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0606824Z 2025-08-30 09:54:15 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0607016Z 2025-08-30 09:54:15 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0607123Z 2025-08-30 09:54:15 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0607227Z 2025-08-30 09:54:15 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0607343Z 2025-08-30 09:54:15 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0607494Z 2025-08-30 09:54:15 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0607651Z 2025-08-30 09:54:15 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0607782Z 2025-08-30 09:54:15 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0607921Z 2025-08-30 09:54:15 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0608398Z 2025-08-30 09:54:15 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0608592Z 2025-08-30 09:54:15 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0608706Z 2025-08-30 09:54:15 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.0608820Z 2025-08-30 09:54:15 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.0608942Z 2025-08-30 09:54:15 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.0609108Z 2025-08-30 09:54:15 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0609227Z 2025-08-30 09:54:15 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0609351Z 2025-08-30 09:54:15 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0609492Z 2025-08-30 09:54:15 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0609613Z 2025-08-30 09:54:15 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0609870Z 2025-08-30 09:54:15 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0610021Z 2025-08-30 09:54:15 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0610167Z 2025-08-30 09:54:15 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0610310Z 2025-08-30 09:54:15 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0610418Z 2025-08-30 09:54:15 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0610520Z 2025-08-30 09:54:15 INFO Validating configuration ...
2025-08-30T09:58:47.0610973Z 2025-08-30 09:54:15 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.0611323Z 2025-08-30 09:54:15 WARNING Pair UNITTEST/USDT is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.0611501Z 2025-08-30 09:54:15 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.0611626Z 2025-08-30 09:54:15 INFO Strategy Parameter: scenario = bias1
2025-08-30T09:58:47.0611763Z 2025-08-30 09:54:15 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0611913Z 2025-08-30 09:54:15 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0612123Z ___ test_start_backtesting[PyTorchTransformerRegressor-2-freqai_test_strat] ____
2025-08-30T09:58:47.0612128Z 
2025-08-30T09:58:47.0612287Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0612347Z key = 'date'
2025-08-30T09:58:47.0612352Z 
2025-08-30T09:58:47.0612434Z     def get_loc(self, key):
2025-08-30T09:58:47.0612492Z         """
2025-08-30T09:58:47.0612643Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0612703Z     
2025-08-30T09:58:47.0612766Z         Parameters
2025-08-30T09:58:47.0612827Z         ----------
2025-08-30T09:58:47.0612892Z         key : label
2025-08-30T09:58:47.0612953Z     
2025-08-30T09:58:47.0613012Z         Returns
2025-08-30T09:58:47.0613073Z         -------
2025-08-30T09:58:47.0613199Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0613255Z     
2025-08-30T09:58:47.0613314Z         Examples
2025-08-30T09:58:47.0613554Z         --------
2025-08-30T09:58:47.0613685Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0613764Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0613822Z         1
2025-08-30T09:58:47.0613880Z     
2025-08-30T09:58:47.0613973Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0614051Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0614118Z         slice(1, 3, None)
2025-08-30T09:58:47.0614177Z     
2025-08-30T09:58:47.0614282Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0614366Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0614453Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0614515Z         """
2025-08-30T09:58:47.0614608Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0614671Z         try:
2025-08-30T09:58:47.0614760Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0614830Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0614835Z 
2025-08-30T09:58:47.0615006Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0615113Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0615279Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0615337Z     ???
2025-08-30T09:58:47.0615500Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0615559Z     ???
2025-08-30T09:58:47.0615823Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0616020Z     ???
2025-08-30T09:58:47.0616121Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0616126Z 
2025-08-30T09:58:47.0616181Z >   ???
2025-08-30T09:58:47.0616248Z E   KeyError: 'date'
2025-08-30T09:58:47.0616257Z 
2025-08-30T09:58:47.0616375Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0616380Z 
2025-08-30T09:58:47.0616536Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0616540Z 
2025-08-30T09:58:47.0616700Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc614cd0>
2025-08-30T09:58:47.0617194Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config_examples/config_freqai.example.json')], 'conv_width': 10, ...}
2025-08-30T09:58:47.0617414Z model = 'PyTorchTransformerRegressor', num_files = 2
2025-08-30T09:58:47.0617489Z strat = 'freqai_test_strat'
2025-08-30T09:58:47.0617654Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8f98390>
2025-08-30T09:58:47.0617664Z 
2025-08-30T09:58:47.0617746Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0617822Z         "model, num_files, strat",
2025-08-30T09:58:47.0617882Z         [
2025-08-30T09:58:47.0617988Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0618086Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0618187Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0618294Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0618423Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0618541Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.0618657Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0618769Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0618878Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0619010Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0619067Z         ],
2025-08-30T09:58:47.0619122Z     )
2025-08-30T09:58:47.0619324Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.0619396Z         can_run_model(model)
2025-08-30T09:58:47.0619461Z         test_tb = True
2025-08-30T09:58:47.0619545Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.0619613Z             test_tb = False
2025-08-30T09:58:47.0619668Z     
2025-08-30T09:58:47.0619817Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.0619914Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.0619969Z     
2025-08-30T09:58:47.0620042Z         Trade.use_db = False
2025-08-30T09:58:47.0620103Z     
2025-08-30T09:58:47.0620196Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0620310Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.0620402Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.0620462Z     
2025-08-30T09:58:47.0620550Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.0620643Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.0620702Z     
2025-08-30T09:58:47.0620775Z         if "test_4ac" in model:
2025-08-30T09:58:47.0620993Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.0621052Z     
2025-08-30T09:58:47.0621127Z         if "PyTorch" in model:
2025-08-30T09:58:47.0621272Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.0621449Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.0621533Z             if "Transformer" in model:
2025-08-30T09:58:47.0621674Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.0621871Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.0621931Z     
2025-08-30T09:58:47.0622074Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.0622162Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.0622223Z         )
2025-08-30T09:58:47.0622281Z     
2025-08-30T09:58:47.0622416Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0622529Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0622646Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0622761Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0622837Z         freqai = strategy.freqai
2025-08-30T09:58:47.0623001Z         freqai.live = False
2025-08-30T09:58:47.0623096Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.0623190Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0623328Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0623587Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0623727Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0623926Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.0624019Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0624024Z 
2025-08-30T09:58:47.0624117Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.0624218Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0624392Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0624483Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0624608Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.0624791Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.0624855Z                  ^^^^^^^^^^
2025-08-30T09:58:47.0625041Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0625126Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0625192Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0625290Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0625295Z 
2025-08-30T09:58:47.0625452Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0625539Z key = 'date'
2025-08-30T09:58:47.0625543Z 
2025-08-30T09:58:47.0625635Z     def get_loc(self, key):
2025-08-30T09:58:47.0625806Z         """
2025-08-30T09:58:47.0625963Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0626019Z     
2025-08-30T09:58:47.0626082Z         Parameters
2025-08-30T09:58:47.0626152Z         ----------
2025-08-30T09:58:47.0626213Z         key : label
2025-08-30T09:58:47.0626268Z     
2025-08-30T09:58:47.0626326Z         Returns
2025-08-30T09:58:47.0626389Z         -------
2025-08-30T09:58:47.0626510Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0626565Z     
2025-08-30T09:58:47.0626632Z         Examples
2025-08-30T09:58:47.0626690Z         --------
2025-08-30T09:58:47.0626777Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0626893Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0627006Z         1
2025-08-30T09:58:47.0627110Z     
2025-08-30T09:58:47.0627274Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0627415Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0627543Z         slice(1, 3, None)
2025-08-30T09:58:47.0627613Z     
2025-08-30T09:58:47.0627717Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0627804Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0628025Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0628081Z         """
2025-08-30T09:58:47.0628175Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0628233Z         try:
2025-08-30T09:58:47.0628322Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0628396Z         except KeyError as err:
2025-08-30T09:58:47.0628488Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0628577Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0628688Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0628750Z             ):
2025-08-30T09:58:47.0628835Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0629042Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0629122Z E           KeyError: 'date'
2025-08-30T09:58:47.0629127Z 
2025-08-30T09:58:47.0629318Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0629462Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0629966Z 2025-08-30 09:54:17 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0630387Z 2025-08-30 09:54:17 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.0630485Z 2025-08-30 09:54:17 INFO Found no parameter file.
2025-08-30T09:58:47.0630774Z 2025-08-30 09:54:17 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0630953Z 2025-08-30 09:54:17 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0631131Z 2025-08-30 09:54:17 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0631330Z 2025-08-30 09:54:17 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0631524Z 2025-08-30 09:54:17 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0631788Z 2025-08-30 09:54:17 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0631979Z 2025-08-30 09:54:17 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0632171Z 2025-08-30 09:54:17 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0632276Z 2025-08-30 09:54:17 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0632381Z 2025-08-30 09:54:17 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0632510Z 2025-08-30 09:54:17 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0632668Z 2025-08-30 09:54:17 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0632823Z 2025-08-30 09:54:17 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0632960Z 2025-08-30 09:54:17 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0633098Z 2025-08-30 09:54:17 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0633691Z 2025-08-30 09:54:17 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0633887Z 2025-08-30 09:54:17 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0634001Z 2025-08-30 09:54:17 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0634110Z 2025-08-30 09:54:17 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0634245Z 2025-08-30 09:54:17 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0634412Z 2025-08-30 09:54:17 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0634528Z 2025-08-30 09:54:17 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0634781Z 2025-08-30 09:54:17 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0634927Z 2025-08-30 09:54:17 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0635044Z 2025-08-30 09:54:17 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0635181Z 2025-08-30 09:54:17 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0635334Z 2025-08-30 09:54:17 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0635477Z 2025-08-30 09:54:17 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0635617Z 2025-08-30 09:54:17 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0635731Z 2025-08-30 09:54:17 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0636121Z 2025-08-30 09:54:17 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0636442Z 2025-08-30 09:54:17 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_PyTorch0/freqaimodels" does not exist.
2025-08-30T09:58:47.0637048Z 2025-08-30 09:54:18 INFO Using resolved freqaimodel PyTorchTransformerRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/PyTorchTransformerRegressor.py'...
2025-08-30T09:58:47.0637196Z 2025-08-30 09:54:18 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0637358Z 2025-08-30 09:54:18 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0637554Z 2025-08-30 09:54:18 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0637802Z 2025-08-30 09:54:18 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0637941Z 2025-08-30 09:54:18 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0638082Z 2025-08-30 09:54:18 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0638243Z 2025-08-30 09:54:18 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0638392Z 2025-08-30 09:54:18 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0638547Z 2025-08-30 09:54:18 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0638673Z 2025-08-30 09:54:18 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0638754Z 2025-08-30 09:54:18 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0638847Z 2025-08-30 09:54:18 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0638969Z 2025-08-30 09:54:18 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0639124Z 2025-08-30 09:54:18 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0639285Z 2025-08-30 09:54:18 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0639440Z 2025-08-30 09:54:18 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0639590Z 2025-08-30 09:54:18 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0639796Z ____ test_start_backtesting[PyTorchMLPClassifier-2-freqai_test_classifier] _____
2025-08-30T09:58:47.0639802Z 
2025-08-30T09:58:47.0639961Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0640024Z key = 'date'
2025-08-30T09:58:47.0640028Z 
2025-08-30T09:58:47.0640101Z     def get_loc(self, key):
2025-08-30T09:58:47.0640167Z         """
2025-08-30T09:58:47.0640319Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0640376Z     
2025-08-30T09:58:47.0640445Z         Parameters
2025-08-30T09:58:47.0640506Z         ----------
2025-08-30T09:58:47.0640568Z         key : label
2025-08-30T09:58:47.0640623Z     
2025-08-30T09:58:47.0640690Z         Returns
2025-08-30T09:58:47.0640750Z         -------
2025-08-30T09:58:47.0640871Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0641028Z     
2025-08-30T09:58:47.0641088Z         Examples
2025-08-30T09:58:47.0641148Z         --------
2025-08-30T09:58:47.0641237Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0641319Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0641376Z         1
2025-08-30T09:58:47.0641432Z     
2025-08-30T09:58:47.0641531Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0641610Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0641677Z         slice(1, 3, None)
2025-08-30T09:58:47.0641732Z     
2025-08-30T09:58:47.0641836Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0641919Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0642000Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0642063Z         """
2025-08-30T09:58:47.0642237Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0642298Z         try:
2025-08-30T09:58:47.0642388Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0642469Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0642473Z 
2025-08-30T09:58:47.0642644Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0642746Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0642919Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0642982Z     ???
2025-08-30T09:58:47.0643140Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0643201Z     ???
2025-08-30T09:58:47.0643569Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0643625Z     ???
2025-08-30T09:58:47.0643735Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0643740Z 
2025-08-30T09:58:47.0643796Z >   ???
2025-08-30T09:58:47.0643863Z E   KeyError: 'date'
2025-08-30T09:58:47.0643873Z 
2025-08-30T09:58:47.0643992Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0644002Z 
2025-08-30T09:58:47.0644157Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0644162Z 
2025-08-30T09:58:47.0644316Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65b4e4bcd0>
2025-08-30T09:58:47.0645003Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0645192Z model = 'PyTorchMLPClassifier', num_files = 2, strat = 'freqai_test_classifier'
2025-08-30T09:58:47.0645353Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e467c350>
2025-08-30T09:58:47.0645361Z 
2025-08-30T09:58:47.0645450Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0645529Z         "model, num_files, strat",
2025-08-30T09:58:47.0645587Z         [
2025-08-30T09:58:47.0645701Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0645806Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0645903Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0646012Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0646150Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0646265Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.0646377Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0646496Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0646607Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0646734Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0646793Z         ],
2025-08-30T09:58:47.0646854Z     )
2025-08-30T09:58:47.0647180Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.0647252Z         can_run_model(model)
2025-08-30T09:58:47.0647324Z         test_tb = True
2025-08-30T09:58:47.0647401Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.0647470Z             test_tb = False
2025-08-30T09:58:47.0647527Z     
2025-08-30T09:58:47.0647682Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.0647774Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.0647831Z     
2025-08-30T09:58:47.0647908Z         Trade.use_db = False
2025-08-30T09:58:47.0647964Z     
2025-08-30T09:58:47.0648060Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0648286Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.0648380Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.0648437Z     
2025-08-30T09:58:47.0648524Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.0648631Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.0648687Z     
2025-08-30T09:58:47.0648759Z         if "test_4ac" in model:
2025-08-30T09:58:47.0648982Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.0649038Z     
2025-08-30T09:58:47.0649113Z         if "PyTorch" in model:
2025-08-30T09:58:47.0649260Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.0649437Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.0649515Z             if "Transformer" in model:
2025-08-30T09:58:47.0649654Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.0649757Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.0649813Z     
2025-08-30T09:58:47.0650072Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.0650241Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.0650342Z         )
2025-08-30T09:58:47.0650440Z     
2025-08-30T09:58:47.0650624Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0650747Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0650863Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0650978Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0651060Z         freqai = strategy.freqai
2025-08-30T09:58:47.0651133Z         freqai.live = False
2025-08-30T09:58:47.0651224Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.0651324Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0651465Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0651593Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0651732Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0651939Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.0652027Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0652033Z 
2025-08-30T09:58:47.0652127Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.0652236Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0652402Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0652493Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0652629Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.0652808Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.0652872Z                  ^^^^^^^^^^
2025-08-30T09:58:47.0653066Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0653268Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0653334Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0653640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0653648Z 
2025-08-30T09:58:47.0653813Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0653874Z key = 'date'
2025-08-30T09:58:47.0653879Z 
2025-08-30T09:58:47.0653955Z     def get_loc(self, key):
2025-08-30T09:58:47.0654013Z         """
2025-08-30T09:58:47.0654165Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0654220Z     
2025-08-30T09:58:47.0654288Z         Parameters
2025-08-30T09:58:47.0654351Z         ----------
2025-08-30T09:58:47.0654555Z         key : label
2025-08-30T09:58:47.0654619Z     
2025-08-30T09:58:47.0654678Z         Returns
2025-08-30T09:58:47.0654738Z         -------
2025-08-30T09:58:47.0654867Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0654927Z     
2025-08-30T09:58:47.0654988Z         Examples
2025-08-30T09:58:47.0655047Z         --------
2025-08-30T09:58:47.0655142Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0655243Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0655312Z         1
2025-08-30T09:58:47.0655368Z     
2025-08-30T09:58:47.0655468Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0655549Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0655617Z         slice(1, 3, None)
2025-08-30T09:58:47.0655680Z     
2025-08-30T09:58:47.0655780Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0655864Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0655952Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0656014Z         """
2025-08-30T09:58:47.0656109Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0656170Z         try:
2025-08-30T09:58:47.0656265Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0656340Z         except KeyError as err:
2025-08-30T09:58:47.0656429Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0656520Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0656637Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0656693Z             ):
2025-08-30T09:58:47.0656778Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0656861Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0656932Z E           KeyError: 'date'
2025-08-30T09:58:47.0656937Z 
2025-08-30T09:58:47.0657128Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0657275Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0657778Z 2025-08-30 09:54:18 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0658243Z 2025-08-30 09:54:18 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.0658346Z 2025-08-30 09:54:18 INFO Found no parameter file.
2025-08-30T09:58:47.0658637Z 2025-08-30 09:54:18 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0658814Z 2025-08-30 09:54:18 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0658997Z 2025-08-30 09:54:18 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0659198Z 2025-08-30 09:54:18 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0659388Z 2025-08-30 09:54:18 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0659782Z 2025-08-30 09:54:18 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0659971Z 2025-08-30 09:54:18 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0660171Z 2025-08-30 09:54:18 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0660282Z 2025-08-30 09:54:18 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0660390Z 2025-08-30 09:54:18 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0660506Z 2025-08-30 09:54:18 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0660656Z 2025-08-30 09:54:18 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0660819Z 2025-08-30 09:54:18 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0661098Z 2025-08-30 09:54:18 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0661255Z 2025-08-30 09:54:18 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0661741Z 2025-08-30 09:54:18 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0661931Z 2025-08-30 09:54:18 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0662046Z 2025-08-30 09:54:18 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0662161Z 2025-08-30 09:54:18 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0662288Z 2025-08-30 09:54:18 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0662461Z 2025-08-30 09:54:18 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0662589Z 2025-08-30 09:54:18 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0662711Z 2025-08-30 09:54:18 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0662856Z 2025-08-30 09:54:18 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0662985Z 2025-08-30 09:54:18 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0663124Z 2025-08-30 09:54:18 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0663278Z 2025-08-30 09:54:18 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0663625Z 2025-08-30 09:54:18 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0663779Z 2025-08-30 09:54:18 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0663893Z 2025-08-30 09:54:18 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0664180Z 2025-08-30 09:54:18 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0664504Z 2025-08-30 09:54:18 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_PyTorch1/freqaimodels" does not exist.
2025-08-30T09:58:47.0665039Z 2025-08-30 09:54:18 INFO Using resolved freqaimodel PyTorchMLPClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/PyTorchMLPClassifier.py'...
2025-08-30T09:58:47.0665190Z 2025-08-30 09:54:18 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0665358Z 2025-08-30 09:54:18 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0665550Z 2025-08-30 09:54:18 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0665797Z 2025-08-30 09:54:18 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0665938Z 2025-08-30 09:54:18 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0666077Z 2025-08-30 09:54:18 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0666241Z 2025-08-30 09:54:18 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0666398Z 2025-08-30 09:54:18 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0666549Z 2025-08-30 09:54:18 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0666808Z 2025-08-30 09:54:18 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0666893Z 2025-08-30 09:54:18 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0666988Z 2025-08-30 09:54:18 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0667106Z 2025-08-30 09:54:18 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0667269Z 2025-08-30 09:54:18 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0667427Z 2025-08-30 09:54:18 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0667579Z 2025-08-30 09:54:18 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0667833Z 2025-08-30 09:54:18 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0668032Z _____ test_start_backtesting[ReinforcementLearner-3-freqai_rl_test_strat] ______
2025-08-30T09:58:47.0668038Z 
2025-08-30T09:58:47.0668199Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0668260Z key = 'date'
2025-08-30T09:58:47.0668264Z 
2025-08-30T09:58:47.0668342Z     def get_loc(self, key):
2025-08-30T09:58:47.0668400Z         """
2025-08-30T09:58:47.0668549Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0668610Z     
2025-08-30T09:58:47.0668673Z         Parameters
2025-08-30T09:58:47.0668735Z         ----------
2025-08-30T09:58:47.0668796Z         key : label
2025-08-30T09:58:47.0668857Z     
2025-08-30T09:58:47.0668917Z         Returns
2025-08-30T09:58:47.0668979Z         -------
2025-08-30T09:58:47.0669106Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0669162Z     
2025-08-30T09:58:47.0669222Z         Examples
2025-08-30T09:58:47.0669287Z         --------
2025-08-30T09:58:47.0669381Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0669458Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0669521Z         1
2025-08-30T09:58:47.0669580Z     
2025-08-30T09:58:47.0669673Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0669754Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0669825Z         slice(1, 3, None)
2025-08-30T09:58:47.0669880Z     
2025-08-30T09:58:47.0669979Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0670062Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0670148Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0670204Z         """
2025-08-30T09:58:47.0670296Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0670362Z         try:
2025-08-30T09:58:47.0670463Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0670539Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0670544Z 
2025-08-30T09:58:47.0670715Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0670823Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0670990Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0671048Z     ???
2025-08-30T09:58:47.0671210Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0671270Z     ???
2025-08-30T09:58:47.0671530Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0671590Z     ???
2025-08-30T09:58:47.0671689Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0671693Z 
2025-08-30T09:58:47.0671748Z >   ???
2025-08-30T09:58:47.0671819Z E   KeyError: 'date'
2025-08-30T09:58:47.0671824Z 
2025-08-30T09:58:47.0671945Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0671950Z 
2025-08-30T09:58:47.0672105Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0672198Z 
2025-08-30T09:58:47.0672362Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8c1c950>
2025-08-30T09:58:47.0673047Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0673227Z model = 'ReinforcementLearner', num_files = 3, strat = 'freqai_rl_test_strat'
2025-08-30T09:58:47.0673497Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e4738090>
2025-08-30T09:58:47.0673502Z 
2025-08-30T09:58:47.0673586Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0673663Z         "model, num_files, strat",
2025-08-30T09:58:47.0673724Z         [
2025-08-30T09:58:47.0674063Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0674248Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0674432Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0674595Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0674734Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.0674853Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.0674971Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0675084Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0675193Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0675322Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.0675379Z         ],
2025-08-30T09:58:47.0675436Z     )
2025-08-30T09:58:47.0675638Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.0675717Z         can_run_model(model)
2025-08-30T09:58:47.0675783Z         test_tb = True
2025-08-30T09:58:47.0675861Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.0675938Z             test_tb = False
2025-08-30T09:58:47.0675994Z     
2025-08-30T09:58:47.0676148Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.0676245Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.0676302Z     
2025-08-30T09:58:47.0676373Z         Trade.use_db = False
2025-08-30T09:58:47.0676428Z     
2025-08-30T09:58:47.0676527Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0676644Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.0676732Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.0676792Z     
2025-08-30T09:58:47.0676880Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.0676976Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.0677032Z     
2025-08-30T09:58:47.0677108Z         if "test_4ac" in model:
2025-08-30T09:58:47.0677327Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.0677386Z     
2025-08-30T09:58:47.0677465Z         if "PyTorch" in model:
2025-08-30T09:58:47.0677613Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.0677787Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.0677869Z             if "Transformer" in model:
2025-08-30T09:58:47.0678008Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.0678100Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.0678155Z     
2025-08-30T09:58:47.0678308Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.0678399Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.0678457Z         )
2025-08-30T09:58:47.0678516Z     
2025-08-30T09:58:47.0678651Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0678913Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0679024Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0679142Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0679218Z         freqai = strategy.freqai
2025-08-30T09:58:47.0679288Z         freqai.live = False
2025-08-30T09:58:47.0679382Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.0679477Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0679607Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0679740Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0679877Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0680193Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.0680291Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0680301Z 
2025-08-30T09:58:47.0680395Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.0680499Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0680668Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0680759Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0680886Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.0681057Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.0681129Z                  ^^^^^^^^^^
2025-08-30T09:58:47.0681315Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0681402Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0681473Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0681572Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0681581Z 
2025-08-30T09:58:47.0681740Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0681805Z key = 'date'
2025-08-30T09:58:47.0681810Z 
2025-08-30T09:58:47.0681881Z     def get_loc(self, key):
2025-08-30T09:58:47.0681938Z         """
2025-08-30T09:58:47.0682089Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0682151Z     
2025-08-30T09:58:47.0682213Z         Parameters
2025-08-30T09:58:47.0682277Z         ----------
2025-08-30T09:58:47.0682343Z         key : label
2025-08-30T09:58:47.0682398Z     
2025-08-30T09:58:47.0682456Z         Returns
2025-08-30T09:58:47.0682515Z         -------
2025-08-30T09:58:47.0682651Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0682707Z     
2025-08-30T09:58:47.0682767Z         Examples
2025-08-30T09:58:47.0682832Z         --------
2025-08-30T09:58:47.0682921Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0683004Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0683065Z         1
2025-08-30T09:58:47.0683121Z     
2025-08-30T09:58:47.0683215Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0683295Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0683480Z         slice(1, 3, None)
2025-08-30T09:58:47.0683537Z     
2025-08-30T09:58:47.0683637Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0683724Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0683804Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0683860Z         """
2025-08-30T09:58:47.0683951Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0684017Z         try:
2025-08-30T09:58:47.0684112Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0684186Z         except KeyError as err:
2025-08-30T09:58:47.0684279Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0684501Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0684612Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0684670Z             ):
2025-08-30T09:58:47.0684760Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0684838Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0684910Z E           KeyError: 'date'
2025-08-30T09:58:47.0684914Z 
2025-08-30T09:58:47.0685113Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0685251Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0685861Z 2025-08-30 09:54:19 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0686305Z 2025-08-30 09:54:19 INFO Using resolved strategy freqai_rl_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_rl_test_strat.py'...
2025-08-30T09:58:47.0686406Z 2025-08-30 09:54:19 INFO Found no parameter file.
2025-08-30T09:58:47.0686691Z 2025-08-30 09:54:19 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0686878Z 2025-08-30 09:54:19 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0687057Z 2025-08-30 09:54:19 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0687254Z 2025-08-30 09:54:19 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0687448Z 2025-08-30 09:54:19 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0687715Z 2025-08-30 09:54:19 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0687903Z 2025-08-30 09:54:19 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0688106Z 2025-08-30 09:54:19 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0688211Z 2025-08-30 09:54:19 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0688319Z 2025-08-30 09:54:19 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0688441Z 2025-08-30 09:54:19 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0688589Z 2025-08-30 09:54:19 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0688744Z 2025-08-30 09:54:19 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0688873Z 2025-08-30 09:54:19 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0689017Z 2025-08-30 09:54:19 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0689497Z 2025-08-30 09:54:19 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0689692Z 2025-08-30 09:54:19 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0689812Z 2025-08-30 09:54:19 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0689922Z 2025-08-30 09:54:19 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0690050Z 2025-08-30 09:54:19 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0690221Z 2025-08-30 09:54:19 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0690339Z 2025-08-30 09:54:19 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0690461Z 2025-08-30 09:54:19 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0690607Z 2025-08-30 09:54:19 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0690733Z 2025-08-30 09:54:19 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0690874Z 2025-08-30 09:54:19 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0691031Z 2025-08-30 09:54:19 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0691269Z 2025-08-30 09:54:19 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0691409Z 2025-08-30 09:54:19 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0691525Z 2025-08-30 09:54:19 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0691809Z 2025-08-30 09:54:19 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0692126Z 2025-08-30 09:54:19 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_Reinfor0/freqaimodels" does not exist.
2025-08-30T09:58:47.0692668Z 2025-08-30 09:54:19 INFO Failed to extract font properties from /usr/share/fonts/truetype/noto/NotoColorEmoji.ttf: Can not load face (unknown file format; error code 0x2)
2025-08-30T09:58:47.0692768Z 2025-08-30 09:54:21 INFO generated new fontManager
2025-08-30T09:58:47.0693296Z 2025-08-30 09:54:21 INFO Using resolved freqaimodel ReinforcementLearner from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/ReinforcementLearner.py'...
2025-08-30T09:58:47.0693671Z 2025-08-30 09:54:21 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0693847Z 2025-08-30 09:54:21 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0694044Z 2025-08-30 09:54:21 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0694296Z 2025-08-30 09:54:21 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0694453Z 2025-08-30 09:54:21 WARNING User tried to use SVM with RL. Deactivating SVM.
2025-08-30T09:58:47.0694647Z 2025-08-30 09:54:21 WARNING User tried to use DI_threshold with RL. Deactivating DI_threshold.
2025-08-30T09:58:47.0694789Z 2025-08-30 09:54:21 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0694931Z 2025-08-30 09:54:21 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0695088Z 2025-08-30 09:54:21 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0695214Z 2025-08-30 09:54:21 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0695296Z 2025-08-30 09:54:21 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0695391Z 2025-08-30 09:54:21 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0695511Z 2025-08-30 09:54:21 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0695673Z 2025-08-30 09:54:21 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0695831Z 2025-08-30 09:54:21 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0695982Z 2025-08-30 09:54:21 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0696140Z 2025-08-30 09:54:21 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0696437Z _ test_extract_data_and_train_model_MultiTargets[CatboostRegressorMultiTarget-freqai_test_multimodel_strat] _
2025-08-30T09:58:47.0696445Z 
2025-08-30T09:58:47.0696602Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0696671Z key = 'date'
2025-08-30T09:58:47.0696675Z 
2025-08-30T09:58:47.0696749Z     def get_loc(self, key):
2025-08-30T09:58:47.0696806Z         """
2025-08-30T09:58:47.0696956Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0697017Z     
2025-08-30T09:58:47.0697080Z         Parameters
2025-08-30T09:58:47.0697141Z         ----------
2025-08-30T09:58:47.0697207Z         key : label
2025-08-30T09:58:47.0697262Z     
2025-08-30T09:58:47.0697320Z         Returns
2025-08-30T09:58:47.0697379Z         -------
2025-08-30T09:58:47.0697505Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0697565Z     
2025-08-30T09:58:47.0697626Z         Examples
2025-08-30T09:58:47.0697691Z         --------
2025-08-30T09:58:47.0697780Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0697992Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0698048Z         1
2025-08-30T09:58:47.0698107Z     
2025-08-30T09:58:47.0698201Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0698297Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0698426Z         slice(1, 3, None)
2025-08-30T09:58:47.0698528Z     
2025-08-30T09:58:47.0698709Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0698856Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0698989Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0699047Z         """
2025-08-30T09:58:47.0699142Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0699207Z         try:
2025-08-30T09:58:47.0699439Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0699518Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0699523Z 
2025-08-30T09:58:47.0699705Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0699812Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0699978Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0700037Z     ???
2025-08-30T09:58:47.0700201Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0700258Z     ???
2025-08-30T09:58:47.0700522Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0700583Z     ???
2025-08-30T09:58:47.0700684Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0700689Z 
2025-08-30T09:58:47.0700745Z >   ???
2025-08-30T09:58:47.0700817Z E   KeyError: 'date'
2025-08-30T09:58:47.0700827Z 
2025-08-30T09:58:47.0700945Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0700950Z 
2025-08-30T09:58:47.0701108Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0701116Z 
2025-08-30T09:58:47.0701276Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c83778d0>
2025-08-30T09:58:47.0701961Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0702160Z model = 'CatboostRegressorMultiTarget', strat = 'freqai_test_multimodel_strat'
2025-08-30T09:58:47.0702165Z 
2025-08-30T09:58:47.0702253Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0702320Z         "model, strat",
2025-08-30T09:58:47.0702376Z         [
2025-08-30T09:58:47.0702552Z             ("LightGBMRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0702711Z             ("XGBoostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0702871Z             ("CatboostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0703082Z             ("LightGBMClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.0703279Z             ("CatboostClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.0703337Z         ],
2025-08-30T09:58:47.0703506Z     )
2025-08-30T09:58:47.0703712Z     def test_extract_data_and_train_model_MultiTargets(mocker, freqai_conf, model, strat):
2025-08-30T09:58:47.0703786Z         can_run_model(model)
2025-08-30T09:58:47.0703842Z     
2025-08-30T09:58:47.0703967Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0704059Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.0704150Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0704294Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0704407Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0704642Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0704757Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0704838Z         freqai = strategy.freqai
2025-08-30T09:58:47.0704908Z         freqai.live = True
2025-08-30T09:58:47.0705002Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0705079Z         freqai.dk.live = True
2025-08-30T09:58:47.0705212Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0705340Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0705400Z     
2025-08-30T09:58:47.0705485Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0705540Z     
2025-08-30T09:58:47.0705798Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0705945Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0706030Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0706090Z     
2025-08-30T09:58:47.0706178Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0706326Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0706383Z         )
2025-08-30T09:58:47.0706388Z 
2025-08-30T09:58:47.0706480Z tests/freqai/test_freqai_interface.py:169: 
2025-08-30T09:58:47.0706589Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0706773Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0706950Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0707128Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0707222Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0707349Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0707453Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0707521Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0707705Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0707795Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0707860Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0707959Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0707964Z 
2025-08-30T09:58:47.0708130Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0708190Z key = 'date'
2025-08-30T09:58:47.0708195Z 
2025-08-30T09:58:47.0708267Z     def get_loc(self, key):
2025-08-30T09:58:47.0708327Z         """
2025-08-30T09:58:47.0708480Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0708539Z     
2025-08-30T09:58:47.0708602Z         Parameters
2025-08-30T09:58:47.0708668Z         ----------
2025-08-30T09:58:47.0708728Z         key : label
2025-08-30T09:58:47.0708786Z     
2025-08-30T09:58:47.0708849Z         Returns
2025-08-30T09:58:47.0708914Z         -------
2025-08-30T09:58:47.0709039Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0709095Z     
2025-08-30T09:58:47.0709160Z         Examples
2025-08-30T09:58:47.0709219Z         --------
2025-08-30T09:58:47.0709311Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0709388Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0709450Z         1
2025-08-30T09:58:47.0709505Z     
2025-08-30T09:58:47.0709600Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0709683Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0709750Z         slice(1, 3, None)
2025-08-30T09:58:47.0709805Z     
2025-08-30T09:58:47.0709908Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0709997Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0710084Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0717426Z         """
2025-08-30T09:58:47.0717647Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0717764Z         try:
2025-08-30T09:58:47.0717920Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0718062Z         except KeyError as err:
2025-08-30T09:58:47.0718173Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0718272Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0718392Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0718460Z             ):
2025-08-30T09:58:47.0718552Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0718633Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0718706Z E           KeyError: 'date'
2025-08-30T09:58:47.0718718Z 
2025-08-30T09:58:47.0719103Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0719262Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0719778Z 2025-08-30 09:54:22 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0720294Z 2025-08-30 09:54:22 INFO Using resolved strategy freqai_test_multimodel_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_multimodel_strat.py'...
2025-08-30T09:58:47.0720394Z 2025-08-30 09:54:22 INFO Found no parameter file.
2025-08-30T09:58:47.0720683Z 2025-08-30 09:54:22 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0720868Z 2025-08-30 09:54:22 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0721054Z 2025-08-30 09:54:22 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0721297Z 2025-08-30 09:54:22 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0721670Z 2025-08-30 09:54:22 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0722015Z 2025-08-30 09:54:22 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0722208Z 2025-08-30 09:54:22 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0722411Z 2025-08-30 09:54:22 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0722523Z 2025-08-30 09:54:22 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0722637Z 2025-08-30 09:54:22 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0722765Z 2025-08-30 09:54:22 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0722923Z 2025-08-30 09:54:22 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0723082Z 2025-08-30 09:54:22 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0723219Z 2025-08-30 09:54:22 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0723479Z 2025-08-30 09:54:22 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0723961Z 2025-08-30 09:54:22 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0724158Z 2025-08-30 09:54:22 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0724274Z 2025-08-30 09:54:22 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0724384Z 2025-08-30 09:54:22 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0724519Z 2025-08-30 09:54:22 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0724690Z 2025-08-30 09:54:22 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0724813Z 2025-08-30 09:54:22 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0724968Z 2025-08-30 09:54:22 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0725457Z 2025-08-30 09:54:22 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0725655Z 2025-08-30 09:54:22 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0725834Z 2025-08-30 09:54:22 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0725993Z 2025-08-30 09:54:22 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0726140Z 2025-08-30 09:54:22 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0726285Z 2025-08-30 09:54:22 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0726407Z 2025-08-30 09:54:22 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0726829Z 2025-08-30 09:54:22 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0727150Z 2025-08-30 09:54:22 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo0/freqaimodels" does not exist.
2025-08-30T09:58:47.0727778Z 2025-08-30 09:54:22 INFO Using resolved freqaimodel CatboostRegressorMultiTarget from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/CatboostRegressorMultiTarget.py'...
2025-08-30T09:58:47.0727936Z 2025-08-30 09:54:22 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0728108Z 2025-08-30 09:54:22 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0728309Z 2025-08-30 09:54:22 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0728560Z 2025-08-30 09:54:22 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0728697Z 2025-08-30 09:54:22 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0728842Z 2025-08-30 09:54:22 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0729003Z 2025-08-30 09:54:22 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0729158Z 2025-08-30 09:54:22 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0729313Z 2025-08-30 09:54:22 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0729440Z 2025-08-30 09:54:22 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0729522Z 2025-08-30 09:54:22 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0729619Z 2025-08-30 09:54:22 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0729743Z 2025-08-30 09:54:22 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0729903Z 2025-08-30 09:54:22 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0730064Z 2025-08-30 09:54:22 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0730224Z 2025-08-30 09:54:22 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0730375Z 2025-08-30 09:54:22 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0730673Z _ test_extract_data_and_train_model_MultiTargets[XGBoostRegressorMultiTarget-freqai_test_multimodel_strat] _
2025-08-30T09:58:47.0730679Z 
2025-08-30T09:58:47.0730842Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0730907Z key = 'date'
2025-08-30T09:58:47.0730913Z 
2025-08-30T09:58:47.0730993Z     def get_loc(self, key):
2025-08-30T09:58:47.0731057Z         """
2025-08-30T09:58:47.0731212Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0731269Z     
2025-08-30T09:58:47.0731333Z         Parameters
2025-08-30T09:58:47.0731403Z         ----------
2025-08-30T09:58:47.0731465Z         key : label
2025-08-30T09:58:47.0731520Z     
2025-08-30T09:58:47.0731588Z         Returns
2025-08-30T09:58:47.0731648Z         -------
2025-08-30T09:58:47.0731776Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0731833Z     
2025-08-30T09:58:47.0731901Z         Examples
2025-08-30T09:58:47.0732050Z         --------
2025-08-30T09:58:47.0732144Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0732226Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0732283Z         1
2025-08-30T09:58:47.0732340Z     
2025-08-30T09:58:47.0732436Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0732526Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0732595Z         slice(1, 3, None)
2025-08-30T09:58:47.0732652Z     
2025-08-30T09:58:47.0732759Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0732843Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0732925Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0732987Z         """
2025-08-30T09:58:47.0733180Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0733242Z         try:
2025-08-30T09:58:47.0733334Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0733619Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0733633Z 
2025-08-30T09:58:47.0733819Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0733925Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0734106Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0734165Z     ???
2025-08-30T09:58:47.0734325Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0734387Z     ???
2025-08-30T09:58:47.0734653Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0734711Z     ???
2025-08-30T09:58:47.0734813Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0734829Z 
2025-08-30T09:58:47.0734884Z >   ???
2025-08-30T09:58:47.0734953Z E   KeyError: 'date'
2025-08-30T09:58:47.0734958Z 
2025-08-30T09:58:47.0735084Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0735093Z 
2025-08-30T09:58:47.0735258Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0735263Z 
2025-08-30T09:58:47.0735418Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc33e510>
2025-08-30T09:58:47.0736102Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0736298Z model = 'XGBoostRegressorMultiTarget', strat = 'freqai_test_multimodel_strat'
2025-08-30T09:58:47.0736303Z 
2025-08-30T09:58:47.0736385Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0736450Z         "model, strat",
2025-08-30T09:58:47.0736516Z         [
2025-08-30T09:58:47.0736681Z             ("LightGBMRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0736835Z             ("XGBoostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0736999Z             ("CatboostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0737203Z             ("LightGBMClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.0737398Z             ("CatboostClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.0737463Z         ],
2025-08-30T09:58:47.0737520Z     )
2025-08-30T09:58:47.0737723Z     def test_extract_data_and_train_model_MultiTargets(mocker, freqai_conf, model, strat):
2025-08-30T09:58:47.0737803Z         can_run_model(model)
2025-08-30T09:58:47.0737859Z     
2025-08-30T09:58:47.0737980Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0738072Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.0738175Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0738312Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0738561Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0738682Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0738796Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0738873Z         freqai = strategy.freqai
2025-08-30T09:58:47.0738945Z         freqai.live = True
2025-08-30T09:58:47.0739047Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0739119Z         freqai.dk.live = True
2025-08-30T09:58:47.0739252Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0739385Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0739442Z     
2025-08-30T09:58:47.0739529Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0739695Z     
2025-08-30T09:58:47.0739852Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0739995Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0740087Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0740148Z     
2025-08-30T09:58:47.0740232Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0740384Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0740447Z         )
2025-08-30T09:58:47.0740452Z 
2025-08-30T09:58:47.0740545Z tests/freqai/test_freqai_interface.py:169: 
2025-08-30T09:58:47.0740647Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0740835Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0741002Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0741169Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0741267Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0741394Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0741498Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0741564Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0741752Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0741839Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0741905Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0742010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0742015Z 
2025-08-30T09:58:47.0742181Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0742243Z key = 'date'
2025-08-30T09:58:47.0742248Z 
2025-08-30T09:58:47.0742327Z     def get_loc(self, key):
2025-08-30T09:58:47.0742386Z         """
2025-08-30T09:58:47.0742539Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0742596Z     
2025-08-30T09:58:47.0742666Z         Parameters
2025-08-30T09:58:47.0742733Z         ----------
2025-08-30T09:58:47.0742795Z         key : label
2025-08-30T09:58:47.0742855Z     
2025-08-30T09:58:47.0742914Z         Returns
2025-08-30T09:58:47.0742973Z         -------
2025-08-30T09:58:47.0743095Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0743155Z     
2025-08-30T09:58:47.0743216Z         Examples
2025-08-30T09:58:47.0743279Z         --------
2025-08-30T09:58:47.0743548Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0743660Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0743720Z         1
2025-08-30T09:58:47.0743777Z     
2025-08-30T09:58:47.0743881Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0743963Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0744032Z         slice(1, 3, None)
2025-08-30T09:58:47.0744102Z     
2025-08-30T09:58:47.0744205Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0744288Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0744509Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0744571Z         """
2025-08-30T09:58:47.0744662Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0744721Z         try:
2025-08-30T09:58:47.0744817Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0744892Z         except KeyError as err:
2025-08-30T09:58:47.0744981Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0745079Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0745191Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0745250Z             ):
2025-08-30T09:58:47.0745334Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0745434Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0745628Z E           KeyError: 'date'
2025-08-30T09:58:47.0745635Z 
2025-08-30T09:58:47.0745829Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0745982Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0746478Z 2025-08-30 09:54:22 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0746984Z 2025-08-30 09:54:22 INFO Using resolved strategy freqai_test_multimodel_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_multimodel_strat.py'...
2025-08-30T09:58:47.0747086Z 2025-08-30 09:54:22 INFO Found no parameter file.
2025-08-30T09:58:47.0747376Z 2025-08-30 09:54:22 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0747556Z 2025-08-30 09:54:22 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0747744Z 2025-08-30 09:54:22 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0747938Z 2025-08-30 09:54:22 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0748130Z 2025-08-30 09:54:22 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0748399Z 2025-08-30 09:54:22 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0748589Z 2025-08-30 09:54:22 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0748783Z 2025-08-30 09:54:22 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0748893Z 2025-08-30 09:54:22 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0749000Z 2025-08-30 09:54:22 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0749125Z 2025-08-30 09:54:22 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0749278Z 2025-08-30 09:54:22 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0749569Z 2025-08-30 09:54:22 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0749814Z 2025-08-30 09:54:22 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0750054Z 2025-08-30 09:54:22 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0750760Z 2025-08-30 09:54:22 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0750956Z 2025-08-30 09:54:22 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0751074Z 2025-08-30 09:54:22 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0751189Z 2025-08-30 09:54:22 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0751322Z 2025-08-30 09:54:22 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0751491Z 2025-08-30 09:54:22 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0751612Z 2025-08-30 09:54:22 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0751838Z 2025-08-30 09:54:22 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0751981Z 2025-08-30 09:54:22 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0752105Z 2025-08-30 09:54:22 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0752246Z 2025-08-30 09:54:22 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0752396Z 2025-08-30 09:54:22 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0752546Z 2025-08-30 09:54:22 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0752686Z 2025-08-30 09:54:22 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0752898Z 2025-08-30 09:54:22 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0753190Z 2025-08-30 09:54:22 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0753618Z 2025-08-30 09:54:22 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo1/freqaimodels" does not exist.
2025-08-30T09:58:47.0754223Z 2025-08-30 09:54:22 INFO Using resolved freqaimodel XGBoostRegressorMultiTarget from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostRegressorMultiTarget.py'...
2025-08-30T09:58:47.0754379Z 2025-08-30 09:54:22 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0754542Z 2025-08-30 09:54:22 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0754733Z 2025-08-30 09:54:22 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0754985Z 2025-08-30 09:54:22 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0755129Z 2025-08-30 09:54:22 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0755265Z 2025-08-30 09:54:22 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0755431Z 2025-08-30 09:54:22 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0755591Z 2025-08-30 09:54:22 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0755738Z 2025-08-30 09:54:22 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0755863Z 2025-08-30 09:54:22 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0755947Z 2025-08-30 09:54:22 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0756040Z 2025-08-30 09:54:22 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0756160Z 2025-08-30 09:54:22 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0756321Z 2025-08-30 09:54:22 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0756484Z 2025-08-30 09:54:22 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0756635Z 2025-08-30 09:54:22 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0757015Z 2025-08-30 09:54:22 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0757197Z ______ test_extract_data_and_train_model_Classifiers[XGBoostRFClassifier] ______
2025-08-30T09:58:47.0757202Z 
2025-08-30T09:58:47.0757357Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0757419Z key = 'date'
2025-08-30T09:58:47.0757424Z 
2025-08-30T09:58:47.0757502Z     def get_loc(self, key):
2025-08-30T09:58:47.0757559Z         """
2025-08-30T09:58:47.0757709Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0757772Z     
2025-08-30T09:58:47.0757835Z         Parameters
2025-08-30T09:58:47.0757898Z         ----------
2025-08-30T09:58:47.0757959Z         key : label
2025-08-30T09:58:47.0758018Z     
2025-08-30T09:58:47.0758080Z         Returns
2025-08-30T09:58:47.0758140Z         -------
2025-08-30T09:58:47.0758267Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0758478Z     
2025-08-30T09:58:47.0758539Z         Examples
2025-08-30T09:58:47.0758599Z         --------
2025-08-30T09:58:47.0758694Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0758773Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0758830Z         1
2025-08-30T09:58:47.0758890Z     
2025-08-30T09:58:47.0758987Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0759067Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0759135Z         slice(1, 3, None)
2025-08-30T09:58:47.0759194Z     
2025-08-30T09:58:47.0759296Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0759378Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0759464Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0759522Z         """
2025-08-30T09:58:47.0759723Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0759789Z         try:
2025-08-30T09:58:47.0759878Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0759952Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0759957Z 
2025-08-30T09:58:47.0760127Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0760234Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0760397Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0760455Z     ???
2025-08-30T09:58:47.0760618Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0760673Z     ???
2025-08-30T09:58:47.0760932Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0760995Z     ???
2025-08-30T09:58:47.0761098Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0761104Z 
2025-08-30T09:58:47.0761160Z >   ???
2025-08-30T09:58:47.0761231Z E   KeyError: 'date'
2025-08-30T09:58:47.0761240Z 
2025-08-30T09:58:47.0761357Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0761361Z 
2025-08-30T09:58:47.0761516Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0761520Z 
2025-08-30T09:58:47.0761680Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc4111d0>
2025-08-30T09:58:47.0762361Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0762443Z model = 'XGBoostRFClassifier'
2025-08-30T09:58:47.0762448Z 
2025-08-30T09:58:47.0762532Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0762590Z         "model",
2025-08-30T09:58:47.0762652Z         [
2025-08-30T09:58:47.0762729Z             "LightGBMClassifier",
2025-08-30T09:58:47.0762808Z             "CatboostClassifier",
2025-08-30T09:58:47.0762881Z             "XGBoostClassifier",
2025-08-30T09:58:47.0762960Z             "XGBoostRFClassifier",
2025-08-30T09:58:47.0763054Z             "SKLearnRandomForestClassifier",
2025-08-30T09:58:47.0763131Z             "PyTorchMLPClassifier",
2025-08-30T09:58:47.0763188Z         ],
2025-08-30T09:58:47.0763242Z     )
2025-08-30T09:58:47.0763532Z     def test_extract_data_and_train_model_Classifiers(mocker, freqai_conf, model):
2025-08-30T09:58:47.0763606Z         can_run_model(model)
2025-08-30T09:58:47.0763663Z     
2025-08-30T09:58:47.0763761Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0763893Z         freqai_conf.update({"strategy": "freqai_test_classifier"})
2025-08-30T09:58:47.0764007Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0764151Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0764266Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0764381Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0764566Z     
2025-08-30T09:58:47.0764684Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0764761Z         freqai = strategy.freqai
2025-08-30T09:58:47.0764831Z         freqai.live = True
2025-08-30T09:58:47.0764931Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0765003Z         freqai.dk.live = True
2025-08-30T09:58:47.0765132Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0765266Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0765323Z     
2025-08-30T09:58:47.0765408Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0765464Z     
2025-08-30T09:58:47.0765732Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0765874Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0765959Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0766024Z     
2025-08-30T09:58:47.0766106Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0766259Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0766316Z         )
2025-08-30T09:58:47.0766327Z 
2025-08-30T09:58:47.0766418Z tests/freqai/test_freqai_interface.py:217: 
2025-08-30T09:58:47.0766514Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0766694Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0766866Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0767027Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0767121Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0767252Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0767351Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0767420Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0767609Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0767693Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0767760Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0767856Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0767866Z 
2025-08-30T09:58:47.0768026Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0768086Z key = 'date'
2025-08-30T09:58:47.0768091Z 
2025-08-30T09:58:47.0768162Z     def get_loc(self, key):
2025-08-30T09:58:47.0768224Z         """
2025-08-30T09:58:47.0768374Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0768433Z     
2025-08-30T09:58:47.0768501Z         Parameters
2025-08-30T09:58:47.0768561Z         ----------
2025-08-30T09:58:47.0768626Z         key : label
2025-08-30T09:58:47.0768687Z     
2025-08-30T09:58:47.0768751Z         Returns
2025-08-30T09:58:47.0768811Z         -------
2025-08-30T09:58:47.0768937Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0768991Z     
2025-08-30T09:58:47.0769051Z         Examples
2025-08-30T09:58:47.0769110Z         --------
2025-08-30T09:58:47.0769203Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0769280Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0769337Z         1
2025-08-30T09:58:47.0769396Z     
2025-08-30T09:58:47.0769489Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0769568Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0769635Z         slice(1, 3, None)
2025-08-30T09:58:47.0769700Z     
2025-08-30T09:58:47.0769802Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0769881Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0769966Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0770118Z         """
2025-08-30T09:58:47.0770207Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0770264Z         try:
2025-08-30T09:58:47.0770360Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0770432Z         except KeyError as err:
2025-08-30T09:58:47.0770518Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0770611Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0770720Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0770776Z             ):
2025-08-30T09:58:47.0770864Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0770940Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0771009Z E           KeyError: 'date'
2025-08-30T09:58:47.0771014Z 
2025-08-30T09:58:47.0771485Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0771749Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0772431Z 2025-08-30 09:54:23 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0772910Z 2025-08-30 09:54:23 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.0773008Z 2025-08-30 09:54:23 INFO Found no parameter file.
2025-08-30T09:58:47.0773298Z 2025-08-30 09:54:23 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0773688Z 2025-08-30 09:54:23 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0773892Z 2025-08-30 09:54:23 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0774089Z 2025-08-30 09:54:23 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0774281Z 2025-08-30 09:54:23 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0774549Z 2025-08-30 09:54:23 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0774738Z 2025-08-30 09:54:23 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0774943Z 2025-08-30 09:54:23 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0775058Z 2025-08-30 09:54:23 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0775165Z 2025-08-30 09:54:23 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0775283Z 2025-08-30 09:54:23 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0775438Z 2025-08-30 09:54:23 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0775592Z 2025-08-30 09:54:23 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0775721Z 2025-08-30 09:54:23 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0775866Z 2025-08-30 09:54:23 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0776341Z 2025-08-30 09:54:23 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0776531Z 2025-08-30 09:54:23 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0776651Z 2025-08-30 09:54:23 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0776758Z 2025-08-30 09:54:23 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0776885Z 2025-08-30 09:54:23 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0777058Z 2025-08-30 09:54:23 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0777176Z 2025-08-30 09:54:23 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0777297Z 2025-08-30 09:54:23 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0777587Z 2025-08-30 09:54:23 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0777707Z 2025-08-30 09:54:23 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0777846Z 2025-08-30 09:54:23 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0777997Z 2025-08-30 09:54:23 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0778142Z 2025-08-30 09:54:23 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0778282Z 2025-08-30 09:54:23 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0778390Z 2025-08-30 09:54:23 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0778789Z 2025-08-30 09:54:23 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0779111Z 2025-08-30 09:54:23 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo2/freqaimodels" does not exist.
2025-08-30T09:58:47.0779644Z 2025-08-30 09:54:23 INFO Using resolved freqaimodel XGBoostRFClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostRFClassifier.py'...
2025-08-30T09:58:47.0779794Z 2025-08-30 09:54:23 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0779956Z 2025-08-30 09:54:23 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0780145Z 2025-08-30 09:54:23 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0780395Z 2025-08-30 09:54:23 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0780532Z 2025-08-30 09:54:23 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0780673Z 2025-08-30 09:54:23 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0780835Z 2025-08-30 09:54:23 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0780998Z 2025-08-30 09:54:23 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0781147Z 2025-08-30 09:54:23 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0781270Z 2025-08-30 09:54:23 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0781352Z 2025-08-30 09:54:23 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0781446Z 2025-08-30 09:54:23 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0781564Z 2025-08-30 09:54:23 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0781723Z 2025-08-30 09:54:23 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0781877Z 2025-08-30 09:54:23 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0782030Z 2025-08-30 09:54:23 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0782181Z 2025-08-30 09:54:23 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0782518Z _ test_extract_data_and_train_model_MultiTargets[LightGBMClassifierMultiTarget-freqai_test_multimodel_classifier_strat] _
2025-08-30T09:58:47.0782528Z 
2025-08-30T09:58:47.0782685Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0782748Z key = 'date'
2025-08-30T09:58:47.0782753Z 
2025-08-30T09:58:47.0782826Z     def get_loc(self, key):
2025-08-30T09:58:47.0782882Z         """
2025-08-30T09:58:47.0783034Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0783089Z     
2025-08-30T09:58:47.0783150Z         Parameters
2025-08-30T09:58:47.0783209Z         ----------
2025-08-30T09:58:47.0783272Z         key : label
2025-08-30T09:58:47.0783326Z     
2025-08-30T09:58:47.0783493Z         Returns
2025-08-30T09:58:47.0783556Z         -------
2025-08-30T09:58:47.0783683Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0783739Z     
2025-08-30T09:58:47.0783798Z         Examples
2025-08-30T09:58:47.0783861Z         --------
2025-08-30T09:58:47.0784093Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0784171Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0784232Z         1
2025-08-30T09:58:47.0784286Z     
2025-08-30T09:58:47.0784378Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0784459Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0784539Z         slice(1, 3, None)
2025-08-30T09:58:47.0784593Z     
2025-08-30T09:58:47.0784693Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0784778Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0784857Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0784913Z         """
2025-08-30T09:58:47.0785020Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0785209Z         try:
2025-08-30T09:58:47.0785303Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0785373Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0785383Z 
2025-08-30T09:58:47.0785557Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0785659Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0785822Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0785883Z     ???
2025-08-30T09:58:47.0786038Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0786093Z     ???
2025-08-30T09:58:47.0786352Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0786408Z     ???
2025-08-30T09:58:47.0786505Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0786509Z 
2025-08-30T09:58:47.0786569Z >   ???
2025-08-30T09:58:47.0786641Z E   KeyError: 'date'
2025-08-30T09:58:47.0786646Z 
2025-08-30T09:58:47.0786765Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0786775Z 
2025-08-30T09:58:47.0786930Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0786934Z 
2025-08-30T09:58:47.0787094Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65ddd7d910>
2025-08-30T09:58:47.0787775Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0787872Z model = 'LightGBMClassifierMultiTarget'
2025-08-30T09:58:47.0787976Z strat = 'freqai_test_multimodel_classifier_strat'
2025-08-30T09:58:47.0787981Z 
2025-08-30T09:58:47.0788062Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0788129Z         "model, strat",
2025-08-30T09:58:47.0788199Z         [
2025-08-30T09:58:47.0788370Z             ("LightGBMRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0788529Z             ("XGBoostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0788696Z             ("CatboostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.0788898Z             ("LightGBMClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.0789094Z             ("CatboostClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.0789155Z         ],
2025-08-30T09:58:47.0789213Z     )
2025-08-30T09:58:47.0789411Z     def test_extract_data_and_train_model_MultiTargets(mocker, freqai_conf, model, strat):
2025-08-30T09:58:47.0789483Z         can_run_model(model)
2025-08-30T09:58:47.0789544Z     
2025-08-30T09:58:47.0789664Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0789761Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.0789856Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0789989Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0790195Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0790314Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0790426Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0790504Z         freqai = strategy.freqai
2025-08-30T09:58:47.0790574Z         freqai.live = True
2025-08-30T09:58:47.0790671Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0790743Z         freqai.dk.live = True
2025-08-30T09:58:47.0790889Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0791020Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0791075Z     
2025-08-30T09:58:47.0791159Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0791293Z     
2025-08-30T09:58:47.0791452Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0791587Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0791678Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0791736Z     
2025-08-30T09:58:47.0791817Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0791965Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0792027Z         )
2025-08-30T09:58:47.0792031Z 
2025-08-30T09:58:47.0792122Z tests/freqai/test_freqai_interface.py:169: 
2025-08-30T09:58:47.0792221Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0792409Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0792573Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0792737Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0792826Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0792954Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0793055Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0793118Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0793304Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0793485Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0793551Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0793655Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0793660Z 
2025-08-30T09:58:47.0793819Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0793879Z key = 'date'
2025-08-30T09:58:47.0793883Z 
2025-08-30T09:58:47.0793958Z     def get_loc(self, key):
2025-08-30T09:58:47.0794015Z         """
2025-08-30T09:58:47.0794273Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0794374Z     
2025-08-30T09:58:47.0794491Z         Parameters
2025-08-30T09:58:47.0794604Z         ----------
2025-08-30T09:58:47.0794720Z         key : label
2025-08-30T09:58:47.0794780Z     
2025-08-30T09:58:47.0794841Z         Returns
2025-08-30T09:58:47.0794901Z         -------
2025-08-30T09:58:47.0795029Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0795089Z     
2025-08-30T09:58:47.0795149Z         Examples
2025-08-30T09:58:47.0795208Z         --------
2025-08-30T09:58:47.0795302Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0795383Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0795440Z         1
2025-08-30T09:58:47.0795495Z     
2025-08-30T09:58:47.0795592Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0795670Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0795742Z         slice(1, 3, None)
2025-08-30T09:58:47.0795800Z     
2025-08-30T09:58:47.0795900Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0795980Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0796197Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0796258Z         """
2025-08-30T09:58:47.0796349Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0796407Z         try:
2025-08-30T09:58:47.0796500Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0796574Z         except KeyError as err:
2025-08-30T09:58:47.0796660Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0796753Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0796864Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0796920Z             ):
2025-08-30T09:58:47.0797004Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0797193Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0797266Z E           KeyError: 'date'
2025-08-30T09:58:47.0797271Z 
2025-08-30T09:58:47.0797459Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0797727Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0798389Z 2025-08-30 09:54:23 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0798977Z 2025-08-30 09:54:23 INFO Using resolved strategy freqai_test_multimodel_classifier_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_multimodel_classifier_strat.py'...
2025-08-30T09:58:47.0799078Z 2025-08-30 09:54:23 INFO Found no parameter file.
2025-08-30T09:58:47.0799367Z 2025-08-30 09:54:23 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0799550Z 2025-08-30 09:54:23 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0799732Z 2025-08-30 09:54:23 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0799935Z 2025-08-30 09:54:23 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0800124Z 2025-08-30 09:54:23 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0800389Z 2025-08-30 09:54:23 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0800577Z 2025-08-30 09:54:23 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0800770Z 2025-08-30 09:54:23 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0800880Z 2025-08-30 09:54:23 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0800986Z 2025-08-30 09:54:23 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0801107Z 2025-08-30 09:54:23 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0801260Z 2025-08-30 09:54:23 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0801418Z 2025-08-30 09:54:23 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0801546Z 2025-08-30 09:54:23 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0801684Z 2025-08-30 09:54:23 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0802158Z 2025-08-30 09:54:23 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0802349Z 2025-08-30 09:54:23 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0802463Z 2025-08-30 09:54:23 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0802576Z 2025-08-30 09:54:23 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0802707Z 2025-08-30 09:54:23 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0802873Z 2025-08-30 09:54:23 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0803095Z 2025-08-30 09:54:23 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0803216Z 2025-08-30 09:54:23 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0803468Z 2025-08-30 09:54:23 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0803597Z 2025-08-30 09:54:23 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0803740Z 2025-08-30 09:54:23 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0803891Z 2025-08-30 09:54:23 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0804060Z 2025-08-30 09:54:23 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0804204Z 2025-08-30 09:54:23 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0804453Z 2025-08-30 09:54:23 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0804747Z 2025-08-30 09:54:23 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0805074Z 2025-08-30 09:54:23 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo3/freqaimodels" does not exist.
2025-08-30T09:58:47.0805686Z 2025-08-30 09:54:23 INFO Using resolved freqaimodel LightGBMClassifierMultiTarget from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMClassifierMultiTarget.py'...
2025-08-30T09:58:47.0805836Z 2025-08-30 09:54:23 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0805998Z 2025-08-30 09:54:23 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0806192Z 2025-08-30 09:54:23 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0806450Z 2025-08-30 09:54:23 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0806590Z 2025-08-30 09:54:23 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0806726Z 2025-08-30 09:54:23 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0806891Z 2025-08-30 09:54:23 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0807046Z 2025-08-30 09:54:23 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0807194Z 2025-08-30 09:54:23 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0807320Z 2025-08-30 09:54:23 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0807402Z 2025-08-30 09:54:23 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0807497Z 2025-08-30 09:54:23 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0807614Z 2025-08-30 09:54:23 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0807776Z 2025-08-30 09:54:23 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0807934Z 2025-08-30 09:54:23 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0808085Z 2025-08-30 09:54:23 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0808239Z 2025-08-30 09:54:23 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0808414Z _______ test_extract_data_and_train_model_Classifiers[XGBoostClassifier] _______
2025-08-30T09:58:47.0808418Z 
2025-08-30T09:58:47.0808571Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0808631Z key = 'date'
2025-08-30T09:58:47.0808639Z 
2025-08-30T09:58:47.0808712Z     def get_loc(self, key):
2025-08-30T09:58:47.0808768Z         """
2025-08-30T09:58:47.0808916Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0808975Z     
2025-08-30T09:58:47.0809037Z         Parameters
2025-08-30T09:58:47.0809097Z         ----------
2025-08-30T09:58:47.0809160Z         key : label
2025-08-30T09:58:47.0809217Z     
2025-08-30T09:58:47.0809275Z         Returns
2025-08-30T09:58:47.0809333Z         -------
2025-08-30T09:58:47.0809458Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0809632Z     
2025-08-30T09:58:47.0809692Z         Examples
2025-08-30T09:58:47.0809755Z         --------
2025-08-30T09:58:47.0809843Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0809920Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0809976Z         1
2025-08-30T09:58:47.0810034Z     
2025-08-30T09:58:47.0810125Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0810205Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0810276Z         slice(1, 3, None)
2025-08-30T09:58:47.0810330Z     
2025-08-30T09:58:47.0810429Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0810511Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0810677Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0810735Z         """
2025-08-30T09:58:47.0810827Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0810888Z         try:
2025-08-30T09:58:47.0810981Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0811050Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0811054Z 
2025-08-30T09:58:47.0811227Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0811328Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0811491Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0811548Z     ???
2025-08-30T09:58:47.0811710Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0811765Z     ???
2025-08-30T09:58:47.0812025Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0812087Z     ???
2025-08-30T09:58:47.0812189Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0812194Z 
2025-08-30T09:58:47.0812249Z >   ???
2025-08-30T09:58:47.0812325Z E   KeyError: 'date'
2025-08-30T09:58:47.0812330Z 
2025-08-30T09:58:47.0812445Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0812450Z 
2025-08-30T09:58:47.0812604Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0812608Z 
2025-08-30T09:58:47.0812766Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e48bca90>
2025-08-30T09:58:47.0813645Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0813730Z model = 'XGBoostClassifier'
2025-08-30T09:58:47.0813735Z 
2025-08-30T09:58:47.0813821Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0813885Z         "model",
2025-08-30T09:58:47.0813942Z         [
2025-08-30T09:58:47.0814024Z             "LightGBMClassifier",
2025-08-30T09:58:47.0814097Z             "CatboostClassifier",
2025-08-30T09:58:47.0814175Z             "XGBoostClassifier",
2025-08-30T09:58:47.0814250Z             "XGBoostRFClassifier",
2025-08-30T09:58:47.0814347Z             "SKLearnRandomForestClassifier",
2025-08-30T09:58:47.0814425Z             "PyTorchMLPClassifier",
2025-08-30T09:58:47.0814482Z         ],
2025-08-30T09:58:47.0814543Z     )
2025-08-30T09:58:47.0814724Z     def test_extract_data_and_train_model_Classifiers(mocker, freqai_conf, model):
2025-08-30T09:58:47.0814795Z         can_run_model(model)
2025-08-30T09:58:47.0814849Z     
2025-08-30T09:58:47.0814946Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0815079Z         freqai_conf.update({"strategy": "freqai_test_classifier"})
2025-08-30T09:58:47.0815192Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0815331Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0815442Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0815701Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0815760Z     
2025-08-30T09:58:47.0815873Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0815948Z         freqai = strategy.freqai
2025-08-30T09:58:47.0816017Z         freqai.live = True
2025-08-30T09:58:47.0816115Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0816187Z         freqai.dk.live = True
2025-08-30T09:58:47.0816317Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0816446Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0816500Z     
2025-08-30T09:58:47.0816583Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0816636Z     
2025-08-30T09:58:47.0816900Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0817038Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0817123Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0817186Z     
2025-08-30T09:58:47.0817269Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0817415Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0817477Z         )
2025-08-30T09:58:47.0817482Z 
2025-08-30T09:58:47.0817574Z tests/freqai/test_freqai_interface.py:217: 
2025-08-30T09:58:47.0817671Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0817855Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0818018Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0818177Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0818271Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0818398Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0818496Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0818563Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0818747Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0818828Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0818892Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0818996Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0819000Z 
2025-08-30T09:58:47.0819156Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0819218Z key = 'date'
2025-08-30T09:58:47.0819223Z 
2025-08-30T09:58:47.0819296Z     def get_loc(self, key):
2025-08-30T09:58:47.0819359Z         """
2025-08-30T09:58:47.0819512Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0819568Z     
2025-08-30T09:58:47.0819635Z         Parameters
2025-08-30T09:58:47.0819700Z         ----------
2025-08-30T09:58:47.0819761Z         key : label
2025-08-30T09:58:47.0819824Z     
2025-08-30T09:58:47.0819881Z         Returns
2025-08-30T09:58:47.0819941Z         -------
2025-08-30T09:58:47.0820063Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0820122Z     
2025-08-30T09:58:47.0820181Z         Examples
2025-08-30T09:58:47.0820242Z         --------
2025-08-30T09:58:47.0820334Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0820411Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0820467Z         1
2025-08-30T09:58:47.0820521Z     
2025-08-30T09:58:47.0820618Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0820697Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0820765Z         slice(1, 3, None)
2025-08-30T09:58:47.0820824Z     
2025-08-30T09:58:47.0820926Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0821008Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0821089Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0821243Z         """
2025-08-30T09:58:47.0821333Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0821392Z         try:
2025-08-30T09:58:47.0821487Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0821561Z         except KeyError as err:
2025-08-30T09:58:47.0821687Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0821861Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0822058Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0822161Z             ):
2025-08-30T09:58:47.0822313Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0822398Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0822471Z E           KeyError: 'date'
2025-08-30T09:58:47.0822570Z 
2025-08-30T09:58:47.0822775Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0822921Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0823619Z 2025-08-30 09:54:24 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0824090Z 2025-08-30 09:54:24 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.0824194Z 2025-08-30 09:54:24 INFO Found no parameter file.
2025-08-30T09:58:47.0824480Z 2025-08-30 09:54:24 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0824658Z 2025-08-30 09:54:24 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0824848Z 2025-08-30 09:54:24 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0825042Z 2025-08-30 09:54:24 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0825236Z 2025-08-30 09:54:24 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0825502Z 2025-08-30 09:54:24 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0825690Z 2025-08-30 09:54:24 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0825913Z 2025-08-30 09:54:24 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0826024Z 2025-08-30 09:54:24 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0826129Z 2025-08-30 09:54:24 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0826247Z 2025-08-30 09:54:24 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0826403Z 2025-08-30 09:54:24 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0826559Z 2025-08-30 09:54:24 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0826690Z 2025-08-30 09:54:24 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0826826Z 2025-08-30 09:54:24 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0827312Z 2025-08-30 09:54:24 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0827500Z 2025-08-30 09:54:24 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0827620Z 2025-08-30 09:54:24 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0827732Z 2025-08-30 09:54:24 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0827858Z 2025-08-30 09:54:24 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0828027Z 2025-08-30 09:54:24 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0828150Z 2025-08-30 09:54:24 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0828405Z 2025-08-30 09:54:24 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0828548Z 2025-08-30 09:54:24 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0828669Z 2025-08-30 09:54:24 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0828808Z 2025-08-30 09:54:24 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0828961Z 2025-08-30 09:54:24 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0829110Z 2025-08-30 09:54:24 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0829250Z 2025-08-30 09:54:24 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0829359Z 2025-08-30 09:54:24 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0829770Z 2025-08-30 09:54:24 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0830093Z 2025-08-30 09:54:24 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo4/freqaimodels" does not exist.
2025-08-30T09:58:47.0830603Z 2025-08-30 09:54:24 INFO Using resolved freqaimodel XGBoostClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostClassifier.py'...
2025-08-30T09:58:47.0830749Z 2025-08-30 09:54:24 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0830918Z 2025-08-30 09:54:24 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0831110Z 2025-08-30 09:54:24 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0831360Z 2025-08-30 09:54:24 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0831498Z 2025-08-30 09:54:24 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0831640Z 2025-08-30 09:54:24 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0831801Z 2025-08-30 09:54:24 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0831958Z 2025-08-30 09:54:24 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0832107Z 2025-08-30 09:54:24 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0832230Z 2025-08-30 09:54:24 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0832318Z 2025-08-30 09:54:24 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0832411Z 2025-08-30 09:54:24 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0832531Z 2025-08-30 09:54:24 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0832692Z 2025-08-30 09:54:24 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0832848Z 2025-08-30 09:54:24 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0833001Z 2025-08-30 09:54:24 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0833155Z 2025-08-30 09:54:24 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0833321Z _______________ test_start_backtesting_subdaily_backtest_period ________________
2025-08-30T09:58:47.0833326Z 
2025-08-30T09:58:47.0833585Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0833648Z key = 'date'
2025-08-30T09:58:47.0833658Z 
2025-08-30T09:58:47.0833730Z     def get_loc(self, key):
2025-08-30T09:58:47.0833788Z         """
2025-08-30T09:58:47.0833938Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0833998Z     
2025-08-30T09:58:47.0834062Z         Parameters
2025-08-30T09:58:47.0834123Z         ----------
2025-08-30T09:58:47.0834188Z         key : label
2025-08-30T09:58:47.0834244Z     
2025-08-30T09:58:47.0834303Z         Returns
2025-08-30T09:58:47.0834362Z         -------
2025-08-30T09:58:47.0834493Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0834548Z     
2025-08-30T09:58:47.0834609Z         Examples
2025-08-30T09:58:47.0834673Z         --------
2025-08-30T09:58:47.0834885Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0834963Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0835020Z         1
2025-08-30T09:58:47.0835080Z     
2025-08-30T09:58:47.0835173Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0835252Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0835323Z         slice(1, 3, None)
2025-08-30T09:58:47.0835378Z     
2025-08-30T09:58:47.0835477Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0835559Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0835645Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0835703Z         """
2025-08-30T09:58:47.0835795Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0835964Z         try:
2025-08-30T09:58:47.0836056Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0836127Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0836137Z 
2025-08-30T09:58:47.0836313Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0836415Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0836580Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0836638Z     ???
2025-08-30T09:58:47.0836798Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0836857Z     ???
2025-08-30T09:58:47.0837116Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0837177Z     ???
2025-08-30T09:58:47.0837275Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0837280Z 
2025-08-30T09:58:47.0837339Z >   ???
2025-08-30T09:58:47.0837410Z E   KeyError: 'date'
2025-08-30T09:58:47.0837415Z 
2025-08-30T09:58:47.0837536Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0837546Z 
2025-08-30T09:58:47.0837706Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0837711Z 
2025-08-30T09:58:47.0837872Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4930910>
2025-08-30T09:58:47.0838554Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0838559Z 
2025-08-30T09:58:47.0838729Z     def test_start_backtesting_subdaily_backtest_period(mocker, freqai_conf):
2025-08-30T09:58:47.0838849Z         freqai_conf.update({"timerange": "20180120-20180124"})
2025-08-30T09:58:47.0838937Z         freqai_conf["runmode"] = "backtest"
2025-08-30T09:58:47.0839021Z         freqai_conf.get("freqai", {}).update(
2025-08-30T09:58:47.0839085Z             {
2025-08-30T09:58:47.0839166Z                 "backtest_period_days": 0.5,
2025-08-30T09:58:47.0839249Z                 "save_backtest_models": True,
2025-08-30T09:58:47.0839304Z             }
2025-08-30T09:58:47.0839367Z         )
2025-08-30T09:58:47.0839513Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.0839600Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.0839660Z         )
2025-08-30T09:58:47.0839795Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0839908Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0840027Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0840140Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0840218Z         freqai = strategy.freqai
2025-08-30T09:58:47.0840292Z         freqai.live = False
2025-08-30T09:58:47.0840393Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0840524Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0840758Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0840903Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0841102Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.0841191Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0841195Z 
2025-08-30T09:58:47.0841293Z tests/freqai/test_freqai_interface.py:337: 
2025-08-30T09:58:47.0841392Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0841556Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0841729Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0841859Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.0842033Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.0842101Z                  ^^^^^^^^^^
2025-08-30T09:58:47.0842289Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0842371Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0842438Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0842543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0842548Z 
2025-08-30T09:58:47.0842706Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0842765Z key = 'date'
2025-08-30T09:58:47.0842770Z 
2025-08-30T09:58:47.0842844Z     def get_loc(self, key):
2025-08-30T09:58:47.0842901Z         """
2025-08-30T09:58:47.0843053Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0843114Z     
2025-08-30T09:58:47.0843177Z         Parameters
2025-08-30T09:58:47.0843238Z         ----------
2025-08-30T09:58:47.0843307Z         key : label
2025-08-30T09:58:47.0843537Z     
2025-08-30T09:58:47.0843652Z         Returns
2025-08-30T09:58:47.0843759Z         -------
2025-08-30T09:58:47.0843989Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0844048Z     
2025-08-30T09:58:47.0844110Z         Examples
2025-08-30T09:58:47.0844171Z         --------
2025-08-30T09:58:47.0844272Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0844352Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0844409Z         1
2025-08-30T09:58:47.0844468Z     
2025-08-30T09:58:47.0844564Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0844644Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0844711Z         slice(1, 3, None)
2025-08-30T09:58:47.0844770Z     
2025-08-30T09:58:47.0844874Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0844957Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0845042Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0845105Z         """
2025-08-30T09:58:47.0845198Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0845255Z         try:
2025-08-30T09:58:47.0845348Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0845422Z         except KeyError as err:
2025-08-30T09:58:47.0845511Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0845607Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0845719Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0845776Z             ):
2025-08-30T09:58:47.0845867Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0845944Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0846014Z E           KeyError: 'date'
2025-08-30T09:58:47.0846023Z 
2025-08-30T09:58:47.0846216Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0846357Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0847001Z 2025-08-30 09:54:24 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0847427Z 2025-08-30 09:54:24 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.0847529Z 2025-08-30 09:54:24 INFO Found no parameter file.
2025-08-30T09:58:47.0847815Z 2025-08-30 09:54:24 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0847990Z 2025-08-30 09:54:24 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0848283Z 2025-08-30 09:54:24 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0848481Z 2025-08-30 09:54:24 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0848674Z 2025-08-30 09:54:24 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0848941Z 2025-08-30 09:54:24 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0849129Z 2025-08-30 09:54:24 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0849326Z 2025-08-30 09:54:24 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0849439Z 2025-08-30 09:54:24 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0849544Z 2025-08-30 09:54:24 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0849662Z 2025-08-30 09:54:24 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0849817Z 2025-08-30 09:54:24 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0849972Z 2025-08-30 09:54:24 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0850101Z 2025-08-30 09:54:24 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0850263Z 2025-08-30 09:54:24 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0850736Z 2025-08-30 09:54:24 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0850923Z 2025-08-30 09:54:24 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0851041Z 2025-08-30 09:54:24 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0851151Z 2025-08-30 09:54:24 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0851281Z 2025-08-30 09:54:24 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0851448Z 2025-08-30 09:54:24 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0851569Z 2025-08-30 09:54:24 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0851697Z 2025-08-30 09:54:24 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0851846Z 2025-08-30 09:54:24 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0851969Z 2025-08-30 09:54:24 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0852107Z 2025-08-30 09:54:24 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0852257Z 2025-08-30 09:54:24 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0852404Z 2025-08-30 09:54:24 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0852545Z 2025-08-30 09:54:24 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0852653Z 2025-08-30 09:54:24 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0852946Z 2025-08-30 09:54:24 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0853261Z 2025-08-30 09:54:24 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_subdail0/freqaimodels" does not exist.
2025-08-30T09:58:47.0854111Z 2025-08-30 09:54:24 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.0854269Z 2025-08-30 09:54:24 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0854434Z 2025-08-30 09:54:24 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0854630Z 2025-08-30 09:54:24 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0854882Z 2025-08-30 09:54:24 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0855020Z 2025-08-30 09:54:24 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0855274Z 2025-08-30 09:54:24 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0855440Z 2025-08-30 09:54:24 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0855604Z 2025-08-30 09:54:24 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0855753Z 2025-08-30 09:54:24 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0855878Z 2025-08-30 09:54:24 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0855963Z 2025-08-30 09:54:24 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0856060Z 2025-08-30 09:54:24 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0856177Z 2025-08-30 09:54:24 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0856339Z 2025-08-30 09:54:24 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0856496Z 2025-08-30 09:54:24 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0856650Z 2025-08-30 09:54:24 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0856804Z 2025-08-30 09:54:24 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0856998Z _ test_extract_data_and_train_model_Classifiers[SKLearnRandomForestClassifier] _
2025-08-30T09:58:47.0857003Z 
2025-08-30T09:58:47.0857161Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0857227Z key = 'date'
2025-08-30T09:58:47.0857231Z 
2025-08-30T09:58:47.0857305Z     def get_loc(self, key):
2025-08-30T09:58:47.0857363Z         """
2025-08-30T09:58:47.0857519Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0857578Z     
2025-08-30T09:58:47.0857643Z         Parameters
2025-08-30T09:58:47.0857705Z         ----------
2025-08-30T09:58:47.0857771Z         key : label
2025-08-30T09:58:47.0857825Z     
2025-08-30T09:58:47.0857884Z         Returns
2025-08-30T09:58:47.0857943Z         -------
2025-08-30T09:58:47.0858075Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0858134Z     
2025-08-30T09:58:47.0858195Z         Examples
2025-08-30T09:58:47.0858259Z         --------
2025-08-30T09:58:47.0858354Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0858432Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0858489Z         1
2025-08-30T09:58:47.0858549Z     
2025-08-30T09:58:47.0858644Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0858723Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0858797Z         slice(1, 3, None)
2025-08-30T09:58:47.0858853Z     
2025-08-30T09:58:47.0858953Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0859040Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0859122Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0859179Z         """
2025-08-30T09:58:47.0859271Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0859337Z         try:
2025-08-30T09:58:47.0859426Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0859497Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0859617Z 
2025-08-30T09:58:47.0859797Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0859900Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0860066Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0860125Z     ???
2025-08-30T09:58:47.0860283Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0860342Z     ???
2025-08-30T09:58:47.0860601Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0860659Z     ???
2025-08-30T09:58:47.0860757Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0860762Z 
2025-08-30T09:58:47.0860900Z >   ???
2025-08-30T09:58:47.0860975Z E   KeyError: 'date'
2025-08-30T09:58:47.0860980Z 
2025-08-30T09:58:47.0861099Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0861109Z 
2025-08-30T09:58:47.0861269Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0861274Z 
2025-08-30T09:58:47.0861433Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e50346d0>
2025-08-30T09:58:47.0862122Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0862219Z model = 'SKLearnRandomForestClassifier'
2025-08-30T09:58:47.0862224Z 
2025-08-30T09:58:47.0862311Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0862373Z         "model",
2025-08-30T09:58:47.0862430Z         [
2025-08-30T09:58:47.0862515Z             "LightGBMClassifier",
2025-08-30T09:58:47.0862594Z             "CatboostClassifier",
2025-08-30T09:58:47.0862669Z             "XGBoostClassifier",
2025-08-30T09:58:47.0862746Z             "XGBoostRFClassifier",
2025-08-30T09:58:47.0862850Z             "SKLearnRandomForestClassifier",
2025-08-30T09:58:47.0862931Z             "PyTorchMLPClassifier",
2025-08-30T09:58:47.0862988Z         ],
2025-08-30T09:58:47.0863047Z     )
2025-08-30T09:58:47.0863234Z     def test_extract_data_and_train_model_Classifiers(mocker, freqai_conf, model):
2025-08-30T09:58:47.0863306Z         can_run_model(model)
2025-08-30T09:58:47.0863471Z     
2025-08-30T09:58:47.0863572Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0863710Z         freqai_conf.update({"strategy": "freqai_test_classifier"})
2025-08-30T09:58:47.0863826Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0863962Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0864080Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0864192Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0864252Z     
2025-08-30T09:58:47.0864370Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0864446Z         freqai = strategy.freqai
2025-08-30T09:58:47.0864522Z         freqai.live = True
2025-08-30T09:58:47.0864617Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0864690Z         freqai.dk.live = True
2025-08-30T09:58:47.0864821Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0864955Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0865010Z     
2025-08-30T09:58:47.0865096Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0865157Z     
2025-08-30T09:58:47.0865311Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0865451Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0865536Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0865596Z     
2025-08-30T09:58:47.0865678Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0866131Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0866242Z         )
2025-08-30T09:58:47.0866251Z 
2025-08-30T09:58:47.0866411Z tests/freqai/test_freqai_interface.py:217: 
2025-08-30T09:58:47.0866513Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0866709Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0866875Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0867038Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0867134Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0867261Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0867485Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0867556Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0867743Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0867833Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0867898Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0867999Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0868004Z 
2025-08-30T09:58:47.0868163Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0868224Z key = 'date'
2025-08-30T09:58:47.0868228Z 
2025-08-30T09:58:47.0868304Z     def get_loc(self, key):
2025-08-30T09:58:47.0868360Z         """
2025-08-30T09:58:47.0868510Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0868570Z     
2025-08-30T09:58:47.0868634Z         Parameters
2025-08-30T09:58:47.0868701Z         ----------
2025-08-30T09:58:47.0868763Z         key : label
2025-08-30T09:58:47.0868822Z     
2025-08-30T09:58:47.0868880Z         Returns
2025-08-30T09:58:47.0868942Z         -------
2025-08-30T09:58:47.0869078Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0869133Z     
2025-08-30T09:58:47.0869197Z         Examples
2025-08-30T09:58:47.0869257Z         --------
2025-08-30T09:58:47.0869349Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0869428Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0869486Z         1
2025-08-30T09:58:47.0869546Z     
2025-08-30T09:58:47.0869639Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0869718Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0869786Z         slice(1, 3, None)
2025-08-30T09:58:47.0869845Z     
2025-08-30T09:58:47.0869944Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0870026Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0870173Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0870281Z         """
2025-08-30T09:58:47.0870445Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0870555Z         try:
2025-08-30T09:58:47.0870714Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0870794Z         except KeyError as err:
2025-08-30T09:58:47.0870885Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0870982Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0871092Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0871150Z             ):
2025-08-30T09:58:47.0871239Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0871316Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0871387Z E           KeyError: 'date'
2025-08-30T09:58:47.0871392Z 
2025-08-30T09:58:47.0871579Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0871733Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0872225Z 2025-08-30 09:54:25 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0872783Z 2025-08-30 09:54:25 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.0872885Z 2025-08-30 09:54:25 INFO Found no parameter file.
2025-08-30T09:58:47.0873172Z 2025-08-30 09:54:25 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0873460Z 2025-08-30 09:54:25 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0873647Z 2025-08-30 09:54:25 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0873959Z 2025-08-30 09:54:25 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0874154Z 2025-08-30 09:54:25 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0874427Z 2025-08-30 09:54:25 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0874616Z 2025-08-30 09:54:25 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0874810Z 2025-08-30 09:54:25 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0874920Z 2025-08-30 09:54:25 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0875025Z 2025-08-30 09:54:25 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0875141Z 2025-08-30 09:54:25 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0875292Z 2025-08-30 09:54:25 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0875451Z 2025-08-30 09:54:25 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0875579Z 2025-08-30 09:54:25 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0875722Z 2025-08-30 09:54:25 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0876203Z 2025-08-30 09:54:25 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0876392Z 2025-08-30 09:54:25 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0876511Z 2025-08-30 09:54:25 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0876619Z 2025-08-30 09:54:25 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0876743Z 2025-08-30 09:54:25 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0876907Z 2025-08-30 09:54:25 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0877031Z 2025-08-30 09:54:25 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0877153Z 2025-08-30 09:54:25 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0877299Z 2025-08-30 09:54:25 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0877426Z 2025-08-30 09:54:25 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0877565Z 2025-08-30 09:54:25 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0877718Z 2025-08-30 09:54:25 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0877863Z 2025-08-30 09:54:25 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0878002Z 2025-08-30 09:54:25 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0878111Z 2025-08-30 09:54:25 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0878399Z 2025-08-30 09:54:25 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0878714Z 2025-08-30 09:54:25 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo5/freqaimodels" does not exist.
2025-08-30T09:58:47.0879318Z 2025-08-30 09:54:25 INFO Using resolved freqaimodel SKLearnRandomForestClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/SKLearnRandomForestClassifier.py'...
2025-08-30T09:58:47.0879625Z 2025-08-30 09:54:25 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0879788Z 2025-08-30 09:54:25 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0879978Z 2025-08-30 09:54:25 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0880234Z 2025-08-30 09:54:25 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0880369Z 2025-08-30 09:54:25 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0880504Z 2025-08-30 09:54:25 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0880743Z 2025-08-30 09:54:25 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0880900Z 2025-08-30 09:54:25 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0881055Z 2025-08-30 09:54:25 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0881179Z 2025-08-30 09:54:25 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0881264Z 2025-08-30 09:54:25 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0881358Z 2025-08-30 09:54:25 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0881475Z 2025-08-30 09:54:25 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0881635Z 2025-08-30 09:54:25 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0881789Z 2025-08-30 09:54:25 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0881937Z 2025-08-30 09:54:25 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0882093Z 2025-08-30 09:54:25 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0882246Z ____________________ test_backtesting_fit_live_predictions _____________________
2025-08-30T09:58:47.0882255Z 
2025-08-30T09:58:47.0882409Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0882474Z key = 'date'
2025-08-30T09:58:47.0882479Z 
2025-08-30T09:58:47.0882550Z     def get_loc(self, key):
2025-08-30T09:58:47.0882608Z         """
2025-08-30T09:58:47.0882757Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0882821Z     
2025-08-30T09:58:47.0882884Z         Parameters
2025-08-30T09:58:47.0882945Z         ----------
2025-08-30T09:58:47.0883011Z         key : label
2025-08-30T09:58:47.0883065Z     
2025-08-30T09:58:47.0883121Z         Returns
2025-08-30T09:58:47.0883181Z         -------
2025-08-30T09:58:47.0883308Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0883459Z     
2025-08-30T09:58:47.0883526Z         Examples
2025-08-30T09:58:47.0883592Z         --------
2025-08-30T09:58:47.0883682Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0883766Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0883823Z         1
2025-08-30T09:58:47.0883883Z     
2025-08-30T09:58:47.0883976Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0884056Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0884130Z         slice(1, 3, None)
2025-08-30T09:58:47.0884185Z     
2025-08-30T09:58:47.0884286Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0884372Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0884453Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0884511Z         """
2025-08-30T09:58:47.0884601Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0884664Z         try:
2025-08-30T09:58:47.0884754Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0884827Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0884832Z 
2025-08-30T09:58:47.0885006Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0885231Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0885396Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0885459Z     ???
2025-08-30T09:58:47.0885617Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0885673Z     ???
2025-08-30T09:58:47.0885932Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0885994Z     ???
2025-08-30T09:58:47.0886092Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0886096Z 
2025-08-30T09:58:47.0886151Z >   ???
2025-08-30T09:58:47.0886223Z E   KeyError: 'date'
2025-08-30T09:58:47.0886228Z 
2025-08-30T09:58:47.0886450Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0886455Z 
2025-08-30T09:58:47.0886612Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0886622Z 
2025-08-30T09:58:47.0886782Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dda5d610>
2025-08-30T09:58:47.0887466Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0887624Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65ddd4a950>
2025-08-30T09:58:47.0887628Z 
2025-08-30T09:58:47.0887799Z     def test_backtesting_fit_live_predictions(mocker, freqai_conf, caplog):
2025-08-30T09:58:47.0887883Z         freqai_conf["runmode"] = "backtest"
2025-08-30T09:58:47.0888050Z         freqai_conf.get("freqai", {}).update({"fit_live_predictions_candles": 10})
2025-08-30T09:58:47.0888191Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0888306Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0888421Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0888541Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0888619Z         freqai = strategy.freqai
2025-08-30T09:58:47.0888688Z         freqai.live = False
2025-08-30T09:58:47.0888785Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0888921Z         timerange = TimeRange.parse_timerange("20180128-20180130")
2025-08-30T09:58:47.0889047Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0889185Z         sub_timerange = TimeRange.parse_timerange("20180129-20180130")
2025-08-30T09:58:47.0889407Z >       corr_df, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.0889503Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0889508Z 
2025-08-30T09:58:47.0889600Z tests/freqai/test_freqai_interface.py:428: 
2025-08-30T09:58:47.0889709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0889871Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0889963Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0890093Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.0890267Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.0890330Z                  ^^^^^^^^^^
2025-08-30T09:58:47.0890518Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0890599Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0890663Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0890767Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0890775Z 
2025-08-30T09:58:47.0890930Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0891081Z key = 'date'
2025-08-30T09:58:47.0891086Z 
2025-08-30T09:58:47.0891156Z     def get_loc(self, key):
2025-08-30T09:58:47.0891218Z         """
2025-08-30T09:58:47.0891365Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0891420Z     
2025-08-30T09:58:47.0891488Z         Parameters
2025-08-30T09:58:47.0891550Z         ----------
2025-08-30T09:58:47.0891610Z         key : label
2025-08-30T09:58:47.0891664Z     
2025-08-30T09:58:47.0891726Z         Returns
2025-08-30T09:58:47.0891785Z         -------
2025-08-30T09:58:47.0891908Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0891968Z     
2025-08-30T09:58:47.0892028Z         Examples
2025-08-30T09:58:47.0892087Z         --------
2025-08-30T09:58:47.0892254Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0892337Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0892393Z         1
2025-08-30T09:58:47.0892451Z     
2025-08-30T09:58:47.0892547Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0892626Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0892693Z         slice(1, 3, None)
2025-08-30T09:58:47.0892749Z     
2025-08-30T09:58:47.0892850Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0892936Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0893015Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0893076Z         """
2025-08-30T09:58:47.0893166Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0893225Z         try:
2025-08-30T09:58:47.0893318Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0893572Z         except KeyError as err:
2025-08-30T09:58:47.0893686Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0893779Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0893894Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0893957Z             ):
2025-08-30T09:58:47.0894107Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0894256Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0894380Z E           KeyError: 'date'
2025-08-30T09:58:47.0894389Z 
2025-08-30T09:58:47.0894716Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0894863Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0895365Z 2025-08-30 09:54:25 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0895792Z 2025-08-30 09:54:25 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.0895893Z 2025-08-30 09:54:25 INFO Found no parameter file.
2025-08-30T09:58:47.0896177Z 2025-08-30 09:54:25 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0896357Z 2025-08-30 09:54:25 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0896539Z 2025-08-30 09:54:25 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0896732Z 2025-08-30 09:54:25 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0896921Z 2025-08-30 09:54:25 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0897188Z 2025-08-30 09:54:25 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0897378Z 2025-08-30 09:54:25 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0897572Z 2025-08-30 09:54:25 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0897677Z 2025-08-30 09:54:25 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0897932Z 2025-08-30 09:54:25 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0898049Z 2025-08-30 09:54:25 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0898195Z 2025-08-30 09:54:25 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0898357Z 2025-08-30 09:54:25 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0898485Z 2025-08-30 09:54:25 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0898622Z 2025-08-30 09:54:25 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0899224Z 2025-08-30 09:54:25 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0899418Z 2025-08-30 09:54:25 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0899535Z 2025-08-30 09:54:25 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0899654Z 2025-08-30 09:54:25 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0899781Z 2025-08-30 09:54:25 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0899945Z 2025-08-30 09:54:25 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0900064Z 2025-08-30 09:54:25 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0900184Z 2025-08-30 09:54:25 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0900326Z 2025-08-30 09:54:25 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0900443Z 2025-08-30 09:54:25 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0900585Z 2025-08-30 09:54:25 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0900741Z 2025-08-30 09:54:25 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0900881Z 2025-08-30 09:54:25 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0901030Z 2025-08-30 09:54:25 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0901141Z 2025-08-30 09:54:25 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0901425Z 2025-08-30 09:54:25 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0901743Z 2025-08-30 09:54:25 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_backtesting_fit_live_pred0/freqaimodels" does not exist.
2025-08-30T09:58:47.0902244Z 2025-08-30 09:54:25 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.0902389Z 2025-08-30 09:54:25 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0902560Z 2025-08-30 09:54:25 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0902750Z 2025-08-30 09:54:25 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0903006Z 2025-08-30 09:54:25 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0903142Z 2025-08-30 09:54:25 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0903279Z 2025-08-30 09:54:25 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0903647Z 2025-08-30 09:54:25 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0903809Z 2025-08-30 09:54:25 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0903961Z 2025-08-30 09:54:25 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0904086Z 2025-08-30 09:54:25 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0904175Z 2025-08-30 09:54:25 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0904269Z 2025-08-30 09:54:25 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0904386Z 2025-08-30 09:54:25 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0904699Z _____ test_extract_data_and_train_model_Classifiers[PyTorchMLPClassifier] ______
2025-08-30T09:58:47.0904704Z 
2025-08-30T09:58:47.0904870Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0904932Z key = 'date'
2025-08-30T09:58:47.0904937Z 
2025-08-30T09:58:47.0905009Z     def get_loc(self, key):
2025-08-30T09:58:47.0905074Z         """
2025-08-30T09:58:47.0905223Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0905278Z     
2025-08-30T09:58:47.0905343Z         Parameters
2025-08-30T09:58:47.0905404Z         ----------
2025-08-30T09:58:47.0905466Z         key : label
2025-08-30T09:58:47.0905524Z     
2025-08-30T09:58:47.0905588Z         Returns
2025-08-30T09:58:47.0905647Z         -------
2025-08-30T09:58:47.0905882Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0905945Z     
2025-08-30T09:58:47.0906006Z         Examples
2025-08-30T09:58:47.0906072Z         --------
2025-08-30T09:58:47.0906161Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0906243Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0906300Z         1
2025-08-30T09:58:47.0906354Z     
2025-08-30T09:58:47.0906452Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0906531Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0906599Z         slice(1, 3, None)
2025-08-30T09:58:47.0906653Z     
2025-08-30T09:58:47.0906758Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0906843Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0906924Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0906985Z         """
2025-08-30T09:58:47.0907081Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0907139Z         try:
2025-08-30T09:58:47.0907228Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0907306Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0907315Z 
2025-08-30T09:58:47.0907485Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0907584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0907755Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0907813Z     ???
2025-08-30T09:58:47.0907970Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0908046Z     ???
2025-08-30T09:58:47.0908307Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0908363Z     ???
2025-08-30T09:58:47.0908466Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0908475Z 
2025-08-30T09:58:47.0908531Z >   ???
2025-08-30T09:58:47.0908598Z E   KeyError: 'date'
2025-08-30T09:58:47.0908604Z 
2025-08-30T09:58:47.0908726Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0908735Z 
2025-08-30T09:58:47.0908890Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0908894Z 
2025-08-30T09:58:47.0909048Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8eea490>
2025-08-30T09:58:47.0909734Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0909821Z model = 'PyTorchMLPClassifier'
2025-08-30T09:58:47.0909826Z 
2025-08-30T09:58:47.0909906Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0909970Z         "model",
2025-08-30T09:58:47.0910027Z         [
2025-08-30T09:58:47.0910111Z             "LightGBMClassifier",
2025-08-30T09:58:47.0910185Z             "CatboostClassifier",
2025-08-30T09:58:47.0910265Z             "XGBoostClassifier",
2025-08-30T09:58:47.0910343Z             "XGBoostRFClassifier",
2025-08-30T09:58:47.0910526Z             "SKLearnRandomForestClassifier",
2025-08-30T09:58:47.0910610Z             "PyTorchMLPClassifier",
2025-08-30T09:58:47.0910667Z         ],
2025-08-30T09:58:47.0910723Z     )
2025-08-30T09:58:47.0910903Z     def test_extract_data_and_train_model_Classifiers(mocker, freqai_conf, model):
2025-08-30T09:58:47.0910980Z         can_run_model(model)
2025-08-30T09:58:47.0911035Z     
2025-08-30T09:58:47.0911128Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0911265Z         freqai_conf.update({"strategy": "freqai_test_classifier"})
2025-08-30T09:58:47.0911380Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0911515Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0911710Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0911825Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0911880Z     
2025-08-30T09:58:47.0911998Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0912079Z         freqai = strategy.freqai
2025-08-30T09:58:47.0912148Z         freqai.live = True
2025-08-30T09:58:47.0912241Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0912320Z         freqai.dk.live = True
2025-08-30T09:58:47.0912450Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0912577Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0912638Z     
2025-08-30T09:58:47.0912722Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0912776Z     
2025-08-30T09:58:47.0912928Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0913074Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.0913159Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0913214Z     
2025-08-30T09:58:47.0913303Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0913588Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0913645Z         )
2025-08-30T09:58:47.0913650Z 
2025-08-30T09:58:47.0913745Z tests/freqai/test_freqai_interface.py:217: 
2025-08-30T09:58:47.0913842Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0914025Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0914188Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0914354Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0914444Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0914574Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0914676Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0914740Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0914920Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0915013Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0915079Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0915176Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0915181Z 
2025-08-30T09:58:47.0915343Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0915404Z key = 'date'
2025-08-30T09:58:47.0915408Z 
2025-08-30T09:58:47.0915480Z     def get_loc(self, key):
2025-08-30T09:58:47.0915538Z         """
2025-08-30T09:58:47.0915696Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0915751Z     
2025-08-30T09:58:47.0915813Z         Parameters
2025-08-30T09:58:47.0915883Z         ----------
2025-08-30T09:58:47.0915945Z         key : label
2025-08-30T09:58:47.0916000Z     
2025-08-30T09:58:47.0916058Z         Returns
2025-08-30T09:58:47.0916253Z         -------
2025-08-30T09:58:47.0916388Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0916454Z     
2025-08-30T09:58:47.0916528Z         Examples
2025-08-30T09:58:47.0916587Z         --------
2025-08-30T09:58:47.0916677Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0916754Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0916817Z         1
2025-08-30T09:58:47.0916872Z     
2025-08-30T09:58:47.0916964Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0917047Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0917115Z         slice(1, 3, None)
2025-08-30T09:58:47.0917170Z     
2025-08-30T09:58:47.0917266Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0917461Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0917546Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0917603Z         """
2025-08-30T09:58:47.0917697Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0917760Z         try:
2025-08-30T09:58:47.0917851Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0917929Z         except KeyError as err:
2025-08-30T09:58:47.0918015Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0918102Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0918211Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0918322Z             ):
2025-08-30T09:58:47.0918477Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0918615Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0925900Z E           KeyError: 'date'
2025-08-30T09:58:47.0925926Z 
2025-08-30T09:58:47.0926210Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0926372Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0926893Z 2025-08-30 09:54:26 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0927382Z 2025-08-30 09:54:26 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.0927494Z 2025-08-30 09:54:26 INFO Found no parameter file.
2025-08-30T09:58:47.0927793Z 2025-08-30 09:54:26 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0927974Z 2025-08-30 09:54:26 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0928154Z 2025-08-30 09:54:26 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0928355Z 2025-08-30 09:54:26 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0928542Z 2025-08-30 09:54:26 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0928814Z 2025-08-30 09:54:26 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0929007Z 2025-08-30 09:54:26 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0929203Z 2025-08-30 09:54:26 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0929312Z 2025-08-30 09:54:26 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0929420Z 2025-08-30 09:54:26 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0929544Z 2025-08-30 09:54:26 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0929699Z 2025-08-30 09:54:26 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0929860Z 2025-08-30 09:54:26 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0929998Z 2025-08-30 09:54:26 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0930140Z 2025-08-30 09:54:26 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0930799Z 2025-08-30 09:54:26 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0930998Z 2025-08-30 09:54:26 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0931116Z 2025-08-30 09:54:26 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0931227Z 2025-08-30 09:54:26 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0931363Z 2025-08-30 09:54:26 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0931532Z 2025-08-30 09:54:26 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0931778Z 2025-08-30 09:54:26 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0931910Z 2025-08-30 09:54:26 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0932054Z 2025-08-30 09:54:26 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0932181Z 2025-08-30 09:54:26 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0932329Z 2025-08-30 09:54:26 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0932489Z 2025-08-30 09:54:26 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0932634Z 2025-08-30 09:54:26 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0932779Z 2025-08-30 09:54:26 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0932898Z 2025-08-30 09:54:26 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0933192Z 2025-08-30 09:54:26 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0933762Z 2025-08-30 09:54:26 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo6/freqaimodels" does not exist.
2025-08-30T09:58:47.0934327Z 2025-08-30 09:54:26 INFO Using resolved freqaimodel PyTorchMLPClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/PyTorchMLPClassifier.py'...
2025-08-30T09:58:47.0934483Z 2025-08-30 09:54:26 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0934650Z 2025-08-30 09:54:26 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0934850Z 2025-08-30 09:54:26 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0935101Z 2025-08-30 09:54:26 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0935237Z 2025-08-30 09:54:26 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0935380Z 2025-08-30 09:54:26 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0935547Z 2025-08-30 09:54:26 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.0935699Z 2025-08-30 09:54:26 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.0935859Z 2025-08-30 09:54:26 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0935985Z 2025-08-30 09:54:26 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0936068Z 2025-08-30 09:54:26 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0936169Z 2025-08-30 09:54:26 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0936289Z 2025-08-30 09:54:26 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0936448Z 2025-08-30 09:54:26 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0936607Z 2025-08-30 09:54:26 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0936766Z 2025-08-30 09:54:26 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0936920Z 2025-08-30 09:54:26 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0937198Z _ test_extract_data_and_train_model_Standard[ReinforcementLearner-False-True-False-True-False-0-0] _
2025-08-30T09:58:47.0937336Z 
2025-08-30T09:58:47.0937500Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0937563Z key = 'date'
2025-08-30T09:58:47.0937568Z 
2025-08-30T09:58:47.0937645Z     def get_loc(self, key):
2025-08-30T09:58:47.0937709Z         """
2025-08-30T09:58:47.0937870Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0937942Z     
2025-08-30T09:58:47.0938016Z         Parameters
2025-08-30T09:58:47.0938080Z         ----------
2025-08-30T09:58:47.0938142Z         key : label
2025-08-30T09:58:47.0938198Z     
2025-08-30T09:58:47.0938261Z         Returns
2025-08-30T09:58:47.0938320Z         -------
2025-08-30T09:58:47.0938445Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0938613Z     
2025-08-30T09:58:47.0938677Z         Examples
2025-08-30T09:58:47.0938738Z         --------
2025-08-30T09:58:47.0938829Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0938922Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0938980Z         1
2025-08-30T09:58:47.0939034Z     
2025-08-30T09:58:47.0939138Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0939218Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0939287Z         slice(1, 3, None)
2025-08-30T09:58:47.0939343Z     
2025-08-30T09:58:47.0939451Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0939535Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0939616Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0939677Z         """
2025-08-30T09:58:47.0939769Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0939827Z         try:
2025-08-30T09:58:47.0939925Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0940000Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0940005Z 
2025-08-30T09:58:47.0940177Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0940285Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0940455Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0940515Z     ???
2025-08-30T09:58:47.0940672Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0940732Z     ???
2025-08-30T09:58:47.0941008Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0941113Z     ???
2025-08-30T09:58:47.0941304Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0941314Z 
2025-08-30T09:58:47.0941415Z >   ???
2025-08-30T09:58:47.0941535Z E   KeyError: 'date'
2025-08-30T09:58:47.0941552Z 
2025-08-30T09:58:47.0941745Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0941751Z 
2025-08-30T09:58:47.0941914Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0941924Z 
2025-08-30T09:58:47.0942079Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4abf2d0>
2025-08-30T09:58:47.0942765Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0942941Z model = 'ReinforcementLearner', pca = False, dbscan = True, float32 = False
2025-08-30T09:58:47.0943058Z can_short = True, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.0943063Z 
2025-08-30T09:58:47.0943152Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0943296Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.0943458Z         [
2025-08-30T09:58:47.0943605Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.0943754Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.0944044Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0944269Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.0944564Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.0944835Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.0944986Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.0945178Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0945353Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.0945673Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0945854Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0945919Z         ],
2025-08-30T09:58:47.0945977Z     )
2025-08-30T09:58:47.0946080Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.0946276Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.0946335Z     ):
2025-08-30T09:58:47.0946408Z         can_run_model(model)
2025-08-30T09:58:47.0946469Z     
2025-08-30T09:58:47.0946535Z         test_tb = True
2025-08-30T09:58:47.0946598Z         if is_mac():
2025-08-30T09:58:47.0946674Z             test_tb = False
2025-08-30T09:58:47.0946730Z     
2025-08-30T09:58:47.0946805Z         model_save_ext = "joblib"
2025-08-30T09:58:47.0946900Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0947027Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0947149Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.0947373Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.0947611Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.0947728Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.0947921Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.0948134Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.0948340Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.0948396Z     
2025-08-30T09:58:47.0948489Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.0948571Z             model_save_ext = "zip"
2025-08-30T09:58:47.0948670Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.0948747Z             # test the RL guardrails
2025-08-30T09:58:47.0948962Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.0949128Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.0949288Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.0949349Z     
2025-08-30T09:58:47.0949445Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.0949661Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.0949817Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.0949872Z     
2025-08-30T09:58:47.0949947Z         if "PyTorch" in model:
2025-08-30T09:58:47.0950020Z             model_save_ext = "zip"
2025-08-30T09:58:47.0950175Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.0950346Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.0950518Z             if "Transformer" in model:
2025-08-30T09:58:47.0950665Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.0950756Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.0950811Z     
2025-08-30T09:58:47.0950954Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0951068Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0951182Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0951296Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0951380Z         freqai = strategy.freqai
2025-08-30T09:58:47.0951451Z         freqai.live = True
2025-08-30T09:58:47.0951619Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.0951705Z         freqai.can_short = can_short
2025-08-30T09:58:47.0951802Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0951881Z         freqai.dk.live = True
2025-08-30T09:58:47.0951970Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.0952104Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0952232Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0952288Z     
2025-08-30T09:58:47.0952379Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0952435Z     
2025-08-30T09:58:47.0952587Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.0952734Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.0952819Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0952875Z     
2025-08-30T09:58:47.0952964Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.0953054Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0953204Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0953267Z         )
2025-08-30T09:58:47.0953272Z 
2025-08-30T09:58:47.0953564Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.0953690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0953885Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0954058Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0954224Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0954315Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0954442Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0954540Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0954607Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0954792Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0954878Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0954948Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0955048Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0955053Z 
2025-08-30T09:58:47.0955217Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0955278Z key = 'date'
2025-08-30T09:58:47.0955283Z 
2025-08-30T09:58:47.0955355Z     def get_loc(self, key):
2025-08-30T09:58:47.0955420Z         """
2025-08-30T09:58:47.0955571Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0955627Z     
2025-08-30T09:58:47.0955691Z         Parameters
2025-08-30T09:58:47.0955758Z         ----------
2025-08-30T09:58:47.0955823Z         key : label
2025-08-30T09:58:47.0955880Z     
2025-08-30T09:58:47.0955946Z         Returns
2025-08-30T09:58:47.0956006Z         -------
2025-08-30T09:58:47.0956133Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0956339Z     
2025-08-30T09:58:47.0956407Z         Examples
2025-08-30T09:58:47.0956468Z         --------
2025-08-30T09:58:47.0956558Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0956641Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0956698Z         1
2025-08-30T09:58:47.0956755Z     
2025-08-30T09:58:47.0956850Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0956934Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0957001Z         slice(1, 3, None)
2025-08-30T09:58:47.0957056Z     
2025-08-30T09:58:47.0957162Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0957244Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0957326Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0957389Z         """
2025-08-30T09:58:47.0957592Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0957653Z         try:
2025-08-30T09:58:47.0957744Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0957828Z         except KeyError as err:
2025-08-30T09:58:47.0957913Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0958012Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0958126Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0958190Z             ):
2025-08-30T09:58:47.0958275Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0958353Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0958425Z E           KeyError: 'date'
2025-08-30T09:58:47.0958430Z 
2025-08-30T09:58:47.0958624Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0958761Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0959265Z 2025-08-30 09:54:26 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0959712Z 2025-08-30 09:54:26 INFO Using resolved strategy freqai_rl_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_rl_test_strat.py'...
2025-08-30T09:58:47.0959808Z 2025-08-30 09:54:26 INFO Found no parameter file.
2025-08-30T09:58:47.0960096Z 2025-08-30 09:54:26 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0960281Z 2025-08-30 09:54:26 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0960460Z 2025-08-30 09:54:26 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0960653Z 2025-08-30 09:54:26 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0960849Z 2025-08-30 09:54:26 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0961114Z 2025-08-30 09:54:26 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0961308Z 2025-08-30 09:54:26 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0961508Z 2025-08-30 09:54:26 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0961613Z 2025-08-30 09:54:26 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0961719Z 2025-08-30 09:54:26 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0961841Z 2025-08-30 09:54:26 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0961990Z 2025-08-30 09:54:26 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0962144Z 2025-08-30 09:54:26 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0962277Z 2025-08-30 09:54:26 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0962419Z 2025-08-30 09:54:26 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0962898Z 2025-08-30 09:54:26 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0963183Z 2025-08-30 09:54:26 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0963300Z 2025-08-30 09:54:26 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0963512Z 2025-08-30 09:54:26 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0963642Z 2025-08-30 09:54:26 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0963814Z 2025-08-30 09:54:26 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0963931Z 2025-08-30 09:54:26 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0964163Z 2025-08-30 09:54:26 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0964318Z 2025-08-30 09:54:26 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0964437Z 2025-08-30 09:54:26 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0964583Z 2025-08-30 09:54:26 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0964741Z 2025-08-30 09:54:26 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0964884Z 2025-08-30 09:54:26 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0965022Z 2025-08-30 09:54:26 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0965135Z 2025-08-30 09:54:26 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0965428Z 2025-08-30 09:54:26 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0965743Z 2025-08-30 09:54:26 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo7/freqaimodels" does not exist.
2025-08-30T09:58:47.0966286Z 2025-08-30 09:54:26 INFO Using resolved freqaimodel ReinforcementLearner from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/ReinforcementLearner.py'...
2025-08-30T09:58:47.0966434Z 2025-08-30 09:54:26 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0966596Z 2025-08-30 09:54:26 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0966792Z 2025-08-30 09:54:26 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0967041Z 2025-08-30 09:54:26 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0967264Z 2025-08-30 09:54:26 WARNING User tried to use SVM with RL. Deactivating SVM.
2025-08-30T09:58:47.0967579Z 2025-08-30 09:54:26 WARNING User tried to use DBSCAN with RL. Deactivating DBSCAN.
2025-08-30T09:58:47.0967912Z 2025-08-30 09:54:26 WARNING User tried to use DI_threshold with RL. Deactivating DI_threshold.
2025-08-30T09:58:47.0968112Z 2025-08-30 09:54:26 WARNING User tried to shuffle training data. Setting shuffle to False
2025-08-30T09:58:47.0968248Z 2025-08-30 09:54:26 INFO No params for buy found, using default values.
2025-08-30T09:58:47.0968397Z 2025-08-30 09:54:26 INFO No params for sell found, using default values.
2025-08-30T09:58:47.0968548Z 2025-08-30 09:54:26 INFO No params for protection found, using default values.
2025-08-30T09:58:47.0968673Z 2025-08-30 09:54:26 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.0968756Z 2025-08-30 09:54:26 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.0968849Z 2025-08-30 09:54:26 INFO Using Exchange "Binance"
2025-08-30T09:58:47.0968966Z 2025-08-30 09:54:26 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.0969128Z 2025-08-30 09:54:26 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0969288Z 2025-08-30 09:54:26 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0969439Z 2025-08-30 09:54:26 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0969594Z 2025-08-30 09:54:26 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.0970047Z _ test_extract_data_and_train_model_Standard[ReinforcementLearner_multiproc-False-False-False-True-False-0-0] _
2025-08-30T09:58:47.0970052Z 
2025-08-30T09:58:47.0970208Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0970272Z key = 'date'
2025-08-30T09:58:47.0970277Z 
2025-08-30T09:58:47.0970348Z     def get_loc(self, key):
2025-08-30T09:58:47.0970406Z         """
2025-08-30T09:58:47.0970555Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0970616Z     
2025-08-30T09:58:47.0970679Z         Parameters
2025-08-30T09:58:47.0970741Z         ----------
2025-08-30T09:58:47.0970807Z         key : label
2025-08-30T09:58:47.0970863Z     
2025-08-30T09:58:47.0970921Z         Returns
2025-08-30T09:58:47.0971062Z         -------
2025-08-30T09:58:47.0971192Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0971247Z     
2025-08-30T09:58:47.0971308Z         Examples
2025-08-30T09:58:47.0971381Z         --------
2025-08-30T09:58:47.0971472Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0971552Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0971615Z         1
2025-08-30T09:58:47.0971670Z     
2025-08-30T09:58:47.0971765Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0971845Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0971916Z         slice(1, 3, None)
2025-08-30T09:58:47.0971972Z     
2025-08-30T09:58:47.0972074Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0972162Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0972242Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0972299Z         """
2025-08-30T09:58:47.0972394Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0972457Z         try:
2025-08-30T09:58:47.0972546Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0972616Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0972625Z 
2025-08-30T09:58:47.0972802Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.0972903Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0973069Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0973135Z     ???
2025-08-30T09:58:47.0973292Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.0973513Z     ???
2025-08-30T09:58:47.0973821Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.0973887Z     ???
2025-08-30T09:58:47.0973985Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0973997Z 
2025-08-30T09:58:47.0974053Z >   ???
2025-08-30T09:58:47.0974125Z E   KeyError: 'date'
2025-08-30T09:58:47.0974130Z 
2025-08-30T09:58:47.0974250Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.0974259Z 
2025-08-30T09:58:47.0974416Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.0974421Z 
2025-08-30T09:58:47.0974580Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e46e2b90>
2025-08-30T09:58:47.0975268Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.0975429Z model = 'ReinforcementLearner_multiproc', pca = False, dbscan = False
2025-08-30T09:58:47.0975588Z float32 = False, can_short = True, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.0975593Z 
2025-08-30T09:58:47.0975676Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.0975825Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.0975881Z         [
2025-08-30T09:58:47.0976158Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.0976309Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.0976454Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0976587Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.0976738Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.0976925Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.0977069Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.0977251Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0977535Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.0977714Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0977889Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.0977949Z         ],
2025-08-30T09:58:47.0978004Z     )
2025-08-30T09:58:47.0978108Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.0978303Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.0978357Z     ):
2025-08-30T09:58:47.0978428Z         can_run_model(model)
2025-08-30T09:58:47.0978482Z     
2025-08-30T09:58:47.0978555Z         test_tb = True
2025-08-30T09:58:47.0978617Z         if is_mac():
2025-08-30T09:58:47.0978686Z             test_tb = False
2025-08-30T09:58:47.0978743Z     
2025-08-30T09:58:47.0978817Z         model_save_ext = "joblib"
2025-08-30T09:58:47.0978916Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.0979033Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.0979152Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.0979374Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.0979596Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.0979716Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.0979908Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.0980112Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.0980317Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.0980372Z     
2025-08-30T09:58:47.0980464Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.0980546Z             model_save_ext = "zip"
2025-08-30T09:58:47.0980638Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.0980717Z             # test the RL guardrails
2025-08-30T09:58:47.0980923Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.0981089Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.0981249Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.0981303Z     
2025-08-30T09:58:47.0981403Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.0981616Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.0981763Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.0981821Z     
2025-08-30T09:58:47.0981898Z         if "PyTorch" in model:
2025-08-30T09:58:47.0981971Z             model_save_ext = "zip"
2025-08-30T09:58:47.0982115Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.0982396Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.0982476Z             if "Transformer" in model:
2025-08-30T09:58:47.0982613Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.0982707Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.0982761Z     
2025-08-30T09:58:47.0982896Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.0983015Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.0983127Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.0983238Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.0983598Z         freqai = strategy.freqai
2025-08-30T09:58:47.0983695Z         freqai.live = True
2025-08-30T09:58:47.0983791Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.0983878Z         freqai.can_short = can_short
2025-08-30T09:58:47.0983982Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.0984056Z         freqai.dk.live = True
2025-08-30T09:58:47.0984141Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.0984283Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.0984418Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.0984474Z     
2025-08-30T09:58:47.0984559Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.0984618Z     
2025-08-30T09:58:47.0984772Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.0984914Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.0985015Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.0985070Z     
2025-08-30T09:58:47.0985156Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.0985242Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.0985397Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.0985455Z         )
2025-08-30T09:58:47.0985460Z 
2025-08-30T09:58:47.0985555Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.0985660Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0985846Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.0986012Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.0986181Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.0986270Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.0986401Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.0986504Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.0986567Z                 ^^^^^^^^^^
2025-08-30T09:58:47.0986753Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.0986844Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.0986909Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.0987009Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.0987015Z 
2025-08-30T09:58:47.0987173Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.0987237Z key = 'date'
2025-08-30T09:58:47.0987242Z 
2025-08-30T09:58:47.0987312Z     def get_loc(self, key):
2025-08-30T09:58:47.0987370Z         """
2025-08-30T09:58:47.0987523Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.0987577Z     
2025-08-30T09:58:47.0987639Z         Parameters
2025-08-30T09:58:47.0987711Z         ----------
2025-08-30T09:58:47.0987774Z         key : label
2025-08-30T09:58:47.0987828Z     
2025-08-30T09:58:47.0987885Z         Returns
2025-08-30T09:58:47.0987951Z         -------
2025-08-30T09:58:47.0988195Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.0988250Z     
2025-08-30T09:58:47.0988313Z         Examples
2025-08-30T09:58:47.0988372Z         --------
2025-08-30T09:58:47.0988459Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.0988536Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.0988596Z         1
2025-08-30T09:58:47.0988651Z     
2025-08-30T09:58:47.0988744Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.0988825Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.0988891Z         slice(1, 3, None)
2025-08-30T09:58:47.0988945Z     
2025-08-30T09:58:47.0989044Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.0989222Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.0989308Z         array([False,  True, False,  True])
2025-08-30T09:58:47.0989364Z         """
2025-08-30T09:58:47.0989456Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.0989517Z         try:
2025-08-30T09:58:47.0989606Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.0989679Z         except KeyError as err:
2025-08-30T09:58:47.0989768Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.0989858Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.0989968Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.0990028Z             ):
2025-08-30T09:58:47.0990111Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.0990188Z >           raise KeyError(key) from err
2025-08-30T09:58:47.0990261Z E           KeyError: 'date'
2025-08-30T09:58:47.0990266Z 
2025-08-30T09:58:47.0990457Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.0990596Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.0991096Z 2025-08-30 09:54:27 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.0991608Z 2025-08-30 09:54:27 INFO Using resolved strategy freqai_rl_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_rl_test_strat.py'...
2025-08-30T09:58:47.0991783Z 2025-08-30 09:54:27 INFO Found no parameter file.
2025-08-30T09:58:47.0992238Z 2025-08-30 09:54:27 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.0992423Z 2025-08-30 09:54:27 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.0992602Z 2025-08-30 09:54:27 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.0992805Z 2025-08-30 09:54:27 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.0992994Z 2025-08-30 09:54:27 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.0993263Z 2025-08-30 09:54:27 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.0993647Z 2025-08-30 09:54:27 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.0993850Z 2025-08-30 09:54:27 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.0993955Z 2025-08-30 09:54:27 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.0994060Z 2025-08-30 09:54:27 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.0994181Z 2025-08-30 09:54:27 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.0994332Z 2025-08-30 09:54:27 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.0994490Z 2025-08-30 09:54:27 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.0994621Z 2025-08-30 09:54:27 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.0994760Z 2025-08-30 09:54:27 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.0995374Z 2025-08-30 09:54:27 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.0995565Z 2025-08-30 09:54:27 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.0995677Z 2025-08-30 09:54:27 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.0995783Z 2025-08-30 09:54:27 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.0995911Z 2025-08-30 09:54:27 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.0996077Z 2025-08-30 09:54:27 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.0996296Z 2025-08-30 09:54:27 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.0996424Z 2025-08-30 09:54:27 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.0996565Z 2025-08-30 09:54:27 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.0996686Z 2025-08-30 09:54:27 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.0996822Z 2025-08-30 09:54:27 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.0996977Z 2025-08-30 09:54:27 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.0997118Z 2025-08-30 09:54:27 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.0997257Z 2025-08-30 09:54:27 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.0997371Z 2025-08-30 09:54:27 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.0997660Z 2025-08-30 09:54:27 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.0997978Z 2025-08-30 09:54:27 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo8/freqaimodels" does not exist.
2025-08-30T09:58:47.0998596Z 2025-08-30 09:54:27 INFO Using resolved freqaimodel ReinforcementLearner_multiproc from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/ReinforcementLearner_multiproc.py'...
2025-08-30T09:58:47.0998753Z 2025-08-30 09:54:27 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.0998919Z 2025-08-30 09:54:27 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.0999118Z 2025-08-30 09:54:27 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.0999366Z 2025-08-30 09:54:27 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.0999516Z 2025-08-30 09:54:27 WARNING User tried to use SVM with RL. Deactivating SVM.
2025-08-30T09:58:47.0999717Z 2025-08-30 09:54:27 WARNING User tried to use DI_threshold with RL. Deactivating DI_threshold.
2025-08-30T09:58:47.0999901Z 2025-08-30 09:54:27 WARNING User tried to shuffle training data. Setting shuffle to False
2025-08-30T09:58:47.1000036Z 2025-08-30 09:54:27 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1000182Z 2025-08-30 09:54:27 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1000332Z 2025-08-30 09:54:27 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1000456Z 2025-08-30 09:54:27 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1000537Z 2025-08-30 09:54:27 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1000632Z 2025-08-30 09:54:27 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1000747Z 2025-08-30 09:54:27 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1000904Z 2025-08-30 09:54:27 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1001066Z 2025-08-30 09:54:27 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1001218Z 2025-08-30 09:54:27 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1001366Z 2025-08-30 09:54:27 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1001744Z _ test_extract_data_and_train_model_Standard[PyTorchMLPRegressor-False-False-False-False-False-0-0] _
2025-08-30T09:58:47.1001750Z 
2025-08-30T09:58:47.1001904Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1001965Z key = 'date'
2025-08-30T09:58:47.1001970Z 
2025-08-30T09:58:47.1002047Z     def get_loc(self, key):
2025-08-30T09:58:47.1002106Z         """
2025-08-30T09:58:47.1002258Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1002314Z     
2025-08-30T09:58:47.1002375Z         Parameters
2025-08-30T09:58:47.1002434Z         ----------
2025-08-30T09:58:47.1002495Z         key : label
2025-08-30T09:58:47.1002551Z     
2025-08-30T09:58:47.1002609Z         Returns
2025-08-30T09:58:47.1002767Z         -------
2025-08-30T09:58:47.1002899Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1002953Z     
2025-08-30T09:58:47.1003019Z         Examples
2025-08-30T09:58:47.1003078Z         --------
2025-08-30T09:58:47.1003170Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1003248Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1003304Z         1
2025-08-30T09:58:47.1003462Z     
2025-08-30T09:58:47.1003561Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1003644Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1003711Z         slice(1, 3, None)
2025-08-30T09:58:47.1003769Z     
2025-08-30T09:58:47.1003871Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1003954Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1004039Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1004096Z         """
2025-08-30T09:58:47.1004191Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1004249Z         try:
2025-08-30T09:58:47.1004342Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1004415Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1004420Z 
2025-08-30T09:58:47.1004597Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1004700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1004870Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1004931Z     ???
2025-08-30T09:58:47.1005093Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1005148Z     ???
2025-08-30T09:58:47.1005408Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1005466Z     ???
2025-08-30T09:58:47.1005566Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1005570Z 
2025-08-30T09:58:47.1005625Z >   ???
2025-08-30T09:58:47.1005691Z E   KeyError: 'date'
2025-08-30T09:58:47.1005700Z 
2025-08-30T09:58:47.1005819Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1005828Z 
2025-08-30T09:58:47.1005984Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1005989Z 
2025-08-30T09:58:47.1006148Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c89e78d0>
2025-08-30T09:58:47.1006832Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1007007Z model = 'PyTorchMLPRegressor', pca = False, dbscan = False, float32 = False
2025-08-30T09:58:47.1007131Z can_short = False, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1007136Z 
2025-08-30T09:58:47.1007220Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1007365Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1007422Z         [
2025-08-30T09:58:47.1007695Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1007837Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1007982Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1008122Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1008270Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1008457Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1008607Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1008914Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1009092Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1009269Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1009443Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1009500Z         ],
2025-08-30T09:58:47.1009557Z     )
2025-08-30T09:58:47.1009661Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1009855Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1009910Z     ):
2025-08-30T09:58:47.1009987Z         can_run_model(model)
2025-08-30T09:58:47.1010042Z     
2025-08-30T09:58:47.1010106Z         test_tb = True
2025-08-30T09:58:47.1010171Z         if is_mac():
2025-08-30T09:58:47.1010237Z             test_tb = False
2025-08-30T09:58:47.1010292Z     
2025-08-30T09:58:47.1010367Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1010469Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1010585Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1010706Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1010927Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1011147Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1011264Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1011462Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1011665Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1011867Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1011921Z     
2025-08-30T09:58:47.1012018Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1012092Z             model_save_ext = "zip"
2025-08-30T09:58:47.1012185Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1012268Z             # test the RL guardrails
2025-08-30T09:58:47.1012476Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1012637Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1012803Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1012858Z     
2025-08-30T09:58:47.1012952Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1013167Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1013314Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1013547Z     
2025-08-30T09:58:47.1013684Z         if "PyTorch" in model:
2025-08-30T09:58:47.1013824Z             model_save_ext = "zip"
2025-08-30T09:58:47.1014086Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1014417Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1014505Z             if "Transformer" in model:
2025-08-30T09:58:47.1014646Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1014739Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1014797Z     
2025-08-30T09:58:47.1014933Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1015047Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1015162Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1015279Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1015463Z         freqai = strategy.freqai
2025-08-30T09:58:47.1015538Z         freqai.live = True
2025-08-30T09:58:47.1015630Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1015710Z         freqai.can_short = can_short
2025-08-30T09:58:47.1015807Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1015883Z         freqai.dk.live = True
2025-08-30T09:58:47.1015967Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1016098Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1016226Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1016284Z     
2025-08-30T09:58:47.1016368Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1016422Z     
2025-08-30T09:58:47.1016710Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1016961Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1017088Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1017145Z     
2025-08-30T09:58:47.1017235Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1017318Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1017491Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1017562Z         )
2025-08-30T09:58:47.1017567Z 
2025-08-30T09:58:47.1017660Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1017761Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1017948Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1018112Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1018276Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1018366Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1018494Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1018592Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1018656Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1018846Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1018928Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1018992Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1019092Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1019096Z 
2025-08-30T09:58:47.1019257Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1019315Z key = 'date'
2025-08-30T09:58:47.1019320Z 
2025-08-30T09:58:47.1019392Z     def get_loc(self, key):
2025-08-30T09:58:47.1019448Z         """
2025-08-30T09:58:47.1019596Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1019656Z     
2025-08-30T09:58:47.1019718Z         Parameters
2025-08-30T09:58:47.1019786Z         ----------
2025-08-30T09:58:47.1019847Z         key : label
2025-08-30T09:58:47.1019904Z     
2025-08-30T09:58:47.1019962Z         Returns
2025-08-30T09:58:47.1020123Z         -------
2025-08-30T09:58:47.1020251Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1020306Z     
2025-08-30T09:58:47.1020365Z         Examples
2025-08-30T09:58:47.1020425Z         --------
2025-08-30T09:58:47.1020516Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1020593Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1020650Z         1
2025-08-30T09:58:47.1020709Z     
2025-08-30T09:58:47.1020803Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1020881Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1020948Z         slice(1, 3, None)
2025-08-30T09:58:47.1021007Z     
2025-08-30T09:58:47.1021105Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1021265Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1021351Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1021408Z         """
2025-08-30T09:58:47.1021498Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1021562Z         try:
2025-08-30T09:58:47.1021653Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1021727Z         except KeyError as err:
2025-08-30T09:58:47.1021813Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1022147Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1022258Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1022316Z             ):
2025-08-30T09:58:47.1022402Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1022482Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1022553Z E           KeyError: 'date'
2025-08-30T09:58:47.1022558Z 
2025-08-30T09:58:47.1022752Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1022895Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1023508Z 2025-08-30 09:54:27 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1023937Z 2025-08-30 09:54:27 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1024036Z 2025-08-30 09:54:27 INFO Found no parameter file.
2025-08-30T09:58:47.1024319Z 2025-08-30 09:54:27 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1024495Z 2025-08-30 09:54:27 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1024689Z 2025-08-30 09:54:27 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1024889Z 2025-08-30 09:54:27 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1025079Z 2025-08-30 09:54:27 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1025349Z 2025-08-30 09:54:27 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1025537Z 2025-08-30 09:54:27 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1025730Z 2025-08-30 09:54:27 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1025870Z 2025-08-30 09:54:27 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1025983Z 2025-08-30 09:54:27 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1026105Z 2025-08-30 09:54:27 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1026262Z 2025-08-30 09:54:27 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1026424Z 2025-08-30 09:54:27 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1026554Z 2025-08-30 09:54:27 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1026698Z 2025-08-30 09:54:27 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1027307Z 2025-08-30 09:54:27 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1027498Z 2025-08-30 09:54:27 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1027620Z 2025-08-30 09:54:27 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1027730Z 2025-08-30 09:54:27 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1027854Z 2025-08-30 09:54:27 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1028025Z 2025-08-30 09:54:27 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1028265Z 2025-08-30 09:54:27 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1028390Z 2025-08-30 09:54:27 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1028533Z 2025-08-30 09:54:27 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1028661Z 2025-08-30 09:54:27 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1028800Z 2025-08-30 09:54:27 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1028950Z 2025-08-30 09:54:27 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1029097Z 2025-08-30 09:54:27 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1029239Z 2025-08-30 09:54:27 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1029352Z 2025-08-30 09:54:27 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1029642Z 2025-08-30 09:54:27 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1029960Z 2025-08-30 09:54:27 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo9/freqaimodels" does not exist.
2025-08-30T09:58:47.1030484Z 2025-08-30 09:54:27 INFO Using resolved freqaimodel PyTorchMLPRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/PyTorchMLPRegressor.py'...
2025-08-30T09:58:47.1030636Z 2025-08-30 09:54:27 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1030800Z 2025-08-30 09:54:27 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1030989Z 2025-08-30 09:54:27 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1031245Z 2025-08-30 09:54:27 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1031379Z 2025-08-30 09:54:27 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1031515Z 2025-08-30 09:54:27 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1031681Z 2025-08-30 09:54:27 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1031833Z 2025-08-30 09:54:27 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1031986Z 2025-08-30 09:54:27 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1032109Z 2025-08-30 09:54:27 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1032194Z 2025-08-30 09:54:27 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1032288Z 2025-08-30 09:54:27 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1032408Z 2025-08-30 09:54:27 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1032570Z 2025-08-30 09:54:27 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1032725Z 2025-08-30 09:54:27 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1032875Z 2025-08-30 09:54:27 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1033031Z 2025-08-30 09:54:27 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1033185Z _________________ test_start_backtesting_from_existing_folder __________________
2025-08-30T09:58:47.1033286Z 
2025-08-30T09:58:47.1033647Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1033719Z key = 'date'
2025-08-30T09:58:47.1033724Z 
2025-08-30T09:58:47.1033801Z     def get_loc(self, key):
2025-08-30T09:58:47.1033859Z         """
2025-08-30T09:58:47.1034019Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1034076Z     
2025-08-30T09:58:47.1034140Z         Parameters
2025-08-30T09:58:47.1034202Z         ----------
2025-08-30T09:58:47.1034267Z         key : label
2025-08-30T09:58:47.1034322Z     
2025-08-30T09:58:47.1034380Z         Returns
2025-08-30T09:58:47.1034445Z         -------
2025-08-30T09:58:47.1034568Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1034624Z     
2025-08-30T09:58:47.1034810Z         Examples
2025-08-30T09:58:47.1034883Z         --------
2025-08-30T09:58:47.1034973Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1035059Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1035121Z         1
2025-08-30T09:58:47.1035175Z     
2025-08-30T09:58:47.1035271Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1035349Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1035422Z         slice(1, 3, None)
2025-08-30T09:58:47.1035481Z     
2025-08-30T09:58:47.1035581Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1035669Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1035751Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1035808Z         """
2025-08-30T09:58:47.1035900Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1035961Z         try:
2025-08-30T09:58:47.1036051Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1036127Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1036131Z 
2025-08-30T09:58:47.1036306Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1036411Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1036577Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1036639Z     ???
2025-08-30T09:58:47.1036797Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1036853Z     ???
2025-08-30T09:58:47.1037111Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1037172Z     ???
2025-08-30T09:58:47.1037271Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1037275Z 
2025-08-30T09:58:47.1037330Z >   ???
2025-08-30T09:58:47.1037401Z E   KeyError: 'date'
2025-08-30T09:58:47.1037405Z 
2025-08-30T09:58:47.1037525Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1037531Z 
2025-08-30T09:58:47.1037689Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1037697Z 
2025-08-30T09:58:47.1037857Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8e3aa50>
2025-08-30T09:58:47.1038538Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1038696Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c84f5890>
2025-08-30T09:58:47.1038706Z 
2025-08-30T09:58:47.1038887Z     def test_start_backtesting_from_existing_folder(mocker, freqai_conf, caplog):
2025-08-30T09:58:47.1039004Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1039085Z         freqai_conf["runmode"] = "backtest"
2025-08-30T09:58:47.1039242Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1039386Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1039592Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1039654Z         )
2025-08-30T09:58:47.1039786Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1039899Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1040016Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1040182Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1040318Z         freqai = strategy.freqai
2025-08-30T09:58:47.1040439Z         freqai.live = False
2025-08-30T09:58:47.1040606Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1040832Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1041169Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1041328Z         sub_timerange = TimeRange.parse_timerange("20180101-20180130")
2025-08-30T09:58:47.1041533Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1041626Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1041632Z 
2025-08-30T09:58:47.1041733Z tests/freqai/test_freqai_interface.py:366: 
2025-08-30T09:58:47.1041837Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1042003Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1042100Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1042227Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1042402Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1042473Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1042665Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1042748Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1042821Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1042924Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1042929Z 
2025-08-30T09:58:47.1043091Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1043153Z key = 'date'
2025-08-30T09:58:47.1043158Z 
2025-08-30T09:58:47.1043233Z     def get_loc(self, key):
2025-08-30T09:58:47.1043291Z         """
2025-08-30T09:58:47.1043558Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1043619Z     
2025-08-30T09:58:47.1043681Z         Parameters
2025-08-30T09:58:47.1043746Z         ----------
2025-08-30T09:58:47.1043807Z         key : label
2025-08-30T09:58:47.1043866Z     
2025-08-30T09:58:47.1043929Z         Returns
2025-08-30T09:58:47.1043988Z         -------
2025-08-30T09:58:47.1044113Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1044171Z     
2025-08-30T09:58:47.1044231Z         Examples
2025-08-30T09:58:47.1044290Z         --------
2025-08-30T09:58:47.1044382Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1044457Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1044513Z         1
2025-08-30T09:58:47.1044572Z     
2025-08-30T09:58:47.1044665Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1044744Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1044810Z         slice(1, 3, None)
2025-08-30T09:58:47.1044871Z     
2025-08-30T09:58:47.1044970Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1045052Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1045139Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1045196Z         """
2025-08-30T09:58:47.1045291Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1045349Z         try:
2025-08-30T09:58:47.1045442Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1045644Z         except KeyError as err:
2025-08-30T09:58:47.1045731Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1045827Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1045938Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1045996Z             ):
2025-08-30T09:58:47.1046083Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1046163Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1046234Z E           KeyError: 'date'
2025-08-30T09:58:47.1046240Z 
2025-08-30T09:58:47.1046430Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1046573Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1047175Z 2025-08-30 09:54:28 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1047610Z 2025-08-30 09:54:28 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1047711Z 2025-08-30 09:54:28 INFO Found no parameter file.
2025-08-30T09:58:47.1047997Z 2025-08-30 09:54:28 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1048176Z 2025-08-30 09:54:28 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1048357Z 2025-08-30 09:54:28 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1048550Z 2025-08-30 09:54:28 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1048742Z 2025-08-30 09:54:28 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1049009Z 2025-08-30 09:54:28 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1049201Z 2025-08-30 09:54:28 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1049398Z 2025-08-30 09:54:28 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1049506Z 2025-08-30 09:54:28 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1049613Z 2025-08-30 09:54:28 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1049729Z 2025-08-30 09:54:28 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1049881Z 2025-08-30 09:54:28 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1050034Z 2025-08-30 09:54:28 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1050162Z 2025-08-30 09:54:28 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1050310Z 2025-08-30 09:54:28 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1050785Z 2025-08-30 09:54:28 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1050979Z 2025-08-30 09:54:28 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1051096Z 2025-08-30 09:54:28 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1051206Z 2025-08-30 09:54:28 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1051331Z 2025-08-30 09:54:28 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1051497Z 2025-08-30 09:54:28 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1051620Z 2025-08-30 09:54:28 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1051741Z 2025-08-30 09:54:28 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1051887Z 2025-08-30 09:54:28 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1052010Z 2025-08-30 09:54:28 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1052260Z 2025-08-30 09:54:28 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1052413Z 2025-08-30 09:54:28 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1052564Z 2025-08-30 09:54:28 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1052703Z 2025-08-30 09:54:28 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1052813Z 2025-08-30 09:54:28 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1053099Z 2025-08-30 09:54:28 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1053513Z 2025-08-30 09:54:28 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_from_ex0/freqaimodels" does not exist.
2025-08-30T09:58:47.1054134Z 2025-08-30 09:54:28 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.1054295Z 2025-08-30 09:54:28 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1054459Z 2025-08-30 09:54:28 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1054652Z 2025-08-30 09:54:28 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1054907Z 2025-08-30 09:54:28 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1055040Z 2025-08-30 09:54:28 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1055176Z 2025-08-30 09:54:28 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1055344Z 2025-08-30 09:54:28 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1055499Z 2025-08-30 09:54:28 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1055649Z 2025-08-30 09:54:28 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1055777Z 2025-08-30 09:54:28 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1055862Z 2025-08-30 09:54:28 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1055956Z 2025-08-30 09:54:28 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1056076Z 2025-08-30 09:54:28 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1056240Z 2025-08-30 09:54:28 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1056397Z 2025-08-30 09:54:28 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1056549Z 2025-08-30 09:54:28 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1056704Z 2025-08-30 09:54:28 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1056845Z _________________________ test_plot_feature_importance _________________________
2025-08-30T09:58:47.1056850Z 
2025-08-30T09:58:47.1057004Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1057075Z key = 'date'
2025-08-30T09:58:47.1057080Z 
2025-08-30T09:58:47.1057154Z     def get_loc(self, key):
2025-08-30T09:58:47.1057211Z         """
2025-08-30T09:58:47.1057365Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1057422Z     
2025-08-30T09:58:47.1057485Z         Parameters
2025-08-30T09:58:47.1057546Z         ----------
2025-08-30T09:58:47.1057612Z         key : label
2025-08-30T09:58:47.1057667Z     
2025-08-30T09:58:47.1057726Z         Returns
2025-08-30T09:58:47.1057785Z         -------
2025-08-30T09:58:47.1057914Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1057971Z     
2025-08-30T09:58:47.1058031Z         Examples
2025-08-30T09:58:47.1058095Z         --------
2025-08-30T09:58:47.1058189Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1058268Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1058329Z         1
2025-08-30T09:58:47.1058385Z     
2025-08-30T09:58:47.1058602Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1058682Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1058755Z         slice(1, 3, None)
2025-08-30T09:58:47.1058810Z     
2025-08-30T09:58:47.1058912Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1058999Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1059080Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1059138Z         """
2025-08-30T09:58:47.1059230Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1059292Z         try:
2025-08-30T09:58:47.1059381Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1059450Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1059455Z 
2025-08-30T09:58:47.1059713Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1059821Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1059993Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1060056Z     ???
2025-08-30T09:58:47.1060213Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1060269Z     ???
2025-08-30T09:58:47.1060528Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1060589Z     ???
2025-08-30T09:58:47.1060686Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1060691Z 
2025-08-30T09:58:47.1060746Z >   ???
2025-08-30T09:58:47.1060821Z E   KeyError: 'date'
2025-08-30T09:58:47.1060826Z 
2025-08-30T09:58:47.1060943Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1060948Z 
2025-08-30T09:58:47.1061106Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1061111Z 
2025-08-30T09:58:47.1061270Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c832cd90>
2025-08-30T09:58:47.1061955Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1061960Z 
2025-08-30T09:58:47.1062079Z     def test_plot_feature_importance(mocker, freqai_conf):
2025-08-30T09:58:47.1062226Z         from freqtrade.freqai.utils import plot_feature_importance
2025-08-30T09:58:47.1062282Z     
2025-08-30T09:58:47.1062396Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1062547Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1062642Z             {"princpial_component_analysis": "true"}
2025-08-30T09:58:47.1062704Z         )
2025-08-30T09:58:47.1062763Z     
2025-08-30T09:58:47.1062896Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1063008Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1063124Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1063242Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1063319Z         freqai = strategy.freqai
2025-08-30T09:58:47.1063575Z         freqai.live = True
2025-08-30T09:58:47.1063710Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1063798Z         freqai.dk.live = True
2025-08-30T09:58:47.1064037Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1064269Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1064368Z     
2025-08-30T09:58:47.1064505Z         freqai.dd.pair_dict = {
2025-08-30T09:58:47.1064611Z             "ADA/BTC": {
2025-08-30T09:58:47.1064712Z                 "model_filename": "fake_name",
2025-08-30T09:58:47.1064794Z                 "trained_timestamp": 1,
2025-08-30T09:58:47.1064865Z                 "data_path": "",
2025-08-30T09:58:47.1065088Z                 "extras": {},
2025-08-30T09:58:47.1065146Z             }
2025-08-30T09:58:47.1065203Z         }
2025-08-30T09:58:47.1065257Z     
2025-08-30T09:58:47.1065421Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1065559Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.1065645Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1065703Z     
2025-08-30T09:58:47.1065785Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1065932Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1065992Z         )
2025-08-30T09:58:47.1065997Z 
2025-08-30T09:58:47.1066089Z tests/freqai/test_freqai_interface.py:476: 
2025-08-30T09:58:47.1066299Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1066493Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1066672Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1066836Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1066928Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1067062Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1067161Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1067225Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1067416Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1067497Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1067563Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1067671Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1067677Z 
2025-08-30T09:58:47.1067836Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1067900Z key = 'date'
2025-08-30T09:58:47.1067905Z 
2025-08-30T09:58:47.1067981Z     def get_loc(self, key):
2025-08-30T09:58:47.1068039Z         """
2025-08-30T09:58:47.1068191Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1068247Z     
2025-08-30T09:58:47.1068317Z         Parameters
2025-08-30T09:58:47.1068380Z         ----------
2025-08-30T09:58:47.1068441Z         key : label
2025-08-30T09:58:47.1068501Z     
2025-08-30T09:58:47.1068560Z         Returns
2025-08-30T09:58:47.1068619Z         -------
2025-08-30T09:58:47.1068743Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1068801Z     
2025-08-30T09:58:47.1068860Z         Examples
2025-08-30T09:58:47.1068920Z         --------
2025-08-30T09:58:47.1069016Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1069093Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1069149Z         1
2025-08-30T09:58:47.1069204Z     
2025-08-30T09:58:47.1069302Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1069386Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1069454Z         slice(1, 3, None)
2025-08-30T09:58:47.1069512Z     
2025-08-30T09:58:47.1069611Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1069692Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1069772Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1069834Z         """
2025-08-30T09:58:47.1069925Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1069982Z         try:
2025-08-30T09:58:47.1070075Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1070149Z         except KeyError as err:
2025-08-30T09:58:47.1070237Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1070329Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1070442Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1070608Z             ):
2025-08-30T09:58:47.1070691Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1070771Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1070843Z E           KeyError: 'date'
2025-08-30T09:58:47.1070848Z 
2025-08-30T09:58:47.1071035Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1071177Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1071673Z 2025-08-30 09:54:28 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1072181Z 2025-08-30 09:54:28 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1072283Z 2025-08-30 09:54:28 INFO Found no parameter file.
2025-08-30T09:58:47.1072570Z 2025-08-30 09:54:28 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1072755Z 2025-08-30 09:54:28 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1072939Z 2025-08-30 09:54:28 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1073133Z 2025-08-30 09:54:28 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1073324Z 2025-08-30 09:54:28 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1073821Z 2025-08-30 09:54:28 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1074045Z 2025-08-30 09:54:28 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1074245Z 2025-08-30 09:54:28 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1074358Z 2025-08-30 09:54:28 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1074468Z 2025-08-30 09:54:28 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1074585Z 2025-08-30 09:54:28 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1074736Z 2025-08-30 09:54:28 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1074897Z 2025-08-30 09:54:28 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1075026Z 2025-08-30 09:54:28 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1075170Z 2025-08-30 09:54:28 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1075655Z 2025-08-30 09:54:28 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1075857Z 2025-08-30 09:54:28 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1075975Z 2025-08-30 09:54:28 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1076094Z 2025-08-30 09:54:28 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1076223Z 2025-08-30 09:54:28 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1076391Z 2025-08-30 09:54:28 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1076518Z 2025-08-30 09:54:28 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1076641Z 2025-08-30 09:54:28 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1076785Z 2025-08-30 09:54:28 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1076912Z 2025-08-30 09:54:28 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1077051Z 2025-08-30 09:54:28 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1077209Z 2025-08-30 09:54:28 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1077353Z 2025-08-30 09:54:28 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1077503Z 2025-08-30 09:54:28 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1077769Z 2025-08-30 09:54:28 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1078058Z 2025-08-30 09:54:28 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1078374Z 2025-08-30 09:54:28 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_plot_feature_importance0/freqaimodels" does not exist.
2025-08-30T09:58:47.1078882Z 2025-08-30 09:54:28 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.1079034Z 2025-08-30 09:54:28 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1079311Z 2025-08-30 09:54:28 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1079509Z 2025-08-30 09:54:28 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1079761Z 2025-08-30 09:54:28 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1079909Z 2025-08-30 09:54:28 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1080048Z 2025-08-30 09:54:28 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1080214Z 2025-08-30 09:54:28 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1080375Z 2025-08-30 09:54:28 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1080526Z 2025-08-30 09:54:28 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1080652Z 2025-08-30 09:54:28 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1080740Z 2025-08-30 09:54:28 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1080841Z 2025-08-30 09:54:28 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1080959Z 2025-08-30 09:54:28 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1081120Z 2025-08-30 09:54:28 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1081289Z 2025-08-30 09:54:28 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1081440Z 2025-08-30 09:54:28 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1081593Z 2025-08-30 09:54:28 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1081920Z _ test_extract_data_and_train_model_Standard[PyTorchTransformerRegressor-False-False-False-False-False-0-0] _
2025-08-30T09:58:47.1081926Z 
2025-08-30T09:58:47.1082083Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1082145Z key = 'date'
2025-08-30T09:58:47.1082150Z 
2025-08-30T09:58:47.1082230Z     def get_loc(self, key):
2025-08-30T09:58:47.1082316Z         """
2025-08-30T09:58:47.1082469Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1082534Z     
2025-08-30T09:58:47.1082597Z         Parameters
2025-08-30T09:58:47.1082663Z         ----------
2025-08-30T09:58:47.1082726Z         key : label
2025-08-30T09:58:47.1082786Z     
2025-08-30T09:58:47.1082844Z         Returns
2025-08-30T09:58:47.1082903Z         -------
2025-08-30T09:58:47.1083031Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1083086Z     
2025-08-30T09:58:47.1083147Z         Examples
2025-08-30T09:58:47.1083207Z         --------
2025-08-30T09:58:47.1083301Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1083483Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1083543Z         1
2025-08-30T09:58:47.1083602Z     
2025-08-30T09:58:47.1083698Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1083777Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1083854Z         slice(1, 3, None)
2025-08-30T09:58:47.1083909Z     
2025-08-30T09:58:47.1084009Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1084091Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1084304Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1084361Z         """
2025-08-30T09:58:47.1084452Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1084514Z         try:
2025-08-30T09:58:47.1084603Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1084673Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1084678Z 
2025-08-30T09:58:47.1084850Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1084956Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1085122Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1085180Z     ???
2025-08-30T09:58:47.1085446Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1085505Z     ???
2025-08-30T09:58:47.1085767Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1085832Z     ???
2025-08-30T09:58:47.1085930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1085935Z 
2025-08-30T09:58:47.1085989Z >   ???
2025-08-30T09:58:47.1086061Z E   KeyError: 'date'
2025-08-30T09:58:47.1086066Z 
2025-08-30T09:58:47.1086184Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1086189Z 
2025-08-30T09:58:47.1086343Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1086348Z 
2025-08-30T09:58:47.1086511Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e47636d0>
2025-08-30T09:58:47.1087016Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config_examples/config_freqai.example.json')], 'conv_width': 10, ...}
2025-08-30T09:58:47.1087173Z model = 'PyTorchTransformerRegressor', pca = False, dbscan = False
2025-08-30T09:58:47.1087339Z float32 = False, can_short = False, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1087344Z 
2025-08-30T09:58:47.1087429Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1087570Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1087632Z         [
2025-08-30T09:58:47.1087772Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1088023Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1088294Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1088553Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1088734Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1088924Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1089075Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1089264Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1089438Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1089615Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1089786Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1089844Z         ],
2025-08-30T09:58:47.1089904Z     )
2025-08-30T09:58:47.1090004Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1090193Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1090249Z     ):
2025-08-30T09:58:47.1090329Z         can_run_model(model)
2025-08-30T09:58:47.1090384Z     
2025-08-30T09:58:47.1090449Z         test_tb = True
2025-08-30T09:58:47.1090515Z         if is_mac():
2025-08-30T09:58:47.1090688Z             test_tb = False
2025-08-30T09:58:47.1090742Z     
2025-08-30T09:58:47.1090816Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1090917Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1091034Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1091150Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1091375Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1091598Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1091713Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1091990Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1092199Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1092405Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1092465Z     
2025-08-30T09:58:47.1092553Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1092630Z             model_save_ext = "zip"
2025-08-30T09:58:47.1092726Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1092805Z             # test the RL guardrails
2025-08-30T09:58:47.1093012Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1093177Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1093495Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1093602Z     
2025-08-30T09:58:47.1093725Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1093947Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1094108Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1094170Z     
2025-08-30T09:58:47.1094246Z         if "PyTorch" in model:
2025-08-30T09:58:47.1094333Z             model_save_ext = "zip"
2025-08-30T09:58:47.1094478Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1094646Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1094728Z             if "Transformer" in model:
2025-08-30T09:58:47.1094868Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1094958Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1095019Z     
2025-08-30T09:58:47.1095158Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1095275Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1095390Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1095511Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1095587Z         freqai = strategy.freqai
2025-08-30T09:58:47.1095657Z         freqai.live = True
2025-08-30T09:58:47.1095750Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1095825Z         freqai.can_short = can_short
2025-08-30T09:58:47.1095922Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1095998Z         freqai.dk.live = True
2025-08-30T09:58:47.1096081Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1096214Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1096342Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1096400Z     
2025-08-30T09:58:47.1096485Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1096540Z     
2025-08-30T09:58:47.1096699Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1096970Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1097055Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1097115Z     
2025-08-30T09:58:47.1097200Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1097282Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1097431Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1097492Z         )
2025-08-30T09:58:47.1097498Z 
2025-08-30T09:58:47.1097591Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1097690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1097878Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1098166Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1098335Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1098433Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1098559Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1098657Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1098725Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1098914Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1099006Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1099070Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1099174Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1099179Z 
2025-08-30T09:58:47.1099340Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1099404Z key = 'date'
2025-08-30T09:58:47.1099409Z 
2025-08-30T09:58:47.1099485Z     def get_loc(self, key):
2025-08-30T09:58:47.1099543Z         """
2025-08-30T09:58:47.1099691Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1099756Z     
2025-08-30T09:58:47.1099820Z         Parameters
2025-08-30T09:58:47.1099881Z         ----------
2025-08-30T09:58:47.1099943Z         key : label
2025-08-30T09:58:47.1100001Z     
2025-08-30T09:58:47.1100059Z         Returns
2025-08-30T09:58:47.1100120Z         -------
2025-08-30T09:58:47.1100249Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1100303Z     
2025-08-30T09:58:47.1100362Z         Examples
2025-08-30T09:58:47.1100421Z         --------
2025-08-30T09:58:47.1100514Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1100592Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1100647Z         1
2025-08-30T09:58:47.1100706Z     
2025-08-30T09:58:47.1100805Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1100886Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1100954Z         slice(1, 3, None)
2025-08-30T09:58:47.1101019Z     
2025-08-30T09:58:47.1101121Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1101203Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1101288Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1101345Z         """
2025-08-30T09:58:47.1101437Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1101494Z         try:
2025-08-30T09:58:47.1101590Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1101664Z         except KeyError as err:
2025-08-30T09:58:47.1101751Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1101848Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1101959Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1102020Z             ):
2025-08-30T09:58:47.1102108Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1102186Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1102257Z E           KeyError: 'date'
2025-08-30T09:58:47.1102353Z 
2025-08-30T09:58:47.1102544Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1102688Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1103190Z 2025-08-30 09:54:29 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1103718Z 2025-08-30 09:54:29 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1103821Z 2025-08-30 09:54:29 INFO Found no parameter file.
2025-08-30T09:58:47.1104225Z 2025-08-30 09:54:29 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1104407Z 2025-08-30 09:54:29 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1104596Z 2025-08-30 09:54:29 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1104791Z 2025-08-30 09:54:29 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1104982Z 2025-08-30 09:54:29 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1105250Z 2025-08-30 09:54:29 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1105439Z 2025-08-30 09:54:29 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1105634Z 2025-08-30 09:54:29 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1105743Z 2025-08-30 09:54:29 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1105855Z 2025-08-30 09:54:29 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1105973Z 2025-08-30 09:54:29 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1106130Z 2025-08-30 09:54:29 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1106287Z 2025-08-30 09:54:29 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1106415Z 2025-08-30 09:54:29 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1106556Z 2025-08-30 09:54:29 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1107032Z 2025-08-30 09:54:29 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1107222Z 2025-08-30 09:54:29 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1107341Z 2025-08-30 09:54:29 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1107453Z 2025-08-30 09:54:29 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1107580Z 2025-08-30 09:54:29 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1107749Z 2025-08-30 09:54:29 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1107870Z 2025-08-30 09:54:29 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1107992Z 2025-08-30 09:54:29 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1108136Z 2025-08-30 09:54:29 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1108259Z 2025-08-30 09:54:29 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1108402Z 2025-08-30 09:54:29 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1108553Z 2025-08-30 09:54:29 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1108701Z 2025-08-30 09:54:29 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1108847Z 2025-08-30 09:54:29 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1108959Z 2025-08-30 09:54:29 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1109257Z 2025-08-30 09:54:29 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1109692Z 2025-08-30 09:54:29 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo10/freqaimodels" does not exist.
2025-08-30T09:58:47.1110285Z 2025-08-30 09:54:29 INFO Using resolved freqaimodel PyTorchTransformerRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/PyTorchTransformerRegressor.py'...
2025-08-30T09:58:47.1110434Z 2025-08-30 09:54:29 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1110597Z 2025-08-30 09:54:29 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1110790Z 2025-08-30 09:54:29 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1111122Z 2025-08-30 09:54:29 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1111261Z 2025-08-30 09:54:29 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1111406Z 2025-08-30 09:54:29 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1111591Z 2025-08-30 09:54:29 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1111746Z 2025-08-30 09:54:29 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1111958Z 2025-08-30 09:54:29 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1112187Z 2025-08-30 09:54:29 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1112335Z 2025-08-30 09:54:29 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1112502Z 2025-08-30 09:54:29 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1112669Z 2025-08-30 09:54:29 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1112842Z 2025-08-30 09:54:29 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1113001Z 2025-08-30 09:54:29 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1113158Z 2025-08-30 09:54:29 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1113312Z 2025-08-30 09:54:29 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1113845Z _ test_extract_data_and_train_model_MultiTargets[CatboostClassifierMultiTarget-freqai_test_multimodel_classifier_strat] _
2025-08-30T09:58:47.1113852Z 
2025-08-30T09:58:47.1114012Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1114080Z key = 'date'
2025-08-30T09:58:47.1114085Z 
2025-08-30T09:58:47.1114157Z     def get_loc(self, key):
2025-08-30T09:58:47.1114213Z         """
2025-08-30T09:58:47.1114372Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1114428Z     
2025-08-30T09:58:47.1114499Z         Parameters
2025-08-30T09:58:47.1114562Z         ----------
2025-08-30T09:58:47.1114629Z         key : label
2025-08-30T09:58:47.1114684Z     
2025-08-30T09:58:47.1114747Z         Returns
2025-08-30T09:58:47.1114809Z         -------
2025-08-30T09:58:47.1114934Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1114989Z     
2025-08-30T09:58:47.1115051Z         Examples
2025-08-30T09:58:47.1115115Z         --------
2025-08-30T09:58:47.1115204Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1115285Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1115345Z         1
2025-08-30T09:58:47.1115404Z     
2025-08-30T09:58:47.1115498Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1115581Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1115654Z         slice(1, 3, None)
2025-08-30T09:58:47.1115709Z     
2025-08-30T09:58:47.1115808Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1115897Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1115977Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1116033Z         """
2025-08-30T09:58:47.1116269Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1116331Z         try:
2025-08-30T09:58:47.1116419Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1116490Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1116494Z 
2025-08-30T09:58:47.1116672Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1116773Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1116940Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1117001Z     ???
2025-08-30T09:58:47.1117159Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1117214Z     ???
2025-08-30T09:58:47.1117580Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1117645Z     ???
2025-08-30T09:58:47.1117745Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1117758Z 
2025-08-30T09:58:47.1117814Z >   ???
2025-08-30T09:58:47.1117885Z E   KeyError: 'date'
2025-08-30T09:58:47.1117890Z 
2025-08-30T09:58:47.1118007Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1118012Z 
2025-08-30T09:58:47.1118169Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1118174Z 
2025-08-30T09:58:47.1118332Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc678990>
2025-08-30T09:58:47.1119014Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1119114Z model = 'CatboostClassifierMultiTarget'
2025-08-30T09:58:47.1119220Z strat = 'freqai_test_multimodel_classifier_strat'
2025-08-30T09:58:47.1119224Z 
2025-08-30T09:58:47.1119307Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1119377Z         "model, strat",
2025-08-30T09:58:47.1119439Z         [
2025-08-30T09:58:47.1119607Z             ("LightGBMRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.1119766Z             ("XGBoostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.1119931Z             ("CatboostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.1120133Z             ("LightGBMClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.1120327Z             ("CatboostClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.1120390Z         ],
2025-08-30T09:58:47.1120447Z     )
2025-08-30T09:58:47.1120651Z     def test_extract_data_and_train_model_MultiTargets(mocker, freqai_conf, model, strat):
2025-08-30T09:58:47.1120723Z         can_run_model(model)
2025-08-30T09:58:47.1120784Z     
2025-08-30T09:58:47.1120903Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1120997Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1121092Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1121226Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1121340Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1121460Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1121572Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1121649Z         freqai = strategy.freqai
2025-08-30T09:58:47.1121719Z         freqai.live = True
2025-08-30T09:58:47.1121816Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1121888Z         freqai.dk.live = True
2025-08-30T09:58:47.1122023Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1122153Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1122298Z     
2025-08-30T09:58:47.1122382Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1122437Z     
2025-08-30T09:58:47.1122596Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1122732Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.1122817Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1122875Z     
2025-08-30T09:58:47.1122958Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1123106Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1123168Z         )
2025-08-30T09:58:47.1123173Z 
2025-08-30T09:58:47.1123265Z tests/freqai/test_freqai_interface.py:169: 
2025-08-30T09:58:47.1123602Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1123809Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1123979Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1124150Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1124242Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1124374Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1124473Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1124537Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1124727Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1124810Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1124876Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1124980Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1124985Z 
2025-08-30T09:58:47.1125148Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1125208Z key = 'date'
2025-08-30T09:58:47.1125213Z 
2025-08-30T09:58:47.1125292Z     def get_loc(self, key):
2025-08-30T09:58:47.1125349Z         """
2025-08-30T09:58:47.1125500Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1125556Z     
2025-08-30T09:58:47.1125623Z         Parameters
2025-08-30T09:58:47.1125685Z         ----------
2025-08-30T09:58:47.1125747Z         key : label
2025-08-30T09:58:47.1125836Z     
2025-08-30T09:58:47.1125896Z         Returns
2025-08-30T09:58:47.1125955Z         -------
2025-08-30T09:58:47.1126077Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1126135Z     
2025-08-30T09:58:47.1126195Z         Examples
2025-08-30T09:58:47.1126253Z         --------
2025-08-30T09:58:47.1126345Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1126432Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1126494Z         1
2025-08-30T09:58:47.1126622Z     
2025-08-30T09:58:47.1126791Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1126910Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1127013Z         slice(1, 3, None)
2025-08-30T09:58:47.1127159Z     
2025-08-30T09:58:47.1127257Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1127598Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1127716Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1127809Z         """
2025-08-30T09:58:47.1127973Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1128082Z         try:
2025-08-30T09:58:47.1128189Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1128354Z         except KeyError as err:
2025-08-30T09:58:47.1128530Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1128662Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1128807Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1128958Z             ):
2025-08-30T09:58:47.1129062Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1129355Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1129517Z E           KeyError: 'date'
2025-08-30T09:58:47.1129522Z 
2025-08-30T09:58:47.1129748Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1129943Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1130513Z 2025-08-30 09:54:29 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1131114Z 2025-08-30 09:54:29 INFO Using resolved strategy freqai_test_multimodel_classifier_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_multimodel_classifier_strat.py'...
2025-08-30T09:58:47.1131372Z 2025-08-30 09:54:29 INFO Found no parameter file.
2025-08-30T09:58:47.1131757Z 2025-08-30 09:54:29 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1131993Z 2025-08-30 09:54:29 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1132206Z 2025-08-30 09:54:29 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1132472Z 2025-08-30 09:54:29 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1132679Z 2025-08-30 09:54:29 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1133026Z 2025-08-30 09:54:29 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1133322Z 2025-08-30 09:54:29 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1133843Z 2025-08-30 09:54:29 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1141114Z 2025-08-30 09:54:29 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1141371Z 2025-08-30 09:54:29 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1141597Z 2025-08-30 09:54:29 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1141813Z 2025-08-30 09:54:29 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1142001Z 2025-08-30 09:54:29 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1142146Z 2025-08-30 09:54:29 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1142293Z 2025-08-30 09:54:29 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1142777Z 2025-08-30 09:54:29 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1142980Z 2025-08-30 09:54:29 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1143099Z 2025-08-30 09:54:29 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1143223Z 2025-08-30 09:54:29 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1143551Z 2025-08-30 09:54:29 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1143767Z 2025-08-30 09:54:29 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1143895Z 2025-08-30 09:54:29 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1144021Z 2025-08-30 09:54:29 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1144169Z 2025-08-30 09:54:29 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1144290Z 2025-08-30 09:54:29 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1144430Z 2025-08-30 09:54:29 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1144590Z 2025-08-30 09:54:29 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1144735Z 2025-08-30 09:54:29 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1144886Z 2025-08-30 09:54:29 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1145225Z 2025-08-30 09:54:29 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1145530Z 2025-08-30 09:54:29 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1145857Z 2025-08-30 09:54:29 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo11/freqaimodels" does not exist.
2025-08-30T09:58:47.1146470Z 2025-08-30 09:54:29 INFO Using resolved freqaimodel CatboostClassifierMultiTarget from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/CatboostClassifierMultiTarget.py'...
2025-08-30T09:58:47.1146619Z 2025-08-30 09:54:29 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1146972Z 2025-08-30 09:54:29 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1147171Z 2025-08-30 09:54:29 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1147428Z 2025-08-30 09:54:29 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1147569Z 2025-08-30 09:54:29 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1147706Z 2025-08-30 09:54:29 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1147870Z 2025-08-30 09:54:29 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1148026Z 2025-08-30 09:54:29 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1148176Z 2025-08-30 09:54:29 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1148299Z 2025-08-30 09:54:29 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1148387Z 2025-08-30 09:54:29 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1148487Z 2025-08-30 09:54:29 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1148605Z 2025-08-30 09:54:29 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1148769Z 2025-08-30 09:54:29 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1148935Z 2025-08-30 09:54:29 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1149086Z 2025-08-30 09:54:29 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1149235Z 2025-08-30 09:54:29 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1149540Z _ test_extract_data_and_train_model_MultiTargets[LightGBMRegressorMultiTarget-freqai_test_multimodel_strat] _
2025-08-30T09:58:47.1149548Z 
2025-08-30T09:58:47.1149707Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1149771Z key = 'date'
2025-08-30T09:58:47.1149776Z 
2025-08-30T09:58:47.1149857Z     def get_loc(self, key):
2025-08-30T09:58:47.1149920Z         """
2025-08-30T09:58:47.1150075Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1150137Z     
2025-08-30T09:58:47.1150205Z         Parameters
2025-08-30T09:58:47.1150272Z         ----------
2025-08-30T09:58:47.1150335Z         key : label
2025-08-30T09:58:47.1150395Z     
2025-08-30T09:58:47.1150453Z         Returns
2025-08-30T09:58:47.1150513Z         -------
2025-08-30T09:58:47.1150644Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1150698Z     
2025-08-30T09:58:47.1150762Z         Examples
2025-08-30T09:58:47.1150822Z         --------
2025-08-30T09:58:47.1150918Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1150997Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1151054Z         1
2025-08-30T09:58:47.1151114Z     
2025-08-30T09:58:47.1151209Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1151291Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1151368Z         slice(1, 3, None)
2025-08-30T09:58:47.1151424Z     
2025-08-30T09:58:47.1151527Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1151702Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1151788Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1151848Z         """
2025-08-30T09:58:47.1151940Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1152004Z         try:
2025-08-30T09:58:47.1152093Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1152163Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1152168Z 
2025-08-30T09:58:47.1152348Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1152454Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1152623Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1152682Z     ???
2025-08-30T09:58:47.1152921Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1152979Z     ???
2025-08-30T09:58:47.1153239Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1153303Z     ???
2025-08-30T09:58:47.1153604Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1153612Z 
2025-08-30T09:58:47.1153671Z >   ???
2025-08-30T09:58:47.1153748Z E   KeyError: 'date'
2025-08-30T09:58:47.1153753Z 
2025-08-30T09:58:47.1153878Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1153883Z 
2025-08-30T09:58:47.1154043Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1154048Z 
2025-08-30T09:58:47.1154209Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c89c9b10>
2025-08-30T09:58:47.1154904Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1155103Z model = 'LightGBMRegressorMultiTarget', strat = 'freqai_test_multimodel_strat'
2025-08-30T09:58:47.1155115Z 
2025-08-30T09:58:47.1155205Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1155272Z         "model, strat",
2025-08-30T09:58:47.1155329Z         [
2025-08-30T09:58:47.1155500Z             ("LightGBMRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.1155656Z             ("XGBoostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.1155817Z             ("CatboostRegressorMultiTarget", "freqai_test_multimodel_strat"),
2025-08-30T09:58:47.1156020Z             ("LightGBMClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.1156216Z             ("CatboostClassifierMultiTarget", "freqai_test_multimodel_classifier_strat"),
2025-08-30T09:58:47.1156277Z         ],
2025-08-30T09:58:47.1156334Z     )
2025-08-30T09:58:47.1156538Z     def test_extract_data_and_train_model_MultiTargets(mocker, freqai_conf, model, strat):
2025-08-30T09:58:47.1156617Z         can_run_model(model)
2025-08-30T09:58:47.1156673Z     
2025-08-30T09:58:47.1156796Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1156887Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1156981Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1157115Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1157236Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1157350Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1157464Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1157546Z         freqai = strategy.freqai
2025-08-30T09:58:47.1157616Z         freqai.live = True
2025-08-30T09:58:47.1157713Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1157791Z         freqai.dk.live = True
2025-08-30T09:58:47.1157925Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1158191Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1158247Z     
2025-08-30T09:58:47.1158337Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1158393Z     
2025-08-30T09:58:47.1158615Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1158884Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.1159036Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1159137Z     
2025-08-30T09:58:47.1159291Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1159459Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1159518Z         )
2025-08-30T09:58:47.1159524Z 
2025-08-30T09:58:47.1159758Z tests/freqai/test_freqai_interface.py:169: 
2025-08-30T09:58:47.1159874Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1160061Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1160233Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1160401Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1160492Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1160618Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1160721Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1160786Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1160973Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1161056Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1161129Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1161235Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1161240Z 
2025-08-30T09:58:47.1161401Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1161471Z key = 'date'
2025-08-30T09:58:47.1161476Z 
2025-08-30T09:58:47.1161548Z     def get_loc(self, key):
2025-08-30T09:58:47.1161607Z         """
2025-08-30T09:58:47.1161762Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1161818Z     
2025-08-30T09:58:47.1161882Z         Parameters
2025-08-30T09:58:47.1161951Z         ----------
2025-08-30T09:58:47.1162014Z         key : label
2025-08-30T09:58:47.1162070Z     
2025-08-30T09:58:47.1162128Z         Returns
2025-08-30T09:58:47.1162198Z         -------
2025-08-30T09:58:47.1162426Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1162527Z     
2025-08-30T09:58:47.1162642Z         Examples
2025-08-30T09:58:47.1162748Z         --------
2025-08-30T09:58:47.1162900Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1162983Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1163045Z         1
2025-08-30T09:58:47.1163107Z     
2025-08-30T09:58:47.1163204Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1163289Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1163463Z         slice(1, 3, None)
2025-08-30T09:58:47.1163522Z     
2025-08-30T09:58:47.1163625Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1163713Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1163794Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1163851Z         """
2025-08-30T09:58:47.1163944Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1164003Z         try:
2025-08-30T09:58:47.1164090Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1164165Z         except KeyError as err:
2025-08-30T09:58:47.1164262Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1164354Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1164464Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1164688Z             ):
2025-08-30T09:58:47.1164773Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1164850Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1164925Z E           KeyError: 'date'
2025-08-30T09:58:47.1164931Z 
2025-08-30T09:58:47.1165119Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1165260Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1165770Z 2025-08-30 09:54:30 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1166381Z 2025-08-30 09:54:30 INFO Using resolved strategy freqai_test_multimodel_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_multimodel_strat.py'...
2025-08-30T09:58:47.1166481Z 2025-08-30 09:54:30 INFO Found no parameter file.
2025-08-30T09:58:47.1166781Z 2025-08-30 09:54:30 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1166959Z 2025-08-30 09:54:30 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1167138Z 2025-08-30 09:54:30 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1167339Z 2025-08-30 09:54:30 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1167529Z 2025-08-30 09:54:30 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1167797Z 2025-08-30 09:54:30 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1167990Z 2025-08-30 09:54:30 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1168193Z 2025-08-30 09:54:30 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1168303Z 2025-08-30 09:54:30 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1168409Z 2025-08-30 09:54:30 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1168532Z 2025-08-30 09:54:30 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1168680Z 2025-08-30 09:54:30 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1168834Z 2025-08-30 09:54:30 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1168970Z 2025-08-30 09:54:30 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1169110Z 2025-08-30 09:54:30 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1169588Z 2025-08-30 09:54:30 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1169784Z 2025-08-30 09:54:30 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1169904Z 2025-08-30 09:54:30 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1170014Z 2025-08-30 09:54:30 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1170151Z 2025-08-30 09:54:30 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1170317Z 2025-08-30 09:54:30 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1170439Z 2025-08-30 09:54:30 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1170569Z 2025-08-30 09:54:30 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1170711Z 2025-08-30 09:54:30 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1170831Z 2025-08-30 09:54:30 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1170973Z 2025-08-30 09:54:30 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1171124Z 2025-08-30 09:54:30 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1171272Z 2025-08-30 09:54:30 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1171506Z 2025-08-30 09:54:30 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1171622Z 2025-08-30 09:54:30 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1171904Z 2025-08-30 09:54:30 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1172224Z 2025-08-30 09:54:30 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo12/freqaimodels" does not exist.
2025-08-30T09:58:47.1173038Z 2025-08-30 09:54:30 INFO Using resolved freqaimodel LightGBMRegressorMultiTarget from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressorMultiTarget.py'...
2025-08-30T09:58:47.1173288Z 2025-08-30 09:54:30 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1173777Z 2025-08-30 09:54:30 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1174105Z 2025-08-30 09:54:30 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1174508Z 2025-08-30 09:54:30 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1174658Z 2025-08-30 09:54:30 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1174802Z 2025-08-30 09:54:30 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1174967Z 2025-08-30 09:54:30 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1175119Z 2025-08-30 09:54:30 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1175274Z 2025-08-30 09:54:30 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1175406Z 2025-08-30 09:54:30 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1175486Z 2025-08-30 09:54:30 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1175580Z 2025-08-30 09:54:30 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1175707Z 2025-08-30 09:54:30 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1175864Z 2025-08-30 09:54:30 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1176024Z 2025-08-30 09:54:30 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1176184Z 2025-08-30 09:54:30 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1176338Z 2025-08-30 09:54:30 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1176522Z ________ test_start_backtesting[CatboostRegressor-2-freqai_test_strat] _________
2025-08-30T09:58:47.1176527Z 
2025-08-30T09:58:47.1176689Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1176751Z key = 'date'
2025-08-30T09:58:47.1176756Z 
2025-08-30T09:58:47.1176831Z     def get_loc(self, key):
2025-08-30T09:58:47.1176893Z         """
2025-08-30T09:58:47.1177045Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1177105Z     
2025-08-30T09:58:47.1177172Z         Parameters
2025-08-30T09:58:47.1177234Z         ----------
2025-08-30T09:58:47.1177295Z         key : label
2025-08-30T09:58:47.1177350Z     
2025-08-30T09:58:47.1177412Z         Returns
2025-08-30T09:58:47.1177472Z         -------
2025-08-30T09:58:47.1177594Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1177653Z     
2025-08-30T09:58:47.1177713Z         Examples
2025-08-30T09:58:47.1177772Z         --------
2025-08-30T09:58:47.1177861Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1177943Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1177999Z         1
2025-08-30T09:58:47.1178054Z     
2025-08-30T09:58:47.1178152Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1178237Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1178304Z         slice(1, 3, None)
2025-08-30T09:58:47.1178358Z     
2025-08-30T09:58:47.1178464Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1178698Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1178778Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1178837Z         """
2025-08-30T09:58:47.1178928Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1178984Z         try:
2025-08-30T09:58:47.1179070Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1179145Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1179150Z 
2025-08-30T09:58:47.1179321Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1179424Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1179700Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1179761Z     ???
2025-08-30T09:58:47.1179920Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1179986Z     ???
2025-08-30T09:58:47.1180244Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1180302Z     ???
2025-08-30T09:58:47.1180400Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1180409Z 
2025-08-30T09:58:47.1180462Z >   ???
2025-08-30T09:58:47.1180528Z E   KeyError: 'date'
2025-08-30T09:58:47.1180533Z 
2025-08-30T09:58:47.1180651Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1180660Z 
2025-08-30T09:58:47.1180814Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1180818Z 
2025-08-30T09:58:47.1180971Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c86bb310>
2025-08-30T09:58:47.1181664Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1181831Z model = 'CatboostRegressor', num_files = 2, strat = 'freqai_test_strat'
2025-08-30T09:58:47.1181989Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65dc456550>
2025-08-30T09:58:47.1181994Z 
2025-08-30T09:58:47.1182080Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1182158Z         "model, num_files, strat",
2025-08-30T09:58:47.1182216Z         [
2025-08-30T09:58:47.1182323Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1182424Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1182519Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1182626Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1182764Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1182878Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1182990Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1183111Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1183221Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1183567Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1183665Z         ],
2025-08-30T09:58:47.1183728Z     )
2025-08-30T09:58:47.1183933Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1184005Z         can_run_model(model)
2025-08-30T09:58:47.1184076Z         test_tb = True
2025-08-30T09:58:47.1184155Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1184224Z             test_tb = False
2025-08-30T09:58:47.1184280Z     
2025-08-30T09:58:47.1184442Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1184535Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1184590Z     
2025-08-30T09:58:47.1184800Z         Trade.use_db = False
2025-08-30T09:58:47.1184855Z     
2025-08-30T09:58:47.1184950Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1185069Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1185159Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1185214Z     
2025-08-30T09:58:47.1185301Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1185399Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1185455Z     
2025-08-30T09:58:47.1185526Z         if "test_4ac" in model:
2025-08-30T09:58:47.1185859Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1185958Z     
2025-08-30T09:58:47.1186088Z         if "PyTorch" in model:
2025-08-30T09:58:47.1186484Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1186682Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1186769Z             if "Transformer" in model:
2025-08-30T09:58:47.1186913Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1187009Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1187068Z     
2025-08-30T09:58:47.1187220Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1187307Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1187364Z         )
2025-08-30T09:58:47.1187418Z     
2025-08-30T09:58:47.1187559Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1187674Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1187792Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1187909Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1187984Z         freqai = strategy.freqai
2025-08-30T09:58:47.1188058Z         freqai.live = False
2025-08-30T09:58:47.1188153Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1188247Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1188377Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1188506Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1188648Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1188845Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1188933Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1188938Z 
2025-08-30T09:58:47.1189035Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1189144Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1189310Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1189409Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1189536Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1189708Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1189776Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1189966Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1190048Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1190112Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1190213Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1190218Z 
2025-08-30T09:58:47.1190380Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1190441Z key = 'date'
2025-08-30T09:58:47.1190446Z 
2025-08-30T09:58:47.1190521Z     def get_loc(self, key):
2025-08-30T09:58:47.1190577Z         """
2025-08-30T09:58:47.1190836Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1190894Z     
2025-08-30T09:58:47.1190956Z         Parameters
2025-08-30T09:58:47.1191017Z         ----------
2025-08-30T09:58:47.1191079Z         key : label
2025-08-30T09:58:47.1191138Z     
2025-08-30T09:58:47.1191196Z         Returns
2025-08-30T09:58:47.1191254Z         -------
2025-08-30T09:58:47.1191382Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1191437Z     
2025-08-30T09:58:47.1191496Z         Examples
2025-08-30T09:58:47.1191556Z         --------
2025-08-30T09:58:47.1191648Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1191726Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1191783Z         1
2025-08-30T09:58:47.1191842Z     
2025-08-30T09:58:47.1192019Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1192103Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1192173Z         slice(1, 3, None)
2025-08-30T09:58:47.1192237Z     
2025-08-30T09:58:47.1192337Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1192420Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1192504Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1192561Z         """
2025-08-30T09:58:47.1192651Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1192712Z         try:
2025-08-30T09:58:47.1192800Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1192875Z         except KeyError as err:
2025-08-30T09:58:47.1192962Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1193057Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1193173Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1193231Z             ):
2025-08-30T09:58:47.1193318Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1193610Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1193697Z E           KeyError: 'date'
2025-08-30T09:58:47.1193703Z 
2025-08-30T09:58:47.1193898Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1194036Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1194539Z 2025-08-30 09:54:30 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1194968Z 2025-08-30 09:54:30 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1195064Z 2025-08-30 09:54:30 INFO Found no parameter file.
2025-08-30T09:58:47.1195356Z 2025-08-30 09:54:30 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1195536Z 2025-08-30 09:54:30 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1195720Z 2025-08-30 09:54:30 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1195915Z 2025-08-30 09:54:30 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1196103Z 2025-08-30 09:54:30 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1196374Z 2025-08-30 09:54:30 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1196561Z 2025-08-30 09:54:30 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1196754Z 2025-08-30 09:54:30 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1196868Z 2025-08-30 09:54:30 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1196974Z 2025-08-30 09:54:30 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1197090Z 2025-08-30 09:54:30 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1197379Z 2025-08-30 09:54:30 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1197534Z 2025-08-30 09:54:30 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1197662Z 2025-08-30 09:54:30 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1197802Z 2025-08-30 09:54:30 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1198273Z 2025-08-30 09:54:30 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1198460Z 2025-08-30 09:54:30 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1198695Z 2025-08-30 09:54:30 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1198807Z 2025-08-30 09:54:30 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1198936Z 2025-08-30 09:54:30 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1199111Z 2025-08-30 09:54:30 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1199227Z 2025-08-30 09:54:30 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1199347Z 2025-08-30 09:54:30 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1199489Z 2025-08-30 09:54:30 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1199610Z 2025-08-30 09:54:30 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1199749Z 2025-08-30 09:54:30 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1199899Z 2025-08-30 09:54:30 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1200045Z 2025-08-30 09:54:30 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1200189Z 2025-08-30 09:54:30 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1200300Z 2025-08-30 09:54:30 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1200590Z 2025-08-30 09:54:30 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1200904Z 2025-08-30 09:54:30 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_Catboos0/freqaimodels" does not exist.
2025-08-30T09:58:47.1201405Z 2025-08-30 09:54:30 INFO Using resolved freqaimodel CatboostRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/CatboostRegressor.py'...
2025-08-30T09:58:47.1201554Z 2025-08-30 09:54:30 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1201716Z 2025-08-30 09:54:30 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1201905Z 2025-08-30 09:54:30 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1202159Z 2025-08-30 09:54:30 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1202294Z 2025-08-30 09:54:30 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1202432Z 2025-08-30 09:54:30 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1202597Z 2025-08-30 09:54:30 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1202747Z 2025-08-30 09:54:30 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1202898Z 2025-08-30 09:54:30 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1203026Z 2025-08-30 09:54:30 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1203106Z 2025-08-30 09:54:30 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1203204Z 2025-08-30 09:54:30 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1203321Z 2025-08-30 09:54:30 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1203594Z 2025-08-30 09:54:30 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1203754Z 2025-08-30 09:54:30 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1204028Z 2025-08-30 09:54:30 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1204181Z 2025-08-30 09:54:30 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1204439Z _ test_extract_data_and_train_model_Standard[LightGBMRegressor-True-False-True-True-False-0-0] _
2025-08-30T09:58:47.1204444Z 
2025-08-30T09:58:47.1204598Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1204661Z key = 'date'
2025-08-30T09:58:47.1204666Z 
2025-08-30T09:58:47.1204738Z     def get_loc(self, key):
2025-08-30T09:58:47.1204794Z         """
2025-08-30T09:58:47.1204951Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1205006Z     
2025-08-30T09:58:47.1205192Z         Parameters
2025-08-30T09:58:47.1205258Z         ----------
2025-08-30T09:58:47.1205323Z         key : label
2025-08-30T09:58:47.1205377Z     
2025-08-30T09:58:47.1205434Z         Returns
2025-08-30T09:58:47.1205506Z         -------
2025-08-30T09:58:47.1205628Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1205684Z     
2025-08-30T09:58:47.1205743Z         Examples
2025-08-30T09:58:47.1205808Z         --------
2025-08-30T09:58:47.1205897Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1205975Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1206035Z         1
2025-08-30T09:58:47.1206089Z     
2025-08-30T09:58:47.1206183Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1206263Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1206336Z         slice(1, 3, None)
2025-08-30T09:58:47.1206391Z     
2025-08-30T09:58:47.1206493Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1206583Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1206665Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1206722Z         """
2025-08-30T09:58:47.1206818Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1206878Z         try:
2025-08-30T09:58:47.1206966Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1207035Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1207039Z 
2025-08-30T09:58:47.1207215Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1207318Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1207481Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1207542Z     ???
2025-08-30T09:58:47.1207697Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1207753Z     ???
2025-08-30T09:58:47.1208016Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1208072Z     ???
2025-08-30T09:58:47.1208171Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1208183Z 
2025-08-30T09:58:47.1208237Z >   ???
2025-08-30T09:58:47.1208306Z E   KeyError: 'date'
2025-08-30T09:58:47.1208311Z 
2025-08-30T09:58:47.1208429Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1208433Z 
2025-08-30T09:58:47.1208588Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1208598Z 
2025-08-30T09:58:47.1208751Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8612d10>
2025-08-30T09:58:47.1209431Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1209601Z model = 'LightGBMRegressor', pca = True, dbscan = False, float32 = True
2025-08-30T09:58:47.1209771Z can_short = True, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1209780Z 
2025-08-30T09:58:47.1210060Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1210327Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1210412Z         [
2025-08-30T09:58:47.1210562Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1210710Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1210858Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1210995Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1211146Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1211332Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1211587Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1211775Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1211959Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1212130Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1212300Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1212361Z         ],
2025-08-30T09:58:47.1212417Z     )
2025-08-30T09:58:47.1212520Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1212720Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1212779Z     ):
2025-08-30T09:58:47.1212853Z         can_run_model(model)
2025-08-30T09:58:47.1212908Z     
2025-08-30T09:58:47.1212983Z         test_tb = True
2025-08-30T09:58:47.1213046Z         if is_mac():
2025-08-30T09:58:47.1213113Z             test_tb = False
2025-08-30T09:58:47.1213167Z     
2025-08-30T09:58:47.1213244Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1213452Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1213572Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1213694Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1213917Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1214141Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1214261Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1214455Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1214666Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1214868Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1214933Z     
2025-08-30T09:58:47.1215021Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1215096Z             model_save_ext = "zip"
2025-08-30T09:58:47.1215192Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1215267Z             # test the RL guardrails
2025-08-30T09:58:47.1215474Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1215640Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1215798Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1215853Z     
2025-08-30T09:58:47.1215952Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1216170Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1216320Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1216503Z     
2025-08-30T09:58:47.1216582Z         if "PyTorch" in model:
2025-08-30T09:58:47.1216654Z             model_save_ext = "zip"
2025-08-30T09:58:47.1216798Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1216968Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1217045Z             if "Transformer" in model:
2025-08-30T09:58:47.1217184Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1217276Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1217333Z     
2025-08-30T09:58:47.1217467Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1217686Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1217809Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1217920Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1218002Z         freqai = strategy.freqai
2025-08-30T09:58:47.1218077Z         freqai.live = True
2025-08-30T09:58:47.1218164Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1218238Z         freqai.can_short = can_short
2025-08-30T09:58:47.1218338Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1218411Z         freqai.dk.live = True
2025-08-30T09:58:47.1218495Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1218625Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1218756Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1218811Z     
2025-08-30T09:58:47.1218893Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1218950Z     
2025-08-30T09:58:47.1219108Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1219245Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1219333Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1219392Z     
2025-08-30T09:58:47.1219476Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1219557Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1219710Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1219767Z         )
2025-08-30T09:58:47.1219772Z 
2025-08-30T09:58:47.1219866Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1219970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1220154Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1220317Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1220486Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1220574Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1220697Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1220798Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1220864Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1221048Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1221130Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1221198Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1221298Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1221302Z 
2025-08-30T09:58:47.1221461Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1221525Z key = 'date'
2025-08-30T09:58:47.1221530Z 
2025-08-30T09:58:47.1221601Z     def get_loc(self, key):
2025-08-30T09:58:47.1221661Z         """
2025-08-30T09:58:47.1221814Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1221868Z     
2025-08-30T09:58:47.1221931Z         Parameters
2025-08-30T09:58:47.1222165Z         ----------
2025-08-30T09:58:47.1222230Z         key : label
2025-08-30T09:58:47.1222285Z     
2025-08-30T09:58:47.1222342Z         Returns
2025-08-30T09:58:47.1222405Z         -------
2025-08-30T09:58:47.1222527Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1222581Z     
2025-08-30T09:58:47.1222639Z         Examples
2025-08-30T09:58:47.1222702Z         --------
2025-08-30T09:58:47.1222789Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1222865Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1222925Z         1
2025-08-30T09:58:47.1222979Z     
2025-08-30T09:58:47.1223071Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1223150Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1223301Z         slice(1, 3, None)
2025-08-30T09:58:47.1223455Z     
2025-08-30T09:58:47.1223556Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1223647Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1223728Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1223784Z         """
2025-08-30T09:58:47.1223873Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1223932Z         try:
2025-08-30T09:58:47.1224020Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1224093Z         except KeyError as err:
2025-08-30T09:58:47.1224185Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1224275Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1224384Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1224443Z             ):
2025-08-30T09:58:47.1224525Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1224606Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1224677Z E           KeyError: 'date'
2025-08-30T09:58:47.1224683Z 
2025-08-30T09:58:47.1224874Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1225023Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1225527Z 2025-08-30 09:54:31 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1225990Z 2025-08-30 09:54:31 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1226084Z 2025-08-30 09:54:31 INFO Found no parameter file.
2025-08-30T09:58:47.1226373Z 2025-08-30 09:54:31 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1226582Z 2025-08-30 09:54:31 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1226764Z 2025-08-30 09:54:31 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1226963Z 2025-08-30 09:54:31 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1227158Z 2025-08-30 09:54:31 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1227420Z 2025-08-30 09:54:31 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1227608Z 2025-08-30 09:54:31 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1227803Z 2025-08-30 09:54:31 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1227906Z 2025-08-30 09:54:31 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1228010Z 2025-08-30 09:54:31 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1228135Z 2025-08-30 09:54:31 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1228283Z 2025-08-30 09:54:31 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1228445Z 2025-08-30 09:54:31 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1228703Z 2025-08-30 09:54:31 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1228846Z 2025-08-30 09:54:31 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1229319Z 2025-08-30 09:54:31 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1229507Z 2025-08-30 09:54:31 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1229627Z 2025-08-30 09:54:31 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1229735Z 2025-08-30 09:54:31 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1229967Z 2025-08-30 09:54:31 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1230138Z 2025-08-30 09:54:31 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1230258Z 2025-08-30 09:54:31 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1230380Z 2025-08-30 09:54:31 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1230525Z 2025-08-30 09:54:31 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1230642Z 2025-08-30 09:54:31 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1230780Z 2025-08-30 09:54:31 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1230935Z 2025-08-30 09:54:31 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1231079Z 2025-08-30 09:54:31 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1231220Z 2025-08-30 09:54:31 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1231337Z 2025-08-30 09:54:31 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1231622Z 2025-08-30 09:54:31 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1232008Z 2025-08-30 09:54:31 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo13/freqaimodels" does not exist.
2025-08-30T09:58:47.1232763Z 2025-08-30 09:54:31 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.1232914Z 2025-08-30 09:54:31 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1233078Z 2025-08-30 09:54:31 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1233269Z 2025-08-30 09:54:31 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1233727Z 2025-08-30 09:54:31 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1233875Z 2025-08-30 09:54:31 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1234012Z 2025-08-30 09:54:31 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1234179Z 2025-08-30 09:54:31 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1234330Z 2025-08-30 09:54:31 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1234477Z 2025-08-30 09:54:31 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1234609Z 2025-08-30 09:54:31 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1234688Z 2025-08-30 09:54:31 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1234782Z 2025-08-30 09:54:31 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1234901Z 2025-08-30 09:54:31 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1235058Z 2025-08-30 09:54:31 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1235218Z 2025-08-30 09:54:31 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1235372Z 2025-08-30 09:54:31 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1235808Z 2025-08-30 09:54:31 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1236164Z _____ test_start_backtesting[CatboostClassifier-2-freqai_test_classifier] ______
2025-08-30T09:58:47.1236173Z 
2025-08-30T09:58:47.1236345Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1236406Z key = 'date'
2025-08-30T09:58:47.1236411Z 
2025-08-30T09:58:47.1236482Z     def get_loc(self, key):
2025-08-30T09:58:47.1236539Z         """
2025-08-30T09:58:47.1236698Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1236753Z     
2025-08-30T09:58:47.1236817Z         Parameters
2025-08-30T09:58:47.1236884Z         ----------
2025-08-30T09:58:47.1236944Z         key : label
2025-08-30T09:58:47.1237011Z     
2025-08-30T09:58:47.1237230Z         Returns
2025-08-30T09:58:47.1237299Z         -------
2025-08-30T09:58:47.1237421Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1237481Z     
2025-08-30T09:58:47.1237543Z         Examples
2025-08-30T09:58:47.1237601Z         --------
2025-08-30T09:58:47.1237689Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1237766Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1237827Z         1
2025-08-30T09:58:47.1237881Z     
2025-08-30T09:58:47.1237982Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1238068Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1238136Z         slice(1, 3, None)
2025-08-30T09:58:47.1238192Z     
2025-08-30T09:58:47.1238297Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1238381Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1238462Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1238524Z         """
2025-08-30T09:58:47.1238624Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1238682Z         try:
2025-08-30T09:58:47.1238770Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1238848Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1238853Z 
2025-08-30T09:58:47.1239024Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1239124Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1239295Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1239354Z     ???
2025-08-30T09:58:47.1239512Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1239567Z     ???
2025-08-30T09:58:47.1239833Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1239889Z     ???
2025-08-30T09:58:47.1239991Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1239996Z 
2025-08-30T09:58:47.1240055Z >   ???
2025-08-30T09:58:47.1240122Z E   KeyError: 'date'
2025-08-30T09:58:47.1240131Z 
2025-08-30T09:58:47.1240248Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1240252Z 
2025-08-30T09:58:47.1240412Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1240416Z 
2025-08-30T09:58:47.1240572Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65def11bd0>
2025-08-30T09:58:47.1241258Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1241442Z model = 'CatboostClassifier', num_files = 2, strat = 'freqai_test_classifier'
2025-08-30T09:58:47.1241602Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65ddb3f010>
2025-08-30T09:58:47.1241611Z 
2025-08-30T09:58:47.1241694Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1241774Z         "model, num_files, strat",
2025-08-30T09:58:47.1241832Z         [
2025-08-30T09:58:47.1242032Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1242133Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1242229Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1242335Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1242465Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1242582Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1242695Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1242807Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1242920Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1243123Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1243185Z         ],
2025-08-30T09:58:47.1243245Z     )
2025-08-30T09:58:47.1243562Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1243636Z         can_run_model(model)
2025-08-30T09:58:47.1243702Z         test_tb = True
2025-08-30T09:58:47.1243785Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1243852Z             test_tb = False
2025-08-30T09:58:47.1243907Z     
2025-08-30T09:58:47.1244060Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1244152Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1244208Z     
2025-08-30T09:58:47.1244278Z         Trade.use_db = False
2025-08-30T09:58:47.1244341Z     
2025-08-30T09:58:47.1244434Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1244553Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1244647Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1244701Z     
2025-08-30T09:58:47.1244788Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1244889Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1244943Z     
2025-08-30T09:58:47.1245015Z         if "test_4ac" in model:
2025-08-30T09:58:47.1245231Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1245293Z     
2025-08-30T09:58:47.1245367Z         if "PyTorch" in model:
2025-08-30T09:58:47.1245510Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1245683Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1245763Z             if "Transformer" in model:
2025-08-30T09:58:47.1245900Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1245998Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1246054Z     
2025-08-30T09:58:47.1246198Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1246288Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1246351Z         )
2025-08-30T09:58:47.1246405Z     
2025-08-30T09:58:47.1246541Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1246659Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1246771Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1246883Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1246963Z         freqai = strategy.freqai
2025-08-30T09:58:47.1247035Z         freqai.live = False
2025-08-30T09:58:47.1247124Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1247218Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1247357Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1247484Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1247622Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1247951Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1248040Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1248045Z 
2025-08-30T09:58:47.1248139Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1248248Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1248414Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1248504Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1248635Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1248971Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1249041Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1249223Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1249314Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1249379Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1249478Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1249484Z 
2025-08-30T09:58:47.1249647Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1249716Z key = 'date'
2025-08-30T09:58:47.1249728Z 
2025-08-30T09:58:47.1249806Z     def get_loc(self, key):
2025-08-30T09:58:47.1249885Z         """
2025-08-30T09:58:47.1250033Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1250088Z     
2025-08-30T09:58:47.1250150Z         Parameters
2025-08-30T09:58:47.1250216Z         ----------
2025-08-30T09:58:47.1250280Z         key : label
2025-08-30T09:58:47.1250335Z     
2025-08-30T09:58:47.1250402Z         Returns
2025-08-30T09:58:47.1250459Z         -------
2025-08-30T09:58:47.1250582Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1250636Z     
2025-08-30T09:58:47.1250698Z         Examples
2025-08-30T09:58:47.1250755Z         --------
2025-08-30T09:58:47.1250841Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1250921Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1250979Z         1
2025-08-30T09:58:47.1251034Z     
2025-08-30T09:58:47.1251128Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1251211Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1251278Z         slice(1, 3, None)
2025-08-30T09:58:47.1251333Z     
2025-08-30T09:58:47.1251436Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1251518Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1251601Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1251662Z         """
2025-08-30T09:58:47.1251751Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1251815Z         try:
2025-08-30T09:58:47.1251903Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1251983Z         except KeyError as err:
2025-08-30T09:58:47.1252070Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1252159Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1252273Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1252332Z             ):
2025-08-30T09:58:47.1252419Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1252495Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1252568Z E           KeyError: 'date'
2025-08-30T09:58:47.1252573Z 
2025-08-30T09:58:47.1252757Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1252900Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1253504Z 2025-08-30 09:54:31 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1254091Z 2025-08-30 09:54:31 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.1254188Z 2025-08-30 09:54:31 INFO Found no parameter file.
2025-08-30T09:58:47.1254477Z 2025-08-30 09:54:31 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1254653Z 2025-08-30 09:54:31 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1254830Z 2025-08-30 09:54:31 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1255132Z 2025-08-30 09:54:31 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1255325Z 2025-08-30 09:54:31 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1255592Z 2025-08-30 09:54:31 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1255784Z 2025-08-30 09:54:31 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1255979Z 2025-08-30 09:54:31 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1256084Z 2025-08-30 09:54:31 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1256193Z 2025-08-30 09:54:31 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1256310Z 2025-08-30 09:54:31 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1256457Z 2025-08-30 09:54:31 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1256623Z 2025-08-30 09:54:31 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1256753Z 2025-08-30 09:54:31 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1256894Z 2025-08-30 09:54:31 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1257381Z 2025-08-30 09:54:31 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1257572Z 2025-08-30 09:54:31 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1257685Z 2025-08-30 09:54:31 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1257798Z 2025-08-30 09:54:31 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1257925Z 2025-08-30 09:54:31 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1258090Z 2025-08-30 09:54:31 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1258209Z 2025-08-30 09:54:31 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1258335Z 2025-08-30 09:54:31 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1258476Z 2025-08-30 09:54:31 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1258597Z 2025-08-30 09:54:31 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1258741Z 2025-08-30 09:54:31 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1258891Z 2025-08-30 09:54:31 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1259032Z 2025-08-30 09:54:31 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1259175Z 2025-08-30 09:54:31 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1259284Z 2025-08-30 09:54:31 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1259569Z 2025-08-30 09:54:31 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1260000Z 2025-08-30 09:54:31 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_Catboos1/freqaimodels" does not exist.
2025-08-30T09:58:47.1260852Z 2025-08-30 09:54:31 INFO Using resolved freqaimodel CatboostClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/CatboostClassifier.py'...
2025-08-30T09:58:47.1261254Z 2025-08-30 09:54:31 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1261536Z 2025-08-30 09:54:31 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1261842Z 2025-08-30 09:54:31 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1262242Z 2025-08-30 09:54:31 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1262469Z 2025-08-30 09:54:31 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1262708Z 2025-08-30 09:54:31 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1263137Z 2025-08-30 09:54:31 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1263605Z 2025-08-30 09:54:31 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1263890Z 2025-08-30 09:54:31 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1264111Z 2025-08-30 09:54:31 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1264256Z 2025-08-30 09:54:31 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1264429Z 2025-08-30 09:54:31 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1264642Z 2025-08-30 09:54:31 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1264928Z 2025-08-30 09:54:31 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1265216Z 2025-08-30 09:54:31 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1265498Z 2025-08-30 09:54:31 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1265788Z 2025-08-30 09:54:31 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1266127Z ______ test_extract_data_and_train_model_Classifiers[CatboostClassifier] _______
2025-08-30T09:58:47.1266139Z 
2025-08-30T09:58:47.1266431Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1266545Z key = 'date'
2025-08-30T09:58:47.1266556Z 
2025-08-30T09:58:47.1266694Z     def get_loc(self, key):
2025-08-30T09:58:47.1266800Z         """
2025-08-30T09:58:47.1267081Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1267190Z     
2025-08-30T09:58:47.1267315Z         Parameters
2025-08-30T09:58:47.1267432Z         ----------
2025-08-30T09:58:47.1267549Z         key : label
2025-08-30T09:58:47.1267657Z     
2025-08-30T09:58:47.1267764Z         Returns
2025-08-30T09:58:47.1267870Z         -------
2025-08-30T09:58:47.1268095Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1268201Z     
2025-08-30T09:58:47.1268307Z         Examples
2025-08-30T09:58:47.1268427Z         --------
2025-08-30T09:58:47.1268595Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1268739Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1268855Z         1
2025-08-30T09:58:47.1268957Z     
2025-08-30T09:58:47.1269140Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1269278Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1269397Z         slice(1, 3, None)
2025-08-30T09:58:47.1269503Z     
2025-08-30T09:58:47.1269712Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1269852Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1269989Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1270093Z         """
2025-08-30T09:58:47.1270254Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1270353Z         try:
2025-08-30T09:58:47.1270521Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1270654Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1270663Z 
2025-08-30T09:58:47.1270977Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1271387Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1271676Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1271776Z     ???
2025-08-30T09:58:47.1272063Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1272163Z     ???
2025-08-30T09:58:47.1272621Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1272722Z     ???
2025-08-30T09:58:47.1272904Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1272912Z 
2025-08-30T09:58:47.1273011Z >   ???
2025-08-30T09:58:47.1273123Z E   KeyError: 'date'
2025-08-30T09:58:47.1273131Z 
2025-08-30T09:58:47.1273729Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1273744Z 
2025-08-30T09:58:47.1274061Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1274080Z 
2025-08-30T09:58:47.1274374Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65b4e56490>
2025-08-30T09:58:47.1275612Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1275755Z model = 'CatboostClassifier'
2025-08-30T09:58:47.1275764Z 
2025-08-30T09:58:47.1275900Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1276011Z         "model",
2025-08-30T09:58:47.1276112Z         [
2025-08-30T09:58:47.1276241Z             "LightGBMClassifier",
2025-08-30T09:58:47.1276375Z             "CatboostClassifier",
2025-08-30T09:58:47.1276506Z             "XGBoostClassifier",
2025-08-30T09:58:47.1276648Z             "XGBoostRFClassifier",
2025-08-30T09:58:47.1276816Z             "SKLearnRandomForestClassifier",
2025-08-30T09:58:47.1276966Z             "PyTorchMLPClassifier",
2025-08-30T09:58:47.1277073Z         ],
2025-08-30T09:58:47.1277170Z     )
2025-08-30T09:58:47.1277514Z     def test_extract_data_and_train_model_Classifiers(mocker, freqai_conf, model):
2025-08-30T09:58:47.1277643Z         can_run_model(model)
2025-08-30T09:58:47.1277741Z     
2025-08-30T09:58:47.1277911Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1278155Z         freqai_conf.update({"strategy": "freqai_test_classifier"})
2025-08-30T09:58:47.1278357Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1278596Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1278792Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1278995Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1279096Z     
2025-08-30T09:58:47.1279315Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1279450Z         freqai = strategy.freqai
2025-08-30T09:58:47.1279575Z         freqai.live = True
2025-08-30T09:58:47.1279754Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1279881Z         freqai.dk.live = True
2025-08-30T09:58:47.1280108Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1280341Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1280453Z     
2025-08-30T09:58:47.1280605Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1280706Z     
2025-08-30T09:58:47.1281003Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1281244Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.1281397Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1281495Z     
2025-08-30T09:58:47.1281660Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1281924Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1282017Z         )
2025-08-30T09:58:47.1282225Z 
2025-08-30T09:58:47.1282404Z tests/freqai/test_freqai_interface.py:217: 
2025-08-30T09:58:47.1282589Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1282929Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1283210Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1283704Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1283872Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1284091Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1284256Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1284363Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1284913Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1285101Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1285184Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1285297Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1285303Z 
2025-08-30T09:58:47.1285482Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1285547Z key = 'date'
2025-08-30T09:58:47.1285552Z 
2025-08-30T09:58:47.1285626Z     def get_loc(self, key):
2025-08-30T09:58:47.1285687Z         """
2025-08-30T09:58:47.1285850Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1285905Z     
2025-08-30T09:58:47.1285972Z         Parameters
2025-08-30T09:58:47.1286041Z         ----------
2025-08-30T09:58:47.1286103Z         key : label
2025-08-30T09:58:47.1286157Z     
2025-08-30T09:58:47.1286219Z         Returns
2025-08-30T09:58:47.1286285Z         -------
2025-08-30T09:58:47.1286414Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1286470Z     
2025-08-30T09:58:47.1286533Z         Examples
2025-08-30T09:58:47.1286596Z         --------
2025-08-30T09:58:47.1286686Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1286767Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1286823Z         1
2025-08-30T09:58:47.1286878Z     
2025-08-30T09:58:47.1286972Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1287058Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1287125Z         slice(1, 3, None)
2025-08-30T09:58:47.1287180Z     
2025-08-30T09:58:47.1287284Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1287369Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1287452Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1287510Z         """
2025-08-30T09:58:47.1287609Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1287667Z         try:
2025-08-30T09:58:47.1287757Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1287842Z         except KeyError as err:
2025-08-30T09:58:47.1287929Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1288020Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1288137Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1288195Z             ):
2025-08-30T09:58:47.1288279Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1288358Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1288434Z E           KeyError: 'date'
2025-08-30T09:58:47.1288439Z 
2025-08-30T09:58:47.1288636Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1288779Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1289288Z 2025-08-30 09:54:32 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1289752Z 2025-08-30 09:54:32 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.1289990Z 2025-08-30 09:54:32 INFO Found no parameter file.
2025-08-30T09:58:47.1290290Z 2025-08-30 09:54:32 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1290469Z 2025-08-30 09:54:32 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1290649Z 2025-08-30 09:54:32 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1290852Z 2025-08-30 09:54:32 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1291124Z 2025-08-30 09:54:32 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1291391Z 2025-08-30 09:54:32 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1291592Z 2025-08-30 09:54:32 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1291788Z 2025-08-30 09:54:32 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1291892Z 2025-08-30 09:54:32 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1292002Z 2025-08-30 09:54:32 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1292121Z 2025-08-30 09:54:32 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1292273Z 2025-08-30 09:54:32 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1292432Z 2025-08-30 09:54:32 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1292562Z 2025-08-30 09:54:32 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1292706Z 2025-08-30 09:54:32 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1293192Z 2025-08-30 09:54:32 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1293599Z 2025-08-30 09:54:32 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1293770Z 2025-08-30 09:54:32 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1293886Z 2025-08-30 09:54:32 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1294024Z 2025-08-30 09:54:32 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1294195Z 2025-08-30 09:54:32 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1294313Z 2025-08-30 09:54:32 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1294440Z 2025-08-30 09:54:32 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1294590Z 2025-08-30 09:54:32 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1294711Z 2025-08-30 09:54:32 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1294859Z 2025-08-30 09:54:32 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1295010Z 2025-08-30 09:54:32 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1295153Z 2025-08-30 09:54:32 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1295301Z 2025-08-30 09:54:32 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1295415Z 2025-08-30 09:54:32 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1295708Z 2025-08-30 09:54:32 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1296037Z 2025-08-30 09:54:32 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo14/freqaimodels" does not exist.
2025-08-30T09:58:47.1296558Z 2025-08-30 09:54:32 INFO Using resolved freqaimodel CatboostClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/CatboostClassifier.py'...
2025-08-30T09:58:47.1296706Z 2025-08-30 09:54:32 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1297043Z 2025-08-30 09:54:32 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1297237Z 2025-08-30 09:54:32 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1297484Z 2025-08-30 09:54:32 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1297620Z 2025-08-30 09:54:32 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1297760Z 2025-08-30 09:54:32 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1297919Z 2025-08-30 09:54:32 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1298176Z 2025-08-30 09:54:32 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1298334Z 2025-08-30 09:54:32 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1298458Z 2025-08-30 09:54:32 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1298543Z 2025-08-30 09:54:32 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1298641Z 2025-08-30 09:54:32 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1298758Z 2025-08-30 09:54:32 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1298917Z 2025-08-30 09:54:32 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1299079Z 2025-08-30 09:54:32 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1299229Z 2025-08-30 09:54:32 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1299378Z 2025-08-30 09:54:32 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1299665Z _ test_extract_data_and_train_model_Standard[XGBoostRFRegressor-False-False-False-True-False-0-0] _
2025-08-30T09:58:47.1299671Z 
2025-08-30T09:58:47.1299829Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1299895Z key = 'date'
2025-08-30T09:58:47.1299900Z 
2025-08-30T09:58:47.1299978Z     def get_loc(self, key):
2025-08-30T09:58:47.1300036Z         """
2025-08-30T09:58:47.1300186Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1300241Z     
2025-08-30T09:58:47.1300310Z         Parameters
2025-08-30T09:58:47.1300372Z         ----------
2025-08-30T09:58:47.1300433Z         key : label
2025-08-30T09:58:47.1300496Z     
2025-08-30T09:58:47.1300554Z         Returns
2025-08-30T09:58:47.1300613Z         -------
2025-08-30T09:58:47.1300734Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1300793Z     
2025-08-30T09:58:47.1300853Z         Examples
2025-08-30T09:58:47.1300912Z         --------
2025-08-30T09:58:47.1301013Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1301092Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1301150Z         1
2025-08-30T09:58:47.1301204Z     
2025-08-30T09:58:47.1301304Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1301388Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1301456Z         slice(1, 3, None)
2025-08-30T09:58:47.1301516Z     
2025-08-30T09:58:47.1301617Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1301701Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1301781Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1301843Z         """
2025-08-30T09:58:47.1301935Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1301992Z         try:
2025-08-30T09:58:47.1302086Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1302155Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1302159Z 
2025-08-30T09:58:47.1302331Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1302438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1302697Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1302756Z     ???
2025-08-30T09:58:47.1302914Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1302975Z     ???
2025-08-30T09:58:47.1303236Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1303293Z     ???
2025-08-30T09:58:47.1303580Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1303587Z 
2025-08-30T09:58:47.1303644Z >   ???
2025-08-30T09:58:47.1303716Z E   KeyError: 'date'
2025-08-30T09:58:47.1303721Z 
2025-08-30T09:58:47.1303851Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1303855Z 
2025-08-30T09:58:47.1304139Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1304145Z 
2025-08-30T09:58:47.1304304Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e47b0290>
2025-08-30T09:58:47.1305004Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1305175Z model = 'XGBoostRFRegressor', pca = False, dbscan = False, float32 = False
2025-08-30T09:58:47.1305290Z can_short = True, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1305295Z 
2025-08-30T09:58:47.1305384Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1305526Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1305584Z         [
2025-08-30T09:58:47.1305726Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1305875Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1306019Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1306164Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1306315Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1306497Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1306643Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1306831Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1307005Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1307176Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1307352Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1307410Z         ],
2025-08-30T09:58:47.1307466Z     )
2025-08-30T09:58:47.1307574Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1307771Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1307829Z     ):
2025-08-30T09:58:47.1307906Z         can_run_model(model)
2025-08-30T09:58:47.1307960Z     
2025-08-30T09:58:47.1308026Z         test_tb = True
2025-08-30T09:58:47.1308091Z         if is_mac():
2025-08-30T09:58:47.1308166Z             test_tb = False
2025-08-30T09:58:47.1308221Z     
2025-08-30T09:58:47.1308294Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1308393Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1308510Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1308626Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1308851Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1309079Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1309317Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1309510Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1309722Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1309924Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1309980Z     
2025-08-30T09:58:47.1310077Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1310151Z             model_save_ext = "zip"
2025-08-30T09:58:47.1310245Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1310323Z             # test the RL guardrails
2025-08-30T09:58:47.1310608Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1310774Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1310939Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1310998Z     
2025-08-30T09:58:47.1311091Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1311303Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1311454Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1311513Z     
2025-08-30T09:58:47.1311586Z         if "PyTorch" in model:
2025-08-30T09:58:47.1311664Z             model_save_ext = "zip"
2025-08-30T09:58:47.1311810Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1311981Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1312059Z             if "Transformer" in model:
2025-08-30T09:58:47.1312213Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1312319Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1312374Z     
2025-08-30T09:58:47.1312512Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1312628Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1312742Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1312857Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1312932Z         freqai = strategy.freqai
2025-08-30T09:58:47.1313005Z         freqai.live = True
2025-08-30T09:58:47.1313097Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1313177Z         freqai.can_short = can_short
2025-08-30T09:58:47.1313271Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1313501Z         freqai.dk.live = True
2025-08-30T09:58:47.1313622Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1313757Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1313892Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1313951Z     
2025-08-30T09:58:47.1314034Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1314088Z     
2025-08-30T09:58:47.1314241Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1314383Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1314467Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1314520Z     
2025-08-30T09:58:47.1314610Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1314692Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1314845Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1314907Z         )
2025-08-30T09:58:47.1314912Z 
2025-08-30T09:58:47.1315007Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1315106Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1315418Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1315588Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1315753Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1315845Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1315978Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1316075Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1316137Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1316326Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1316535Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1316604Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1316704Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1316718Z 
2025-08-30T09:58:47.1316878Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1316940Z key = 'date'
2025-08-30T09:58:47.1316945Z 
2025-08-30T09:58:47.1317016Z     def get_loc(self, key):
2025-08-30T09:58:47.1317077Z         """
2025-08-30T09:58:47.1317226Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1317281Z     
2025-08-30T09:58:47.1317348Z         Parameters
2025-08-30T09:58:47.1317410Z         ----------
2025-08-30T09:58:47.1317472Z         key : label
2025-08-30T09:58:47.1317527Z     
2025-08-30T09:58:47.1317590Z         Returns
2025-08-30T09:58:47.1317650Z         -------
2025-08-30T09:58:47.1317772Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1317837Z     
2025-08-30T09:58:47.1317900Z         Examples
2025-08-30T09:58:47.1317960Z         --------
2025-08-30T09:58:47.1318048Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1318139Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1318195Z         1
2025-08-30T09:58:47.1318250Z     
2025-08-30T09:58:47.1318349Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1318429Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1318496Z         slice(1, 3, None)
2025-08-30T09:58:47.1318554Z     
2025-08-30T09:58:47.1318654Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1318735Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1318816Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1318879Z         """
2025-08-30T09:58:47.1318969Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1319026Z         try:
2025-08-30T09:58:47.1319122Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1319197Z         except KeyError as err:
2025-08-30T09:58:47.1319284Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1319378Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1319491Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1319549Z             ):
2025-08-30T09:58:47.1319633Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1319714Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1319786Z E           KeyError: 'date'
2025-08-30T09:58:47.1319792Z 
2025-08-30T09:58:47.1319977Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1320119Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1320621Z 2025-08-30 09:54:32 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1321045Z 2025-08-30 09:54:32 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1321236Z 2025-08-30 09:54:32 INFO Found no parameter file.
2025-08-30T09:58:47.1321525Z 2025-08-30 09:54:32 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1321700Z 2025-08-30 09:54:32 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1321882Z 2025-08-30 09:54:32 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1322073Z 2025-08-30 09:54:32 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1322261Z 2025-08-30 09:54:32 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1322604Z 2025-08-30 09:54:32 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1322797Z 2025-08-30 09:54:32 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1322992Z 2025-08-30 09:54:32 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1323101Z 2025-08-30 09:54:32 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1323212Z 2025-08-30 09:54:32 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1323332Z 2025-08-30 09:54:32 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1323653Z 2025-08-30 09:54:32 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1323817Z 2025-08-30 09:54:32 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1323951Z 2025-08-30 09:54:32 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1324090Z 2025-08-30 09:54:32 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1324573Z 2025-08-30 09:54:32 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1324763Z 2025-08-30 09:54:32 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1324884Z 2025-08-30 09:54:32 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1324997Z 2025-08-30 09:54:32 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1325123Z 2025-08-30 09:54:32 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1325288Z 2025-08-30 09:54:32 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1325412Z 2025-08-30 09:54:32 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1325535Z 2025-08-30 09:54:32 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1325679Z 2025-08-30 09:54:32 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1325804Z 2025-08-30 09:54:32 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1325974Z 2025-08-30 09:54:32 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1326127Z 2025-08-30 09:54:32 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1326273Z 2025-08-30 09:54:32 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1326419Z 2025-08-30 09:54:32 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1326531Z 2025-08-30 09:54:32 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1326818Z 2025-08-30 09:54:32 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1327138Z 2025-08-30 09:54:32 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo15/freqaimodels" does not exist.
2025-08-30T09:58:47.1327651Z 2025-08-30 09:54:32 INFO Using resolved freqaimodel XGBoostRFRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostRFRegressor.py'...
2025-08-30T09:58:47.1327801Z 2025-08-30 09:54:32 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1327967Z 2025-08-30 09:54:32 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1328290Z 2025-08-30 09:54:32 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1328539Z 2025-08-30 09:54:32 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1328678Z 2025-08-30 09:54:32 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1328815Z 2025-08-30 09:54:32 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1328975Z 2025-08-30 09:54:32 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1329133Z 2025-08-30 09:54:32 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1329281Z 2025-08-30 09:54:32 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1329510Z 2025-08-30 09:54:32 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1329596Z 2025-08-30 09:54:32 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1329692Z 2025-08-30 09:54:32 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1329815Z 2025-08-30 09:54:32 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1329972Z 2025-08-30 09:54:32 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1330134Z 2025-08-30 09:54:32 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1330286Z 2025-08-30 09:54:32 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1330435Z 2025-08-30 09:54:32 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1330618Z _________ test_start_backtesting[XGBoostRegressor-2-freqai_test_strat] _________
2025-08-30T09:58:47.1330623Z 
2025-08-30T09:58:47.1330776Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1330842Z key = 'date'
2025-08-30T09:58:47.1330847Z 
2025-08-30T09:58:47.1330925Z     def get_loc(self, key):
2025-08-30T09:58:47.1330983Z         """
2025-08-30T09:58:47.1331137Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1331196Z     
2025-08-30T09:58:47.1331258Z         Parameters
2025-08-30T09:58:47.1331323Z         ----------
2025-08-30T09:58:47.1331383Z         key : label
2025-08-30T09:58:47.1331443Z     
2025-08-30T09:58:47.1331502Z         Returns
2025-08-30T09:58:47.1331561Z         -------
2025-08-30T09:58:47.1331687Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1331741Z     
2025-08-30T09:58:47.1331802Z         Examples
2025-08-30T09:58:47.1331861Z         --------
2025-08-30T09:58:47.1331953Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1332031Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1332088Z         1
2025-08-30T09:58:47.1332146Z     
2025-08-30T09:58:47.1332245Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1332325Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1332392Z         slice(1, 3, None)
2025-08-30T09:58:47.1332457Z     
2025-08-30T09:58:47.1332564Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1332648Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1332732Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1332789Z         """
2025-08-30T09:58:47.1332879Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1332937Z         try:
2025-08-30T09:58:47.1333031Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1333101Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1333105Z 
2025-08-30T09:58:47.1333276Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1333579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1333795Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1333855Z     ???
2025-08-30T09:58:47.1334018Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1334335Z     ???
2025-08-30T09:58:47.1334596Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1334656Z     ???
2025-08-30T09:58:47.1334752Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1334758Z 
2025-08-30T09:58:47.1334813Z >   ???
2025-08-30T09:58:47.1334880Z E   KeyError: 'date'
2025-08-30T09:58:47.1334889Z 
2025-08-30T09:58:47.1335006Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1335010Z 
2025-08-30T09:58:47.1335165Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1335170Z 
2025-08-30T09:58:47.1335436Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e47b3ed0>
2025-08-30T09:58:47.1336122Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1336283Z model = 'XGBoostRegressor', num_files = 2, strat = 'freqai_test_strat'
2025-08-30T09:58:47.1336443Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e5053a90>
2025-08-30T09:58:47.1336448Z 
2025-08-30T09:58:47.1336531Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1336609Z         "model, num_files, strat",
2025-08-30T09:58:47.1336665Z         [
2025-08-30T09:58:47.1336774Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1336871Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1336965Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1337080Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1337213Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1337328Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1337449Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1337562Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1337672Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1337800Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1337857Z         ],
2025-08-30T09:58:47.1337914Z     )
2025-08-30T09:58:47.1338109Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1338186Z         can_run_model(model)
2025-08-30T09:58:47.1338251Z         test_tb = True
2025-08-30T09:58:47.1338328Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1338400Z             test_tb = False
2025-08-30T09:58:47.1338460Z     
2025-08-30T09:58:47.1338615Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1338707Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1338770Z     
2025-08-30T09:58:47.1338839Z         Trade.use_db = False
2025-08-30T09:58:47.1338894Z     
2025-08-30T09:58:47.1338992Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1339161Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1339322Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1339420Z     
2025-08-30T09:58:47.1339584Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1339687Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1339743Z     
2025-08-30T09:58:47.1339820Z         if "test_4ac" in model:
2025-08-30T09:58:47.1340040Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1340097Z     
2025-08-30T09:58:47.1340180Z         if "PyTorch" in model:
2025-08-30T09:58:47.1340330Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1340625Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1340705Z             if "Transformer" in model:
2025-08-30T09:58:47.1340850Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1340942Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1340999Z     
2025-08-30T09:58:47.1341149Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1341235Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1341292Z         )
2025-08-30T09:58:47.1341352Z     
2025-08-30T09:58:47.1341486Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1341602Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1341813Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1341933Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1342016Z         freqai = strategy.freqai
2025-08-30T09:58:47.1342085Z         freqai.live = False
2025-08-30T09:58:47.1342177Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1342272Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1342403Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1342536Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1342678Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1342874Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1342962Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1342972Z 
2025-08-30T09:58:47.1343071Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1343171Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1343496Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1343658Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1343798Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1343976Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1344046Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1344236Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1344320Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1344390Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1344490Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1344495Z 
2025-08-30T09:58:47.1344662Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1344731Z key = 'date'
2025-08-30T09:58:47.1344735Z 
2025-08-30T09:58:47.1344807Z     def get_loc(self, key):
2025-08-30T09:58:47.1344871Z         """
2025-08-30T09:58:47.1345021Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1345081Z     
2025-08-30T09:58:47.1345144Z         Parameters
2025-08-30T09:58:47.1345206Z         ----------
2025-08-30T09:58:47.1345270Z         key : label
2025-08-30T09:58:47.1345325Z     
2025-08-30T09:58:47.1345383Z         Returns
2025-08-30T09:58:47.1345441Z         -------
2025-08-30T09:58:47.1345567Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1345622Z     
2025-08-30T09:58:47.1345681Z         Examples
2025-08-30T09:58:47.1345746Z         --------
2025-08-30T09:58:47.1345835Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1345913Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1345974Z         1
2025-08-30T09:58:47.1346033Z     
2025-08-30T09:58:47.1346129Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1346210Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1346417Z         slice(1, 3, None)
2025-08-30T09:58:47.1346473Z     
2025-08-30T09:58:47.1346573Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1346656Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1346740Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1346796Z         """
2025-08-30T09:58:47.1346888Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1346950Z         try:
2025-08-30T09:58:47.1347039Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1347118Z         except KeyError as err:
2025-08-30T09:58:47.1347218Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1347310Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1347534Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1347595Z             ):
2025-08-30T09:58:47.1347687Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1347790Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1347862Z E           KeyError: 'date'
2025-08-30T09:58:47.1347867Z 
2025-08-30T09:58:47.1348066Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1348204Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1348706Z 2025-08-30 09:54:33 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1349145Z 2025-08-30 09:54:33 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1349252Z 2025-08-30 09:54:33 INFO Found no parameter file.
2025-08-30T09:58:47.1349541Z 2025-08-30 09:54:33 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1349733Z 2025-08-30 09:54:33 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1349914Z 2025-08-30 09:54:33 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1350110Z 2025-08-30 09:54:33 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1350307Z 2025-08-30 09:54:33 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1350575Z 2025-08-30 09:54:33 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1350765Z 2025-08-30 09:54:33 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1350971Z 2025-08-30 09:54:33 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1351076Z 2025-08-30 09:54:33 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1351184Z 2025-08-30 09:54:33 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1351308Z 2025-08-30 09:54:33 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1351461Z 2025-08-30 09:54:33 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1351616Z 2025-08-30 09:54:33 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1351748Z 2025-08-30 09:54:33 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1351890Z 2025-08-30 09:54:33 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1352365Z 2025-08-30 09:54:33 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1352561Z 2025-08-30 09:54:33 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1352681Z 2025-08-30 09:54:33 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1352790Z 2025-08-30 09:54:33 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1353006Z 2025-08-30 09:54:33 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1353233Z 2025-08-30 09:54:33 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1353582Z 2025-08-30 09:54:33 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1353753Z 2025-08-30 09:54:33 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1353959Z 2025-08-30 09:54:33 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1354264Z 2025-08-30 09:54:33 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1354442Z 2025-08-30 09:54:33 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1354631Z 2025-08-30 09:54:33 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1354993Z 2025-08-30 09:54:33 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1355181Z 2025-08-30 09:54:33 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1355318Z 2025-08-30 09:54:33 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1355746Z 2025-08-30 09:54:33 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1356100Z 2025-08-30 09:54:33 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_XGBoost0/freqaimodels" does not exist.
2025-08-30T09:58:47.1356636Z 2025-08-30 09:54:33 INFO Using resolved freqaimodel XGBoostRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostRegressor.py'...
2025-08-30T09:58:47.1356874Z 2025-08-30 09:54:33 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1357072Z 2025-08-30 09:54:33 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1357287Z 2025-08-30 09:54:33 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1357660Z 2025-08-30 09:54:33 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1365455Z 2025-08-30 09:54:33 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1365777Z 2025-08-30 09:54:33 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1366072Z 2025-08-30 09:54:33 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1366256Z 2025-08-30 09:54:33 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1366425Z 2025-08-30 09:54:33 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1366557Z 2025-08-30 09:54:33 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1366645Z 2025-08-30 09:54:33 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1366742Z 2025-08-30 09:54:33 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1366873Z 2025-08-30 09:54:33 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1367043Z 2025-08-30 09:54:33 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1367209Z 2025-08-30 09:54:33 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1367362Z 2025-08-30 09:54:33 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1367780Z 2025-08-30 09:54:33 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1367973Z ______ test_start_backtesting[XGBoostClassifier-2-freqai_test_classifier] ______
2025-08-30T09:58:47.1367981Z 
2025-08-30T09:58:47.1368143Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1368212Z key = 'date'
2025-08-30T09:58:47.1368217Z 
2025-08-30T09:58:47.1368294Z     def get_loc(self, key):
2025-08-30T09:58:47.1368354Z         """
2025-08-30T09:58:47.1368511Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1368579Z     
2025-08-30T09:58:47.1368648Z         Parameters
2025-08-30T09:58:47.1368713Z         ----------
2025-08-30T09:58:47.1368783Z         key : label
2025-08-30T09:58:47.1369016Z     
2025-08-30T09:58:47.1369077Z         Returns
2025-08-30T09:58:47.1369138Z         -------
2025-08-30T09:58:47.1369269Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1369325Z     
2025-08-30T09:58:47.1369386Z         Examples
2025-08-30T09:58:47.1369453Z         --------
2025-08-30T09:58:47.1369545Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1369626Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1369683Z         1
2025-08-30T09:58:47.1369745Z     
2025-08-30T09:58:47.1369843Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1369924Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1369999Z         slice(1, 3, None)
2025-08-30T09:58:47.1370056Z     
2025-08-30T09:58:47.1370273Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1370367Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1370449Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1370512Z         """
2025-08-30T09:58:47.1370605Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1370667Z         try:
2025-08-30T09:58:47.1370758Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1370828Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1370834Z 
2025-08-30T09:58:47.1371015Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1371122Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1371291Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1371354Z     ???
2025-08-30T09:58:47.1371515Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1371573Z     ???
2025-08-30T09:58:47.1371842Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1371907Z     ???
2025-08-30T09:58:47.1372015Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1372020Z 
2025-08-30T09:58:47.1372077Z >   ???
2025-08-30T09:58:47.1372153Z E   KeyError: 'date'
2025-08-30T09:58:47.1372157Z 
2025-08-30T09:58:47.1372279Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1372284Z 
2025-08-30T09:58:47.1372441Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1372445Z 
2025-08-30T09:58:47.1372603Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e47c2f10>
2025-08-30T09:58:47.1373296Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1373741Z model = 'XGBoostClassifier', num_files = 2, strat = 'freqai_test_classifier'
2025-08-30T09:58:47.1373935Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e4945150>
2025-08-30T09:58:47.1373970Z 
2025-08-30T09:58:47.1374063Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1374143Z         "model, num_files, strat",
2025-08-30T09:58:47.1374207Z         [
2025-08-30T09:58:47.1374318Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1374417Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1374518Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1374628Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1374759Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1374874Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1374999Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1375112Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1375221Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1375488Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1375548Z         ],
2025-08-30T09:58:47.1375609Z     )
2025-08-30T09:58:47.1375811Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1375888Z         can_run_model(model)
2025-08-30T09:58:47.1375955Z         test_tb = True
2025-08-30T09:58:47.1376035Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1376113Z             test_tb = False
2025-08-30T09:58:47.1376170Z     
2025-08-30T09:58:47.1376323Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1376421Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1376478Z     
2025-08-30T09:58:47.1376657Z         Trade.use_db = False
2025-08-30T09:58:47.1376716Z     
2025-08-30T09:58:47.1376815Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1376930Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1377027Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1377088Z     
2025-08-30T09:58:47.1377175Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1377269Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1377327Z     
2025-08-30T09:58:47.1377398Z         if "test_4ac" in model:
2025-08-30T09:58:47.1377620Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1377675Z     
2025-08-30T09:58:47.1377749Z         if "PyTorch" in model:
2025-08-30T09:58:47.1377896Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1378081Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1378169Z             if "Transformer" in model:
2025-08-30T09:58:47.1378312Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1378409Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1378469Z     
2025-08-30T09:58:47.1378616Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1378702Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1378759Z         )
2025-08-30T09:58:47.1378821Z     
2025-08-30T09:58:47.1378959Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1379073Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1379193Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1379307Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1379382Z         freqai = strategy.freqai
2025-08-30T09:58:47.1379460Z         freqai.live = False
2025-08-30T09:58:47.1379551Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1379652Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1379789Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1379923Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1380062Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1380262Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1380357Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1380362Z 
2025-08-30T09:58:47.1380457Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1380561Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1380740Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1380837Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1380968Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1381245Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1381312Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1381503Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1381588Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1381657Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1381759Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1381764Z 
2025-08-30T09:58:47.1381924Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1381988Z key = 'date'
2025-08-30T09:58:47.1381994Z 
2025-08-30T09:58:47.1382070Z     def get_loc(self, key):
2025-08-30T09:58:47.1382125Z         """
2025-08-30T09:58:47.1382360Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1382418Z     
2025-08-30T09:58:47.1382483Z         Parameters
2025-08-30T09:58:47.1382553Z         ----------
2025-08-30T09:58:47.1382621Z         key : label
2025-08-30T09:58:47.1382676Z     
2025-08-30T09:58:47.1382735Z         Returns
2025-08-30T09:58:47.1382800Z         -------
2025-08-30T09:58:47.1382929Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1382984Z     
2025-08-30T09:58:47.1383044Z         Examples
2025-08-30T09:58:47.1383111Z         --------
2025-08-30T09:58:47.1383199Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1383277Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1383457Z         1
2025-08-30T09:58:47.1383515Z     
2025-08-30T09:58:47.1383612Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1383694Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1383774Z         slice(1, 3, None)
2025-08-30T09:58:47.1383829Z     
2025-08-30T09:58:47.1383929Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1384017Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1384102Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1384161Z         """
2025-08-30T09:58:47.1384257Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1384317Z         try:
2025-08-30T09:58:47.1384406Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1384482Z         except KeyError as err:
2025-08-30T09:58:47.1384575Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1384667Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1384778Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1384839Z             ):
2025-08-30T09:58:47.1384924Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1385002Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1385079Z E           KeyError: 'date'
2025-08-30T09:58:47.1385090Z 
2025-08-30T09:58:47.1385281Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1385426Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1385935Z 2025-08-30 09:54:33 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1386409Z 2025-08-30 09:54:33 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.1386505Z 2025-08-30 09:54:33 INFO Found no parameter file.
2025-08-30T09:58:47.1386794Z 2025-08-30 09:54:33 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1386980Z 2025-08-30 09:54:33 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1387160Z 2025-08-30 09:54:33 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1387357Z 2025-08-30 09:54:33 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1387676Z 2025-08-30 09:54:33 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1387945Z 2025-08-30 09:54:33 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1388136Z 2025-08-30 09:54:33 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1388336Z 2025-08-30 09:54:33 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1388444Z 2025-08-30 09:54:33 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1388551Z 2025-08-30 09:54:33 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1388799Z 2025-08-30 09:54:33 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1388953Z 2025-08-30 09:54:33 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1389109Z 2025-08-30 09:54:33 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1389249Z 2025-08-30 09:54:33 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1389392Z 2025-08-30 09:54:33 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1389877Z 2025-08-30 09:54:33 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1390069Z 2025-08-30 09:54:33 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1390190Z 2025-08-30 09:54:33 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1390301Z 2025-08-30 09:54:33 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1390432Z 2025-08-30 09:54:33 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1390604Z 2025-08-30 09:54:33 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1390721Z 2025-08-30 09:54:33 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1390847Z 2025-08-30 09:54:33 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1390989Z 2025-08-30 09:54:33 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1391113Z 2025-08-30 09:54:33 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1391254Z 2025-08-30 09:54:33 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1391407Z 2025-08-30 09:54:33 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1391557Z 2025-08-30 09:54:33 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1391698Z 2025-08-30 09:54:33 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1391811Z 2025-08-30 09:54:33 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1392107Z 2025-08-30 09:54:33 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1392429Z 2025-08-30 09:54:33 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_XGBoost1/freqaimodels" does not exist.
2025-08-30T09:58:47.1392941Z 2025-08-30 09:54:33 INFO Using resolved freqaimodel XGBoostClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostClassifier.py'...
2025-08-30T09:58:47.1393092Z 2025-08-30 09:54:33 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1393257Z 2025-08-30 09:54:33 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1393551Z 2025-08-30 09:54:33 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1393809Z 2025-08-30 09:54:33 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1393949Z 2025-08-30 09:54:33 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1394087Z 2025-08-30 09:54:33 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1394377Z 2025-08-30 09:54:33 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1394528Z 2025-08-30 09:54:33 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1394682Z 2025-08-30 09:54:33 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1394810Z 2025-08-30 09:54:33 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1394890Z 2025-08-30 09:54:33 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1394984Z 2025-08-30 09:54:33 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1395100Z 2025-08-30 09:54:33 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1395262Z 2025-08-30 09:54:33 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1395525Z 2025-08-30 09:54:33 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1395679Z 2025-08-30 09:54:33 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1395835Z 2025-08-30 09:54:33 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1396040Z _____ test_start_backtesting[LightGBMClassifier-2-freqai_test_classifier] ______
2025-08-30T09:58:47.1396046Z 
2025-08-30T09:58:47.1396202Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1396268Z key = 'date'
2025-08-30T09:58:47.1396273Z 
2025-08-30T09:58:47.1396346Z     def get_loc(self, key):
2025-08-30T09:58:47.1396403Z         """
2025-08-30T09:58:47.1396559Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1396617Z     
2025-08-30T09:58:47.1396681Z         Parameters
2025-08-30T09:58:47.1396743Z         ----------
2025-08-30T09:58:47.1396810Z         key : label
2025-08-30T09:58:47.1396865Z     
2025-08-30T09:58:47.1396922Z         Returns
2025-08-30T09:58:47.1396990Z         -------
2025-08-30T09:58:47.1397118Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1397175Z     
2025-08-30T09:58:47.1397240Z         Examples
2025-08-30T09:58:47.1397303Z         --------
2025-08-30T09:58:47.1397394Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1397472Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1397532Z         1
2025-08-30T09:58:47.1397587Z     
2025-08-30T09:58:47.1397683Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1397763Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1397834Z         slice(1, 3, None)
2025-08-30T09:58:47.1397888Z     
2025-08-30T09:58:47.1397991Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1398079Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1398161Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1398219Z         """
2025-08-30T09:58:47.1398323Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1398380Z         try:
2025-08-30T09:58:47.1398471Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1398545Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1398549Z 
2025-08-30T09:58:47.1398726Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1398826Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1398995Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1399056Z     ???
2025-08-30T09:58:47.1399213Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1399268Z     ???
2025-08-30T09:58:47.1399537Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1399594Z     ???
2025-08-30T09:58:47.1399695Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1399700Z 
2025-08-30T09:58:47.1399756Z >   ???
2025-08-30T09:58:47.1399829Z E   KeyError: 'date'
2025-08-30T09:58:47.1399833Z 
2025-08-30T09:58:47.1400045Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1400050Z 
2025-08-30T09:58:47.1400204Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1400213Z 
2025-08-30T09:58:47.1400370Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8382cd0>
2025-08-30T09:58:47.1401053Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1401240Z model = 'LightGBMClassifier', num_files = 2, strat = 'freqai_test_classifier'
2025-08-30T09:58:47.1401400Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e422e250>
2025-08-30T09:58:47.1401405Z 
2025-08-30T09:58:47.1401563Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1401645Z         "model, num_files, strat",
2025-08-30T09:58:47.1401707Z         [
2025-08-30T09:58:47.1401820Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1401919Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1402019Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1402127Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1402256Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1402374Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1402487Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1402598Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1402710Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1402837Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1402894Z         ],
2025-08-30T09:58:47.1402951Z     )
2025-08-30T09:58:47.1403151Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1403228Z         can_run_model(model)
2025-08-30T09:58:47.1403293Z         test_tb = True
2025-08-30T09:58:47.1403548Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1403679Z             test_tb = False
2025-08-30T09:58:47.1403741Z     
2025-08-30T09:58:47.1403900Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1404002Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1404057Z     
2025-08-30T09:58:47.1404128Z         Trade.use_db = False
2025-08-30T09:58:47.1404185Z     
2025-08-30T09:58:47.1404280Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1404396Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1404490Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1404550Z     
2025-08-30T09:58:47.1404636Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1404735Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1404794Z     
2025-08-30T09:58:47.1404864Z         if "test_4ac" in model:
2025-08-30T09:58:47.1405082Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1405155Z     
2025-08-30T09:58:47.1405228Z         if "PyTorch" in model:
2025-08-30T09:58:47.1405380Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1405559Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1405637Z             if "Transformer" in model:
2025-08-30T09:58:47.1405775Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1405874Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1405928Z     
2025-08-30T09:58:47.1406075Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1406302Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1406366Z         )
2025-08-30T09:58:47.1406422Z     
2025-08-30T09:58:47.1406557Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1406676Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1406801Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1406918Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1406997Z         freqai = strategy.freqai
2025-08-30T09:58:47.1407066Z         freqai.live = False
2025-08-30T09:58:47.1407181Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1407365Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1407772Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1408008Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1408159Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1408371Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1408458Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1408464Z 
2025-08-30T09:58:47.1408559Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1408662Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1408830Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1408921Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1409053Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1409230Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1409295Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1409486Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1409580Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1409646Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1409744Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1409749Z 
2025-08-30T09:58:47.1409914Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1409974Z key = 'date'
2025-08-30T09:58:47.1409979Z 
2025-08-30T09:58:47.1410050Z     def get_loc(self, key):
2025-08-30T09:58:47.1410116Z         """
2025-08-30T09:58:47.1410266Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1410321Z     
2025-08-30T09:58:47.1410387Z         Parameters
2025-08-30T09:58:47.1410449Z         ----------
2025-08-30T09:58:47.1410515Z         key : label
2025-08-30T09:58:47.1410570Z     
2025-08-30T09:58:47.1410632Z         Returns
2025-08-30T09:58:47.1410690Z         -------
2025-08-30T09:58:47.1410810Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1410871Z     
2025-08-30T09:58:47.1410932Z         Examples
2025-08-30T09:58:47.1410990Z         --------
2025-08-30T09:58:47.1411083Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1411164Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1411220Z         1
2025-08-30T09:58:47.1411274Z     
2025-08-30T09:58:47.1411373Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1411452Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1411518Z         slice(1, 3, None)
2025-08-30T09:58:47.1411572Z     
2025-08-30T09:58:47.1411680Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1411762Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1411846Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1411908Z         """
2025-08-30T09:58:47.1412000Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1412057Z         try:
2025-08-30T09:58:47.1412285Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1412366Z         except KeyError as err:
2025-08-30T09:58:47.1412452Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1412542Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1412657Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1412715Z             ):
2025-08-30T09:58:47.1412798Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1412879Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1412948Z E           KeyError: 'date'
2025-08-30T09:58:47.1412953Z 
2025-08-30T09:58:47.1413142Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1413572Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1414121Z 2025-08-30 09:54:33 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1414601Z 2025-08-30 09:54:33 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.1414704Z 2025-08-30 09:54:33 INFO Found no parameter file.
2025-08-30T09:58:47.1414996Z 2025-08-30 09:54:33 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1415175Z 2025-08-30 09:54:33 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1415358Z 2025-08-30 09:54:33 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1415557Z 2025-08-30 09:54:33 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1415745Z 2025-08-30 09:54:33 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1416008Z 2025-08-30 09:54:33 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1416207Z 2025-08-30 09:54:33 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1416403Z 2025-08-30 09:54:33 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1416508Z 2025-08-30 09:54:33 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1416619Z 2025-08-30 09:54:33 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1416736Z 2025-08-30 09:54:33 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1416886Z 2025-08-30 09:54:33 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1417044Z 2025-08-30 09:54:33 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1417177Z 2025-08-30 09:54:33 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1417315Z 2025-08-30 09:54:33 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1417804Z 2025-08-30 09:54:33 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1417994Z 2025-08-30 09:54:33 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1418106Z 2025-08-30 09:54:33 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1418221Z 2025-08-30 09:54:33 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1418351Z 2025-08-30 09:54:33 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1418518Z 2025-08-30 09:54:33 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1418639Z 2025-08-30 09:54:33 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1418763Z 2025-08-30 09:54:33 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1418906Z 2025-08-30 09:54:33 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1419153Z 2025-08-30 09:54:33 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1419296Z 2025-08-30 09:54:33 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1419449Z 2025-08-30 09:54:33 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1419590Z 2025-08-30 09:54:33 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1419745Z 2025-08-30 09:54:33 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1419856Z 2025-08-30 09:54:33 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1420141Z 2025-08-30 09:54:33 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1420566Z 2025-08-30 09:54:33 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_LightGB0/freqaimodels" does not exist.
2025-08-30T09:58:47.1421084Z 2025-08-30 09:54:33 INFO Using resolved freqaimodel LightGBMClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMClassifier.py'...
2025-08-30T09:58:47.1421233Z 2025-08-30 09:54:33 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1421403Z 2025-08-30 09:54:33 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1421597Z 2025-08-30 09:54:33 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1421845Z 2025-08-30 09:54:33 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1421982Z 2025-08-30 09:54:33 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1422121Z 2025-08-30 09:54:33 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1422285Z 2025-08-30 09:54:33 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1422441Z 2025-08-30 09:54:33 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1422601Z 2025-08-30 09:54:33 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1422740Z 2025-08-30 09:54:33 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1422824Z 2025-08-30 09:54:33 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1422923Z 2025-08-30 09:54:33 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1423044Z 2025-08-30 09:54:33 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1423202Z 2025-08-30 09:54:33 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1423530Z 2025-08-30 09:54:33 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1423728Z 2025-08-30 09:54:33 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1423884Z 2025-08-30 09:54:33 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1424086Z _______ test_start_backtesting[PyTorchMLPRegressor-2-freqai_test_strat] ________
2025-08-30T09:58:47.1424092Z 
2025-08-30T09:58:47.1424249Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1424314Z key = 'date'
2025-08-30T09:58:47.1424319Z 
2025-08-30T09:58:47.1424397Z     def get_loc(self, key):
2025-08-30T09:58:47.1424452Z         """
2025-08-30T09:58:47.1424602Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1424664Z     
2025-08-30T09:58:47.1424727Z         Parameters
2025-08-30T09:58:47.1424789Z         ----------
2025-08-30T09:58:47.1424850Z         key : label
2025-08-30T09:58:47.1424910Z     
2025-08-30T09:58:47.1424968Z         Returns
2025-08-30T09:58:47.1425027Z         -------
2025-08-30T09:58:47.1425153Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1425207Z     
2025-08-30T09:58:47.1425267Z         Examples
2025-08-30T09:58:47.1425330Z         --------
2025-08-30T09:58:47.1425422Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1425501Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1425692Z         1
2025-08-30T09:58:47.1425755Z     
2025-08-30T09:58:47.1425883Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1425964Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1426032Z         slice(1, 3, None)
2025-08-30T09:58:47.1426091Z     
2025-08-30T09:58:47.1426190Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1426274Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1426358Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1426414Z         """
2025-08-30T09:58:47.1426505Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1426563Z         try:
2025-08-30T09:58:47.1426657Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1426839Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1426846Z 
2025-08-30T09:58:47.1427019Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1427122Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1427295Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1427352Z     ???
2025-08-30T09:58:47.1427514Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1427570Z     ???
2025-08-30T09:58:47.1427830Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1427885Z     ???
2025-08-30T09:58:47.1427986Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1427991Z 
2025-08-30T09:58:47.1428045Z >   ???
2025-08-30T09:58:47.1428111Z E   KeyError: 'date'
2025-08-30T09:58:47.1428116Z 
2025-08-30T09:58:47.1428238Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1428248Z 
2025-08-30T09:58:47.1428404Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1428409Z 
2025-08-30T09:58:47.1428567Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8565050>
2025-08-30T09:58:47.1429254Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1429423Z model = 'PyTorchMLPRegressor', num_files = 2, strat = 'freqai_test_strat'
2025-08-30T09:58:47.1429581Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c863e490>
2025-08-30T09:58:47.1429590Z 
2025-08-30T09:58:47.1429672Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1429748Z         "model, num_files, strat",
2025-08-30T09:58:47.1429804Z         [
2025-08-30T09:58:47.1429913Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1430012Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1430110Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1430225Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1430353Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1430467Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1430580Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1430693Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1430802Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1430927Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1430988Z         ],
2025-08-30T09:58:47.1431044Z     )
2025-08-30T09:58:47.1431240Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1431375Z         can_run_model(model)
2025-08-30T09:58:47.1431500Z         test_tb = True
2025-08-30T09:58:47.1431641Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1431900Z             test_tb = False
2025-08-30T09:58:47.1431977Z     
2025-08-30T09:58:47.1432135Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1432229Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1432289Z     
2025-08-30T09:58:47.1432360Z         Trade.use_db = False
2025-08-30T09:58:47.1432416Z     
2025-08-30T09:58:47.1432512Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1432626Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1432714Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1432770Z     
2025-08-30T09:58:47.1432865Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1432960Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1433102Z     
2025-08-30T09:58:47.1433183Z         if "test_4ac" in model:
2025-08-30T09:58:47.1433521Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1433585Z     
2025-08-30T09:58:47.1433659Z         if "PyTorch" in model:
2025-08-30T09:58:47.1433809Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1433983Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1434061Z             if "Transformer" in model:
2025-08-30T09:58:47.1434207Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1434299Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1434355Z     
2025-08-30T09:58:47.1434506Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1434591Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1434654Z         )
2025-08-30T09:58:47.1434709Z     
2025-08-30T09:58:47.1434849Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1434962Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1435079Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1435197Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1435272Z         freqai = strategy.freqai
2025-08-30T09:58:47.1435342Z         freqai.live = False
2025-08-30T09:58:47.1435435Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1435529Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1435662Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1435792Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1435934Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1436133Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1436223Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1436232Z 
2025-08-30T09:58:47.1436331Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1436432Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1436597Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1436691Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1436817Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1436989Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1437056Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1437243Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1437329Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1437394Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1437496Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1437644Z 
2025-08-30T09:58:47.1437805Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1437865Z key = 'date'
2025-08-30T09:58:47.1437875Z 
2025-08-30T09:58:47.1437945Z     def get_loc(self, key):
2025-08-30T09:58:47.1438002Z         """
2025-08-30T09:58:47.1438162Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1438222Z     
2025-08-30T09:58:47.1438286Z         Parameters
2025-08-30T09:58:47.1438349Z         ----------
2025-08-30T09:58:47.1438417Z         key : label
2025-08-30T09:58:47.1438473Z     
2025-08-30T09:58:47.1438531Z         Returns
2025-08-30T09:58:47.1438589Z         -------
2025-08-30T09:58:47.1438719Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1438883Z     
2025-08-30T09:58:47.1438948Z         Examples
2025-08-30T09:58:47.1439013Z         --------
2025-08-30T09:58:47.1439103Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1439185Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1439240Z         1
2025-08-30T09:58:47.1439298Z     
2025-08-30T09:58:47.1439393Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1439473Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1439545Z         slice(1, 3, None)
2025-08-30T09:58:47.1439602Z     
2025-08-30T09:58:47.1439702Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1439784Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1439869Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1439926Z         """
2025-08-30T09:58:47.1440018Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1440079Z         try:
2025-08-30T09:58:47.1440173Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1440248Z         except KeyError as err:
2025-08-30T09:58:47.1440334Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1440428Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1440545Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1440601Z             ):
2025-08-30T09:58:47.1440689Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1440767Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1440840Z E           KeyError: 'date'
2025-08-30T09:58:47.1440845Z 
2025-08-30T09:58:47.1441042Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1441182Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1441679Z 2025-08-30 09:54:34 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1442108Z 2025-08-30 09:54:34 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1442206Z 2025-08-30 09:54:34 INFO Found no parameter file.
2025-08-30T09:58:47.1442493Z 2025-08-30 09:54:34 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1442675Z 2025-08-30 09:54:34 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1442853Z 2025-08-30 09:54:34 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1443048Z 2025-08-30 09:54:34 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1443244Z 2025-08-30 09:54:34 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1443742Z 2025-08-30 09:54:34 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1443949Z 2025-08-30 09:54:34 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1444145Z 2025-08-30 09:54:34 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1444512Z 2025-08-30 09:54:34 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1444619Z 2025-08-30 09:54:34 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1444738Z 2025-08-30 09:54:34 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1444893Z 2025-08-30 09:54:34 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1445051Z 2025-08-30 09:54:34 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1445178Z 2025-08-30 09:54:34 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1445318Z 2025-08-30 09:54:34 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1445903Z 2025-08-30 09:54:34 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1446095Z 2025-08-30 09:54:34 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1446218Z 2025-08-30 09:54:34 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1446326Z 2025-08-30 09:54:34 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1446453Z 2025-08-30 09:54:34 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1446622Z 2025-08-30 09:54:34 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1446740Z 2025-08-30 09:54:34 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1446862Z 2025-08-30 09:54:34 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1447010Z 2025-08-30 09:54:34 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1447134Z 2025-08-30 09:54:34 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1447274Z 2025-08-30 09:54:34 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1447427Z 2025-08-30 09:54:34 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1447580Z 2025-08-30 09:54:34 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1447721Z 2025-08-30 09:54:34 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1447831Z 2025-08-30 09:54:34 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1448123Z 2025-08-30 09:54:34 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1448440Z 2025-08-30 09:54:34 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_PyTorch2/freqaimodels" does not exist.
2025-08-30T09:58:47.1448961Z 2025-08-30 09:54:34 INFO Using resolved freqaimodel PyTorchMLPRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/PyTorchMLPRegressor.py'...
2025-08-30T09:58:47.1449117Z 2025-08-30 09:54:34 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1449285Z 2025-08-30 09:54:34 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1449480Z 2025-08-30 09:54:34 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1449737Z 2025-08-30 09:54:34 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1449871Z 2025-08-30 09:54:34 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1450009Z 2025-08-30 09:54:34 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1450175Z 2025-08-30 09:54:34 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1450328Z 2025-08-30 09:54:34 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1450476Z 2025-08-30 09:54:34 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1450609Z 2025-08-30 09:54:34 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1450691Z 2025-08-30 09:54:34 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1450788Z 2025-08-30 09:54:34 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1450994Z 2025-08-30 09:54:34 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1451154Z 2025-08-30 09:54:34 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1451311Z 2025-08-30 09:54:34 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1451461Z 2025-08-30 09:54:34 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1451616Z 2025-08-30 09:54:34 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1451800Z ________ test_start_backtesting[LightGBMRegressor-2-freqai_test_strat] _________
2025-08-30T09:58:47.1451805Z 
2025-08-30T09:58:47.1451962Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1452104Z key = 'date'
2025-08-30T09:58:47.1452110Z 
2025-08-30T09:58:47.1452183Z     def get_loc(self, key):
2025-08-30T09:58:47.1452240Z         """
2025-08-30T09:58:47.1452393Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1452453Z     
2025-08-30T09:58:47.1452517Z         Parameters
2025-08-30T09:58:47.1452578Z         ----------
2025-08-30T09:58:47.1452644Z         key : label
2025-08-30T09:58:47.1452699Z     
2025-08-30T09:58:47.1452757Z         Returns
2025-08-30T09:58:47.1452820Z         -------
2025-08-30T09:58:47.1452943Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1452998Z     
2025-08-30T09:58:47.1453057Z         Examples
2025-08-30T09:58:47.1453120Z         --------
2025-08-30T09:58:47.1453208Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1453285Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1453537Z         1
2025-08-30T09:58:47.1453632Z     
2025-08-30T09:58:47.1453741Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1453824Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1453897Z         slice(1, 3, None)
2025-08-30T09:58:47.1453957Z     
2025-08-30T09:58:47.1454064Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1454152Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1454233Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1454289Z         """
2025-08-30T09:58:47.1454387Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1454445Z         try:
2025-08-30T09:58:47.1454535Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1454604Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1454609Z 
2025-08-30T09:58:47.1454783Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1454884Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1455055Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1455116Z     ???
2025-08-30T09:58:47.1455274Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1455335Z     ???
2025-08-30T09:58:47.1455603Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1455659Z     ???
2025-08-30T09:58:47.1455758Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1455763Z 
2025-08-30T09:58:47.1455823Z >   ???
2025-08-30T09:58:47.1455891Z E   KeyError: 'date'
2025-08-30T09:58:47.1455896Z 
2025-08-30T09:58:47.1456014Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1456019Z 
2025-08-30T09:58:47.1456174Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1456183Z 
2025-08-30T09:58:47.1456338Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e491bbd0>
2025-08-30T09:58:47.1457029Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1457335Z model = 'LightGBMRegressor', num_files = 2, strat = 'freqai_test_strat'
2025-08-30T09:58:47.1457500Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e435ba10>
2025-08-30T09:58:47.1457504Z 
2025-08-30T09:58:47.1457591Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1457668Z         "model, num_files, strat",
2025-08-30T09:58:47.1457732Z         [
2025-08-30T09:58:47.1457839Z             ("LightGBMRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1457938Z             ("XGBoostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1458042Z             ("CatboostRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1458150Z             ("PyTorchMLPRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1458401Z             ("PyTorchTransformerRegressor", 2, "freqai_test_strat"),
2025-08-30T09:58:47.1458524Z             ("ReinforcementLearner", 3, "freqai_rl_test_strat"),
2025-08-30T09:58:47.1458641Z             ("XGBoostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1458753Z             ("LightGBMClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1458866Z             ("CatboostClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1458992Z             ("PyTorchMLPClassifier", 2, "freqai_test_classifier"),
2025-08-30T09:58:47.1459050Z         ],
2025-08-30T09:58:47.1459107Z     )
2025-08-30T09:58:47.1459312Z     def test_start_backtesting(mocker, freqai_conf, model, num_files, strat, caplog):
2025-08-30T09:58:47.1459384Z         can_run_model(model)
2025-08-30T09:58:47.1459450Z         test_tb = True
2025-08-30T09:58:47.1459532Z         if is_mac() and not is_arm():
2025-08-30T09:58:47.1459600Z             test_tb = False
2025-08-30T09:58:47.1459660Z     
2025-08-30T09:58:47.1459815Z         freqai_conf.get("freqai", {}).update({"save_backtest_models": True})
2025-08-30T09:58:47.1459914Z         freqai_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.1459974Z     
2025-08-30T09:58:47.1460044Z         Trade.use_db = False
2025-08-30T09:58:47.1460106Z     
2025-08-30T09:58:47.1460200Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1460313Z         freqai_conf.update({"timerange": "20180120-20180130"})
2025-08-30T09:58:47.1460408Z         freqai_conf.update({"strategy": strat})
2025-08-30T09:58:47.1460465Z     
2025-08-30T09:58:47.1460556Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1460650Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1460709Z     
2025-08-30T09:58:47.1460780Z         if "test_4ac" in model:
2025-08-30T09:58:47.1460997Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1461056Z     
2025-08-30T09:58:47.1461136Z         if "PyTorch" in model:
2025-08-30T09:58:47.1461281Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1461455Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1461543Z             if "Transformer" in model:
2025-08-30T09:58:47.1461682Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1461773Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1461834Z     
2025-08-30T09:58:47.1461979Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.1462065Z             {"indicator_periods_candles": [2]}
2025-08-30T09:58:47.1462127Z         )
2025-08-30T09:58:47.1462181Z     
2025-08-30T09:58:47.1462315Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1462429Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1462550Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1462664Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1462739Z         freqai = strategy.freqai
2025-08-30T09:58:47.1462908Z         freqai.live = False
2025-08-30T09:58:47.1462996Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1463090Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1463224Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1463459Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1463601Z         sub_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1463799Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.1463891Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1463896Z 
2025-08-30T09:58:47.1464103Z tests/freqai/test_freqai_interface.py:301: 
2025-08-30T09:58:47.1464209Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1464387Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1464475Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1464602Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.1464779Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.1464843Z                  ^^^^^^^^^^
2025-08-30T09:58:47.1465031Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1465118Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1465183Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1465279Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1465284Z 
2025-08-30T09:58:47.1465450Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1465511Z key = 'date'
2025-08-30T09:58:47.1465516Z 
2025-08-30T09:58:47.1465588Z     def get_loc(self, key):
2025-08-30T09:58:47.1465649Z         """
2025-08-30T09:58:47.1465804Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1465859Z     
2025-08-30T09:58:47.1465921Z         Parameters
2025-08-30T09:58:47.1465988Z         ----------
2025-08-30T09:58:47.1466050Z         key : label
2025-08-30T09:58:47.1466105Z     
2025-08-30T09:58:47.1466163Z         Returns
2025-08-30T09:58:47.1466227Z         -------
2025-08-30T09:58:47.1466349Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1466404Z     
2025-08-30T09:58:47.1466518Z         Examples
2025-08-30T09:58:47.1466630Z         --------
2025-08-30T09:58:47.1466765Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1466891Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1467005Z         1
2025-08-30T09:58:47.1467099Z     
2025-08-30T09:58:47.1467249Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1467339Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1467412Z         slice(1, 3, None)
2025-08-30T09:58:47.1467466Z     
2025-08-30T09:58:47.1467566Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1467654Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1467734Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1467792Z         """
2025-08-30T09:58:47.1467888Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1467946Z         try:
2025-08-30T09:58:47.1468035Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1468113Z         except KeyError as err:
2025-08-30T09:58:47.1468199Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1468289Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1468402Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1468463Z             ):
2025-08-30T09:58:47.1468546Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1468762Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1468839Z E           KeyError: 'date'
2025-08-30T09:58:47.1468844Z 
2025-08-30T09:58:47.1469036Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1469175Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1469677Z 2025-08-30 09:54:34 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1470098Z 2025-08-30 09:54:34 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1470194Z 2025-08-30 09:54:34 INFO Found no parameter file.
2025-08-30T09:58:47.1470581Z 2025-08-30 09:54:34 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1470769Z 2025-08-30 09:54:34 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1470950Z 2025-08-30 09:54:34 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1471152Z 2025-08-30 09:54:34 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1471342Z 2025-08-30 09:54:34 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1471607Z 2025-08-30 09:54:34 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1471799Z 2025-08-30 09:54:34 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1471994Z 2025-08-30 09:54:34 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1472107Z 2025-08-30 09:54:34 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1472214Z 2025-08-30 09:54:34 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1472344Z 2025-08-30 09:54:34 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1472492Z 2025-08-30 09:54:34 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1472648Z 2025-08-30 09:54:34 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1472781Z 2025-08-30 09:54:34 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1472919Z 2025-08-30 09:54:34 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1473508Z 2025-08-30 09:54:34 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1473705Z 2025-08-30 09:54:34 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1473826Z 2025-08-30 09:54:34 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1473938Z 2025-08-30 09:54:34 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1474074Z 2025-08-30 09:54:34 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1474241Z 2025-08-30 09:54:34 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1474358Z 2025-08-30 09:54:34 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1474484Z 2025-08-30 09:54:34 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1474627Z 2025-08-30 09:54:34 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1474745Z 2025-08-30 09:54:34 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1475012Z 2025-08-30 09:54:34 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1475299Z 2025-08-30 09:54:34 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1475526Z 2025-08-30 09:54:34 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1475684Z 2025-08-30 09:54:34 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1475804Z 2025-08-30 09:54:34 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1476239Z 2025-08-30 09:54:34 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1476557Z 2025-08-30 09:54:34 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_start_backtesting_LightGB1/freqaimodels" does not exist.
2025-08-30T09:58:47.1477069Z 2025-08-30 09:54:34 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.1477218Z 2025-08-30 09:54:34 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1477385Z 2025-08-30 09:54:34 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1477689Z 2025-08-30 09:54:34 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1477945Z 2025-08-30 09:54:34 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1478091Z 2025-08-30 09:54:34 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1478233Z 2025-08-30 09:54:34 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1478395Z 2025-08-30 09:54:34 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1478548Z 2025-08-30 09:54:34 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1478702Z 2025-08-30 09:54:34 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1478830Z 2025-08-30 09:54:34 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1478910Z 2025-08-30 09:54:34 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1479008Z 2025-08-30 09:54:34 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1479135Z 2025-08-30 09:54:34 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1479291Z 2025-08-30 09:54:34 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1479451Z 2025-08-30 09:54:34 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1479612Z 2025-08-30 09:54:34 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1479760Z 2025-08-30 09:54:34 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1480033Z _ test_extract_data_and_train_model_Standard[XGBoostRegressor-False-True-False-True-False-10-0.05] _
2025-08-30T09:58:47.1480042Z 
2025-08-30T09:58:47.1480200Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1480261Z key = 'date'
2025-08-30T09:58:47.1480267Z 
2025-08-30T09:58:47.1480340Z     def get_loc(self, key):
2025-08-30T09:58:47.1480403Z         """
2025-08-30T09:58:47.1480557Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1480614Z     
2025-08-30T09:58:47.1480681Z         Parameters
2025-08-30T09:58:47.1480741Z         ----------
2025-08-30T09:58:47.1480803Z         key : label
2025-08-30T09:58:47.1480864Z     
2025-08-30T09:58:47.1480925Z         Returns
2025-08-30T09:58:47.1480984Z         -------
2025-08-30T09:58:47.1481109Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1481168Z     
2025-08-30T09:58:47.1481229Z         Examples
2025-08-30T09:58:47.1481289Z         --------
2025-08-30T09:58:47.1481380Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1481464Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1481521Z         1
2025-08-30T09:58:47.1481576Z     
2025-08-30T09:58:47.1481676Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1481756Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1481824Z         slice(1, 3, None)
2025-08-30T09:58:47.1481882Z     
2025-08-30T09:58:47.1481996Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1482079Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1482162Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1482316Z         """
2025-08-30T09:58:47.1482408Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1482466Z         try:
2025-08-30T09:58:47.1482560Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1482630Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1482636Z 
2025-08-30T09:58:47.1482809Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1482911Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1483084Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1483141Z     ???
2025-08-30T09:58:47.1483300Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1483612Z     ???
2025-08-30T09:58:47.1483890Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1483949Z     ???
2025-08-30T09:58:47.1484061Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1484066Z 
2025-08-30T09:58:47.1484125Z >   ???
2025-08-30T09:58:47.1484194Z E   KeyError: 'date'
2025-08-30T09:58:47.1484198Z 
2025-08-30T09:58:47.1484322Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1484327Z 
2025-08-30T09:58:47.1484488Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1484493Z 
2025-08-30T09:58:47.1484650Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc8a3210>
2025-08-30T09:58:47.1485344Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1485506Z model = 'XGBoostRegressor', pca = False, dbscan = True, float32 = False
2025-08-30T09:58:47.1485633Z can_short = True, shuffle = False, buffer = 10, noise = 0.05
2025-08-30T09:58:47.1485642Z 
2025-08-30T09:58:47.1485730Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1485875Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1485936Z         [
2025-08-30T09:58:47.1486077Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1486227Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1486372Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1486507Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1486665Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1486855Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1487001Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1487195Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1487370Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1487543Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1487719Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1487779Z         ],
2025-08-30T09:58:47.1487834Z     )
2025-08-30T09:58:47.1487940Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1488132Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1488189Z     ):
2025-08-30T09:58:47.1488261Z         can_run_model(model)
2025-08-30T09:58:47.1488326Z     
2025-08-30T09:58:47.1488392Z         test_tb = True
2025-08-30T09:58:47.1488455Z         if is_mac():
2025-08-30T09:58:47.1488528Z             test_tb = False
2025-08-30T09:58:47.1488703Z     
2025-08-30T09:58:47.1488778Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1488873Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1488993Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1489111Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1489332Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1489561Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1489677Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1489874Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1490170Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1490376Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1490440Z     
2025-08-30T09:58:47.1490534Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1490610Z             model_save_ext = "zip"
2025-08-30T09:58:47.1490706Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1490781Z             # test the RL guardrails
2025-08-30T09:58:47.1490992Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1491154Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1491314Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1491374Z     
2025-08-30T09:58:47.1491473Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1491687Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1491840Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1491899Z     
2025-08-30T09:58:47.1491972Z         if "PyTorch" in model:
2025-08-30T09:58:47.1492046Z             model_save_ext = "zip"
2025-08-30T09:58:47.1492196Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1492364Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1492441Z             if "Transformer" in model:
2025-08-30T09:58:47.1492584Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1492674Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1492729Z     
2025-08-30T09:58:47.1492868Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1492985Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1493098Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1493213Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1493294Z         freqai = strategy.freqai
2025-08-30T09:58:47.1493536Z         freqai.live = True
2025-08-30T09:58:47.1493668Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1493751Z         freqai.can_short = can_short
2025-08-30T09:58:47.1493850Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1493924Z         freqai.dk.live = True
2025-08-30T09:58:47.1494011Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1494153Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1494283Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1494339Z     
2025-08-30T09:58:47.1494436Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1494491Z     
2025-08-30T09:58:47.1494643Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1494785Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1495003Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1495058Z     
2025-08-30T09:58:47.1495143Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1495232Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1495381Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1495440Z         )
2025-08-30T09:58:47.1495445Z 
2025-08-30T09:58:47.1495541Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1495642Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1495828Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1496104Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1496274Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1496365Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1496503Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1496609Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1496673Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1496862Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1496953Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1497018Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1497118Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1497123Z 
2025-08-30T09:58:47.1497289Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1497350Z key = 'date'
2025-08-30T09:58:47.1497355Z 
2025-08-30T09:58:47.1497432Z     def get_loc(self, key):
2025-08-30T09:58:47.1497494Z         """
2025-08-30T09:58:47.1497646Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1497708Z     
2025-08-30T09:58:47.1497807Z         Parameters
2025-08-30T09:58:47.1497920Z         ----------
2025-08-30T09:58:47.1498034Z         key : label
2025-08-30T09:58:47.1498136Z     
2025-08-30T09:58:47.1498245Z         Returns
2025-08-30T09:58:47.1498350Z         -------
2025-08-30T09:58:47.1498480Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1498539Z     
2025-08-30T09:58:47.1498606Z         Examples
2025-08-30T09:58:47.1498666Z         --------
2025-08-30T09:58:47.1498756Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1498841Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1498898Z         1
2025-08-30T09:58:47.1498952Z     
2025-08-30T09:58:47.1499050Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1499140Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1499208Z         slice(1, 3, None)
2025-08-30T09:58:47.1499263Z     
2025-08-30T09:58:47.1499369Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1499457Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1499538Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1499599Z         """
2025-08-30T09:58:47.1499691Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1499749Z         try:
2025-08-30T09:58:47.1499837Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1499916Z         except KeyError as err:
2025-08-30T09:58:47.1500002Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1500091Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1500205Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1500263Z             ):
2025-08-30T09:58:47.1500352Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1500436Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1500508Z E           KeyError: 'date'
2025-08-30T09:58:47.1500613Z 
2025-08-30T09:58:47.1500813Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1500952Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1501462Z 2025-08-30 09:54:35 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1501892Z 2025-08-30 09:54:35 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1501995Z 2025-08-30 09:54:35 INFO Found no parameter file.
2025-08-30T09:58:47.1502368Z 2025-08-30 09:54:35 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1502550Z 2025-08-30 09:54:35 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1502732Z 2025-08-30 09:54:35 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1502937Z 2025-08-30 09:54:35 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1503127Z 2025-08-30 09:54:35 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1503592Z 2025-08-30 09:54:35 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1503806Z 2025-08-30 09:54:35 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1504004Z 2025-08-30 09:54:35 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1504109Z 2025-08-30 09:54:35 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1504227Z 2025-08-30 09:54:35 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1504343Z 2025-08-30 09:54:35 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1504491Z 2025-08-30 09:54:35 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1504656Z 2025-08-30 09:54:35 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1504783Z 2025-08-30 09:54:35 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1504923Z 2025-08-30 09:54:35 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1505402Z 2025-08-30 09:54:35 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1505592Z 2025-08-30 09:54:35 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1505706Z 2025-08-30 09:54:35 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1505821Z 2025-08-30 09:54:35 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1505950Z 2025-08-30 09:54:35 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1506116Z 2025-08-30 09:54:35 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1506238Z 2025-08-30 09:54:35 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1506368Z 2025-08-30 09:54:35 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1506512Z 2025-08-30 09:54:35 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1506629Z 2025-08-30 09:54:35 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1506772Z 2025-08-30 09:54:35 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1506923Z 2025-08-30 09:54:35 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1507067Z 2025-08-30 09:54:35 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1507216Z 2025-08-30 09:54:35 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1507328Z 2025-08-30 09:54:35 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1507614Z 2025-08-30 09:54:35 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1508095Z 2025-08-30 09:54:35 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo16/freqaimodels" does not exist.
2025-08-30T09:58:47.1508594Z 2025-08-30 09:54:35 INFO Using resolved freqaimodel XGBoostRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/XGBoostRegressor.py'...
2025-08-30T09:58:47.1508745Z 2025-08-30 09:54:35 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1508916Z 2025-08-30 09:54:35 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1509111Z 2025-08-30 09:54:35 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1509462Z 2025-08-30 09:54:35 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1509607Z 2025-08-30 09:54:35 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1509746Z 2025-08-30 09:54:35 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1509911Z 2025-08-30 09:54:35 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1510066Z 2025-08-30 09:54:35 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1510219Z 2025-08-30 09:54:35 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1510345Z 2025-08-30 09:54:35 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1510426Z 2025-08-30 09:54:35 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1510526Z 2025-08-30 09:54:35 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1510644Z 2025-08-30 09:54:35 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1510808Z 2025-08-30 09:54:35 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1510974Z 2025-08-30 09:54:35 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1511124Z 2025-08-30 09:54:35 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1511277Z 2025-08-30 09:54:35 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1511579Z _ test_extract_data_and_train_model_Standard[ReinforcementLearner_test_4ac-False-False-False-True-False-0-0] _
2025-08-30T09:58:47.1511585Z 
2025-08-30T09:58:47.1511742Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1511804Z key = 'date'
2025-08-30T09:58:47.1511809Z 
2025-08-30T09:58:47.1511888Z     def get_loc(self, key):
2025-08-30T09:58:47.1511945Z         """
2025-08-30T09:58:47.1512098Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1512158Z     
2025-08-30T09:58:47.1512222Z         Parameters
2025-08-30T09:58:47.1512283Z         ----------
2025-08-30T09:58:47.1512349Z         key : label
2025-08-30T09:58:47.1512412Z     
2025-08-30T09:58:47.1512470Z         Returns
2025-08-30T09:58:47.1512529Z         -------
2025-08-30T09:58:47.1512657Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1512717Z     
2025-08-30T09:58:47.1512777Z         Examples
2025-08-30T09:58:47.1512837Z         --------
2025-08-30T09:58:47.1512931Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1513009Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1513067Z         1
2025-08-30T09:58:47.1513122Z     
2025-08-30T09:58:47.1513222Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1513302Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1513475Z         slice(1, 3, None)
2025-08-30T09:58:47.1513537Z     
2025-08-30T09:58:47.1513640Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1513723Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1513814Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1513871Z         """
2025-08-30T09:58:47.1513963Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1514145Z         try:
2025-08-30T09:58:47.1514239Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1514310Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1514315Z 
2025-08-30T09:58:47.1514489Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1514596Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1514764Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1514824Z     ???
2025-08-30T09:58:47.1514991Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1515049Z     ???
2025-08-30T09:58:47.1515309Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1515474Z     ???
2025-08-30T09:58:47.1515581Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1515587Z 
2025-08-30T09:58:47.1515647Z >   ???
2025-08-30T09:58:47.1515714Z E   KeyError: 'date'
2025-08-30T09:58:47.1515720Z 
2025-08-30T09:58:47.1515845Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1515850Z 
2025-08-30T09:58:47.1516009Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1516015Z 
2025-08-30T09:58:47.1516172Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8993410>
2025-08-30T09:58:47.1516862Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1517018Z model = 'ReinforcementLearner_test_4ac', pca = False, dbscan = False
2025-08-30T09:58:47.1517178Z float32 = False, can_short = True, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1517188Z 
2025-08-30T09:58:47.1517273Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1517417Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1517475Z         [
2025-08-30T09:58:47.1517619Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1517764Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1517914Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1518054Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1518205Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1518390Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1518545Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1518730Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1518911Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1519090Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1519261Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1519320Z         ],
2025-08-30T09:58:47.1519376Z     )
2025-08-30T09:58:47.1519484Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1519674Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1519730Z     ):
2025-08-30T09:58:47.1519807Z         can_run_model(model)
2025-08-30T09:58:47.1519866Z     
2025-08-30T09:58:47.1519931Z         test_tb = True
2025-08-30T09:58:47.1519994Z         if is_mac():
2025-08-30T09:58:47.1520074Z             test_tb = False
2025-08-30T09:58:47.1520130Z     
2025-08-30T09:58:47.1520205Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1520304Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1520512Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1520630Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1520854Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1521077Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1521193Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1521385Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1521595Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1521985Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1522099Z     
2025-08-30T09:58:47.1522274Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1522410Z             model_save_ext = "zip"
2025-08-30T09:58:47.1522512Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1522596Z             # test the RL guardrails
2025-08-30T09:58:47.1522816Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1522981Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1523147Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1523202Z     
2025-08-30T09:58:47.1523297Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1523622Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1523778Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1523834Z     
2025-08-30T09:58:47.1523908Z         if "PyTorch" in model:
2025-08-30T09:58:47.1523993Z             model_save_ext = "zip"
2025-08-30T09:58:47.1524138Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1524310Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1524394Z             if "Transformer" in model:
2025-08-30T09:58:47.1524535Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1524626Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1524682Z     
2025-08-30T09:58:47.1524823Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1524939Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1525059Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1525182Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1525262Z         freqai = strategy.freqai
2025-08-30T09:58:47.1525338Z         freqai.live = True
2025-08-30T09:58:47.1525431Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1525506Z         freqai.can_short = can_short
2025-08-30T09:58:47.1525601Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1525675Z         freqai.dk.live = True
2025-08-30T09:58:47.1525764Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1525933Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1526064Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1526124Z     
2025-08-30T09:58:47.1526209Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1526265Z     
2025-08-30T09:58:47.1526427Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1526565Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1526651Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1526841Z     
2025-08-30T09:58:47.1526934Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1527017Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1527170Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1527231Z         )
2025-08-30T09:58:47.1527237Z 
2025-08-30T09:58:47.1527330Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1527431Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1527620Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1527784Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1528052Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1528143Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1528276Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1528380Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1528445Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1528638Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1528723Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1528791Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1528896Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1528901Z 
2025-08-30T09:58:47.1529061Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1529122Z key = 'date'
2025-08-30T09:58:47.1529127Z 
2025-08-30T09:58:47.1529202Z     def get_loc(self, key):
2025-08-30T09:58:47.1529258Z         """
2025-08-30T09:58:47.1529412Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1529469Z     
2025-08-30T09:58:47.1529538Z         Parameters
2025-08-30T09:58:47.1529601Z         ----------
2025-08-30T09:58:47.1529667Z         key : label
2025-08-30T09:58:47.1529726Z     
2025-08-30T09:58:47.1529784Z         Returns
2025-08-30T09:58:47.1529843Z         -------
2025-08-30T09:58:47.1529967Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1530028Z     
2025-08-30T09:58:47.1530089Z         Examples
2025-08-30T09:58:47.1530149Z         --------
2025-08-30T09:58:47.1530242Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1530319Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1530376Z         1
2025-08-30T09:58:47.1530433Z     
2025-08-30T09:58:47.1530533Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1530614Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1530682Z         slice(1, 3, None)
2025-08-30T09:58:47.1530748Z     
2025-08-30T09:58:47.1530848Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1530930Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1531016Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1531079Z         """
2025-08-30T09:58:47.1531170Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1531228Z         try:
2025-08-30T09:58:47.1531323Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1531398Z         except KeyError as err:
2025-08-30T09:58:47.1531486Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1531581Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1531691Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1531753Z             ):
2025-08-30T09:58:47.1531837Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1531919Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1531995Z E           KeyError: 'date'
2025-08-30T09:58:47.1532000Z 
2025-08-30T09:58:47.1532190Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1532449Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1532947Z 2025-08-30 09:54:35 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1533564Z 2025-08-30 09:54:35 INFO Using resolved strategy freqai_rl_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_rl_test_strat.py'...
2025-08-30T09:58:47.1533692Z 2025-08-30 09:54:35 INFO Found no parameter file.
2025-08-30T09:58:47.1533986Z 2025-08-30 09:54:35 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1534165Z 2025-08-30 09:54:35 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1534495Z 2025-08-30 09:54:35 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1534697Z 2025-08-30 09:54:35 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1534895Z 2025-08-30 09:54:35 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1535164Z 2025-08-30 09:54:35 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1535353Z 2025-08-30 09:54:35 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1535549Z 2025-08-30 09:54:35 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1535658Z 2025-08-30 09:54:35 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1535764Z 2025-08-30 09:54:35 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1535881Z 2025-08-30 09:54:35 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1536041Z 2025-08-30 09:54:35 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1536201Z 2025-08-30 09:54:35 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1536333Z 2025-08-30 09:54:35 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1536471Z 2025-08-30 09:54:35 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1536949Z 2025-08-30 09:54:35 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1537138Z 2025-08-30 09:54:35 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1537252Z 2025-08-30 09:54:35 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1537369Z 2025-08-30 09:54:35 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1537497Z 2025-08-30 09:54:35 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1537668Z 2025-08-30 09:54:35 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1537790Z 2025-08-30 09:54:35 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1537916Z 2025-08-30 09:54:35 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1538057Z 2025-08-30 09:54:35 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1538180Z 2025-08-30 09:54:35 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1538319Z 2025-08-30 09:54:35 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1538470Z 2025-08-30 09:54:35 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1538618Z 2025-08-30 09:54:35 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1538760Z 2025-08-30 09:54:35 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1538871Z 2025-08-30 09:54:35 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1539419Z 2025-08-30 09:54:35 INFO Using resolved freqaimodel ReinforcementLearner_test_4ac from '/home/runner/work/freqtrade/freqtrade/tests/freqai/test_models/ReinforcementLearner_test_4ac.py'...
2025-08-30T09:58:47.1539688Z 2025-08-30 09:54:35 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1539852Z 2025-08-30 09:54:35 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1540043Z 2025-08-30 09:54:35 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1540297Z 2025-08-30 09:54:35 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1540449Z 2025-08-30 09:54:35 WARNING User tried to use SVM with RL. Deactivating SVM.
2025-08-30T09:58:47.1540643Z 2025-08-30 09:54:35 WARNING User tried to use DI_threshold with RL. Deactivating DI_threshold.
2025-08-30T09:58:47.1540832Z 2025-08-30 09:54:35 WARNING User tried to shuffle training data. Setting shuffle to False
2025-08-30T09:58:47.1541047Z 2025-08-30 09:54:35 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1541189Z 2025-08-30 09:54:35 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1541351Z 2025-08-30 09:54:35 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1541475Z 2025-08-30 09:54:35 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1541556Z 2025-08-30 09:54:35 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1541655Z 2025-08-30 09:54:35 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1541772Z 2025-08-30 09:54:35 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1541929Z 2025-08-30 09:54:35 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1542091Z 2025-08-30 09:54:35 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1542243Z 2025-08-30 09:54:35 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1542397Z 2025-08-30 09:54:35 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1542577Z ______ test_extract_data_and_train_model_Classifiers[LightGBMClassifier] _______
2025-08-30T09:58:47.1542591Z 
2025-08-30T09:58:47.1542746Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1542808Z key = 'date'
2025-08-30T09:58:47.1542812Z 
2025-08-30T09:58:47.1542885Z     def get_loc(self, key):
2025-08-30T09:58:47.1542947Z         """
2025-08-30T09:58:47.1543099Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1543155Z     
2025-08-30T09:58:47.1543225Z         Parameters
2025-08-30T09:58:47.1543287Z         ----------
2025-08-30T09:58:47.1543478Z         key : label
2025-08-30T09:58:47.1543536Z     
2025-08-30T09:58:47.1543600Z         Returns
2025-08-30T09:58:47.1543659Z         -------
2025-08-30T09:58:47.1543784Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1543844Z     
2025-08-30T09:58:47.1543909Z         Examples
2025-08-30T09:58:47.1543969Z         --------
2025-08-30T09:58:47.1544057Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1544144Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1544228Z         1
2025-08-30T09:58:47.1544333Z     
2025-08-30T09:58:47.1544512Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1544658Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1544780Z         slice(1, 3, None)
2025-08-30T09:58:47.1544843Z     
2025-08-30T09:58:47.1544949Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1545035Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1545117Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1545178Z         """
2025-08-30T09:58:47.1545269Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1545328Z         try:
2025-08-30T09:58:47.1545422Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1545526Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1545545Z 
2025-08-30T09:58:47.1545720Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1545967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1546136Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1546194Z     ???
2025-08-30T09:58:47.1546353Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1546413Z     ???
2025-08-30T09:58:47.1546675Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1546731Z     ???
2025-08-30T09:58:47.1546834Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1546839Z 
2025-08-30T09:58:47.1546893Z >   ???
2025-08-30T09:58:47.1546962Z E   KeyError: 'date'
2025-08-30T09:58:47.1546966Z 
2025-08-30T09:58:47.1547197Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1547204Z 
2025-08-30T09:58:47.1547363Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1547373Z 
2025-08-30T09:58:47.1547532Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4af6e10>
2025-08-30T09:58:47.1548222Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1548304Z model = 'LightGBMClassifier'
2025-08-30T09:58:47.1548309Z 
2025-08-30T09:58:47.1548390Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1548453Z         "model",
2025-08-30T09:58:47.1548509Z         [
2025-08-30T09:58:47.1548589Z             "LightGBMClassifier",
2025-08-30T09:58:47.1548664Z             "CatboostClassifier",
2025-08-30T09:58:47.1548750Z             "XGBoostClassifier",
2025-08-30T09:58:47.1548828Z             "XGBoostRFClassifier",
2025-08-30T09:58:47.1548922Z             "SKLearnRandomForestClassifier",
2025-08-30T09:58:47.1549007Z             "PyTorchMLPClassifier",
2025-08-30T09:58:47.1549070Z         ],
2025-08-30T09:58:47.1549126Z     )
2025-08-30T09:58:47.1549314Z     def test_extract_data_and_train_model_Classifiers(mocker, freqai_conf, model):
2025-08-30T09:58:47.1549388Z         can_run_model(model)
2025-08-30T09:58:47.1549443Z     
2025-08-30T09:58:47.1549541Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1549680Z         freqai_conf.update({"strategy": "freqai_test_classifier"})
2025-08-30T09:58:47.1549795Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1549928Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1550044Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1550163Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1550218Z     
2025-08-30T09:58:47.1550332Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1550412Z         freqai = strategy.freqai
2025-08-30T09:58:47.1550492Z         freqai.live = True
2025-08-30T09:58:47.1550586Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1550662Z         freqai.dk.live = True
2025-08-30T09:58:47.1550791Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1550920Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1550979Z     
2025-08-30T09:58:47.1551064Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1551119Z     
2025-08-30T09:58:47.1551272Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1551417Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.1551501Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1551561Z     
2025-08-30T09:58:47.1551649Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1551797Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1551948Z         )
2025-08-30T09:58:47.1551953Z 
2025-08-30T09:58:47.1552052Z tests/freqai/test_freqai_interface.py:217: 
2025-08-30T09:58:47.1552151Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1552334Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1552497Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1552669Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1552761Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1552887Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1552990Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1553152Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1553448Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1553539Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1553611Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1553708Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1553712Z 
2025-08-30T09:58:47.1553876Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1553936Z key = 'date'
2025-08-30T09:58:47.1553940Z 
2025-08-30T09:58:47.1554013Z     def get_loc(self, key):
2025-08-30T09:58:47.1554070Z         """
2025-08-30T09:58:47.1554225Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1554281Z     
2025-08-30T09:58:47.1554345Z         Parameters
2025-08-30T09:58:47.1554411Z         ----------
2025-08-30T09:58:47.1554473Z         key : label
2025-08-30T09:58:47.1554527Z     
2025-08-30T09:58:47.1554590Z         Returns
2025-08-30T09:58:47.1554655Z         -------
2025-08-30T09:58:47.1554779Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1554841Z     
2025-08-30T09:58:47.1554906Z         Examples
2025-08-30T09:58:47.1554965Z         --------
2025-08-30T09:58:47.1555055Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1555137Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1555193Z         1
2025-08-30T09:58:47.1555249Z     
2025-08-30T09:58:47.1555347Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1555438Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1555509Z         slice(1, 3, None)
2025-08-30T09:58:47.1555565Z     
2025-08-30T09:58:47.1555674Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1555756Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1555837Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1555894Z         """
2025-08-30T09:58:47.1555997Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1556055Z         try:
2025-08-30T09:58:47.1556148Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1556237Z         except KeyError as err:
2025-08-30T09:58:47.1556326Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1556416Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1556530Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1556594Z             ):
2025-08-30T09:58:47.1556679Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1556758Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1556836Z E           KeyError: 'date'
2025-08-30T09:58:47.1556840Z 
2025-08-30T09:58:47.1557030Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1557170Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1557677Z 2025-08-30 09:54:35 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1558265Z 2025-08-30 09:54:35 INFO Using resolved strategy freqai_test_classifier from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_classifier.py'...
2025-08-30T09:58:47.1558362Z 2025-08-30 09:54:35 INFO Found no parameter file.
2025-08-30T09:58:47.1558658Z 2025-08-30 09:54:35 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1558838Z 2025-08-30 09:54:35 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1559016Z 2025-08-30 09:54:35 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1559220Z 2025-08-30 09:54:35 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1559514Z 2025-08-30 09:54:35 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1559782Z 2025-08-30 09:54:35 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1559982Z 2025-08-30 09:54:35 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1560180Z 2025-08-30 09:54:35 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1560286Z 2025-08-30 09:54:35 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1560395Z 2025-08-30 09:54:35 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1560511Z 2025-08-30 09:54:35 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1560660Z 2025-08-30 09:54:35 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1560816Z 2025-08-30 09:54:35 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1560953Z 2025-08-30 09:54:35 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1561098Z 2025-08-30 09:54:35 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1561574Z 2025-08-30 09:54:35 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1561778Z 2025-08-30 09:54:35 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1561908Z 2025-08-30 09:54:35 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1562019Z 2025-08-30 09:54:35 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1562153Z 2025-08-30 09:54:35 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1562319Z 2025-08-30 09:54:35 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1562435Z 2025-08-30 09:54:35 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1562565Z 2025-08-30 09:54:35 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1562709Z 2025-08-30 09:54:35 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1562828Z 2025-08-30 09:54:35 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1562981Z 2025-08-30 09:54:35 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1563132Z 2025-08-30 09:54:35 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1563277Z 2025-08-30 09:54:35 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1563581Z 2025-08-30 09:54:35 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1563776Z 2025-08-30 09:54:35 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1564097Z 2025-08-30 09:54:35 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1564446Z 2025-08-30 09:54:35 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo18/freqaimodels" does not exist.
2025-08-30T09:58:47.1565182Z 2025-08-30 09:54:35 INFO Using resolved freqaimodel LightGBMClassifier from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMClassifier.py'...
2025-08-30T09:58:47.1565528Z 2025-08-30 09:54:35 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1565735Z 2025-08-30 09:54:35 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1566005Z 2025-08-30 09:54:35 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1566309Z 2025-08-30 09:54:35 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1566482Z 2025-08-30 09:54:35 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1566738Z 2025-08-30 09:54:35 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1566952Z 2025-08-30 09:54:35 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1567251Z 2025-08-30 09:54:35 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1567458Z 2025-08-30 09:54:35 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1567760Z 2025-08-30 09:54:35 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1567943Z 2025-08-30 09:54:35 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1576000Z 2025-08-30 09:54:35 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1576232Z 2025-08-30 09:54:35 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1576416Z 2025-08-30 09:54:35 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1576589Z 2025-08-30 09:54:35 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1576743Z 2025-08-30 09:54:36 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1576889Z 2025-08-30 09:54:36 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1577174Z _ test_extract_data_and_train_model_Standard[CatboostRegressor-False-False-False-True-True-0-0] _
2025-08-30T09:58:47.1577182Z 
2025-08-30T09:58:47.1577355Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1577424Z key = 'date'
2025-08-30T09:58:47.1577429Z 
2025-08-30T09:58:47.1577505Z     def get_loc(self, key):
2025-08-30T09:58:47.1577563Z         """
2025-08-30T09:58:47.1577721Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1577777Z     
2025-08-30T09:58:47.1577845Z         Parameters
2025-08-30T09:58:47.1577911Z         ----------
2025-08-30T09:58:47.1577973Z         key : label
2025-08-30T09:58:47.1578030Z     
2025-08-30T09:58:47.1578089Z         Returns
2025-08-30T09:58:47.1578148Z         -------
2025-08-30T09:58:47.1578276Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1578338Z     
2025-08-30T09:58:47.1578398Z         Examples
2025-08-30T09:58:47.1578459Z         --------
2025-08-30T09:58:47.1578561Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1578642Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1578704Z         1
2025-08-30T09:58:47.1578760Z     
2025-08-30T09:58:47.1578869Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1578950Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1579020Z         slice(1, 3, None)
2025-08-30T09:58:47.1579082Z     
2025-08-30T09:58:47.1579185Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1579271Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1579354Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1579411Z         """
2025-08-30T09:58:47.1579502Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1579562Z         try:
2025-08-30T09:58:47.1579660Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1579731Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1579737Z 
2025-08-30T09:58:47.1579916Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1580028Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1580397Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1580458Z     ???
2025-08-30T09:58:47.1580620Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1580677Z     ???
2025-08-30T09:58:47.1580943Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1581001Z     ???
2025-08-30T09:58:47.1581109Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1581115Z 
2025-08-30T09:58:47.1581171Z >   ???
2025-08-30T09:58:47.1581241Z E   KeyError: 'date'
2025-08-30T09:58:47.1581245Z 
2025-08-30T09:58:47.1581372Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1581377Z 
2025-08-30T09:58:47.1581643Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1581649Z 
2025-08-30T09:58:47.1581806Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4532650>
2025-08-30T09:58:47.1582499Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1582669Z model = 'CatboostRegressor', pca = False, dbscan = False, float32 = False
2025-08-30T09:58:47.1582780Z can_short = True, shuffle = True, buffer = 0, noise = 0
2025-08-30T09:58:47.1582786Z 
2025-08-30T09:58:47.1582876Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1583015Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1583073Z         [
2025-08-30T09:58:47.1583218Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1583563Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1583751Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1583896Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1584049Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1584233Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1584385Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1584568Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1584741Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1584913Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1585089Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1585147Z         ],
2025-08-30T09:58:47.1585203Z     )
2025-08-30T09:58:47.1585310Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1585506Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1585563Z     ):
2025-08-30T09:58:47.1585642Z         can_run_model(model)
2025-08-30T09:58:47.1585697Z     
2025-08-30T09:58:47.1585763Z         test_tb = True
2025-08-30T09:58:47.1585826Z         if is_mac():
2025-08-30T09:58:47.1585901Z             test_tb = False
2025-08-30T09:58:47.1585955Z     
2025-08-30T09:58:47.1586029Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1586129Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1586245Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1586364Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1586590Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1586835Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1587091Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1587285Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1587495Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1587698Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1587754Z     
2025-08-30T09:58:47.1587847Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1587923Z             model_save_ext = "zip"
2025-08-30T09:58:47.1588016Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1588094Z             # test the RL guardrails
2025-08-30T09:58:47.1588438Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1588605Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1588776Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1588833Z     
2025-08-30T09:58:47.1588929Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1589141Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1589294Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1589354Z     
2025-08-30T09:58:47.1589429Z         if "PyTorch" in model:
2025-08-30T09:58:47.1589508Z             model_save_ext = "zip"
2025-08-30T09:58:47.1589664Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1589846Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1589931Z             if "Transformer" in model:
2025-08-30T09:58:47.1590074Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1590174Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1590231Z     
2025-08-30T09:58:47.1590370Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1590486Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1590601Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1590721Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1590798Z         freqai = strategy.freqai
2025-08-30T09:58:47.1590869Z         freqai.live = True
2025-08-30T09:58:47.1590963Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1591038Z         freqai.can_short = can_short
2025-08-30T09:58:47.1591138Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1591211Z         freqai.dk.live = True
2025-08-30T09:58:47.1591299Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1591434Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1591564Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1591624Z     
2025-08-30T09:58:47.1591708Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1591764Z     
2025-08-30T09:58:47.1591918Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1592060Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1592144Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1592198Z     
2025-08-30T09:58:47.1592287Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1592371Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1592525Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1592588Z         )
2025-08-30T09:58:47.1592594Z 
2025-08-30T09:58:47.1592688Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1592888Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1593125Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1593567Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1593839Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1593935Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1594068Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1594168Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1594234Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1594422Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1594638Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1594711Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1594819Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1594830Z 
2025-08-30T09:58:47.1594991Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1595054Z key = 'date'
2025-08-30T09:58:47.1595059Z 
2025-08-30T09:58:47.1595137Z     def get_loc(self, key):
2025-08-30T09:58:47.1595196Z         """
2025-08-30T09:58:47.1595347Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1595402Z     
2025-08-30T09:58:47.1595470Z         Parameters
2025-08-30T09:58:47.1595534Z         ----------
2025-08-30T09:58:47.1595596Z         key : label
2025-08-30T09:58:47.1595655Z     
2025-08-30T09:58:47.1595714Z         Returns
2025-08-30T09:58:47.1595773Z         -------
2025-08-30T09:58:47.1595902Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1595964Z     
2025-08-30T09:58:47.1596025Z         Examples
2025-08-30T09:58:47.1596140Z         --------
2025-08-30T09:58:47.1596310Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1596456Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1596559Z         1
2025-08-30T09:58:47.1596620Z     
2025-08-30T09:58:47.1596727Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1596809Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1596877Z         slice(1, 3, None)
2025-08-30T09:58:47.1596937Z     
2025-08-30T09:58:47.1597039Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1597122Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1597204Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1597267Z         """
2025-08-30T09:58:47.1597358Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1597416Z         try:
2025-08-30T09:58:47.1597517Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1597592Z         except KeyError as err:
2025-08-30T09:58:47.1597680Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1597784Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1597896Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1597955Z             ):
2025-08-30T09:58:47.1598037Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1598120Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1598192Z E           KeyError: 'date'
2025-08-30T09:58:47.1598198Z 
2025-08-30T09:58:47.1598386Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1598531Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1599032Z 2025-08-30 09:54:36 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1599454Z 2025-08-30 09:54:36 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.1599690Z 2025-08-30 09:54:36 INFO Found no parameter file.
2025-08-30T09:58:47.1599977Z 2025-08-30 09:54:36 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1600155Z 2025-08-30 09:54:36 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1600339Z 2025-08-30 09:54:36 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1600535Z 2025-08-30 09:54:36 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1600724Z 2025-08-30 09:54:36 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1601070Z 2025-08-30 09:54:36 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1601262Z 2025-08-30 09:54:36 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1601460Z 2025-08-30 09:54:36 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1601570Z 2025-08-30 09:54:36 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1601677Z 2025-08-30 09:54:36 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1601795Z 2025-08-30 09:54:36 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1601946Z 2025-08-30 09:54:36 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1602106Z 2025-08-30 09:54:36 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1602235Z 2025-08-30 09:54:36 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1602373Z 2025-08-30 09:54:36 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1602860Z 2025-08-30 09:54:36 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1603055Z 2025-08-30 09:54:36 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1603171Z 2025-08-30 09:54:36 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1603282Z 2025-08-30 09:54:36 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1603601Z 2025-08-30 09:54:36 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1603788Z 2025-08-30 09:54:36 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1603914Z 2025-08-30 09:54:36 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1604044Z 2025-08-30 09:54:36 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1604196Z 2025-08-30 09:54:36 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1604321Z 2025-08-30 09:54:36 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1604467Z 2025-08-30 09:54:36 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1604621Z 2025-08-30 09:54:36 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1604770Z 2025-08-30 09:54:36 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1604915Z 2025-08-30 09:54:36 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1605026Z 2025-08-30 09:54:36 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1605313Z 2025-08-30 09:54:36 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.1605635Z 2025-08-30 09:54:36 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_extract_data_and_train_mo19/freqaimodels" does not exist.
2025-08-30T09:58:47.1606139Z 2025-08-30 09:54:36 INFO Using resolved freqaimodel CatboostRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/CatboostRegressor.py'...
2025-08-30T09:58:47.1606286Z 2025-08-30 09:54:36 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1606455Z 2025-08-30 09:54:36 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1606798Z 2025-08-30 09:54:36 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1607051Z 2025-08-30 09:54:36 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1607193Z 2025-08-30 09:54:36 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1607331Z 2025-08-30 09:54:36 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1607489Z 2025-08-30 09:54:36 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.1607639Z 2025-08-30 09:54:36 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.1607900Z 2025-08-30 09:54:36 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1608033Z 2025-08-30 09:54:36 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1608113Z 2025-08-30 09:54:36 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1608220Z 2025-08-30 09:54:36 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1608340Z 2025-08-30 09:54:36 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1608500Z 2025-08-30 09:54:36 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1608663Z 2025-08-30 09:54:36 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1608813Z 2025-08-30 09:54:36 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1608961Z 2025-08-30 09:54:36 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1609261Z _ test_extract_data_and_train_model_Standard[ReinforcementLearner_test_3ac-False-False-False-True-False-0-0] _
2025-08-30T09:58:47.1609267Z 
2025-08-30T09:58:47.1609427Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1609489Z key = 'date'
2025-08-30T09:58:47.1609494Z 
2025-08-30T09:58:47.1609574Z     def get_loc(self, key):
2025-08-30T09:58:47.1609637Z         """
2025-08-30T09:58:47.1609788Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1609844Z     
2025-08-30T09:58:47.1609910Z         Parameters
2025-08-30T09:58:47.1609971Z         ----------
2025-08-30T09:58:47.1610032Z         key : label
2025-08-30T09:58:47.1610092Z     
2025-08-30T09:58:47.1610150Z         Returns
2025-08-30T09:58:47.1610210Z         -------
2025-08-30T09:58:47.1610334Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1610394Z     
2025-08-30T09:58:47.1610454Z         Examples
2025-08-30T09:58:47.1610513Z         --------
2025-08-30T09:58:47.1610609Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1610687Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1610748Z         1
2025-08-30T09:58:47.1610804Z     
2025-08-30T09:58:47.1610905Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1610984Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1611055Z         slice(1, 3, None)
2025-08-30T09:58:47.1611116Z     
2025-08-30T09:58:47.1611216Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1611299Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1611379Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1611443Z         """
2025-08-30T09:58:47.1611535Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1611594Z         try:
2025-08-30T09:58:47.1611687Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1611759Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1611763Z 
2025-08-30T09:58:47.1611934Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1612043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1612210Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1612269Z     ???
2025-08-30T09:58:47.1612529Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1612588Z     ???
2025-08-30T09:58:47.1612850Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1612905Z     ???
2025-08-30T09:58:47.1613010Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1613015Z 
2025-08-30T09:58:47.1613070Z >   ???
2025-08-30T09:58:47.1613137Z E   KeyError: 'date'
2025-08-30T09:58:47.1613141Z 
2025-08-30T09:58:47.1613264Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1613269Z 
2025-08-30T09:58:47.1613688Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1613696Z 
2025-08-30T09:58:47.1614015Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4168d90>
2025-08-30T09:58:47.1614715Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1614881Z model = 'ReinforcementLearner_test_3ac', pca = False, dbscan = False
2025-08-30T09:58:47.1615039Z float32 = False, can_short = True, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1615044Z 
2025-08-30T09:58:47.1615131Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1615274Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1615332Z         [
2025-08-30T09:58:47.1615479Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1615622Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1615773Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1615913Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1616069Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1616252Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1616404Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1616589Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1616764Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1616936Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1617109Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1617171Z         ],
2025-08-30T09:58:47.1617230Z     )
2025-08-30T09:58:47.1617340Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1617531Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1617592Z     ):
2025-08-30T09:58:47.1617669Z         can_run_model(model)
2025-08-30T09:58:47.1617725Z     
2025-08-30T09:58:47.1617791Z         test_tb = True
2025-08-30T09:58:47.1617854Z         if is_mac():
2025-08-30T09:58:47.1617927Z             test_tb = False
2025-08-30T09:58:47.1617982Z     
2025-08-30T09:58:47.1618057Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1618158Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1618273Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1618390Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1618609Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1618839Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1618957Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1619411Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1619759Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1619966Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1620022Z     
2025-08-30T09:58:47.1620116Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1620192Z             model_save_ext = "zip"
2025-08-30T09:58:47.1620288Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1620367Z             # test the RL guardrails
2025-08-30T09:58:47.1620573Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1620832Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1620997Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1621062Z     
2025-08-30T09:58:47.1621156Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1621367Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1621520Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1621576Z     
2025-08-30T09:58:47.1621650Z         if "PyTorch" in model:
2025-08-30T09:58:47.1621726Z             model_save_ext = "zip"
2025-08-30T09:58:47.1621872Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1622040Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1622123Z             if "Transformer" in model:
2025-08-30T09:58:47.1622268Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1622358Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1622418Z     
2025-08-30T09:58:47.1622556Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1622670Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1622783Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1622900Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1622976Z         freqai = strategy.freqai
2025-08-30T09:58:47.1623046Z         freqai.live = True
2025-08-30T09:58:47.1623135Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1623215Z         freqai.can_short = can_short
2025-08-30T09:58:47.1623310Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1623592Z         freqai.dk.live = True
2025-08-30T09:58:47.1623705Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1623839Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1623967Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1624031Z     
2025-08-30T09:58:47.1624114Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1624168Z     
2025-08-30T09:58:47.1624319Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1624460Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1624546Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1624601Z     
2025-08-30T09:58:47.1624689Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1624771Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1624919Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1624984Z         )
2025-08-30T09:58:47.1624989Z 
2025-08-30T09:58:47.1625089Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1625190Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1625512Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1625680Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1625842Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1625962Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1626093Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1626192Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1626256Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1626442Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1626526Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1626589Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1626804Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1626810Z 
2025-08-30T09:58:47.1626973Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1627040Z key = 'date'
2025-08-30T09:58:47.1627045Z 
2025-08-30T09:58:47.1627120Z     def get_loc(self, key):
2025-08-30T09:58:47.1627176Z         """
2025-08-30T09:58:47.1627327Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1627380Z     
2025-08-30T09:58:47.1627447Z         Parameters
2025-08-30T09:58:47.1627510Z         ----------
2025-08-30T09:58:47.1627570Z         key : label
2025-08-30T09:58:47.1627628Z     
2025-08-30T09:58:47.1627686Z         Returns
2025-08-30T09:58:47.1627745Z         -------
2025-08-30T09:58:47.1627871Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1627928Z     
2025-08-30T09:58:47.1627987Z         Examples
2025-08-30T09:58:47.1628051Z         --------
2025-08-30T09:58:47.1628142Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1628221Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1628283Z         1
2025-08-30T09:58:47.1628337Z     
2025-08-30T09:58:47.1628435Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1628514Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1628581Z         slice(1, 3, None)
2025-08-30T09:58:47.1628638Z     
2025-08-30T09:58:47.1628738Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1628819Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1628900Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1628958Z         """
2025-08-30T09:58:47.1629048Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1629105Z         try:
2025-08-30T09:58:47.1629197Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1629271Z         except KeyError as err:
2025-08-30T09:58:47.1629361Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1629452Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1629570Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1629632Z             ):
2025-08-30T09:58:47.1629716Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1629800Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1629870Z E           KeyError: 'date'
2025-08-30T09:58:47.1629875Z 
2025-08-30T09:58:47.1630064Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1630209Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1630706Z 2025-08-30 09:54:36 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1631147Z 2025-08-30 09:54:36 INFO Using resolved strategy freqai_rl_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_rl_test_strat.py'...
2025-08-30T09:58:47.1631247Z 2025-08-30 09:54:36 INFO Found no parameter file.
2025-08-30T09:58:47.1631623Z 2025-08-30 09:54:36 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1631801Z 2025-08-30 09:54:36 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1631981Z 2025-08-30 09:54:36 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1632176Z 2025-08-30 09:54:36 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1632365Z 2025-08-30 09:54:36 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1632629Z 2025-08-30 09:54:36 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1632903Z 2025-08-30 09:54:36 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1633099Z 2025-08-30 09:54:36 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1633211Z 2025-08-30 09:54:36 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1633314Z 2025-08-30 09:54:36 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1633625Z 2025-08-30 09:54:36 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1633781Z 2025-08-30 09:54:36 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1633942Z 2025-08-30 09:54:36 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1634069Z 2025-08-30 09:54:36 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1634207Z 2025-08-30 09:54:36 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1634689Z 2025-08-30 09:54:36 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1634884Z 2025-08-30 09:54:36 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1635007Z 2025-08-30 09:54:36 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1635119Z 2025-08-30 09:54:36 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1635246Z 2025-08-30 09:54:36 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1635411Z 2025-08-30 09:54:36 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1635530Z 2025-08-30 09:54:36 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1635653Z 2025-08-30 09:54:36 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1635799Z 2025-08-30 09:54:36 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1635918Z 2025-08-30 09:54:36 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1636063Z 2025-08-30 09:54:36 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1636216Z 2025-08-30 09:54:36 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1636357Z 2025-08-30 09:54:36 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1636505Z 2025-08-30 09:54:36 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1636615Z 2025-08-30 09:54:36 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1637158Z 2025-08-30 09:54:36 INFO Using resolved freqaimodel ReinforcementLearner_test_3ac from '/home/runner/work/freqtrade/freqtrade/tests/freqai/test_models/ReinforcementLearner_test_3ac.py'...
2025-08-30T09:58:47.1637306Z 2025-08-30 09:54:36 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1637470Z 2025-08-30 09:54:36 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1637659Z 2025-08-30 09:54:36 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1637915Z 2025-08-30 09:54:36 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1638066Z 2025-08-30 09:54:36 WARNING User tried to use SVM with RL. Deactivating SVM.
2025-08-30T09:58:47.1638416Z 2025-08-30 09:54:36 WARNING User tried to use DI_threshold with RL. Deactivating DI_threshold.
2025-08-30T09:58:47.1638605Z 2025-08-30 09:54:36 WARNING User tried to shuffle training data. Setting shuffle to False
2025-08-30T09:58:47.1638742Z 2025-08-30 09:54:36 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1638878Z 2025-08-30 09:54:36 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1639031Z 2025-08-30 09:54:36 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1639153Z 2025-08-30 09:54:36 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1639233Z 2025-08-30 09:54:36 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1639329Z 2025-08-30 09:54:36 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1639547Z 2025-08-30 09:54:36 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1639706Z 2025-08-30 09:54:36 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1639867Z 2025-08-30 09:54:36 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1640021Z 2025-08-30 09:54:36 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1640169Z 2025-08-30 09:54:37 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1640475Z _ test_extract_data_and_train_model_Standard[ReinforcementLearner_test_3ac-False-False-False-False-False-0-0] _
2025-08-30T09:58:47.1640480Z 
2025-08-30T09:58:47.1640639Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1640699Z key = 'date'
2025-08-30T09:58:47.1640704Z 
2025-08-30T09:58:47.1640776Z     def get_loc(self, key):
2025-08-30T09:58:47.1640839Z         """
2025-08-30T09:58:47.1640993Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1641048Z     
2025-08-30T09:58:47.1641114Z         Parameters
2025-08-30T09:58:47.1641175Z         ----------
2025-08-30T09:58:47.1641243Z         key : label
2025-08-30T09:58:47.1641298Z     
2025-08-30T09:58:47.1641359Z         Returns
2025-08-30T09:58:47.1641418Z         -------
2025-08-30T09:58:47.1641537Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1641595Z     
2025-08-30T09:58:47.1641654Z         Examples
2025-08-30T09:58:47.1641714Z         --------
2025-08-30T09:58:47.1641802Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1641883Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1641939Z         1
2025-08-30T09:58:47.1641992Z     
2025-08-30T09:58:47.1642087Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1642166Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1642234Z         slice(1, 3, None)
2025-08-30T09:58:47.1642292Z     
2025-08-30T09:58:47.1642430Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1642585Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1642741Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1642846Z         """
2025-08-30T09:58:47.1643013Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1643082Z         try:
2025-08-30T09:58:47.1643181Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1643252Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1643257Z 
2025-08-30T09:58:47.1643536Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1643638Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1643812Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1643869Z     ???
2025-08-30T09:58:47.1644034Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1644094Z     ???
2025-08-30T09:58:47.1644354Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1644554Z     ???
2025-08-30T09:58:47.1644658Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1644663Z 
2025-08-30T09:58:47.1644718Z >   ???
2025-08-30T09:58:47.1644785Z E   KeyError: 'date'
2025-08-30T09:58:47.1644790Z 
2025-08-30T09:58:47.1644912Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1644917Z 
2025-08-30T09:58:47.1645072Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1645077Z 
2025-08-30T09:58:47.1645230Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e592a210>
2025-08-30T09:58:47.1646022Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.1646182Z model = 'ReinforcementLearner_test_3ac', pca = False, dbscan = False
2025-08-30T09:58:47.1646344Z float32 = False, can_short = False, shuffle = False, buffer = 0, noise = 0
2025-08-30T09:58:47.1646349Z 
2025-08-30T09:58:47.1646435Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1646577Z         "model, pca, dbscan, float32, can_short, shuffle, buffer, noise",
2025-08-30T09:58:47.1646634Z         [
2025-08-30T09:58:47.1646774Z             ("LightGBMRegressor", True, False, True, True, False, 0, 0),
2025-08-30T09:58:47.1646921Z             ("XGBoostRegressor", False, True, False, True, False, 10, 0.05),
2025-08-30T09:58:47.1647067Z             ("XGBoostRFRegressor", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1647202Z             ("CatboostRegressor", False, False, False, True, True, 0, 0),
2025-08-30T09:58:47.1647361Z             ("PyTorchMLPRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1647545Z             ("PyTorchTransformerRegressor", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1647688Z             ("ReinforcementLearner", False, True, False, True, False, 0, 0),
2025-08-30T09:58:47.1647884Z             ("ReinforcementLearner_multiproc", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1648058Z             ("ReinforcementLearner_test_3ac", False, False, False, False, False, 0, 0),
2025-08-30T09:58:47.1648230Z             ("ReinforcementLearner_test_3ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1648402Z             ("ReinforcementLearner_test_4ac", False, False, False, True, False, 0, 0),
2025-08-30T09:58:47.1648460Z         ],
2025-08-30T09:58:47.1648515Z     )
2025-08-30T09:58:47.1648617Z     def test_extract_data_and_train_model_Standard(
2025-08-30T09:58:47.1648808Z         mocker, freqai_conf, model, pca, dbscan, float32, can_short, shuffle, buffer, noise
2025-08-30T09:58:47.1648863Z     ):
2025-08-30T09:58:47.1648938Z         can_run_model(model)
2025-08-30T09:58:47.1648997Z     
2025-08-30T09:58:47.1649060Z         test_tb = True
2025-08-30T09:58:47.1649123Z         if is_mac():
2025-08-30T09:58:47.1649198Z             test_tb = False
2025-08-30T09:58:47.1649253Z     
2025-08-30T09:58:47.1649327Z         model_save_ext = "joblib"
2025-08-30T09:58:47.1649420Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.1649537Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.1649652Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.1649869Z         freqai_conf["freqai"]["feature_parameters"].update({"principal_component_analysis": pca})
2025-08-30T09:58:47.1650095Z         freqai_conf["freqai"]["feature_parameters"].update({"use_DBSCAN_to_remove_outliers": dbscan})
2025-08-30T09:58:47.1650209Z         freqai_conf.update({"reduce_df_footprint": float32})
2025-08-30T09:58:47.1650405Z         freqai_conf["freqai"]["feature_parameters"].update({"shuffle_after_split": shuffle})
2025-08-30T09:58:47.1650612Z         freqai_conf["freqai"]["feature_parameters"].update({"buffer_train_data_candles": buffer})
2025-08-30T09:58:47.1650905Z         freqai_conf["freqai"]["feature_parameters"].update({"noise_standard_deviation": noise})
2025-08-30T09:58:47.1650959Z     
2025-08-30T09:58:47.1651049Z         if "ReinforcementLearner" in model:
2025-08-30T09:58:47.1651125Z             model_save_ext = "zip"
2025-08-30T09:58:47.1651216Z             freqai_conf = make_rl_config(freqai_conf)
2025-08-30T09:58:47.1651291Z             # test the RL guardrails
2025-08-30T09:58:47.1651497Z             freqai_conf["freqai"]["feature_parameters"].update({"use_SVM_to_remove_outliers": True})
2025-08-30T09:58:47.1651659Z             freqai_conf["freqai"]["feature_parameters"].update({"DI_threshold": 2})
2025-08-30T09:58:47.1651819Z             freqai_conf["freqai"]["data_split_parameters"].update({"shuffle": True})
2025-08-30T09:58:47.1651877Z     
2025-08-30T09:58:47.1652050Z         if "test_3ac" in model or "test_4ac" in model:
2025-08-30T09:58:47.1652264Z             freqai_conf["freqaimodel_path"] = str(Path(__file__).parents[1] / "freqai" / "test_models")
2025-08-30T09:58:47.1652420Z             freqai_conf["freqai"]["rl_config"]["drop_ohlc_from_features"] = True
2025-08-30T09:58:47.1652475Z     
2025-08-30T09:58:47.1652548Z         if "PyTorch" in model:
2025-08-30T09:58:47.1652620Z             model_save_ext = "zip"
2025-08-30T09:58:47.1652766Z             pytorch_mlp_mtp = mock_pytorch_mlp_model_training_parameters()
2025-08-30T09:58:47.1652932Z             freqai_conf["freqai"]["model_training_parameters"].update(pytorch_mlp_mtp)
2025-08-30T09:58:47.1653008Z             if "Transformer" in model:
2025-08-30T09:58:47.1653147Z                 # transformer model takes a window, unlike the MLP regressor
2025-08-30T09:58:47.1653236Z                 freqai_conf.update({"conv_width": 10})
2025-08-30T09:58:47.1653291Z     
2025-08-30T09:58:47.1653630Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.1653751Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.1653867Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.1653986Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.1654066Z         freqai = strategy.freqai
2025-08-30T09:58:47.1654137Z         freqai.live = True
2025-08-30T09:58:47.1654225Z         freqai.activate_tensorboard = test_tb
2025-08-30T09:58:47.1654301Z         freqai.can_short = can_short
2025-08-30T09:58:47.1654396Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.1654468Z         freqai.dk.live = True
2025-08-30T09:58:47.1654555Z         freqai.dk.set_paths("ADA/BTC", 10000)
2025-08-30T09:58:47.1654686Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.1654813Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.1654868Z     
2025-08-30T09:58:47.1654959Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.1655014Z     
2025-08-30T09:58:47.1655168Z         data_load_timerange = TimeRange.parse_timerange("20180125-20180130")
2025-08-30T09:58:47.1655314Z         new_timerange = TimeRange.parse_timerange("20180127-20180130")
2025-08-30T09:58:47.1655397Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.1655451Z     
2025-08-30T09:58:47.1655535Z         freqai.train_timer("start", "ADA/BTC")
2025-08-30T09:58:47.1655620Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.1655770Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.1655827Z         )
2025-08-30T09:58:47.1655833Z 
2025-08-30T09:58:47.1655927Z tests/freqai/test_freqai_interface.py:118: 
2025-08-30T09:58:47.1656024Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1656205Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.1656373Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.1656535Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.1656757Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.1656888Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.1656988Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.1657053Z                 ^^^^^^^^^^
2025-08-30T09:58:47.1657233Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1657319Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1657384Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1657482Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1657486Z 
2025-08-30T09:58:47.1657646Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1657811Z key = 'date'
2025-08-30T09:58:47.1657817Z 
2025-08-30T09:58:47.1657889Z     def get_loc(self, key):
2025-08-30T09:58:47.1657949Z         """
2025-08-30T09:58:47.1658097Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1658158Z     
2025-08-30T09:58:47.1658224Z         Parameters
2025-08-30T09:58:47.1658285Z         ----------
2025-08-30T09:58:47.1658346Z         key : label
2025-08-30T09:58:47.1658399Z     
2025-08-30T09:58:47.1658463Z         Returns
2025-08-30T09:58:47.1658522Z         -------
2025-08-30T09:58:47.1658644Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1658701Z     
2025-08-30T09:58:47.1658759Z         Examples
2025-08-30T09:58:47.1658819Z         --------
2025-08-30T09:58:47.1658906Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1658987Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1659043Z         1
2025-08-30T09:58:47.1659098Z     
2025-08-30T09:58:47.1659199Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1659278Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1659344Z         slice(1, 3, None)
2025-08-30T09:58:47.1659405Z     
2025-08-30T09:58:47.1659508Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1659589Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1659668Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1659729Z         """
2025-08-30T09:58:47.1659818Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1659875Z         try:
2025-08-30T09:58:47.1659963Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1660043Z         except KeyError as err:
2025-08-30T09:58:47.1660128Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1660217Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1660329Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1660391Z             ):
2025-08-30T09:58:47.1660475Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1660557Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1660627Z E           KeyError: 'date'
2025-08-30T09:58:47.1660636Z 
2025-08-30T09:58:47.1660823Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1660960Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1661460Z 2025-08-30 09:54:37 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1661898Z 2025-08-30 09:54:37 INFO Using resolved strategy freqai_rl_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_rl_test_strat.py'...
2025-08-30T09:58:47.1661990Z 2025-08-30 09:54:37 INFO Found no parameter file.
2025-08-30T09:58:47.1662284Z 2025-08-30 09:54:37 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1662459Z 2025-08-30 09:54:37 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1662748Z 2025-08-30 09:54:37 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1662945Z 2025-08-30 09:54:37 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1663131Z 2025-08-30 09:54:37 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1663597Z 2025-08-30 09:54:37 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1663804Z 2025-08-30 09:54:37 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1664003Z 2025-08-30 09:54:37 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1664108Z 2025-08-30 09:54:37 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1664345Z 2025-08-30 09:54:37 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1664468Z 2025-08-30 09:54:37 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1664620Z 2025-08-30 09:54:37 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1664781Z 2025-08-30 09:54:37 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1664908Z 2025-08-30 09:54:37 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1665044Z 2025-08-30 09:54:37 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1665522Z 2025-08-30 09:54:37 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.1665711Z 2025-08-30 09:54:37 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.1665825Z 2025-08-30 09:54:37 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1665951Z 2025-08-30 09:54:37 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1666189Z 2025-08-30 09:54:37 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.1666502Z 2025-08-30 09:54:37 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1666665Z 2025-08-30 09:54:37 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1666790Z 2025-08-30 09:54:37 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1666934Z 2025-08-30 09:54:37 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1667051Z 2025-08-30 09:54:37 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1667198Z 2025-08-30 09:54:37 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1667349Z 2025-08-30 09:54:37 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1667490Z 2025-08-30 09:54:37 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1667640Z 2025-08-30 09:54:37 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1667752Z 2025-08-30 09:54:37 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1668292Z 2025-08-30 09:54:37 INFO Using resolved freqaimodel ReinforcementLearner_test_3ac from '/home/runner/work/freqtrade/freqtrade/tests/freqai/test_models/ReinforcementLearner_test_3ac.py'...
2025-08-30T09:58:47.1668447Z 2025-08-30 09:54:37 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.1668609Z 2025-08-30 09:54:37 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.1668798Z 2025-08-30 09:54:37 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.1669049Z 2025-08-30 09:54:37 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.1669199Z 2025-08-30 09:54:37 WARNING User tried to use SVM with RL. Deactivating SVM.
2025-08-30T09:58:47.1669397Z 2025-08-30 09:54:37 WARNING User tried to use DI_threshold with RL. Deactivating DI_threshold.
2025-08-30T09:58:47.1669585Z 2025-08-30 09:54:37 WARNING User tried to shuffle training data. Setting shuffle to False
2025-08-30T09:58:47.1669878Z 2025-08-30 09:54:37 INFO No params for buy found, using default values.
2025-08-30T09:58:47.1670016Z 2025-08-30 09:54:37 INFO No params for sell found, using default values.
2025-08-30T09:58:47.1670165Z 2025-08-30 09:54:37 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1670292Z 2025-08-30 09:54:37 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1670371Z 2025-08-30 09:54:37 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1670467Z 2025-08-30 09:54:37 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1670594Z 2025-08-30 09:54:37 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1670752Z 2025-08-30 09:54:37 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1670991Z 2025-08-30 09:54:37 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1671149Z 2025-08-30 09:54:37 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1671298Z 2025-08-30 09:54:37 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.1671434Z ____________________________ test_FtNoDBContext[1d] ____________________________
2025-08-30T09:58:47.1671440Z 
2025-08-30T09:58:47.1671513Z timeframe = '1d'
2025-08-30T09:58:47.1671518Z 
2025-08-30T09:58:47.1671646Z     @pytest.mark.parametrize("timeframe", ["", "5m", "1d"])
2025-08-30T09:58:47.1671734Z     def test_FtNoDBContext(timeframe):
2025-08-30T09:58:47.1671820Z         PairLocks.timeframe = ""
2025-08-30T09:58:47.1671896Z >       assert Trade.use_db is True
2025-08-30T09:58:47.1671968Z E       assert False is True
2025-08-30T09:58:47.1672051Z E        +  where False = Trade.use_db
2025-08-30T09:58:47.1672056Z 
2025-08-30T09:58:47.1672187Z tests/persistence/test_db_context.py:9: AssertionError
2025-08-30T09:58:47.1672322Z ____________________________ test_FtNoDBContext[5m] ____________________________
2025-08-30T09:58:47.1672327Z 
2025-08-30T09:58:47.1672392Z timeframe = '5m'
2025-08-30T09:58:47.1672397Z 
2025-08-30T09:58:47.1672530Z     @pytest.mark.parametrize("timeframe", ["", "5m", "1d"])
2025-08-30T09:58:47.1672611Z     def test_FtNoDBContext(timeframe):
2025-08-30T09:58:47.1672688Z         PairLocks.timeframe = ""
2025-08-30T09:58:47.1672767Z >       assert Trade.use_db is True
2025-08-30T09:58:47.1672837Z E       assert False is True
2025-08-30T09:58:47.1672913Z E        +  where False = Trade.use_db
2025-08-30T09:58:47.1672919Z 
2025-08-30T09:58:47.1673044Z tests/persistence/test_db_context.py:9: AssertionError
2025-08-30T09:58:47.1673172Z _____________________________ test_FtNoDBContext[] _____________________________
2025-08-30T09:58:47.1673176Z 
2025-08-30T09:58:47.1673238Z timeframe = ''
2025-08-30T09:58:47.1673243Z 
2025-08-30T09:58:47.1673479Z     @pytest.mark.parametrize("timeframe", ["", "5m", "1d"])
2025-08-30T09:58:47.1673567Z     def test_FtNoDBContext(timeframe):
2025-08-30T09:58:47.1673644Z         PairLocks.timeframe = ""
2025-08-30T09:58:47.1673718Z >       assert Trade.use_db is True
2025-08-30T09:58:47.1673797Z E       assert False is True
2025-08-30T09:58:47.1673870Z E        +  where False = Trade.use_db
2025-08-30T09:58:47.1673875Z 
2025-08-30T09:58:47.1673994Z tests/persistence/test_db_context.py:9: AssertionError
2025-08-30T09:58:47.1674141Z _____________________ test_backtest_multi_pair[30-ADA/BTC] _____________________
2025-08-30T09:58:47.1674146Z 
2025-08-30T09:58:47.1674725Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1674801Z fee = <MagicMock id='140074255848848'>
2025-08-30T09:58:47.1674995Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f659440cd50>, tres = 30
2025-08-30T09:58:47.1675058Z pair = 'ADA/BTC'
2025-08-30T09:58:47.1675252Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1675257Z 
2025-08-30T09:58:47.1675388Z     @pytest.mark.parametrize("pair", ["ADA/BTC", "LTC/BTC"])
2025-08-30T09:58:47.1675610Z     @pytest.mark.parametrize("tres", [0, 20, 30])
2025-08-30T09:58:47.1675802Z     def test_backtest_multi_pair(default_conf, fee, mocker, tres, pair, testdatadir):
2025-08-30T09:58:47.1675935Z         def _trend_alternate_hold(dataframe=None, metadata=None):
2025-08-30T09:58:47.1675994Z             """
2025-08-30T09:58:47.1676168Z             Buy every xth candle - sell every other xth -2 (hold on to pairs a bit)
2025-08-30T09:58:47.1676227Z             """
2025-08-30T09:58:47.1676334Z             if metadata["pair"] in ("ETH/BTC", "LTC/BTC"):
2025-08-30T09:58:47.1676402Z                 multi = 20
2025-08-30T09:58:47.1676461Z             else:
2025-08-30T09:58:47.1676528Z                 multi = 18
2025-08-30T09:58:47.1676799Z             dataframe["enter_long"] = np.where(dataframe.index % multi == 0, 1, 0)
2025-08-30T09:58:47.1676993Z             dataframe["exit_long"] = np.where((dataframe.index + multi - 2) % multi == 0, 1, 0)
2025-08-30T09:58:47.1677082Z             dataframe["enter_short"] = 0
2025-08-30T09:58:47.1677160Z             dataframe["exit_short"] = 0
2025-08-30T09:58:47.1677230Z             return dataframe
2025-08-30T09:58:47.1677285Z     
2025-08-30T09:58:47.1677373Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.1677534Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1677702Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1677790Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.1677865Z         patch_exchange(mocker)
2025-08-30T09:58:47.1677920Z     
2025-08-30T09:58:47.1678055Z         pairs = ["ADA/BTC", "DASH/BTC", "ETH/BTC", "LTC/BTC", "NXT/BTC"]
2025-08-30T09:58:47.1678234Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=pairs)
2025-08-30T09:58:47.1678332Z         # Only use 500 lines to increase performance
2025-08-30T09:58:47.1678413Z         data = trim_dictlist(data, -500)
2025-08-30T09:58:47.1678479Z     
2025-08-30T09:58:47.1678605Z         # Remove data for one pair from the beginning of the data
2025-08-30T09:58:47.1678669Z         if tres > 0:
2025-08-30T09:58:47.1678771Z >           data[pair] = data[pair][tres:].reset_index()
2025-08-30T09:58:47.1678846Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1678851Z 
2025-08-30T09:58:47.1678944Z tests/optimize/test_backtesting.py:1545: 
2025-08-30T09:58:47.1679047Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1679236Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6479: in reset_index
2025-08-30T09:58:47.1679301Z     new_obj.insert(
2025-08-30T09:58:47.1679402Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1679412Z 
2025-08-30T09:58:47.1679534Z self =      level_0                     index  ...     close         volume
2025-08-30T09:58:47.1679658Z 30      5290 2018-01-28 13:45:00+00:00  ...  0.00....  0.000051  144290.758587
2025-08-30T09:58:47.1679774Z 499     5759 2018-01-30 04:50:00+00:00  ...  0.000051   64164.304454
2025-08-30T09:58:47.1679784Z 
2025-08-30T09:58:47.1679849Z [470 rows x 7 columns]
2025-08-30T09:58:47.1679920Z loc = 0, column = 'level_0'
2025-08-30T09:58:47.1680040Z value = array([ 30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,
2025-08-30T09:58:47.1680137Z         43,  44,  45,  46,  47,  48,  49,  50,...479, 480, 481, 482, 483, 484,
2025-08-30T09:58:47.1680247Z        485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
2025-08-30T09:58:47.1680306Z        498, 499])
2025-08-30T09:58:47.1680385Z allow_duplicates = False
2025-08-30T09:58:47.1680390Z 
2025-08-30T09:58:47.1680448Z     def insert(
2025-08-30T09:58:47.1680509Z         self,
2025-08-30T09:58:47.1680573Z         loc: int,
2025-08-30T09:58:47.1680642Z         column: Hashable,
2025-08-30T09:58:47.1680722Z         value: Scalar | AnyArrayLike,
2025-08-30T09:58:47.1680946Z         allow_duplicates: bool | lib.NoDefault = lib.no_default,
2025-08-30T09:58:47.1681011Z     ) -> None:
2025-08-30T09:58:47.1681068Z         """
2025-08-30T09:58:47.1681182Z         Insert column into DataFrame at specified location.
2025-08-30T09:58:47.1681243Z     
2025-08-30T09:58:47.1681402Z         Raises a ValueError if `column` is already contained in the DataFrame,
2025-08-30T09:58:47.1681496Z         unless `allow_duplicates` is set to True.
2025-08-30T09:58:47.1681551Z     
2025-08-30T09:58:47.1681617Z         Parameters
2025-08-30T09:58:47.1681679Z         ----------
2025-08-30T09:58:47.1681738Z         loc : int
2025-08-30T09:58:47.1681862Z             Insertion index. Must verify 0 <= loc <= len(columns).
2025-08-30T09:58:47.1681951Z         column : str, number, or hashable object
2025-08-30T09:58:47.1682129Z             Label of the inserted column.
2025-08-30T09:58:47.1682217Z         value : Scalar, Series, or array-like
2025-08-30T09:58:47.1682301Z             Content of the inserted column.
2025-08-30T09:58:47.1682433Z         allow_duplicates : bool, optional, default lib.no_default
2025-08-30T09:58:47.1682531Z             Allow duplicate column labels to be created.
2025-08-30T09:58:47.1682594Z     
2025-08-30T09:58:47.1682653Z         See Also
2025-08-30T09:58:47.1682712Z         --------
2025-08-30T09:58:47.1682803Z         Index.insert : Insert new item by index.
2025-08-30T09:58:47.1682859Z     
2025-08-30T09:58:47.1682918Z         Examples
2025-08-30T09:58:47.1682975Z         --------
2025-08-30T09:58:47.1683081Z         >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
2025-08-30T09:58:47.1683140Z         >>> df
2025-08-30T09:58:47.1683203Z            col1  col2
2025-08-30T09:58:47.1683265Z         0     1     3
2025-08-30T09:58:47.1683323Z         1     2     4
2025-08-30T09:58:47.1683506Z         >>> df.insert(1, "newcol", [99, 99])
2025-08-30T09:58:47.1683566Z         >>> df
2025-08-30T09:58:47.1683643Z            col1  newcol  col2
2025-08-30T09:58:47.1683710Z         0     1      99     3
2025-08-30T09:58:47.1683772Z         1     2      99     4
2025-08-30T09:58:47.1683889Z         >>> df.insert(0, "col1", [100, 100], allow_duplicates=True)
2025-08-30T09:58:47.1683947Z         >>> df
2025-08-30T09:58:47.1684019Z            col1  col1  newcol  col2
2025-08-30T09:58:47.1684083Z         0   100     1      99     3
2025-08-30T09:58:47.1684149Z         1   100     2      99     4
2025-08-30T09:58:47.1684205Z     
2025-08-30T09:58:47.1684391Z         Notice that pandas uses index alignment in case of `value` from type `Series`:
2025-08-30T09:58:47.1684450Z     
2025-08-30T09:58:47.1684559Z         >>> df.insert(0, "col0", pd.Series([5, 6], index=[1, 2]))
2025-08-30T09:58:47.1684617Z         >>> df
2025-08-30T09:58:47.1684699Z            col0  col1  col1  newcol  col2
2025-08-30T09:58:47.1684773Z         0   NaN   100     1      99     3
2025-08-30T09:58:47.1684837Z         1   5.0   100     2      99     4
2025-08-30T09:58:47.1684893Z         """
2025-08-30T09:58:47.1684991Z         if allow_duplicates is lib.no_default:
2025-08-30T09:58:47.1685067Z             allow_duplicates = False
2025-08-30T09:58:47.1685215Z         if allow_duplicates and not self.flags.allows_duplicate_labels:
2025-08-30T09:58:47.1685288Z             raise ValueError(
2025-08-30T09:58:47.1685395Z                 "Cannot specify 'allow_duplicates=True' when "
2025-08-30T09:58:47.1685505Z                 "'self.flags.allows_duplicate_labels' is False."
2025-08-30T09:58:47.1685561Z             )
2025-08-30T09:58:47.1685674Z         if not allow_duplicates and column in self.columns:
2025-08-30T09:58:47.1685768Z             # Should this be a different kind of error??
2025-08-30T09:58:47.1685902Z >           raise ValueError(f"cannot insert {column}, already exists")
2025-08-30T09:58:47.1686023Z E           ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.1686028Z 
2025-08-30T09:58:47.1686204Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:5165: ValueError
2025-08-30T09:58:47.1686507Z ______ test_backtest_start_multi_strat_caching[week-start_delta3-changed] ______
2025-08-30T09:58:47.1686511Z 
2025-08-30T09:58:47.1687096Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1687254Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584ed5650>
2025-08-30T09:58:47.1687413Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584ec02d0>
2025-08-30T09:58:47.1687607Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1687727Z run_id = 'changed', start_delta = {'weeks': 4}, cache = 'week'
2025-08-30T09:58:47.1687732Z 
2025-08-30T09:58:47.1687952Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1688075Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.1688296Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.1688452Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.1688551Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.1688711Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.1688769Z     ):
2025-08-30T09:58:47.1688850Z         default_conf.update(
2025-08-30T09:58:47.1688908Z             {
2025-08-30T09:58:47.1688986Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1689066Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1689147Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1689274Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1689382Z             }
2025-08-30T09:58:47.1689503Z         )
2025-08-30T09:58:47.1689636Z         patch_exchange(mocker)
2025-08-30T09:58:47.1689770Z         backtestmock = MagicMock(
2025-08-30T09:58:47.1689886Z             return_value={
2025-08-30T09:58:47.1690007Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.1690083Z                 "config": default_conf,
2025-08-30T09:58:47.1690150Z                 "locks": [],
2025-08-30T09:58:47.1690226Z                 "rejected_signals": 20,
2025-08-30T09:58:47.1690306Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.1690386Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.1690465Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.1690546Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.1690622Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.1690695Z                 "final_balance": 1000,
2025-08-30T09:58:47.1690758Z             }
2025-08-30T09:58:47.1690814Z         )
2025-08-30T09:58:47.1690887Z         mocker.patch(
2025-08-30T09:58:47.1691074Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1691176Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.1691242Z         )
2025-08-30T09:58:47.1691475Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.1691692Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.1691747Z     
2025-08-30T09:58:47.1691847Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.1691996Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.1692064Z         if cache == "none":
2025-08-30T09:58:47.1692161Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.1692237Z         elif cache == "day":
2025-08-30T09:58:47.1692330Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.1692404Z         elif cache == "week":
2025-08-30T09:58:47.1692501Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.1692577Z         elif cache == "month":
2025-08-30T09:58:47.1692773Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.1692856Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.1692927Z             return_value={
2025-08-30T09:58:47.1693094Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.1693283Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.1693502Z             }
2025-08-30T09:58:47.1693610Z         )
2025-08-30T09:58:47.1693697Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.1693767Z             side_effect=[
2025-08-30T09:58:47.1693829Z                 {
2025-08-30T09:58:47.1693939Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.1694157Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.1694283Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.1694347Z                 },
2025-08-30T09:58:47.1694404Z                 {
2025-08-30T09:58:47.1694510Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.1694601Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.1694713Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.1694771Z                 },
2025-08-30T09:58:47.1694831Z             ]
2025-08-30T09:58:47.1694889Z         )
2025-08-30T09:58:47.1694957Z         mocker.patch(
2025-08-30T09:58:47.1695039Z             "pathlib.Path.glob",
2025-08-30T09:58:47.1695107Z             return_value=[
2025-08-30T09:58:47.1695315Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.1695375Z             ],
2025-08-30T09:58:47.1695437Z         )
2025-08-30T09:58:47.1695516Z         mocker.patch.multiple(
2025-08-30T09:58:47.1695620Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.1695732Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.1695827Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.1695883Z         )
2025-08-30T09:58:47.1696140Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.1696150Z 
2025-08-30T09:58:47.1696241Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.1696343Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1696525Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.1696609Z     return self._start_patch(
2025-08-30T09:58:47.1696796Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.1696878Z     mocked: MockType = p.start()
2025-08-30T09:58:47.1696946Z                        ^^^^^^^^^
2025-08-30T09:58:47.1697161Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.1697237Z     result = self.__enter__()
2025-08-30T09:58:47.1697302Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1697526Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.1697611Z     original, local = self.get_original()
2025-08-30T09:58:47.1697676Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1697780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1697784Z 
2025-08-30T09:58:47.1697898Z self = <unittest.mock._patch object at 0x7f65c8af6690>
2025-08-30T09:58:47.1697903Z 
2025-08-30T09:58:47.1697978Z     def get_original(self):
2025-08-30T09:58:47.1698055Z         target = self.getter()
2025-08-30T09:58:47.1698128Z         name = self.attribute
2025-08-30T09:58:47.1698183Z     
2025-08-30T09:58:47.1698254Z         original = DEFAULT
2025-08-30T09:58:47.1698317Z         local = False
2025-08-30T09:58:47.1698372Z     
2025-08-30T09:58:47.1698555Z         try:
2025-08-30T09:58:47.1698642Z             original = target.__dict__[name]
2025-08-30T09:58:47.1698727Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.1698819Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.1699121Z         else:
2025-08-30T09:58:47.1699188Z             local = True
2025-08-30T09:58:47.1699244Z     
2025-08-30T09:58:47.1699373Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.1699444Z             self.create = True
2025-08-30T09:58:47.1699498Z     
2025-08-30T09:58:47.1699595Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.1699676Z >           raise AttributeError(
2025-08-30T09:58:47.1699788Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.1699933Z             )
2025-08-30T09:58:47.1700540Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.1700551Z 
2025-08-30T09:58:47.1700790Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.1700965Z _________ test_backtest_start_multi_strat_caching[week-start_delta3-2] _________
2025-08-30T09:58:47.1700970Z 
2025-08-30T09:58:47.1701567Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1701726Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc956850>
2025-08-30T09:58:47.1701899Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e47adfd0>
2025-08-30T09:58:47.1702103Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1702208Z run_id = '2', start_delta = {'weeks': 4}, cache = 'week'
2025-08-30T09:58:47.1702217Z 
2025-08-30T09:58:47.1702332Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1702449Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.1702668Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.1702823Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.1702923Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.1703085Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.1703144Z     ):
2025-08-30T09:58:47.1703218Z         default_conf.update(
2025-08-30T09:58:47.1703280Z             {
2025-08-30T09:58:47.1703520Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1703659Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1703746Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1703832Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1703893Z             }
2025-08-30T09:58:47.1703954Z         )
2025-08-30T09:58:47.1704027Z         patch_exchange(mocker)
2025-08-30T09:58:47.1704104Z         backtestmock = MagicMock(
2025-08-30T09:58:47.1704171Z             return_value={
2025-08-30T09:58:47.1704288Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.1704363Z                 "config": default_conf,
2025-08-30T09:58:47.1704430Z                 "locks": [],
2025-08-30T09:58:47.1704506Z                 "rejected_signals": 20,
2025-08-30T09:58:47.1704585Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.1704661Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.1704741Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.1704824Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.1704901Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.1704975Z                 "final_balance": 1000,
2025-08-30T09:58:47.1705039Z             }
2025-08-30T09:58:47.1705226Z         )
2025-08-30T09:58:47.1705294Z         mocker.patch(
2025-08-30T09:58:47.1705482Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1705583Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.1705643Z         )
2025-08-30T09:58:47.1705876Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.1706092Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.1706147Z     
2025-08-30T09:58:47.1706245Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.1706391Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.1706459Z         if cache == "none":
2025-08-30T09:58:47.1706680Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.1706755Z         elif cache == "day":
2025-08-30T09:58:47.1706849Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.1706923Z         elif cache == "week":
2025-08-30T09:58:47.1707018Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.1707090Z         elif cache == "month":
2025-08-30T09:58:47.1707184Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.1707266Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.1707337Z             return_value={
2025-08-30T09:58:47.1707499Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.1707686Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.1707748Z             }
2025-08-30T09:58:47.1707804Z         )
2025-08-30T09:58:47.1707889Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.1707956Z             side_effect=[
2025-08-30T09:58:47.1708017Z                 {
2025-08-30T09:58:47.1708125Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.1708216Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.1708336Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.1708394Z                 },
2025-08-30T09:58:47.1708451Z                 {
2025-08-30T09:58:47.1708553Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.1708641Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.1708752Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.1708811Z                 },
2025-08-30T09:58:47.1708872Z             ]
2025-08-30T09:58:47.1708927Z         )
2025-08-30T09:58:47.1708993Z         mocker.patch(
2025-08-30T09:58:47.1709080Z             "pathlib.Path.glob",
2025-08-30T09:58:47.1709149Z             return_value=[
2025-08-30T09:58:47.1709355Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.1709417Z             ],
2025-08-30T09:58:47.1709478Z         )
2025-08-30T09:58:47.1709558Z         mocker.patch.multiple(
2025-08-30T09:58:47.1709660Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.1709772Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.1709864Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.1709920Z         )
2025-08-30T09:58:47.1710177Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.1710186Z 
2025-08-30T09:58:47.1710276Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.1710376Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1710561Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.1710640Z     return self._start_patch(
2025-08-30T09:58:47.1710825Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.1710994Z     mocked: MockType = p.start()
2025-08-30T09:58:47.1711064Z                        ^^^^^^^^^
2025-08-30T09:58:47.1711277Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.1711347Z     result = self.__enter__()
2025-08-30T09:58:47.1711413Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1711634Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.1711717Z     original, local = self.get_original()
2025-08-30T09:58:47.1711782Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1711884Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1711889Z 
2025-08-30T09:58:47.1712080Z self = <unittest.mock._patch object at 0x7f6584e09850>
2025-08-30T09:58:47.1712086Z 
2025-08-30T09:58:47.1712160Z     def get_original(self):
2025-08-30T09:58:47.1712268Z         target = self.getter()
2025-08-30T09:58:47.1712411Z         name = self.attribute
2025-08-30T09:58:47.1712511Z     
2025-08-30T09:58:47.1712633Z         original = DEFAULT
2025-08-30T09:58:47.1712740Z         local = False
2025-08-30T09:58:47.1712841Z     
2025-08-30T09:58:47.1712943Z         try:
2025-08-30T09:58:47.1713099Z             original = target.__dict__[name]
2025-08-30T09:58:47.1713190Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.1713286Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.1713451Z         else:
2025-08-30T09:58:47.1713522Z             local = True
2025-08-30T09:58:47.1713578Z     
2025-08-30T09:58:47.1713711Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.1713791Z             self.create = True
2025-08-30T09:58:47.1713846Z     
2025-08-30T09:58:47.1713948Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.1714031Z >           raise AttributeError(
2025-08-30T09:58:47.1714144Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.1714207Z             )
2025-08-30T09:58:47.1714814Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.1714820Z 
2025-08-30T09:58:47.1715068Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.1715242Z _________ test_backtest_start_multi_strat_caching[week-start_delta0-2] _________
2025-08-30T09:58:47.1715247Z 
2025-08-30T09:58:47.1715828Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1715991Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c833e850>
2025-08-30T09:58:47.1716152Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8d276d0>
2025-08-30T09:58:47.1716355Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1716457Z run_id = '2', start_delta = {'days': 0}, cache = 'week'
2025-08-30T09:58:47.1716461Z 
2025-08-30T09:58:47.1716576Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1716702Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.1716923Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.1717076Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.1717178Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.1717340Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.1717401Z     ):
2025-08-30T09:58:47.1717476Z         default_conf.update(
2025-08-30T09:58:47.1717540Z             {
2025-08-30T09:58:47.1717617Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1717859Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1717941Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1718027Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1718084Z             }
2025-08-30T09:58:47.1718142Z         )
2025-08-30T09:58:47.1718222Z         patch_exchange(mocker)
2025-08-30T09:58:47.1718299Z         backtestmock = MagicMock(
2025-08-30T09:58:47.1718370Z             return_value={
2025-08-30T09:58:47.1718490Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.1718583Z                 "config": default_conf,
2025-08-30T09:58:47.1718653Z                 "locks": [],
2025-08-30T09:58:47.1718741Z                 "rejected_signals": 20,
2025-08-30T09:58:47.1718930Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.1719010Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.1719091Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.1719176Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.1719252Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.1719327Z                 "final_balance": 1000,
2025-08-30T09:58:47.1719387Z             }
2025-08-30T09:58:47.1719447Z         )
2025-08-30T09:58:47.1719514Z         mocker.patch(
2025-08-30T09:58:47.1719701Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1719809Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.1719865Z         )
2025-08-30T09:58:47.1720099Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.1720315Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.1720371Z     
2025-08-30T09:58:47.1720477Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.1720625Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.1720700Z         if cache == "none":
2025-08-30T09:58:47.1720794Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.1720864Z         elif cache == "day":
2025-08-30T09:58:47.1720962Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.1721033Z         elif cache == "week":
2025-08-30T09:58:47.1721128Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.1721203Z         elif cache == "month":
2025-08-30T09:58:47.1721296Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.1721380Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.1721451Z             return_value={
2025-08-30T09:58:47.1721617Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.1721814Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.1721871Z             }
2025-08-30T09:58:47.1721932Z         )
2025-08-30T09:58:47.1722019Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.1722086Z             side_effect=[
2025-08-30T09:58:47.1722148Z                 {
2025-08-30T09:58:47.1722257Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.1722352Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.1722473Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.1722533Z                 },
2025-08-30T09:58:47.1722590Z                 {
2025-08-30T09:58:47.1722695Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.1722787Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.1722899Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.1722961Z                 },
2025-08-30T09:58:47.1723020Z             ]
2025-08-30T09:58:47.1723078Z         )
2025-08-30T09:58:47.1723147Z         mocker.patch(
2025-08-30T09:58:47.1723322Z             "pathlib.Path.glob",
2025-08-30T09:58:47.1723575Z             return_value=[
2025-08-30T09:58:47.1723785Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.1723843Z             ],
2025-08-30T09:58:47.1723904Z         )
2025-08-30T09:58:47.1723987Z         mocker.patch.multiple(
2025-08-30T09:58:47.1724094Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.1724203Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.1724298Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.1724354Z         )
2025-08-30T09:58:47.1724609Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.1724615Z 
2025-08-30T09:58:47.1724856Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.1724966Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1725159Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.1725239Z     return self._start_patch(
2025-08-30T09:58:47.1725425Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.1725504Z     mocked: MockType = p.start()
2025-08-30T09:58:47.1725571Z                        ^^^^^^^^^
2025-08-30T09:58:47.1725783Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.1725854Z     result = self.__enter__()
2025-08-30T09:58:47.1725946Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1726177Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.1726262Z     original, local = self.get_original()
2025-08-30T09:58:47.1726333Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1726437Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1726442Z 
2025-08-30T09:58:47.1726562Z self = <unittest.mock._patch object at 0x7f65944588d0>
2025-08-30T09:58:47.1726567Z 
2025-08-30T09:58:47.1726639Z     def get_original(self):
2025-08-30T09:58:47.1726716Z         target = self.getter()
2025-08-30T09:58:47.1726786Z         name = self.attribute
2025-08-30T09:58:47.1726841Z     
2025-08-30T09:58:47.1726912Z         original = DEFAULT
2025-08-30T09:58:47.1726976Z         local = False
2025-08-30T09:58:47.1727031Z     
2025-08-30T09:58:47.1727088Z         try:
2025-08-30T09:58:47.1727176Z             original = target.__dict__[name]
2025-08-30T09:58:47.1727261Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.1727354Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.1727416Z         else:
2025-08-30T09:58:47.1727481Z             local = True
2025-08-30T09:58:47.1727541Z     
2025-08-30T09:58:47.1727667Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.1727746Z             self.create = True
2025-08-30T09:58:47.1727806Z     
2025-08-30T09:58:47.1727900Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.1727979Z >           raise AttributeError(
2025-08-30T09:58:47.1728091Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.1728151Z             )
2025-08-30T09:58:47.1728755Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.1728760Z 
2025-08-30T09:58:47.1728997Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.1729166Z _________ test_backtest_start_multi_strat_caching[week-start_delta1-2] _________
2025-08-30T09:58:47.1729170Z 
2025-08-30T09:58:47.1729751Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1730053Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65def72290>
2025-08-30T09:58:47.1730216Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e977eb50>
2025-08-30T09:58:47.1730416Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1730520Z run_id = '2', start_delta = {'days': 1}, cache = 'week'
2025-08-30T09:58:47.1730525Z 
2025-08-30T09:58:47.1730638Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1730756Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.1730976Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.1731207Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.1731308Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.1731476Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.1731539Z     ):
2025-08-30T09:58:47.1731613Z         default_conf.update(
2025-08-30T09:58:47.1731675Z             {
2025-08-30T09:58:47.1731753Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1731832Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1731914Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1731999Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1732057Z             }
2025-08-30T09:58:47.1732113Z         )
2025-08-30T09:58:47.1732191Z         patch_exchange(mocker)
2025-08-30T09:58:47.1732270Z         backtestmock = MagicMock(
2025-08-30T09:58:47.1732339Z             return_value={
2025-08-30T09:58:47.1732455Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.1732534Z                 "config": default_conf,
2025-08-30T09:58:47.1732600Z                 "locks": [],
2025-08-30T09:58:47.1732674Z                 "rejected_signals": 20,
2025-08-30T09:58:47.1732764Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.1732842Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.1732922Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.1733003Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.1733078Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.1733157Z                 "final_balance": 1000,
2025-08-30T09:58:47.1733218Z             }
2025-08-30T09:58:47.1733274Z         )
2025-08-30T09:58:47.1733481Z         mocker.patch(
2025-08-30T09:58:47.1733729Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1733842Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.1733900Z         )
2025-08-30T09:58:47.1734141Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.1734360Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.1734420Z     
2025-08-30T09:58:47.1734519Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.1734661Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.1734734Z         if cache == "none":
2025-08-30T09:58:47.1734830Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.1734900Z         elif cache == "day":
2025-08-30T09:58:47.1734995Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.1735065Z         elif cache == "week":
2025-08-30T09:58:47.1735160Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.1735233Z         elif cache == "month":
2025-08-30T09:58:47.1735325Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.1735412Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.1735479Z             return_value={
2025-08-30T09:58:47.1735649Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.1735970Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.1736029Z             }
2025-08-30T09:58:47.1736090Z         )
2025-08-30T09:58:47.1736171Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.1736239Z             side_effect=[
2025-08-30T09:58:47.1736300Z                 {
2025-08-30T09:58:47.1736407Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.1736492Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.1736606Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.1736670Z                 },
2025-08-30T09:58:47.1736728Z                 {
2025-08-30T09:58:47.1736939Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.1737033Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.1737146Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.1737209Z                 },
2025-08-30T09:58:47.1737273Z             ]
2025-08-30T09:58:47.1737328Z         )
2025-08-30T09:58:47.1737396Z         mocker.patch(
2025-08-30T09:58:47.1737474Z             "pathlib.Path.glob",
2025-08-30T09:58:47.1737547Z             return_value=[
2025-08-30T09:58:47.1737752Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.1737810Z             ],
2025-08-30T09:58:47.1737870Z         )
2025-08-30T09:58:47.1737948Z         mocker.patch.multiple(
2025-08-30T09:58:47.1738051Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.1738155Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.1738255Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.1738312Z         )
2025-08-30T09:58:47.1738569Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.1738579Z 
2025-08-30T09:58:47.1738678Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.1738780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1738962Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.1739041Z     return self._start_patch(
2025-08-30T09:58:47.1739226Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.1739302Z     mocked: MockType = p.start()
2025-08-30T09:58:47.1739370Z                        ^^^^^^^^^
2025-08-30T09:58:47.1739583Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.1739653Z     result = self.__enter__()
2025-08-30T09:58:47.1739719Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1739944Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.1740028Z     original, local = self.get_original()
2025-08-30T09:58:47.1740098Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1740202Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1740207Z 
2025-08-30T09:58:47.1740324Z self = <unittest.mock._patch object at 0x7f65dc3cb990>
2025-08-30T09:58:47.1740329Z 
2025-08-30T09:58:47.1740402Z     def get_original(self):
2025-08-30T09:58:47.1740482Z         target = self.getter()
2025-08-30T09:58:47.1740552Z         name = self.attribute
2025-08-30T09:58:47.1740607Z     
2025-08-30T09:58:47.1740675Z         original = DEFAULT
2025-08-30T09:58:47.1740742Z         local = False
2025-08-30T09:58:47.1740797Z     
2025-08-30T09:58:47.1740856Z         try:
2025-08-30T09:58:47.1740942Z             original = target.__dict__[name]
2025-08-30T09:58:47.1741034Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.1741129Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.1741187Z         else:
2025-08-30T09:58:47.1741352Z             local = True
2025-08-30T09:58:47.1741406Z     
2025-08-30T09:58:47.1741531Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.1741604Z             self.create = True
2025-08-30T09:58:47.1741658Z     
2025-08-30T09:58:47.1741755Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.1741834Z >           raise AttributeError(
2025-08-30T09:58:47.1741943Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.1741999Z             )
2025-08-30T09:58:47.1742594Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.1742603Z 
2025-08-30T09:58:47.1742919Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.1743099Z ______ test_backtest_start_multi_strat_caching[none-start_delta0-changed] ______
2025-08-30T09:58:47.1743109Z 
2025-08-30T09:58:47.1743890Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1744057Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc60e990>
2025-08-30T09:58:47.1744218Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8a7b3d0>
2025-08-30T09:58:47.1744419Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1744540Z run_id = 'changed', start_delta = {'days': 0}, cache = 'none'
2025-08-30T09:58:47.1744546Z 
2025-08-30T09:58:47.1744657Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1744776Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.1745014Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.1745176Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.1745273Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.1745439Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.1745496Z     ):
2025-08-30T09:58:47.1745570Z         default_conf.update(
2025-08-30T09:58:47.1745631Z             {
2025-08-30T09:58:47.1745710Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1745788Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1745865Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1745958Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1746013Z             }
2025-08-30T09:58:47.1746070Z         )
2025-08-30T09:58:47.1746149Z         patch_exchange(mocker)
2025-08-30T09:58:47.1746231Z         backtestmock = MagicMock(
2025-08-30T09:58:47.1746297Z             return_value={
2025-08-30T09:58:47.1746409Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.1746495Z                 "config": default_conf,
2025-08-30T09:58:47.1746561Z                 "locks": [],
2025-08-30T09:58:47.1746634Z                 "rejected_signals": 20,
2025-08-30T09:58:47.1746718Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.1746794Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.1746877Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.1746958Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.1747036Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.1747110Z                 "final_balance": 1000,
2025-08-30T09:58:47.1747167Z             }
2025-08-30T09:58:47.1747227Z         )
2025-08-30T09:58:47.1747295Z         mocker.patch(
2025-08-30T09:58:47.1747482Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1747593Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.1747655Z         )
2025-08-30T09:58:47.1748083Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.1748298Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.1748354Z     
2025-08-30T09:58:47.1748452Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.1748591Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.1748664Z         if cache == "none":
2025-08-30T09:58:47.1748762Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.1748831Z         elif cache == "day":
2025-08-30T09:58:47.1748926Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.1748995Z         elif cache == "week":
2025-08-30T09:58:47.1749198Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.1749274Z         elif cache == "month":
2025-08-30T09:58:47.1749369Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.1749455Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.1749522Z             return_value={
2025-08-30T09:58:47.1749689Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.1749874Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.1749930Z             }
2025-08-30T09:58:47.1749990Z         )
2025-08-30T09:58:47.1750070Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.1750138Z             side_effect=[
2025-08-30T09:58:47.1750196Z                 {
2025-08-30T09:58:47.1750307Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.1750394Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.1750515Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.1750578Z                 },
2025-08-30T09:58:47.1750635Z                 {
2025-08-30T09:58:47.1750744Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.1750833Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.1750945Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.1751003Z                 },
2025-08-30T09:58:47.1751061Z             ]
2025-08-30T09:58:47.1751122Z         )
2025-08-30T09:58:47.1751189Z         mocker.patch(
2025-08-30T09:58:47.1751268Z             "pathlib.Path.glob",
2025-08-30T09:58:47.1751337Z             return_value=[
2025-08-30T09:58:47.1751542Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.1751599Z             ],
2025-08-30T09:58:47.1751655Z         )
2025-08-30T09:58:47.1751742Z         mocker.patch.multiple(
2025-08-30T09:58:47.1751845Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.1751949Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.1752049Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.1752108Z         )
2025-08-30T09:58:47.1752363Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.1752368Z 
2025-08-30T09:58:47.1752462Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.1752565Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1752744Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.1752822Z     return self._start_patch(
2025-08-30T09:58:47.1753008Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.1753085Z     mocked: MockType = p.start()
2025-08-30T09:58:47.1753155Z                        ^^^^^^^^^
2025-08-30T09:58:47.1753478Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.1753551Z     result = self.__enter__()
2025-08-30T09:58:47.1753765Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1753996Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.1754080Z     original, local = self.get_original()
2025-08-30T09:58:47.1754147Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1754251Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1754256Z 
2025-08-30T09:58:47.1754371Z self = <unittest.mock._patch object at 0x7f65944030d0>
2025-08-30T09:58:47.1754376Z 
2025-08-30T09:58:47.1754447Z     def get_original(self):
2025-08-30T09:58:47.1754526Z         target = self.getter()
2025-08-30T09:58:47.1754596Z         name = self.attribute
2025-08-30T09:58:47.1754651Z     
2025-08-30T09:58:47.1754826Z         original = DEFAULT
2025-08-30T09:58:47.1754897Z         local = False
2025-08-30T09:58:47.1754952Z     
2025-08-30T09:58:47.1755011Z         try:
2025-08-30T09:58:47.1755098Z             original = target.__dict__[name]
2025-08-30T09:58:47.1755188Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.1755280Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.1755337Z         else:
2025-08-30T09:58:47.1755406Z             local = True
2025-08-30T09:58:47.1755461Z     
2025-08-30T09:58:47.1755586Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.1755662Z             self.create = True
2025-08-30T09:58:47.1755717Z     
2025-08-30T09:58:47.1755812Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.1755889Z >           raise AttributeError(
2025-08-30T09:58:47.1756001Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.1756058Z             )
2025-08-30T09:58:47.1757011Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.1757028Z 
2025-08-30T09:58:47.1757284Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.1757424Z __________________________ test_get_pair_precision_bt __________________________
2025-08-30T09:58:47.1757429Z 
2025-08-30T09:58:47.1757719Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1757798Z key = 'date'
2025-08-30T09:58:47.1757803Z 
2025-08-30T09:58:47.1757876Z     def get_loc(self, key):
2025-08-30T09:58:47.1757934Z         """
2025-08-30T09:58:47.1758093Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1758150Z     
2025-08-30T09:58:47.1758215Z         Parameters
2025-08-30T09:58:47.1758283Z         ----------
2025-08-30T09:58:47.1758345Z         key : label
2025-08-30T09:58:47.1758404Z     
2025-08-30T09:58:47.1758463Z         Returns
2025-08-30T09:58:47.1758528Z         -------
2025-08-30T09:58:47.1758652Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1758712Z     
2025-08-30T09:58:47.1758776Z         Examples
2025-08-30T09:58:47.1758837Z         --------
2025-08-30T09:58:47.1758925Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1759002Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1759065Z         1
2025-08-30T09:58:47.1759120Z     
2025-08-30T09:58:47.1759214Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1759296Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1759364Z         slice(1, 3, None)
2025-08-30T09:58:47.1759420Z     
2025-08-30T09:58:47.1759556Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1759720Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1759871Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1759978Z         """
2025-08-30T09:58:47.1760104Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1760164Z         try:
2025-08-30T09:58:47.1760365Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1760436Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1760445Z 
2025-08-30T09:58:47.1760616Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1760716Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1760884Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1760946Z     ???
2025-08-30T09:58:47.1761103Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1761161Z     ???
2025-08-30T09:58:47.1761427Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1761482Z     ???
2025-08-30T09:58:47.1761656Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1761662Z 
2025-08-30T09:58:47.1761723Z >   ???
2025-08-30T09:58:47.1761798Z E   KeyError: 'date'
2025-08-30T09:58:47.1761803Z 
2025-08-30T09:58:47.1761922Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1761927Z 
2025-08-30T09:58:47.1762086Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1762091Z 
2025-08-30T09:58:47.1762533Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1762693Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e53d9390>
2025-08-30T09:58:47.1762698Z 
2025-08-30T09:58:47.1762840Z     def test_get_pair_precision_bt(default_conf, mocker) -> None:
2025-08-30T09:58:47.1762913Z         patch_exchange(mocker)
2025-08-30T09:58:47.1762999Z         default_conf["timeframe"] = "30m"
2025-08-30T09:58:47.1763096Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.1769548Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1769665Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.1769778Z         backtesting.pairlists._whitelist = [pair]
2025-08-30T09:58:47.1769961Z         ex_mock = mocker.patch(f"{EXMS}.get_precision_price", return_value=1e-5)
2025-08-30T09:58:47.1770070Z >       data, timerange = backtesting.load_bt_data()
2025-08-30T09:58:47.1770141Z                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1770147Z 
2025-08-30T09:58:47.1770245Z tests/optimize/test_backtesting.py:394: 
2025-08-30T09:58:47.1770349Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1770474Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.1770576Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.1770650Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1770799Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.1770864Z     timeranges = [
2025-08-30T09:58:47.1771005Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.1771157Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.1771214Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.1771405Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1771491Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1771554Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1771656Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1771661Z 
2025-08-30T09:58:47.1771821Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1771881Z key = 'date'
2025-08-30T09:58:47.1771886Z 
2025-08-30T09:58:47.1771964Z     def get_loc(self, key):
2025-08-30T09:58:47.1772023Z         """
2025-08-30T09:58:47.1772175Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1772403Z     
2025-08-30T09:58:47.1772475Z         Parameters
2025-08-30T09:58:47.1772538Z         ----------
2025-08-30T09:58:47.1772598Z         key : label
2025-08-30T09:58:47.1772657Z     
2025-08-30T09:58:47.1772714Z         Returns
2025-08-30T09:58:47.1772773Z         -------
2025-08-30T09:58:47.1772901Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1772960Z     
2025-08-30T09:58:47.1773020Z         Examples
2025-08-30T09:58:47.1773079Z         --------
2025-08-30T09:58:47.1773173Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1773252Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1773309Z         1
2025-08-30T09:58:47.1773547Z     
2025-08-30T09:58:47.1773719Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1773952Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1774029Z         slice(1, 3, None)
2025-08-30T09:58:47.1774090Z     
2025-08-30T09:58:47.1774190Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1774279Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1774361Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1774423Z         """
2025-08-30T09:58:47.1774516Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1774574Z         try:
2025-08-30T09:58:47.1774669Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1774743Z         except KeyError as err:
2025-08-30T09:58:47.1774830Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1774928Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1775041Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1775101Z             ):
2025-08-30T09:58:47.1775192Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1775274Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1775345Z E           KeyError: 'date'
2025-08-30T09:58:47.1775350Z 
2025-08-30T09:58:47.1775546Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1775691Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1775822Z 2025-08-30 09:54:40 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1775900Z 2025-08-30 09:54:40 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1775997Z 2025-08-30 09:54:40 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1776117Z 2025-08-30 09:54:40 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1776626Z 2025-08-30 09:54:40 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1777060Z 2025-08-30 09:54:40 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1777159Z 2025-08-30 09:54:40 INFO Found no parameter file.
2025-08-30T09:58:47.1777454Z 2025-08-30 09:54:40 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1777638Z 2025-08-30 09:54:40 INFO Override strategy 'timeframe' with value in config file: 30m.
2025-08-30T09:58:47.1777815Z 2025-08-30 09:54:40 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1778011Z 2025-08-30 09:54:40 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1778198Z 2025-08-30 09:54:40 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1778466Z 2025-08-30 09:54:40 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1778658Z 2025-08-30 09:54:40 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1778854Z 2025-08-30 09:54:40 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1779084Z 2025-08-30 09:54:40 INFO Strategy using timeframe: 30m
2025-08-30T09:58:47.1779188Z 2025-08-30 09:54:40 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1779308Z 2025-08-30 09:54:40 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1779464Z 2025-08-30 09:54:40 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1779621Z 2025-08-30 09:54:40 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1779748Z 2025-08-30 09:54:40 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1779890Z 2025-08-30 09:54:40 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1780194Z 2025-08-30 09:54:40 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1780481Z 2025-08-30 09:54:40 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1780603Z 2025-08-30 09:54:40 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1780718Z 2025-08-30 09:54:40 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1780843Z 2025-08-30 09:54:40 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1781016Z 2025-08-30 09:54:40 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1781134Z 2025-08-30 09:54:40 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1781254Z 2025-08-30 09:54:40 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1781395Z 2025-08-30 09:54:40 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1781517Z 2025-08-30 09:54:40 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1781656Z 2025-08-30 09:54:40 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1781810Z 2025-08-30 09:54:40 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1781958Z 2025-08-30 09:54:40 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1782098Z 2025-08-30 09:54:40 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1782213Z 2025-08-30 09:54:40 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1782324Z 2025-08-30 09:54:40 INFO Validating configuration ...
2025-08-30T09:58:47.1783109Z 2025-08-30 09:54:40 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1783295Z 2025-08-30 09:54:40 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1783636Z 2025-08-30 09:54:40 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1783756Z 2025-08-30 09:54:40 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1783993Z 2025-08-30 09:54:40 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1784111Z 2025-08-30 09:54:40 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1784264Z 2025-08-30 09:54:40 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1784453Z 2025-08-30 09:54:40 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1784612Z 2025-08-30 09:54:40 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1784763Z _____________________ test_backtest_multi_pair[20-ADA/BTC] _____________________
2025-08-30T09:58:47.1784769Z 
2025-08-30T09:58:47.1785353Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1785438Z fee = <MagicMock id='140075137428048'>
2025-08-30T09:58:47.1785627Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dda2f6d0>, tres = 20
2025-08-30T09:58:47.1785695Z pair = 'ADA/BTC'
2025-08-30T09:58:47.1785886Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1785890Z 
2025-08-30T09:58:47.1786173Z     @pytest.mark.parametrize("pair", ["ADA/BTC", "LTC/BTC"])
2025-08-30T09:58:47.1786275Z     @pytest.mark.parametrize("tres", [0, 20, 30])
2025-08-30T09:58:47.1786472Z     def test_backtest_multi_pair(default_conf, fee, mocker, tres, pair, testdatadir):
2025-08-30T09:58:47.1786607Z         def _trend_alternate_hold(dataframe=None, metadata=None):
2025-08-30T09:58:47.1786666Z             """
2025-08-30T09:58:47.1786831Z             Buy every xth candle - sell every other xth -2 (hold on to pairs a bit)
2025-08-30T09:58:47.1786893Z             """
2025-08-30T09:58:47.1786995Z             if metadata["pair"] in ("ETH/BTC", "LTC/BTC"):
2025-08-30T09:58:47.1787064Z                 multi = 20
2025-08-30T09:58:47.1787126Z             else:
2025-08-30T09:58:47.1787195Z                 multi = 18
2025-08-30T09:58:47.1787462Z             dataframe["enter_long"] = np.where(dataframe.index % multi == 0, 1, 0)
2025-08-30T09:58:47.1787654Z             dataframe["exit_long"] = np.where((dataframe.index + multi - 2) % multi == 0, 1, 0)
2025-08-30T09:58:47.1787746Z             dataframe["enter_short"] = 0
2025-08-30T09:58:47.1787823Z             dataframe["exit_short"] = 0
2025-08-30T09:58:47.1787894Z             return dataframe
2025-08-30T09:58:47.1787954Z     
2025-08-30T09:58:47.1788038Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.1788198Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1788364Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1788454Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.1788529Z         patch_exchange(mocker)
2025-08-30T09:58:47.1788583Z     
2025-08-30T09:58:47.1788715Z         pairs = ["ADA/BTC", "DASH/BTC", "ETH/BTC", "LTC/BTC", "NXT/BTC"]
2025-08-30T09:58:47.1788892Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=pairs)
2025-08-30T09:58:47.1788990Z         # Only use 500 lines to increase performance
2025-08-30T09:58:47.1789080Z         data = trim_dictlist(data, -500)
2025-08-30T09:58:47.1789135Z     
2025-08-30T09:58:47.1789258Z         # Remove data for one pair from the beginning of the data
2025-08-30T09:58:47.1789319Z         if tres > 0:
2025-08-30T09:58:47.1789424Z >           data[pair] = data[pair][tres:].reset_index()
2025-08-30T09:58:47.1789499Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1789504Z 
2025-08-30T09:58:47.1789593Z tests/optimize/test_backtesting.py:1545: 
2025-08-30T09:58:47.1789697Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1789885Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6479: in reset_index
2025-08-30T09:58:47.1789948Z     new_obj.insert(
2025-08-30T09:58:47.1790054Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1790059Z 
2025-08-30T09:58:47.1790185Z self =      level_0                     index  ...     close         volume
2025-08-30T09:58:47.1790315Z 20      5280 2018-01-28 12:55:00+00:00  ...  0.00....  0.000051  144290.758587
2025-08-30T09:58:47.1790435Z 499     5759 2018-01-30 04:50:00+00:00  ...  0.000051   64164.304454
2025-08-30T09:58:47.1790440Z 
2025-08-30T09:58:47.1790506Z [480 rows x 7 columns]
2025-08-30T09:58:47.1790580Z loc = 0, column = 'level_0'
2025-08-30T09:58:47.1790713Z value = array([ 20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,
2025-08-30T09:58:47.1790834Z         33,  34,  35,  36,  37,  38,  39,  40,..., 478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
2025-08-30T09:58:47.1790938Z        488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499])
2025-08-30T09:58:47.1791012Z allow_duplicates = False
2025-08-30T09:58:47.1791017Z 
2025-08-30T09:58:47.1791083Z     def insert(
2025-08-30T09:58:47.1791144Z         self,
2025-08-30T09:58:47.1791208Z         loc: int,
2025-08-30T09:58:47.1791282Z         column: Hashable,
2025-08-30T09:58:47.1791364Z         value: Scalar | AnyArrayLike,
2025-08-30T09:58:47.1791589Z         allow_duplicates: bool | lib.NoDefault = lib.no_default,
2025-08-30T09:58:47.1791656Z     ) -> None:
2025-08-30T09:58:47.1791714Z         """
2025-08-30T09:58:47.1791830Z         Insert column into DataFrame at specified location.
2025-08-30T09:58:47.1791884Z     
2025-08-30T09:58:47.1792051Z         Raises a ValueError if `column` is already contained in the DataFrame,
2025-08-30T09:58:47.1792147Z         unless `allow_duplicates` is set to True.
2025-08-30T09:58:47.1792203Z     
2025-08-30T09:58:47.1792273Z         Parameters
2025-08-30T09:58:47.1792335Z         ----------
2025-08-30T09:58:47.1792394Z         loc : int
2025-08-30T09:58:47.1792516Z             Insertion index. Must verify 0 <= loc <= len(columns).
2025-08-30T09:58:47.1792630Z         column : str, number, or hashable object
2025-08-30T09:58:47.1792809Z             Label of the inserted column.
2025-08-30T09:58:47.1792897Z         value : Scalar, Series, or array-like
2025-08-30T09:58:47.1792983Z             Content of the inserted column.
2025-08-30T09:58:47.1793121Z         allow_duplicates : bool, optional, default lib.no_default
2025-08-30T09:58:47.1793219Z             Allow duplicate column labels to be created.
2025-08-30T09:58:47.1793279Z     
2025-08-30T09:58:47.1793337Z         See Also
2025-08-30T09:58:47.1793509Z         --------
2025-08-30T09:58:47.1793598Z         Index.insert : Insert new item by index.
2025-08-30T09:58:47.1793658Z     
2025-08-30T09:58:47.1793717Z         Examples
2025-08-30T09:58:47.1793780Z         --------
2025-08-30T09:58:47.1793888Z         >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
2025-08-30T09:58:47.1793946Z         >>> df
2025-08-30T09:58:47.1794012Z            col1  col2
2025-08-30T09:58:47.1794072Z         0     1     3
2025-08-30T09:58:47.1794134Z         1     2     4
2025-08-30T09:58:47.1794217Z         >>> df.insert(1, "newcol", [99, 99])
2025-08-30T09:58:47.1794276Z         >>> df
2025-08-30T09:58:47.1794348Z            col1  newcol  col2
2025-08-30T09:58:47.1794416Z         0     1      99     3
2025-08-30T09:58:47.1794476Z         1     2      99     4
2025-08-30T09:58:47.1794592Z         >>> df.insert(0, "col1", [100, 100], allow_duplicates=True)
2025-08-30T09:58:47.1794653Z         >>> df
2025-08-30T09:58:47.1794728Z            col1  col1  newcol  col2
2025-08-30T09:58:47.1794792Z         0   100     1      99     3
2025-08-30T09:58:47.1794857Z         1   100     2      99     4
2025-08-30T09:58:47.1794910Z     
2025-08-30T09:58:47.1795102Z         Notice that pandas uses index alignment in case of `value` from type `Series`:
2025-08-30T09:58:47.1795157Z     
2025-08-30T09:58:47.1795271Z         >>> df.insert(0, "col0", pd.Series([5, 6], index=[1, 2]))
2025-08-30T09:58:47.1795330Z         >>> df
2025-08-30T09:58:47.1795406Z            col0  col1  col1  newcol  col2
2025-08-30T09:58:47.1795486Z         0   NaN   100     1      99     3
2025-08-30T09:58:47.1795553Z         1   5.0   100     2      99     4
2025-08-30T09:58:47.1795611Z         """
2025-08-30T09:58:47.1795711Z         if allow_duplicates is lib.no_default:
2025-08-30T09:58:47.1795788Z             allow_duplicates = False
2025-08-30T09:58:47.1795935Z         if allow_duplicates and not self.flags.allows_duplicate_labels:
2025-08-30T09:58:47.1796005Z             raise ValueError(
2025-08-30T09:58:47.1796116Z                 "Cannot specify 'allow_duplicates=True' when "
2025-08-30T09:58:47.1796225Z                 "'self.flags.allows_duplicate_labels' is False."
2025-08-30T09:58:47.1796285Z             )
2025-08-30T09:58:47.1796401Z         if not allow_duplicates and column in self.columns:
2025-08-30T09:58:47.1796496Z             # Should this be a different kind of error??
2025-08-30T09:58:47.1796631Z >           raise ValueError(f"cannot insert {column}, already exists")
2025-08-30T09:58:47.1796754Z E           ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.1796759Z 
2025-08-30T09:58:47.1796936Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:5165: ValueError
2025-08-30T09:58:47.1797235Z __ test_backtest_one_detail_futures_funding_fees[False-6-360-11--0.14679994] ___
2025-08-30T09:58:47.1797240Z 
2025-08-30T09:58:47.1797721Z default_conf_usdt = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1797801Z fee = <MagicMock id='140075130281040'>
2025-08-30T09:58:47.1797962Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c884fb50>
2025-08-30T09:58:47.1798166Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1798312Z use_detail = False, entries = 6, max_stake = 360, ff_updates = 11
2025-08-30T09:58:47.1798410Z expected_ff = -0.14679994
2025-08-30T09:58:47.1798416Z 
2025-08-30T09:58:47.1798608Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1798740Z         "use_detail,entries,max_stake,ff_updates,expected_ff",
2025-08-30T09:58:47.1798798Z         [
2025-08-30T09:58:47.1798886Z             (True, 50, 3000, 55, -1.18038144),
2025-08-30T09:58:47.1798961Z             (False, 6, 360, 11, -0.14679994),
2025-08-30T09:58:47.1799018Z         ],
2025-08-30T09:58:47.1799075Z     )
2025-08-30T09:58:47.1799189Z     def test_backtest_one_detail_futures_funding_fees(
2025-08-30T09:58:47.1799260Z         default_conf_usdt,
2025-08-30T09:58:47.1799318Z         fee,
2025-08-30T09:58:47.1799379Z         mocker,
2025-08-30T09:58:47.1799443Z         testdatadir,
2025-08-30T09:58:47.1799503Z         use_detail,
2025-08-30T09:58:47.1799560Z         entries,
2025-08-30T09:58:47.1799624Z         max_stake,
2025-08-30T09:58:47.1799685Z         ff_updates,
2025-08-30T09:58:47.1799748Z         expected_ff,
2025-08-30T09:58:47.1799811Z     ) -> None:
2025-08-30T09:58:47.1799868Z         """
2025-08-30T09:58:47.1800055Z         Funding fees are expected to differ, as the maximum position size differs.
2025-08-30T09:58:47.1800111Z         """
2025-08-30T09:58:47.1800214Z         default_conf_usdt["use_exit_signal"] = False
2025-08-30T09:58:47.1800316Z         default_conf_usdt["trading_mode"] = "futures"
2025-08-30T09:58:47.1800408Z         default_conf_usdt["margin_mode"] = "isolated"
2025-08-30T09:58:47.1800541Z         default_conf_usdt["candle_type_def"] = CandleType.FUTURES
2025-08-30T09:58:47.1800630Z         default_conf_usdt["minimal_roi"] = {"0": 1}
2025-08-30T09:58:47.1800721Z         default_conf_usdt["dry_run_wallet"] = 100000
2025-08-30T09:58:47.1800780Z     
2025-08-30T09:58:47.1800867Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.1801027Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1801195Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1801268Z         mocker.patch(
2025-08-30T09:58:47.1801456Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1801562Z             PropertyMock(return_value=["XRP/USDT:USDT"]),
2025-08-30T09:58:47.1801627Z         )
2025-08-30T09:58:47.1801810Z         mocker.patch(f"{EXMS}.get_maintenance_ratio_and_amt", return_value=(0.01, 0.01))
2025-08-30T09:58:47.1801896Z         default_conf_usdt["timeframe"] = "1h"
2025-08-30T09:58:47.1801964Z         if use_detail:
2025-08-30T09:58:47.1802063Z             default_conf_usdt["timeframe_detail"] = "5m"
2025-08-30T09:58:47.1802137Z         patch_exchange(mocker)
2025-08-30T09:58:47.1802192Z     
2025-08-30T09:58:47.1802281Z         def advise_entry(df, *args, **kwargs):
2025-08-30T09:58:47.1802368Z             # Mock function to force several entries
2025-08-30T09:58:47.1802444Z             df.loc[:, "enter_long"] = 1
2025-08-30T09:58:47.1802510Z             return df
2025-08-30T09:58:47.1802563Z     
2025-08-30T09:58:47.1802692Z         def adjust_trade_position(trade, current_time, **kwargs):
2025-08-30T09:58:47.1802819Z             if current_time > datetime(2021, 11, 18, 2, 0, 0, tzinfo=UTC):
2025-08-30T09:58:47.1802891Z                 return None
2025-08-30T09:58:47.1803075Z             return default_conf_usdt["stake_amount"]
2025-08-30T09:58:47.1803130Z     
2025-08-30T09:58:47.1803224Z         default_conf_usdt["max_open_trades"] = 1
2025-08-30T09:58:47.1803278Z     
2025-08-30T09:58:47.1803533Z         backtesting = Backtesting(default_conf_usdt)
2025-08-30T09:58:47.1803705Z         ff_spy = mocker.spy(backtesting.exchange, "calculate_funding_fees")
2025-08-30T09:58:47.1803839Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1803977Z         backtesting.strategy.populate_entry_trend = advise_entry
2025-08-30T09:58:47.1804139Z         backtesting.strategy.adjust_trade_position = adjust_trade_position
2025-08-30T09:58:47.1804260Z         backtesting.strategy.leverage = lambda **kwargs: 1
2025-08-30T09:58:47.1804531Z         backtesting.strategy.position_adjustment_enable = True
2025-08-30T09:58:47.1804612Z         pair = "XRP/USDT:USDT"
2025-08-30T09:58:47.1804732Z         # Pick a timerange adapted to the pair we use to test
2025-08-30T09:58:47.1804870Z         timerange = TimeRange.parse_timerange("20211117-20211119")
2025-08-30T09:58:47.1804946Z         data = history.load_data(
2025-08-30T09:58:47.1805033Z             datadir=Path(testdatadir),
2025-08-30T09:58:47.1805102Z             timeframe="1h",
2025-08-30T09:58:47.1805171Z             pairs=[pair],
2025-08-30T09:58:47.1805245Z             timerange=timerange,
2025-08-30T09:58:47.1805338Z             candle_type=CandleType.FUTURES,
2025-08-30T09:58:47.1805396Z         )
2025-08-30T09:58:47.1805479Z >       backtesting._load_bt_data_detail()
2025-08-30T09:58:47.1805484Z 
2025-08-30T09:58:47.1805582Z tests/optimize/test_backtesting.py:1181: 
2025-08-30T09:58:47.1805684Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1805837Z freqtrade/optimize/backtesting.py:403: in _load_bt_data_detail
2025-08-30T09:58:47.1805995Z     self.futures_data[pair] = self.exchange.combine_funding_and_mark(
2025-08-30T09:58:47.1806154Z freqtrade/exchange/exchange.py:3649: in combine_funding_and_mark
2025-08-30T09:58:47.1806228Z     return mark_rates.merge(
2025-08-30T09:58:47.1806404Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:10839: in merge
2025-08-30T09:58:47.1806470Z     return merge(
2025-08-30T09:58:47.1806657Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:170: in merge
2025-08-30T09:58:47.1806731Z     op = _MergeOperation(
2025-08-30T09:58:47.1806932Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:794: in __init__
2025-08-30T09:58:47.1807021Z     ) = self._get_merge_keys()
2025-08-30T09:58:47.1807138Z         ^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1807561Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:1298: in _get_merge_keys
2025-08-30T09:58:47.1807796Z     right_keys.append(right._get_label_or_level_values(rk))
2025-08-30T09:58:47.1807886Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1807990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1808002Z 
2025-08-30T09:58:47.1808114Z self =                        index    open  high  low  close  volume
2025-08-30T09:58:47.1808266Z 0  2021-11-18 00:00:00+00:00  0.0001   0.0  0.0    0.0 ... 0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.1808369Z 90 2021-12-18 00:00:00+00:00  0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.1808378Z 
2025-08-30T09:58:47.1808446Z [91 rows x 6 columns]
2025-08-30T09:58:47.1808512Z key = 'date', axis = 0
2025-08-30T09:58:47.1808517Z 
2025-08-30T09:58:47.1808577Z     @final
2025-08-30T09:58:47.1808771Z     def _get_label_or_level_values(self, key: Level, axis: AxisInt = 0) -> ArrayLike:
2025-08-30T09:58:47.1808829Z         """
2025-08-30T09:58:47.1808986Z         Return a 1-D array of values associated with `key`, a label or level
2025-08-30T09:58:47.1809064Z         from the given `axis`.
2025-08-30T09:58:47.1809118Z     
2025-08-30T09:58:47.1809187Z         Retrieval logic:
2025-08-30T09:58:47.1809470Z           - (axis=0): Return column values if `key` matches a column label.
2025-08-30T09:58:47.1809614Z             Otherwise return index level values if `key` matches an index
2025-08-30T09:58:47.1809672Z             level.
2025-08-30T09:58:47.1809805Z           - (axis=1): Return row values if `key` matches an index label.
2025-08-30T09:58:47.1809952Z             Otherwise return column level values if 'key' matches a column
2025-08-30T09:58:47.1810009Z             level
2025-08-30T09:58:47.1810070Z     
2025-08-30T09:58:47.1810133Z         Parameters
2025-08-30T09:58:47.1810193Z         ----------
2025-08-30T09:58:47.1810257Z         key : Hashable
2025-08-30T09:58:47.1810335Z             Label or level name.
2025-08-30T09:58:47.1810405Z         axis : int, default 0
2025-08-30T09:58:47.1810633Z             Axis that levels are associated with (0 for index, 1 for columns)
2025-08-30T09:58:47.1810694Z     
2025-08-30T09:58:47.1810753Z         Returns
2025-08-30T09:58:47.1810815Z         -------
2025-08-30T09:58:47.1810900Z         np.ndarray or ExtensionArray
2025-08-30T09:58:47.1810958Z     
2025-08-30T09:58:47.1811015Z         Raises
2025-08-30T09:58:47.1811073Z         ------
2025-08-30T09:58:47.1811133Z         KeyError
2025-08-30T09:58:47.1811234Z             if `key` matches neither a label nor a level
2025-08-30T09:58:47.1811294Z         ValueError
2025-08-30T09:58:47.1811378Z             if `key` matches multiple labels
2025-08-30T09:58:47.1811437Z         """
2025-08-30T09:58:47.1811518Z         axis = self._get_axis_number(axis)
2025-08-30T09:58:47.1811653Z         other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]
2025-08-30T09:58:47.1811708Z     
2025-08-30T09:58:47.1811803Z         if self._is_label_reference(key, axis=axis):
2025-08-30T09:58:47.1811922Z             self._check_label_or_level_ambiguity(key, axis=axis)
2025-08-30T09:58:47.1812030Z             values = self.xs(key, axis=other_axes[0])._values
2025-08-30T09:58:47.1812129Z         elif self._is_level_reference(key, axis=axis):
2025-08-30T09:58:47.1812253Z             values = self.axes[axis].get_level_values(key)._values
2025-08-30T09:58:47.1812310Z         else:
2025-08-30T09:58:47.1812385Z >           raise KeyError(key)
2025-08-30T09:58:47.1812455Z E           KeyError: 'date'
2025-08-30T09:58:47.1812460Z 
2025-08-30T09:58:47.1812636Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:1911: KeyError
2025-08-30T09:58:47.1812780Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1812907Z 2025-08-30 09:54:41 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1812985Z 2025-08-30 09:54:41 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1813081Z 2025-08-30 09:54:41 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1813203Z 2025-08-30 09:54:41 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1813918Z 2025-08-30 09:54:41 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1814356Z 2025-08-30 09:54:41 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1814452Z 2025-08-30 09:54:41 INFO Found no parameter file.
2025-08-30T09:58:47.1814657Z 2025-08-30 09:54:41 INFO Override strategy 'minimal_roi' with value in config file: {'0': 1}.
2025-08-30T09:58:47.1814835Z 2025-08-30 09:54:41 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.1815012Z 2025-08-30 09:54:41 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1815204Z 2025-08-30 09:54:41 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.1815396Z 2025-08-30 09:54:41 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.1815666Z 2025-08-30 09:54:41 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1815998Z 2025-08-30 09:54:41 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.1816185Z 2025-08-30 09:54:41 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1816305Z 2025-08-30 09:54:41 INFO Strategy using minimal_roi: {'0': 1}
2025-08-30T09:58:47.1816407Z 2025-08-30 09:54:41 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.1816510Z 2025-08-30 09:54:41 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1816629Z 2025-08-30 09:54:41 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1816776Z 2025-08-30 09:54:41 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1816928Z 2025-08-30 09:54:41 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1817163Z 2025-08-30 09:54:41 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1817305Z 2025-08-30 09:54:41 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1817615Z 2025-08-30 09:54:41 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1817806Z 2025-08-30 09:54:41 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1817917Z 2025-08-30 09:54:41 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.1818026Z 2025-08-30 09:54:41 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.1818149Z 2025-08-30 09:54:41 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1818319Z 2025-08-30 09:54:41 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1818435Z 2025-08-30 09:54:41 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.1818556Z 2025-08-30 09:54:41 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1818705Z 2025-08-30 09:54:41 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1818821Z 2025-08-30 09:54:41 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1818964Z 2025-08-30 09:54:41 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1819118Z 2025-08-30 09:54:41 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1819260Z 2025-08-30 09:54:41 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1819398Z 2025-08-30 09:54:41 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1819510Z 2025-08-30 09:54:41 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1819612Z 2025-08-30 09:54:41 INFO Validating configuration ...
2025-08-30T09:58:47.1820050Z 2025-08-30 09:54:41 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1820281Z 2025-08-30 09:54:41 WARNING Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1820498Z 2025-08-30 09:54:41 WARNING Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1820713Z 2025-08-30 09:54:41 WARNING Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1820926Z 2025-08-30 09:54:41 WARNING Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1821137Z 2025-08-30 09:54:41 WARNING Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1821311Z 2025-08-30 09:54:41 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1821453Z 2025-08-30 09:54:41 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1821563Z 2025-08-30 09:54:41 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1821792Z 2025-08-30 09:54:41 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1821902Z 2025-08-30 09:54:41 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1822059Z 2025-08-30 09:54:41 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1822339Z 2025-08-30 09:54:41 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1822499Z 2025-08-30 09:54:41 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1822639Z ___________________________ test_backtest_only_sell ____________________________
2025-08-30T09:58:47.1822645Z 
2025-08-30T09:58:47.1822826Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1822886Z key = 'date'
2025-08-30T09:58:47.1822891Z 
2025-08-30T09:58:47.1822968Z     def get_loc(self, key):
2025-08-30T09:58:47.1823025Z         """
2025-08-30T09:58:47.1823177Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1823234Z     
2025-08-30T09:58:47.1823573Z         Parameters
2025-08-30T09:58:47.1823663Z         ----------
2025-08-30T09:58:47.1823727Z         key : label
2025-08-30T09:58:47.1823786Z     
2025-08-30T09:58:47.1823852Z         Returns
2025-08-30T09:58:47.1823910Z         -------
2025-08-30T09:58:47.1824058Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1824125Z     
2025-08-30T09:58:47.1824185Z         Examples
2025-08-30T09:58:47.1824243Z         --------
2025-08-30T09:58:47.1824342Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1824425Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1824482Z         1
2025-08-30T09:58:47.1824539Z     
2025-08-30T09:58:47.1824636Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1824719Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1824786Z         slice(1, 3, None)
2025-08-30T09:58:47.1824843Z     
2025-08-30T09:58:47.1824945Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1825035Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1825121Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1825178Z         """
2025-08-30T09:58:47.1825276Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1825333Z         try:
2025-08-30T09:58:47.1825427Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1825498Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1825503Z 
2025-08-30T09:58:47.1825679Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1825784Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1825987Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1826046Z     ???
2025-08-30T09:58:47.1826210Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1826266Z     ???
2025-08-30T09:58:47.1826533Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1826592Z     ???
2025-08-30T09:58:47.1826694Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1826702Z 
2025-08-30T09:58:47.1826757Z >   ???
2025-08-30T09:58:47.1826824Z E   KeyError: 'date'
2025-08-30T09:58:47.1826834Z 
2025-08-30T09:58:47.1826953Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1826958Z 
2025-08-30T09:58:47.1827114Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1827119Z 
2025-08-30T09:58:47.1827279Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8aeec90>
2025-08-30T09:58:47.1827720Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1827927Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1827932Z 
2025-08-30T09:58:47.1828085Z     def test_backtest_only_sell(mocker, default_conf, testdatadir):
2025-08-30T09:58:47.1828227Z         # Override the default buy trend function in our StrategyTest
2025-08-30T09:58:47.1828460Z         def fun(dataframe=None, pair=None):
2025-08-30T09:58:47.1828529Z             buy_value = 0
2025-08-30T09:58:47.1828600Z             sell_value = 1
2025-08-30T09:58:47.1828709Z             return _trend(dataframe, buy_value, sell_value)
2025-08-30T09:58:47.1828764Z     
2025-08-30T09:58:47.1828855Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.1829056Z >       backtest_conf = _make_backtest_conf(mocker, conf=default_conf, datadir=testdatadir)
2025-08-30T09:58:47.1829141Z                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1829146Z 
2025-08-30T09:58:47.1829243Z tests/optimize/test_backtesting.py:1473: 
2025-08-30T09:58:47.1829438Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1829593Z tests/optimize/test_backtesting.py:101: in _make_backtest_conf
2025-08-30T09:58:47.1829746Z     processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.1829827Z                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1829974Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.1830063Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.1830203Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.1830307Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.1830377Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1830569Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1830651Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1830717Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1830825Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1830829Z 
2025-08-30T09:58:47.1831014Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1831079Z key = 'date'
2025-08-30T09:58:47.1831083Z 
2025-08-30T09:58:47.1831158Z     def get_loc(self, key):
2025-08-30T09:58:47.1831214Z         """
2025-08-30T09:58:47.1831365Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1831419Z     
2025-08-30T09:58:47.1831486Z         Parameters
2025-08-30T09:58:47.1831549Z         ----------
2025-08-30T09:58:47.1831611Z         key : label
2025-08-30T09:58:47.1831669Z     
2025-08-30T09:58:47.1831726Z         Returns
2025-08-30T09:58:47.1831786Z         -------
2025-08-30T09:58:47.1831908Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1831967Z     
2025-08-30T09:58:47.1832026Z         Examples
2025-08-30T09:58:47.1832085Z         --------
2025-08-30T09:58:47.1832180Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1832259Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1832315Z         1
2025-08-30T09:58:47.1832372Z     
2025-08-30T09:58:47.1832469Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1832547Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1832613Z         slice(1, 3, None)
2025-08-30T09:58:47.1832671Z     
2025-08-30T09:58:47.1832770Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1832854Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1832933Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1832993Z         """
2025-08-30T09:58:47.1833083Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1833140Z         try:
2025-08-30T09:58:47.1833232Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1833305Z         except KeyError as err:
2025-08-30T09:58:47.1833505Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1833597Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1833710Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1833894Z             ):
2025-08-30T09:58:47.1833979Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1834060Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1834130Z E           KeyError: 'date'
2025-08-30T09:58:47.1834136Z 
2025-08-30T09:58:47.1834325Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1834470Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1834705Z 2025-08-30 09:54:41 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.1834934Z 2025-08-30 09:54:41 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1835069Z 2025-08-30 09:54:41 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1835338Z 2025-08-30 09:54:41 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1835469Z 2025-08-30 09:54:41 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1835967Z 2025-08-30 09:54:41 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1836396Z 2025-08-30 09:54:41 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1836491Z 2025-08-30 09:54:41 INFO Found no parameter file.
2025-08-30T09:58:47.1836779Z 2025-08-30 09:54:41 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1836954Z 2025-08-30 09:54:41 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1837135Z 2025-08-30 09:54:41 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1837332Z 2025-08-30 09:54:41 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1837525Z 2025-08-30 09:54:41 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1837791Z 2025-08-30 09:54:41 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1837978Z 2025-08-30 09:54:41 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.1838174Z 2025-08-30 09:54:41 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1838278Z 2025-08-30 09:54:41 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1838384Z 2025-08-30 09:54:41 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1838505Z 2025-08-30 09:54:41 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1838657Z 2025-08-30 09:54:41 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1838814Z 2025-08-30 09:54:41 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1838947Z 2025-08-30 09:54:41 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1839090Z 2025-08-30 09:54:41 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1839393Z 2025-08-30 09:54:41 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1839584Z 2025-08-30 09:54:41 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1839697Z 2025-08-30 09:54:41 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1839804Z 2025-08-30 09:54:41 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1839932Z 2025-08-30 09:54:41 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1840097Z 2025-08-30 09:54:41 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1840212Z 2025-08-30 09:54:41 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1840337Z 2025-08-30 09:54:41 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1840487Z 2025-08-30 09:54:41 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1840693Z 2025-08-30 09:54:41 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1840831Z 2025-08-30 09:54:41 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1840988Z 2025-08-30 09:54:41 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1841133Z 2025-08-30 09:54:41 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1841274Z 2025-08-30 09:54:41 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1841389Z 2025-08-30 09:54:41 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.1841490Z 2025-08-30 09:54:41 INFO Validating configuration ...
2025-08-30T09:58:47.1842004Z 2025-08-30 09:54:41 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1842184Z 2025-08-30 09:54:41 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1842325Z 2025-08-30 09:54:41 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1842441Z 2025-08-30 09:54:41 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1842674Z 2025-08-30 09:54:41 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1842784Z 2025-08-30 09:54:41 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1842934Z 2025-08-30 09:54:41 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1843120Z 2025-08-30 09:54:41 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1843284Z 2025-08-30 09:54:41 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1843566Z _________ test_backtest_start_multi_strat_caching[day-start_delta0-2] __________
2025-08-30T09:58:47.1843576Z 
2025-08-30T09:58:47.1844155Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1844322Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65949c3b50>
2025-08-30T09:58:47.1844480Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f659463d950>
2025-08-30T09:58:47.1844672Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1844777Z run_id = '2', start_delta = {'days': 0}, cache = 'day'
2025-08-30T09:58:47.1844782Z 
2025-08-30T09:58:47.1844896Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1845012Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.1845235Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.1845389Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.1845485Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.1845649Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.1845710Z     ):
2025-08-30T09:58:47.1845786Z         default_conf.update(
2025-08-30T09:58:47.1845845Z             {
2025-08-30T09:58:47.1845920Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1845998Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1846073Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1846164Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1846220Z             }
2025-08-30T09:58:47.1846275Z         )
2025-08-30T09:58:47.1846354Z         patch_exchange(mocker)
2025-08-30T09:58:47.1846431Z         backtestmock = MagicMock(
2025-08-30T09:58:47.1846499Z             return_value={
2025-08-30T09:58:47.1846610Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.1846693Z                 "config": default_conf,
2025-08-30T09:58:47.1846760Z                 "locks": [],
2025-08-30T09:58:47.1846834Z                 "rejected_signals": 20,
2025-08-30T09:58:47.1847038Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.1847113Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.1847192Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.1847271Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.1847352Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.1847426Z                 "final_balance": 1000,
2025-08-30T09:58:47.1847482Z             }
2025-08-30T09:58:47.1847540Z         )
2025-08-30T09:58:47.1847608Z         mocker.patch(
2025-08-30T09:58:47.1847792Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1847898Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.1847953Z         )
2025-08-30T09:58:47.1848291Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.1848507Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.1848570Z     
2025-08-30T09:58:47.1848667Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.1848810Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.1848880Z         if cache == "none":
2025-08-30T09:58:47.1848976Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.1849045Z         elif cache == "day":
2025-08-30T09:58:47.1849140Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.1849209Z         elif cache == "week":
2025-08-30T09:58:47.1849306Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.1849375Z         elif cache == "month":
2025-08-30T09:58:47.1849471Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.1849556Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.1849624Z             return_value={
2025-08-30T09:58:47.1849821Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.1850173Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.1850274Z             }
2025-08-30T09:58:47.1850383Z         )
2025-08-30T09:58:47.1850493Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.1850562Z             side_effect=[
2025-08-30T09:58:47.1850619Z                 {
2025-08-30T09:58:47.1850737Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.1850823Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.1850938Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.1850998Z                 },
2025-08-30T09:58:47.1851056Z                 {
2025-08-30T09:58:47.1851166Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.1851253Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.1851367Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.1851429Z                 },
2025-08-30T09:58:47.1851484Z             ]
2025-08-30T09:58:47.1851543Z         )
2025-08-30T09:58:47.1851611Z         mocker.patch(
2025-08-30T09:58:47.1851694Z             "pathlib.Path.glob",
2025-08-30T09:58:47.1851764Z             return_value=[
2025-08-30T09:58:47.1851976Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.1852032Z             ],
2025-08-30T09:58:47.1852088Z         )
2025-08-30T09:58:47.1852169Z         mocker.patch.multiple(
2025-08-30T09:58:47.1852272Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.1852377Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.1852474Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.1852529Z         )
2025-08-30T09:58:47.1852785Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.1852956Z 
2025-08-30T09:58:47.1853139Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.1853323Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1853723Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.1853803Z     return self._start_patch(
2025-08-30T09:58:47.1853995Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.1854075Z     mocked: MockType = p.start()
2025-08-30T09:58:47.1854139Z                        ^^^^^^^^^
2025-08-30T09:58:47.1854355Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.1854428Z     result = self.__enter__()
2025-08-30T09:58:47.1854627Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1854858Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.1854942Z     original, local = self.get_original()
2025-08-30T09:58:47.1855013Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1855116Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1855121Z 
2025-08-30T09:58:47.1855235Z self = <unittest.mock._patch object at 0x7f65944d98d0>
2025-08-30T09:58:47.1855240Z 
2025-08-30T09:58:47.1855311Z     def get_original(self):
2025-08-30T09:58:47.1855383Z         target = self.getter()
2025-08-30T09:58:47.1855457Z         name = self.attribute
2025-08-30T09:58:47.1855511Z     
2025-08-30T09:58:47.1855577Z         original = DEFAULT
2025-08-30T09:58:47.1855644Z         local = False
2025-08-30T09:58:47.1855698Z     
2025-08-30T09:58:47.1855755Z         try:
2025-08-30T09:58:47.1855836Z             original = target.__dict__[name]
2025-08-30T09:58:47.1855930Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.1856023Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.1856080Z         else:
2025-08-30T09:58:47.1856155Z             local = True
2025-08-30T09:58:47.1856209Z     
2025-08-30T09:58:47.1856332Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.1856405Z             self.create = True
2025-08-30T09:58:47.1856460Z     
2025-08-30T09:58:47.1856553Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.1856628Z >           raise AttributeError(
2025-08-30T09:58:47.1856740Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.1856795Z             )
2025-08-30T09:58:47.1857396Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.1857401Z 
2025-08-30T09:58:47.1857647Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.1857790Z ______________________ test_backtest_start_futures_noliq _______________________
2025-08-30T09:58:47.1857799Z 
2025-08-30T09:58:47.1857959Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1858021Z key = 'date'
2025-08-30T09:58:47.1858026Z 
2025-08-30T09:58:47.1858096Z     def get_loc(self, key):
2025-08-30T09:58:47.1858152Z         """
2025-08-30T09:58:47.1858306Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1858359Z     
2025-08-30T09:58:47.1858421Z         Parameters
2025-08-30T09:58:47.1858481Z         ----------
2025-08-30T09:58:47.1858544Z         key : label
2025-08-30T09:58:47.1858597Z     
2025-08-30T09:58:47.1858652Z         Returns
2025-08-30T09:58:47.1858713Z         -------
2025-08-30T09:58:47.1858837Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1858895Z     
2025-08-30T09:58:47.1858960Z         Examples
2025-08-30T09:58:47.1859025Z         --------
2025-08-30T09:58:47.1859115Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1859313Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1859373Z         1
2025-08-30T09:58:47.1859427Z     
2025-08-30T09:58:47.1859520Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1859598Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1859671Z         slice(1, 3, None)
2025-08-30T09:58:47.1859725Z     
2025-08-30T09:58:47.1859824Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1859910Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1859992Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1860048Z         """
2025-08-30T09:58:47.1860145Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1860202Z         try:
2025-08-30T09:58:47.1860373Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1860445Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1860450Z 
2025-08-30T09:58:47.1860625Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1860728Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1860895Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1860956Z     ???
2025-08-30T09:58:47.1861114Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1861170Z     ???
2025-08-30T09:58:47.1861435Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1861491Z     ???
2025-08-30T09:58:47.1861588Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1861592Z 
2025-08-30T09:58:47.1861650Z >   ???
2025-08-30T09:58:47.1861717Z E   KeyError: 'date'
2025-08-30T09:58:47.1861726Z 
2025-08-30T09:58:47.1861846Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1861851Z 
2025-08-30T09:58:47.1862005Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1862018Z 
2025-08-30T09:58:47.1862611Z default_conf_usdt = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.1862766Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65841b3910>
2025-08-30T09:58:47.1862925Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65848becd0>
2025-08-30T09:58:47.1863121Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1863279Z capsys = <_pytest.capture.CaptureFixture object at 0x7f65848be150>
2025-08-30T09:58:47.1863284Z 
2025-08-30T09:58:47.1863602Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.1863855Z     def test_backtest_start_futures_noliq(default_conf_usdt, mocker, caplog, testdatadir, capsys):
2025-08-30T09:58:47.1863936Z         # Tests detail-data loading
2025-08-30T09:58:47.1864019Z         default_conf_usdt.update(
2025-08-30T09:58:47.1864082Z             {
2025-08-30T09:58:47.1864162Z                 "trading_mode": "futures",
2025-08-30T09:58:47.1864238Z                 "margin_mode": "isolated",
2025-08-30T09:58:47.1864316Z                 "use_exit_signal": True,
2025-08-30T09:58:47.1864393Z                 "exit_profit_only": False,
2025-08-30T09:58:47.1864467Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.1864552Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.1864641Z                 "strategy": CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.1864697Z             }
2025-08-30T09:58:47.1864752Z         )
2025-08-30T09:58:47.1864830Z         patch_exchange(mocker)
2025-08-30T09:58:47.1864885Z     
2025-08-30T09:58:47.1864955Z         mocker.patch(
2025-08-30T09:58:47.1865141Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1865300Z             PropertyMock(return_value=["HULUMULU/USDT", "XRP/USDT:USDT"]),
2025-08-30T09:58:47.1865488Z         )
2025-08-30T09:58:47.1865728Z         # mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)
2025-08-30T09:58:47.1865787Z     
2025-08-30T09:58:47.1865942Z         patched_configuration_load_config_file(mocker, default_conf_usdt)
2025-08-30T09:58:47.1865997Z     
2025-08-30T09:58:47.1866059Z         args = [
2025-08-30T09:58:47.1866129Z             "backtesting",
2025-08-30T09:58:47.1866193Z             "--config",
2025-08-30T09:58:47.1866261Z             "config.json",
2025-08-30T09:58:47.1866330Z             "--datadir",
2025-08-30T09:58:47.1866400Z             str(testdatadir),
2025-08-30T09:58:47.1866473Z             "--strategy-path",
2025-08-30T09:58:47.1866700Z             str(Path(__file__).parents[1] / "strategy/strats"),
2025-08-30T09:58:47.1866769Z             "--timeframe",
2025-08-30T09:58:47.1866827Z             "1h",
2025-08-30T09:58:47.1866883Z         ]
2025-08-30T09:58:47.1866960Z         args = get_args(args)
2025-08-30T09:58:47.1867213Z         with pytest.raises(OperationalException, match=r"Pairs .* got no leverage tiers available\."):
2025-08-30T09:58:47.1867288Z >           start_backtesting(args)
2025-08-30T09:58:47.1867293Z 
2025-08-30T09:58:47.1867390Z tests/optimize/test_backtesting.py:2293: 
2025-08-30T09:58:47.1867488Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1867647Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.1867722Z     backtesting.start()
2025-08-30T09:58:47.1867827Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.1867909Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.1867979Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1868105Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.1868205Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.1868276Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1868429Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.1868491Z     timeranges = [
2025-08-30T09:58:47.1868622Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.1868780Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.1868837Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.1869024Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1869111Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1869175Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1869272Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1869277Z 
2025-08-30T09:58:47.1869438Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1869503Z key = 'date'
2025-08-30T09:58:47.1869508Z 
2025-08-30T09:58:47.1869579Z     def get_loc(self, key):
2025-08-30T09:58:47.1869639Z         """
2025-08-30T09:58:47.1869791Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1869847Z     
2025-08-30T09:58:47.1869907Z         Parameters
2025-08-30T09:58:47.1869972Z         ----------
2025-08-30T09:58:47.1870033Z         key : label
2025-08-30T09:58:47.1870087Z     
2025-08-30T09:58:47.1870145Z         Returns
2025-08-30T09:58:47.1870206Z         -------
2025-08-30T09:58:47.1870326Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1870380Z     
2025-08-30T09:58:47.1870441Z         Examples
2025-08-30T09:58:47.1870500Z         --------
2025-08-30T09:58:47.1870587Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1870663Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1870727Z         1
2025-08-30T09:58:47.1870782Z     
2025-08-30T09:58:47.1870872Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1870953Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1871114Z         slice(1, 3, None)
2025-08-30T09:58:47.1871168Z     
2025-08-30T09:58:47.1871267Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1871356Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1871436Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1871491Z         """
2025-08-30T09:58:47.1871586Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1871643Z         try:
2025-08-30T09:58:47.1871732Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1871806Z         except KeyError as err:
2025-08-30T09:58:47.1871896Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1871985Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1872194Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1872260Z             ):
2025-08-30T09:58:47.1872346Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1872427Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1872501Z E           KeyError: 'date'
2025-08-30T09:58:47.1872506Z 
2025-08-30T09:58:47.1872693Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1872832Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1872944Z 2025-08-30 09:54:50 INFO Using config: config.json ...
2025-08-30T09:58:47.1873042Z 2025-08-30 09:54:50 INFO Enabling colorized output.
2025-08-30T09:58:47.1873124Z 2025-08-30 09:54:50 INFO Logfile configured
2025-08-30T09:58:47.1873202Z 2025-08-30 09:54:50 INFO Verbosity set to 3
2025-08-30T09:58:47.1873667Z 2025-08-30 09:54:50 INFO Using additional Strategy lookup path: /home/runner/work/freqtrade/freqtrade/tests/strategy/strats
2025-08-30T09:58:47.1873865Z 2025-08-30 09:54:50 INFO Parameter -i/--timeframe detected ... Using timeframe: 1h ...
2025-08-30T09:58:47.1873969Z 2025-08-30 09:54:50 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.1874297Z 2025-08-30 09:54:50 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_start_futures_no0/user_data ...
2025-08-30T09:58:47.1874530Z 2025-08-30 09:54:50 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.1874673Z 2025-08-30 09:54:50 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.1874795Z 2025-08-30 09:54:50 INFO Parameter --cache=day detected ...
2025-08-30T09:58:47.1874884Z 2025-08-30 09:54:50 INFO Checking exchange...
2025-08-30T09:58:47.1875108Z 2025-08-30 09:54:50 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.1875235Z 2025-08-30 09:54:50 INFO Using pairlist from configuration.
2025-08-30T09:58:47.1875359Z 2025-08-30 09:54:50 INFO Validating configuration ...
2025-08-30T09:58:47.1875482Z 2025-08-30 09:54:50 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.1875588Z 2025-08-30 09:54:50 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.1875735Z 2025-08-30 09:54:50 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1875883Z 2025-08-30 09:54:50 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1876052Z 2025-08-30 09:54:50 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1876280Z 2025-08-30 09:54:50 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.1876435Z 2025-08-30 09:54:50 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1876759Z 2025-08-30 09:54:50 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.1877251Z 2025-08-30 09:54:50 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1877677Z 2025-08-30 09:54:50 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1877915Z 2025-08-30 09:54:50 INFO Found no parameter file.
2025-08-30T09:58:47.1878203Z 2025-08-30 09:54:50 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1878380Z 2025-08-30 09:54:50 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.1878559Z 2025-08-30 09:54:50 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1878760Z 2025-08-30 09:54:50 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.1878945Z 2025-08-30 09:54:50 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.1879412Z 2025-08-30 09:54:50 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.1879616Z 2025-08-30 09:54:50 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.1879825Z 2025-08-30 09:54:50 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.1880054Z 2025-08-30 09:54:50 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.1880255Z 2025-08-30 09:54:50 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.1880441Z 2025-08-30 09:54:50 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1880634Z 2025-08-30 09:54:50 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1880739Z 2025-08-30 09:54:50 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.1880842Z 2025-08-30 09:54:50 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1880966Z 2025-08-30 09:54:50 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1881113Z 2025-08-30 09:54:50 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1881270Z 2025-08-30 09:54:50 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1881404Z 2025-08-30 09:54:50 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1881542Z 2025-08-30 09:54:50 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1881849Z 2025-08-30 09:54:50 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1882037Z 2025-08-30 09:54:50 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1882151Z 2025-08-30 09:54:50 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.1882264Z 2025-08-30 09:54:50 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.1882389Z 2025-08-30 09:54:50 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1882666Z 2025-08-30 09:54:50 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.1882786Z 2025-08-30 09:54:50 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1882909Z 2025-08-30 09:54:50 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1883049Z 2025-08-30 09:54:50 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1883169Z 2025-08-30 09:54:50 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1883308Z 2025-08-30 09:54:50 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1883575Z 2025-08-30 09:54:50 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1883724Z 2025-08-30 09:54:50 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1883866Z 2025-08-30 09:54:50 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1883975Z 2025-08-30 09:54:50 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1884081Z 2025-08-30 09:54:50 INFO Validating configuration ...
2025-08-30T09:58:47.1884432Z 2025-08-30 09:54:50 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.1884842Z 2025-08-30 09:54:50 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.1885277Z 2025-08-30 09:54:50 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1885499Z 2025-08-30 09:54:50 DEBUG Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1885715Z 2025-08-30 09:54:50 WARNING Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1885922Z 2025-08-30 09:54:50 DEBUG Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1886247Z 2025-08-30 09:54:50 WARNING Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1886456Z 2025-08-30 09:54:50 DEBUG Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1886679Z 2025-08-30 09:54:50 WARNING Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1886887Z 2025-08-30 09:54:50 DEBUG Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1887099Z 2025-08-30 09:54:50 WARNING Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1887302Z 2025-08-30 09:54:50 DEBUG Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1887516Z 2025-08-30 09:54:50 WARNING Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.1887619Z 2025-08-30 09:54:50 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.1887800Z 2025-08-30 09:54:50 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1887932Z 2025-08-30 09:54:50 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.1888223Z 2025-08-30 09:54:50 WARNING No history for HULUMULU/USDT, futures, 1h found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.1888513Z 2025-08-30 09:54:50 WARNING No history for HULUMULU/USDT, futures, 1h found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.1888648Z ______________________________ test_backtest_one _______________________________
2025-08-30T09:58:47.1888654Z 
2025-08-30T09:58:47.1888815Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1888875Z key = 'date'
2025-08-30T09:58:47.1888880Z 
2025-08-30T09:58:47.1888958Z     def get_loc(self, key):
2025-08-30T09:58:47.1889018Z         """
2025-08-30T09:58:47.1889169Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1889224Z     
2025-08-30T09:58:47.1889294Z         Parameters
2025-08-30T09:58:47.1889357Z         ----------
2025-08-30T09:58:47.1889417Z         key : label
2025-08-30T09:58:47.1889476Z     
2025-08-30T09:58:47.1889534Z         Returns
2025-08-30T09:58:47.1889598Z         -------
2025-08-30T09:58:47.1889719Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1889782Z     
2025-08-30T09:58:47.1889841Z         Examples
2025-08-30T09:58:47.1889901Z         --------
2025-08-30T09:58:47.1889993Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1890070Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1890126Z         1
2025-08-30T09:58:47.1890182Z     
2025-08-30T09:58:47.1890279Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1890359Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1890426Z         slice(1, 3, None)
2025-08-30T09:58:47.1890486Z     
2025-08-30T09:58:47.1890589Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1890676Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1890761Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1890816Z         """
2025-08-30T09:58:47.1890997Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1891054Z         try:
2025-08-30T09:58:47.1891145Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1891216Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1891220Z 
2025-08-30T09:58:47.1891390Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1891496Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1891660Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1891718Z     ???
2025-08-30T09:58:47.1891879Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1891936Z     ???
2025-08-30T09:58:47.1892273Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1892330Z     ???
2025-08-30T09:58:47.1892433Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1892444Z 
2025-08-30T09:58:47.1892498Z >   ???
2025-08-30T09:58:47.1892565Z E   KeyError: 'date'
2025-08-30T09:58:47.1892569Z 
2025-08-30T09:58:47.1892689Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1892694Z 
2025-08-30T09:58:47.1892849Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1892854Z 
2025-08-30T09:58:47.1893291Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1893550Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc76ddd0>
2025-08-30T09:58:47.1893749Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1893758Z 
2025-08-30T09:58:47.1893902Z     def test_backtest_one(default_conf, mocker, testdatadir) -> None:
2025-08-30T09:58:47.1893994Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.1894084Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.1894138Z     
2025-08-30T09:58:47.1894213Z         patch_exchange(mocker)
2025-08-30T09:58:47.1894374Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1894545Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1894638Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.1894770Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1894843Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.1894946Z         timerange = TimeRange("date", None, 1517227800, 0)
2025-08-30T09:58:47.1895025Z         data = history.load_data(
2025-08-30T09:58:47.1895227Z             datadir=testdatadir, timeframe="5m", pairs=["UNITTEST/BTC"], timerange=timerange
2025-08-30T09:58:47.1895284Z         )
2025-08-30T09:58:47.1895438Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.1895518Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1895522Z 
2025-08-30T09:58:47.1895611Z tests/optimize/test_backtesting.py:802: 
2025-08-30T09:58:47.1895714Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1895862Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.1895951Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.1896089Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.1896192Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.1896262Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1896454Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1896540Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1896605Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1896700Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1896830Z 
2025-08-30T09:58:47.1896996Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1897057Z key = 'date'
2025-08-30T09:58:47.1897062Z 
2025-08-30T09:58:47.1897132Z     def get_loc(self, key):
2025-08-30T09:58:47.1897191Z         """
2025-08-30T09:58:47.1897341Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1897396Z     
2025-08-30T09:58:47.1897457Z         Parameters
2025-08-30T09:58:47.1897521Z         ----------
2025-08-30T09:58:47.1897581Z         key : label
2025-08-30T09:58:47.1897635Z     
2025-08-30T09:58:47.1897697Z         Returns
2025-08-30T09:58:47.1897756Z         -------
2025-08-30T09:58:47.1898005Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1898065Z     
2025-08-30T09:58:47.1898129Z         Examples
2025-08-30T09:58:47.1898189Z         --------
2025-08-30T09:58:47.1898283Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1898361Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1898417Z         1
2025-08-30T09:58:47.1898471Z     
2025-08-30T09:58:47.1898562Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1898643Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1898709Z         slice(1, 3, None)
2025-08-30T09:58:47.1898763Z     
2025-08-30T09:58:47.1898870Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1898952Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1899031Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1899127Z         """
2025-08-30T09:58:47.1899298Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1899403Z         try:
2025-08-30T09:58:47.1899568Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1899709Z         except KeyError as err:
2025-08-30T09:58:47.1899818Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1899918Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1900031Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1900088Z             ):
2025-08-30T09:58:47.1900173Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1900249Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1900324Z E           KeyError: 'date'
2025-08-30T09:58:47.1900329Z 
2025-08-30T09:58:47.1900518Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1900658Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1900776Z 2025-08-30 09:54:50 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.1900907Z 2025-08-30 09:54:50 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1900984Z 2025-08-30 09:54:50 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1901080Z 2025-08-30 09:54:50 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1901207Z 2025-08-30 09:54:50 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.1901325Z 2025-08-30 09:54:50 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1901651Z 2025-08-30 09:54:50 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.1902149Z 2025-08-30 09:54:50 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1902563Z 2025-08-30 09:54:50 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1902661Z 2025-08-30 09:54:50 INFO Found no parameter file.
2025-08-30T09:58:47.1902949Z 2025-08-30 09:54:50 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1903125Z 2025-08-30 09:54:50 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.1903613Z 2025-08-30 09:54:50 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1903820Z 2025-08-30 09:54:50 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1904011Z 2025-08-30 09:54:50 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1904276Z 2025-08-30 09:54:50 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1904477Z 2025-08-30 09:54:50 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.1904661Z 2025-08-30 09:54:50 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.1904985Z 2025-08-30 09:54:50 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1905095Z 2025-08-30 09:54:50 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.1905209Z 2025-08-30 09:54:50 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1905326Z 2025-08-30 09:54:50 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1905479Z 2025-08-30 09:54:50 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1905639Z 2025-08-30 09:54:50 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1905768Z 2025-08-30 09:54:50 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1905914Z 2025-08-30 09:54:50 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1906216Z 2025-08-30 09:54:50 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1906411Z 2025-08-30 09:54:50 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1906529Z 2025-08-30 09:54:50 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1906638Z 2025-08-30 09:54:50 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1906763Z 2025-08-30 09:54:50 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1906932Z 2025-08-30 09:54:50 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1907049Z 2025-08-30 09:54:50 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.1907170Z 2025-08-30 09:54:50 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1907313Z 2025-08-30 09:54:50 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1907432Z 2025-08-30 09:54:50 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1907569Z 2025-08-30 09:54:50 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1907719Z 2025-08-30 09:54:50 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1907870Z 2025-08-30 09:54:50 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1908011Z 2025-08-30 09:54:50 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1908126Z 2025-08-30 09:54:50 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.1908234Z 2025-08-30 09:54:50 INFO Validating configuration ...
2025-08-30T09:58:47.1908581Z 2025-08-30 09:54:50 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.1908863Z 2025-08-30 09:54:50 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.1909299Z 2025-08-30 09:54:50 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1909495Z 2025-08-30 09:54:50 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.1909677Z 2025-08-30 09:54:50 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1909817Z 2025-08-30 09:54:50 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1910049Z 2025-08-30 09:54:50 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1910278Z 2025-08-30 09:54:50 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1910392Z 2025-08-30 09:54:50 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1910547Z 2025-08-30 09:54:50 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1910733Z 2025-08-30 09:54:50 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1910893Z 2025-08-30 09:54:50 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1911062Z _________________ test_backtest_pricecontours[None-raise-19_1] _________________
2025-08-30T09:58:47.1911067Z 
2025-08-30T09:58:47.1911303Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1911368Z key = 'date'
2025-08-30T09:58:47.1911380Z 
2025-08-30T09:58:47.1911453Z     def get_loc(self, key):
2025-08-30T09:58:47.1911516Z         """
2025-08-30T09:58:47.1911667Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1911727Z     
2025-08-30T09:58:47.1911791Z         Parameters
2025-08-30T09:58:47.1911852Z         ----------
2025-08-30T09:58:47.1911916Z         key : label
2025-08-30T09:58:47.1911972Z     
2025-08-30T09:58:47.1912030Z         Returns
2025-08-30T09:58:47.1912089Z         -------
2025-08-30T09:58:47.1912215Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1912270Z     
2025-08-30T09:58:47.1912329Z         Examples
2025-08-30T09:58:47.1912394Z         --------
2025-08-30T09:58:47.1912486Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1912564Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1912622Z         1
2025-08-30T09:58:47.1912686Z     
2025-08-30T09:58:47.1912779Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1912859Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1912935Z         slice(1, 3, None)
2025-08-30T09:58:47.1912990Z     
2025-08-30T09:58:47.1913090Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1913171Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1913257Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1913313Z         """
2025-08-30T09:58:47.1913508Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1913572Z         try:
2025-08-30T09:58:47.1913661Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1913731Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1913736Z 
2025-08-30T09:58:47.1913910Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1914013Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1914178Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1914234Z     ???
2025-08-30T09:58:47.1914399Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1914455Z     ???
2025-08-30T09:58:47.1914714Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1914774Z     ???
2025-08-30T09:58:47.1914871Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1914876Z 
2025-08-30T09:58:47.1914930Z >   ???
2025-08-30T09:58:47.1914999Z E   KeyError: 'date'
2025-08-30T09:58:47.1915004Z 
2025-08-30T09:58:47.1915120Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1915125Z 
2025-08-30T09:58:47.1915277Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1915282Z 
2025-08-30T09:58:47.1915728Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1916028Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc95d690>
2025-08-30T09:58:47.1916225Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1916339Z protections = None, contour = 'raise', expected = 19
2025-08-30T09:58:47.1916344Z 
2025-08-30T09:58:47.1916425Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1916514Z         "protections,contour,expected",
2025-08-30T09:58:47.1916573Z         [
2025-08-30T09:58:47.1916643Z             (None, "sine", 35),
2025-08-30T09:58:47.1916713Z             (None, "raise", 19),
2025-08-30T09:58:47.1916780Z             (None, "lower", 0),
2025-08-30T09:58:47.1916849Z             (None, "sine", 35),
2025-08-30T09:58:47.1916916Z             (None, "raise", 19),
2025-08-30T09:58:47.1917156Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.1917301Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.1917435Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.1917569Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.1917708Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.1917764Z         ],
2025-08-30T09:58:47.1917818Z     )
2025-08-30T09:58:47.1917901Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.1918057Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.1918119Z     ) -> None:
2025-08-30T09:58:47.1918186Z         if protections:
2025-08-30T09:58:47.1918303Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.1918396Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.1918450Z     
2025-08-30T09:58:47.1918528Z         patch_exchange(mocker)
2025-08-30T09:58:47.1918690Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1918864Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1918998Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.1919122Z         # over and over again should not cause different results
2025-08-30T09:58:47.1919177Z     
2025-08-30T09:58:47.1919259Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.1919353Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.1919486Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1919541Z     
2025-08-30T09:58:47.1919632Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.1919781Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.1919860Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1919866Z 
2025-08-30T09:58:47.1919955Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.1920056Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1920210Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.1920298Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.1920463Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.1920570Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.1920641Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1920834Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1920916Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1920980Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1921077Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1921082Z 
2025-08-30T09:58:47.1921248Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1921308Z key = 'date'
2025-08-30T09:58:47.1921312Z 
2025-08-30T09:58:47.1921495Z     def get_loc(self, key):
2025-08-30T09:58:47.1921556Z         """
2025-08-30T09:58:47.1921704Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1921766Z     
2025-08-30T09:58:47.1921889Z         Parameters
2025-08-30T09:58:47.1922002Z         ----------
2025-08-30T09:58:47.1922109Z         key : label
2025-08-30T09:58:47.1922205Z     
2025-08-30T09:58:47.1922316Z         Returns
2025-08-30T09:58:47.1922413Z         -------
2025-08-30T09:58:47.1922542Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1922601Z     
2025-08-30T09:58:47.1922661Z         Examples
2025-08-30T09:58:47.1922719Z         --------
2025-08-30T09:58:47.1922808Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1922991Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1923051Z         1
2025-08-30T09:58:47.1923105Z     
2025-08-30T09:58:47.1923201Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1923290Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1923457Z         slice(1, 3, None)
2025-08-30T09:58:47.1923515Z     
2025-08-30T09:58:47.1923620Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1923701Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1923782Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1923841Z         """
2025-08-30T09:58:47.1923931Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1923988Z         try:
2025-08-30T09:58:47.1924079Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1924152Z         except KeyError as err:
2025-08-30T09:58:47.1924239Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1924332Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1924445Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1924501Z             ):
2025-08-30T09:58:47.1924585Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1924670Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1924741Z E           KeyError: 'date'
2025-08-30T09:58:47.1924745Z 
2025-08-30T09:58:47.1924933Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1925076Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1925186Z 2025-08-30 09:54:51 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.1925313Z 2025-08-30 09:54:51 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1925390Z 2025-08-30 09:54:51 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1925486Z 2025-08-30 09:54:51 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1925607Z 2025-08-30 09:54:51 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.1925725Z 2025-08-30 09:54:51 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1926082Z 2025-08-30 09:54:51 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.1926579Z 2025-08-30 09:54:51 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1926994Z 2025-08-30 09:54:51 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1927092Z 2025-08-30 09:54:51 INFO Found no parameter file.
2025-08-30T09:58:47.1927375Z 2025-08-30 09:54:51 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1927555Z 2025-08-30 09:54:51 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.1927744Z 2025-08-30 09:54:51 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1927940Z 2025-08-30 09:54:51 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1928258Z 2025-08-30 09:54:51 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1928524Z 2025-08-30 09:54:51 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1928710Z 2025-08-30 09:54:51 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1928903Z 2025-08-30 09:54:51 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1929011Z 2025-08-30 09:54:51 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.1929115Z 2025-08-30 09:54:51 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1929230Z 2025-08-30 09:54:51 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1929488Z 2025-08-30 09:54:51 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1929647Z 2025-08-30 09:54:51 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1929781Z 2025-08-30 09:54:51 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1929920Z 2025-08-30 09:54:51 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1930223Z 2025-08-30 09:54:51 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1930414Z 2025-08-30 09:54:51 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1930528Z 2025-08-30 09:54:51 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1930641Z 2025-08-30 09:54:51 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1930764Z 2025-08-30 09:54:51 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1930948Z 2025-08-30 09:54:51 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1931070Z 2025-08-30 09:54:51 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1931189Z 2025-08-30 09:54:51 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1931337Z 2025-08-30 09:54:51 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1931456Z 2025-08-30 09:54:51 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1931595Z 2025-08-30 09:54:51 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1931745Z 2025-08-30 09:54:51 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1931889Z 2025-08-30 09:54:51 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1932030Z 2025-08-30 09:54:51 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1932137Z 2025-08-30 09:54:51 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1932239Z 2025-08-30 09:54:51 INFO Validating configuration ...
2025-08-30T09:58:47.1932592Z 2025-08-30 09:54:51 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.1932873Z 2025-08-30 09:54:51 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.1933309Z 2025-08-30 09:54:51 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1933608Z 2025-08-30 09:54:51 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.1933783Z 2025-08-30 09:54:51 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1933921Z 2025-08-30 09:54:51 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1934036Z 2025-08-30 09:54:51 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1934262Z 2025-08-30 09:54:51 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1934374Z 2025-08-30 09:54:51 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1934538Z 2025-08-30 09:54:51 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1934853Z 2025-08-30 09:54:51 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1935014Z 2025-08-30 09:54:51 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1935111Z 2025-08-30 09:54:51 DEBUG Dropping last candle
2025-08-30T09:58:47.1935323Z 2025-08-30 09:54:51 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.1935482Z _________________ test_backtest_pricecontours[None-sine-35_1] __________________
2025-08-30T09:58:47.1935488Z 
2025-08-30T09:58:47.1935649Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1935713Z key = 'date'
2025-08-30T09:58:47.1935718Z 
2025-08-30T09:58:47.1935792Z     def get_loc(self, key):
2025-08-30T09:58:47.1935849Z         """
2025-08-30T09:58:47.1936116Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1936175Z     
2025-08-30T09:58:47.1936239Z         Parameters
2025-08-30T09:58:47.1936311Z         ----------
2025-08-30T09:58:47.1936371Z         key : label
2025-08-30T09:58:47.1936429Z     
2025-08-30T09:58:47.1936487Z         Returns
2025-08-30T09:58:47.1936550Z         -------
2025-08-30T09:58:47.1936674Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1936729Z     
2025-08-30T09:58:47.1936794Z         Examples
2025-08-30T09:58:47.1936853Z         --------
2025-08-30T09:58:47.1936940Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1937023Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1937080Z         1
2025-08-30T09:58:47.1937134Z     
2025-08-30T09:58:47.1937226Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1937311Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1937382Z         slice(1, 3, None)
2025-08-30T09:58:47.1937437Z     
2025-08-30T09:58:47.1937540Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1937621Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1937706Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1937765Z         """
2025-08-30T09:58:47.1937860Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1937917Z         try:
2025-08-30T09:58:47.1938006Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1938079Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1938084Z 
2025-08-30T09:58:47.1938254Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1938355Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1938522Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1938580Z     ???
2025-08-30T09:58:47.1938743Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1938799Z     ???
2025-08-30T09:58:47.1939058Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1939118Z     ???
2025-08-30T09:58:47.1939215Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1939220Z 
2025-08-30T09:58:47.1939279Z >   ???
2025-08-30T09:58:47.1939344Z E   KeyError: 'date'
2025-08-30T09:58:47.1939349Z 
2025-08-30T09:58:47.1939465Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1939470Z 
2025-08-30T09:58:47.1939627Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1939632Z 
2025-08-30T09:58:47.1940070Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1940232Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4379c10>
2025-08-30T09:58:47.1940431Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1940630Z protections = None, contour = 'sine', expected = 35
2025-08-30T09:58:47.1940635Z 
2025-08-30T09:58:47.1940716Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1940810Z         "protections,contour,expected",
2025-08-30T09:58:47.1940866Z         [
2025-08-30T09:58:47.1940935Z             (None, "sine", 35),
2025-08-30T09:58:47.1941010Z             (None, "raise", 19),
2025-08-30T09:58:47.1941077Z             (None, "lower", 0),
2025-08-30T09:58:47.1941141Z             (None, "sine", 35),
2025-08-30T09:58:47.1941207Z             (None, "raise", 19),
2025-08-30T09:58:47.1941345Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.1941484Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.1941697Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.1941831Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.1941963Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.1942025Z         ],
2025-08-30T09:58:47.1942084Z     )
2025-08-30T09:58:47.1942167Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.1942318Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.1942379Z     ) -> None:
2025-08-30T09:58:47.1942450Z         if protections:
2025-08-30T09:58:47.1942564Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.1942656Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.1942714Z     
2025-08-30T09:58:47.1942788Z         patch_exchange(mocker)
2025-08-30T09:58:47.1942947Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1943120Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1943259Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.1943553Z         # over and over again should not cause different results
2025-08-30T09:58:47.1943639Z     
2025-08-30T09:58:47.1943731Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.1943824Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.1943957Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1944014Z     
2025-08-30T09:58:47.1944106Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.1944252Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.1944328Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1944337Z 
2025-08-30T09:58:47.1944429Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.1944533Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1944681Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.1944771Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.1944910Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.1945012Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.1945086Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1945270Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1945354Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1945422Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1945518Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1945523Z 
2025-08-30T09:58:47.1945683Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1945743Z key = 'date'
2025-08-30T09:58:47.1945751Z 
2025-08-30T09:58:47.1945825Z     def get_loc(self, key):
2025-08-30T09:58:47.1945882Z         """
2025-08-30T09:58:47.1946030Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1946243Z     
2025-08-30T09:58:47.1946305Z         Parameters
2025-08-30T09:58:47.1946364Z         ----------
2025-08-30T09:58:47.1946427Z         key : label
2025-08-30T09:58:47.1946481Z     
2025-08-30T09:58:47.1946538Z         Returns
2025-08-30T09:58:47.1946596Z         -------
2025-08-30T09:58:47.1946719Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1946774Z     
2025-08-30T09:58:47.1946833Z         Examples
2025-08-30T09:58:47.1946895Z         --------
2025-08-30T09:58:47.1946983Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1947058Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1947116Z         1
2025-08-30T09:58:47.1947176Z     
2025-08-30T09:58:47.1947268Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1947453Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1947527Z         slice(1, 3, None)
2025-08-30T09:58:47.1947581Z     
2025-08-30T09:58:47.1947678Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1947765Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1947849Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1947906Z         """
2025-08-30T09:58:47.1947996Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1948057Z         try:
2025-08-30T09:58:47.1948143Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1948215Z         except KeyError as err:
2025-08-30T09:58:47.1948303Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1948397Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1948505Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1948562Z             ):
2025-08-30T09:58:47.1948653Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1948729Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1948801Z E           KeyError: 'date'
2025-08-30T09:58:47.1948806Z 
2025-08-30T09:58:47.1949001Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1949138Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1949247Z 2025-08-30 09:54:52 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.1949377Z 2025-08-30 09:54:52 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1949455Z 2025-08-30 09:54:52 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1949546Z 2025-08-30 09:54:52 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1949668Z 2025-08-30 09:54:52 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.1949789Z 2025-08-30 09:54:52 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1950119Z 2025-08-30 09:54:52 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.1950609Z 2025-08-30 09:54:52 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1951034Z 2025-08-30 09:54:52 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1951127Z 2025-08-30 09:54:52 INFO Found no parameter file.
2025-08-30T09:58:47.1951410Z 2025-08-30 09:54:52 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1951589Z 2025-08-30 09:54:52 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.1951764Z 2025-08-30 09:54:52 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1951955Z 2025-08-30 09:54:52 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1952152Z 2025-08-30 09:54:52 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1952415Z 2025-08-30 09:54:52 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1952692Z 2025-08-30 09:54:52 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1952890Z 2025-08-30 09:54:52 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1952993Z 2025-08-30 09:54:52 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.1953096Z 2025-08-30 09:54:52 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1953215Z 2025-08-30 09:54:52 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1953469Z 2025-08-30 09:54:52 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1953625Z 2025-08-30 09:54:52 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1953869Z 2025-08-30 09:54:52 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1954009Z 2025-08-30 09:54:52 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1954310Z 2025-08-30 09:54:52 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1954508Z 2025-08-30 09:54:52 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1954621Z 2025-08-30 09:54:52 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1954729Z 2025-08-30 09:54:52 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1954852Z 2025-08-30 09:54:52 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1955022Z 2025-08-30 09:54:52 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1955137Z 2025-08-30 09:54:52 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1955255Z 2025-08-30 09:54:52 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1955401Z 2025-08-30 09:54:52 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1955519Z 2025-08-30 09:54:52 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1955662Z 2025-08-30 09:54:52 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1955818Z 2025-08-30 09:54:52 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1955957Z 2025-08-30 09:54:52 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1956098Z 2025-08-30 09:54:52 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1956211Z 2025-08-30 09:54:52 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1956314Z 2025-08-30 09:54:52 INFO Validating configuration ...
2025-08-30T09:58:47.1956659Z 2025-08-30 09:54:52 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.1956943Z 2025-08-30 09:54:52 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.1957379Z 2025-08-30 09:54:52 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1957579Z 2025-08-30 09:54:52 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.1957751Z 2025-08-30 09:54:52 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1957893Z 2025-08-30 09:54:52 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1958003Z 2025-08-30 09:54:52 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1958234Z 2025-08-30 09:54:52 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1958347Z 2025-08-30 09:54:52 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1958497Z 2025-08-30 09:54:52 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1958687Z 2025-08-30 09:54:52 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1958850Z 2025-08-30 09:54:52 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1959060Z 2025-08-30 09:54:52 DEBUG Dropping last candle
2025-08-30T09:58:47.1959270Z 2025-08-30 09:54:52 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.1959445Z ______________ test_backtest_pricecontours[protections6-raise-10] ______________
2025-08-30T09:58:47.1959451Z 
2025-08-30T09:58:47.1959608Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1959668Z key = 'date'
2025-08-30T09:58:47.1959672Z 
2025-08-30T09:58:47.1959752Z     def get_loc(self, key):
2025-08-30T09:58:47.1959810Z         """
2025-08-30T09:58:47.1959959Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1960019Z     
2025-08-30T09:58:47.1960086Z         Parameters
2025-08-30T09:58:47.1960227Z         ----------
2025-08-30T09:58:47.1960291Z         key : label
2025-08-30T09:58:47.1960352Z     
2025-08-30T09:58:47.1960412Z         Returns
2025-08-30T09:58:47.1960471Z         -------
2025-08-30T09:58:47.1960597Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1960657Z     
2025-08-30T09:58:47.1960716Z         Examples
2025-08-30T09:58:47.1960776Z         --------
2025-08-30T09:58:47.1960872Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1960950Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1961007Z         1
2025-08-30T09:58:47.1961061Z     
2025-08-30T09:58:47.1961160Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1961237Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1961304Z         slice(1, 3, None)
2025-08-30T09:58:47.1961362Z     
2025-08-30T09:58:47.1961461Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1961548Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1961634Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1961690Z         """
2025-08-30T09:58:47.1961779Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1961840Z         try:
2025-08-30T09:58:47.1961932Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1962002Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1962007Z 
2025-08-30T09:58:47.1962174Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.1962281Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1962445Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1962503Z     ???
2025-08-30T09:58:47.1962667Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.1962722Z     ???
2025-08-30T09:58:47.1962981Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.1963038Z     ???
2025-08-30T09:58:47.1963143Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1963152Z 
2025-08-30T09:58:47.1963210Z >   ???
2025-08-30T09:58:47.1963276Z E   KeyError: 'date'
2025-08-30T09:58:47.1963281Z 
2025-08-30T09:58:47.1963502Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.1963508Z 
2025-08-30T09:58:47.1963664Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.1963670Z 
2025-08-30T09:58:47.1964203Z default_conf = {'_strategy_protections': [{'method': 'CooldownPeriod', 'stop_duration': 3}], 'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.1970901Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65949ae350>
2025-08-30T09:58:47.1971336Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1971632Z protections = [{'method': 'CooldownPeriod', 'stop_duration': 3}]
2025-08-30T09:58:47.1971742Z contour = 'raise', expected = 10
2025-08-30T09:58:47.1971750Z 
2025-08-30T09:58:47.1972012Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1972109Z         "protections,contour,expected",
2025-08-30T09:58:47.1972167Z         [
2025-08-30T09:58:47.1972239Z             (None, "sine", 35),
2025-08-30T09:58:47.1972316Z             (None, "raise", 19),
2025-08-30T09:58:47.1972383Z             (None, "lower", 0),
2025-08-30T09:58:47.1972448Z             (None, "sine", 35),
2025-08-30T09:58:47.1972521Z             (None, "raise", 19),
2025-08-30T09:58:47.1972690Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.1972840Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.1972986Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.1973254Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.1973538Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.1973606Z         ],
2025-08-30T09:58:47.1973678Z     )
2025-08-30T09:58:47.1973771Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.1973939Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.1974005Z     ) -> None:
2025-08-30T09:58:47.1974075Z         if protections:
2025-08-30T09:58:47.1974196Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.1974298Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.1974354Z     
2025-08-30T09:58:47.1974430Z         patch_exchange(mocker)
2025-08-30T09:58:47.1974597Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1974772Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1974913Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.1975036Z         # over and over again should not cause different results
2025-08-30T09:58:47.1975102Z     
2025-08-30T09:58:47.1975187Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.1975279Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.1975420Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1975475Z     
2025-08-30T09:58:47.1975570Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.1975721Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.1975803Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1975809Z 
2025-08-30T09:58:47.1975901Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.1976005Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1976165Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.1976253Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.1976385Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.1976500Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.1976572Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1976761Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.1976852Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.1976916Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.1977017Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1977022Z 
2025-08-30T09:58:47.1977184Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.1977250Z key = 'date'
2025-08-30T09:58:47.1977255Z 
2025-08-30T09:58:47.1977329Z     def get_loc(self, key):
2025-08-30T09:58:47.1977386Z         """
2025-08-30T09:58:47.1977546Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.1977606Z     
2025-08-30T09:58:47.1977668Z         Parameters
2025-08-30T09:58:47.1977859Z         ----------
2025-08-30T09:58:47.1977923Z         key : label
2025-08-30T09:58:47.1977978Z     
2025-08-30T09:58:47.1978037Z         Returns
2025-08-30T09:58:47.1978104Z         -------
2025-08-30T09:58:47.1978232Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.1978287Z     
2025-08-30T09:58:47.1978352Z         Examples
2025-08-30T09:58:47.1978412Z         --------
2025-08-30T09:58:47.1978502Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.1978580Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.1978641Z         1
2025-08-30T09:58:47.1978695Z     
2025-08-30T09:58:47.1978789Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.1978874Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.1979069Z         slice(1, 3, None)
2025-08-30T09:58:47.1979127Z     
2025-08-30T09:58:47.1979231Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.1979321Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.1979408Z         array([False,  True, False,  True])
2025-08-30T09:58:47.1979463Z         """
2025-08-30T09:58:47.1979557Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.1979615Z         try:
2025-08-30T09:58:47.1979705Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.1979779Z         except KeyError as err:
2025-08-30T09:58:47.1979870Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.1979961Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.1980072Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.1980138Z             ):
2025-08-30T09:58:47.1980223Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.1980299Z >           raise KeyError(key) from err
2025-08-30T09:58:47.1980378Z E           KeyError: 'date'
2025-08-30T09:58:47.1980383Z 
2025-08-30T09:58:47.1980580Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.1980726Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.1980843Z 2025-08-30 09:54:53 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.1980971Z 2025-08-30 09:54:53 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.1981048Z 2025-08-30 09:54:53 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.1981140Z 2025-08-30 09:54:53 INFO Using Exchange "Binance"
2025-08-30T09:58:47.1981268Z 2025-08-30 09:54:53 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.1981383Z 2025-08-30 09:54:53 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.1981712Z 2025-08-30 09:54:53 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.1982215Z 2025-08-30 09:54:53 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.1982632Z 2025-08-30 09:54:53 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.1982732Z 2025-08-30 09:54:53 INFO Found no parameter file.
2025-08-30T09:58:47.1983021Z 2025-08-30 09:54:53 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.1983198Z 2025-08-30 09:54:53 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.1983559Z 2025-08-30 09:54:53 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.1983829Z 2025-08-30 09:54:53 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.1984031Z 2025-08-30 09:54:53 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.1984298Z 2025-08-30 09:54:53 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.1984640Z 2025-08-30 09:54:53 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.1984844Z 2025-08-30 09:54:53 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.1984953Z 2025-08-30 09:54:53 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.1985065Z 2025-08-30 09:54:53 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.1985184Z 2025-08-30 09:54:53 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.1985334Z 2025-08-30 09:54:53 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.1985499Z 2025-08-30 09:54:53 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.1985630Z 2025-08-30 09:54:53 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.1985877Z 2025-08-30 09:54:53 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.1986187Z 2025-08-30 09:54:53 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.1986388Z 2025-08-30 09:54:53 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.1986503Z 2025-08-30 09:54:53 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.1986614Z 2025-08-30 09:54:53 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.1986746Z 2025-08-30 09:54:53 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.1986915Z 2025-08-30 09:54:53 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.1987031Z 2025-08-30 09:54:53 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.1987155Z 2025-08-30 09:54:53 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.1987300Z 2025-08-30 09:54:53 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.1987421Z 2025-08-30 09:54:53 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.1987566Z 2025-08-30 09:54:53 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.1987722Z 2025-08-30 09:54:53 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.1987866Z 2025-08-30 09:54:53 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.1988007Z 2025-08-30 09:54:53 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.1988123Z 2025-08-30 09:54:53 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.1988228Z 2025-08-30 09:54:53 INFO Validating configuration ...
2025-08-30T09:58:47.1988577Z 2025-08-30 09:54:53 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.1988868Z 2025-08-30 09:54:53 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.1989302Z 2025-08-30 09:54:53 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.1989499Z 2025-08-30 09:54:53 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.1989683Z 2025-08-30 09:54:53 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.1989823Z 2025-08-30 09:54:53 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.1989932Z 2025-08-30 09:54:53 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.1990168Z 2025-08-30 09:54:53 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.1990279Z 2025-08-30 09:54:53 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.1990430Z 2025-08-30 09:54:53 INFO No params for protection found, using default values.
2025-08-30T09:58:47.1990664Z 2025-08-30 09:54:53 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.1990973Z 2025-08-30 09:54:53 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.1991149Z 2025-08-30 09:54:53 DEBUG Dropping last candle
2025-08-30T09:58:47.1991781Z 2025-08-30 09:54:53 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.1991945Z ____________ test_backtest_one_detail_futures[False--0.01780296-6] _____________
2025-08-30T09:58:47.1991951Z 
2025-08-30T09:58:47.1992424Z default_conf_usdt = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.1992591Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584843dd0>
2025-08-30T09:58:47.1992786Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.1993036Z use_detail = False, exp_funding_fee = -0.01780296, exp_ff_updates = 6
2025-08-30T09:58:47.1993042Z 
2025-08-30T09:58:47.1993230Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.1993436Z         "use_detail,exp_funding_fee, exp_ff_updates",
2025-08-30T09:58:47.1993499Z         [
2025-08-30T09:58:47.1993587Z             (True, -0.018054162, 10),
2025-08-30T09:58:47.1993660Z             (False, -0.01780296, 6),
2025-08-30T09:58:47.1993719Z         ],
2025-08-30T09:58:47.1993779Z     )
2025-08-30T09:58:47.1993871Z     def test_backtest_one_detail_futures(
2025-08-30T09:58:47.1994092Z         default_conf_usdt, mocker, testdatadir, use_detail, exp_funding_fee, exp_ff_updates
2025-08-30T09:58:47.1994165Z     ) -> None:
2025-08-30T09:58:47.1994269Z         default_conf_usdt["use_exit_signal"] = False
2025-08-30T09:58:47.1994363Z         default_conf_usdt["trading_mode"] = "futures"
2025-08-30T09:58:47.1994455Z         default_conf_usdt["margin_mode"] = "isolated"
2025-08-30T09:58:47.1994585Z         default_conf_usdt["candle_type_def"] = CandleType.FUTURES
2025-08-30T09:58:47.1994646Z     
2025-08-30T09:58:47.1994727Z         patch_exchange(mocker)
2025-08-30T09:58:47.1994889Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.1995065Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.1995139Z         mocker.patch(
2025-08-30T09:58:47.1995322Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.1995429Z             PropertyMock(return_value=["XRP/USDT:USDT"]),
2025-08-30T09:58:47.1995486Z         )
2025-08-30T09:58:47.1995671Z         mocker.patch(f"{EXMS}.get_maintenance_ratio_and_amt", return_value=(0.01, 0.01))
2025-08-30T09:58:47.1995758Z         default_conf_usdt["timeframe"] = "1h"
2025-08-30T09:58:47.1995827Z         if use_detail:
2025-08-30T09:58:47.1995928Z             default_conf_usdt["timeframe_detail"] = "5m"
2025-08-30T09:58:47.1995982Z     
2025-08-30T09:58:47.1996070Z         def advise_entry(df, *args, **kwargs):
2025-08-30T09:58:47.1996163Z             # Mock function to force several entries
2025-08-30T09:58:47.1996251Z             df.loc[(df["rsi"] < 40), "enter_long"] = 1
2025-08-30T09:58:47.1996316Z             return df
2025-08-30T09:58:47.1996371Z     
2025-08-30T09:58:47.1996481Z         def custom_entry_price(proposed_rate, **kwargs):
2025-08-30T09:58:47.1996561Z             return proposed_rate * 0.997
2025-08-30T09:58:47.1996621Z     
2025-08-30T09:58:47.1996713Z         default_conf_usdt["max_open_trades"] = 10
2025-08-30T09:58:47.1996767Z     
2025-08-30T09:58:47.1996868Z         backtesting = Backtesting(default_conf_usdt)
2025-08-30T09:58:47.1997023Z         ff_spy = mocker.spy(backtesting.exchange, "calculate_funding_fees")
2025-08-30T09:58:47.1997077Z     
2025-08-30T09:58:47.1997207Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.1997347Z         backtesting.strategy.populate_entry_trend = advise_entry
2025-08-30T09:58:47.1997495Z         backtesting.strategy.custom_entry_price = custom_entry_price
2025-08-30T09:58:47.1997573Z         pair = "XRP/USDT:USDT"
2025-08-30T09:58:47.1997689Z         # Pick a timerange adapted to the pair we use to test
2025-08-30T09:58:47.1997817Z         timerange = TimeRange.parse_timerange("20211117-20211119")
2025-08-30T09:58:47.1998025Z         data = history.load_data(
2025-08-30T09:58:47.1998111Z             datadir=Path(testdatadir),
2025-08-30T09:58:47.1998180Z             timeframe="1h",
2025-08-30T09:58:47.1998248Z             pairs=[pair],
2025-08-30T09:58:47.1998326Z             timerange=timerange,
2025-08-30T09:58:47.1998413Z             candle_type=CandleType.FUTURES,
2025-08-30T09:58:47.1998469Z         )
2025-08-30T09:58:47.1998553Z >       backtesting._load_bt_data_detail()
2025-08-30T09:58:47.1998558Z 
2025-08-30T09:58:47.1998651Z tests/optimize/test_backtesting.py:1053: 
2025-08-30T09:58:47.1998754Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.1998903Z freqtrade/optimize/backtesting.py:403: in _load_bt_data_detail
2025-08-30T09:58:47.1999186Z     self.futures_data[pair] = self.exchange.combine_funding_and_mark(
2025-08-30T09:58:47.1999347Z freqtrade/exchange/exchange.py:3649: in combine_funding_and_mark
2025-08-30T09:58:47.1999430Z     return mark_rates.merge(
2025-08-30T09:58:47.1999607Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:10839: in merge
2025-08-30T09:58:47.1999669Z     return merge(
2025-08-30T09:58:47.1999856Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:170: in merge
2025-08-30T09:58:47.1999935Z     op = _MergeOperation(
2025-08-30T09:58:47.2000130Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:794: in __init__
2025-08-30T09:58:47.2000201Z     ) = self._get_merge_keys()
2025-08-30T09:58:47.2000263Z         ^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2000490Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:1298: in _get_merge_keys
2025-08-30T09:58:47.2000627Z     right_keys.append(right._get_label_or_level_values(rk))
2025-08-30T09:58:47.2000708Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2000810Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2000819Z 
2025-08-30T09:58:47.2000929Z self =                        index    open  high  low  close  volume
2025-08-30T09:58:47.2001074Z 0  2021-11-18 00:00:00+00:00  0.0001   0.0  0.0    0.0 ... 0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.2001180Z 90 2021-12-18 00:00:00+00:00  0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.2001184Z 
2025-08-30T09:58:47.2001250Z [91 rows x 6 columns]
2025-08-30T09:58:47.2001315Z key = 'date', axis = 0
2025-08-30T09:58:47.2001320Z 
2025-08-30T09:58:47.2001381Z     @final
2025-08-30T09:58:47.2001571Z     def _get_label_or_level_values(self, key: Level, axis: AxisInt = 0) -> ArrayLike:
2025-08-30T09:58:47.2001627Z         """
2025-08-30T09:58:47.2001782Z         Return a 1-D array of values associated with `key`, a label or level
2025-08-30T09:58:47.2001856Z         from the given `axis`.
2025-08-30T09:58:47.2001914Z     
2025-08-30T09:58:47.2001984Z         Retrieval logic:
2025-08-30T09:58:47.2002129Z           - (axis=0): Return column values if `key` matches a column label.
2025-08-30T09:58:47.2002278Z             Otherwise return index level values if `key` matches an index
2025-08-30T09:58:47.2002338Z             level.
2025-08-30T09:58:47.2002470Z           - (axis=1): Return row values if `key` matches an index label.
2025-08-30T09:58:47.2002611Z             Otherwise return column level values if 'key' matches a column
2025-08-30T09:58:47.2002670Z             level
2025-08-30T09:58:47.2002725Z     
2025-08-30T09:58:47.2002790Z         Parameters
2025-08-30T09:58:47.2002851Z         ----------
2025-08-30T09:58:47.2002915Z         key : Hashable
2025-08-30T09:58:47.2002995Z             Label or level name.
2025-08-30T09:58:47.2003066Z         axis : int, default 0
2025-08-30T09:58:47.2003212Z             Axis that levels are associated with (0 for index, 1 for columns)
2025-08-30T09:58:47.2003270Z     
2025-08-30T09:58:47.2003334Z         Returns
2025-08-30T09:58:47.2003577Z         -------
2025-08-30T09:58:47.2003662Z         np.ndarray or ExtensionArray
2025-08-30T09:58:47.2003933Z     
2025-08-30T09:58:47.2003993Z         Raises
2025-08-30T09:58:47.2004050Z         ------
2025-08-30T09:58:47.2004109Z         KeyError
2025-08-30T09:58:47.2004213Z             if `key` matches neither a label nor a level
2025-08-30T09:58:47.2004273Z         ValueError
2025-08-30T09:58:47.2004358Z             if `key` matches multiple labels
2025-08-30T09:58:47.2004420Z         """
2025-08-30T09:58:47.2004502Z         axis = self._get_axis_number(axis)
2025-08-30T09:58:47.2004639Z         other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]
2025-08-30T09:58:47.2004697Z     
2025-08-30T09:58:47.2004793Z         if self._is_label_reference(key, axis=axis):
2025-08-30T09:58:47.2004907Z             self._check_label_or_level_ambiguity(key, axis=axis)
2025-08-30T09:58:47.2005119Z             values = self.xs(key, axis=other_axes[0])._values
2025-08-30T09:58:47.2005226Z         elif self._is_level_reference(key, axis=axis):
2025-08-30T09:58:47.2005346Z             values = self.axes[axis].get_level_values(key)._values
2025-08-30T09:58:47.2005409Z         else:
2025-08-30T09:58:47.2005485Z >           raise KeyError(key)
2025-08-30T09:58:47.2005557Z E           KeyError: 'date'
2025-08-30T09:58:47.2005561Z 
2025-08-30T09:58:47.2005742Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:1911: KeyError
2025-08-30T09:58:47.2005886Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2005997Z 2025-08-30 09:54:53 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2006125Z 2025-08-30 09:54:53 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2006203Z 2025-08-30 09:54:53 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2006301Z 2025-08-30 09:54:53 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2006430Z 2025-08-30 09:54:53 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2006545Z 2025-08-30 09:54:53 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2006875Z 2025-08-30 09:54:53 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2007373Z 2025-08-30 09:54:53 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2007791Z 2025-08-30 09:54:53 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2007889Z 2025-08-30 09:54:53 INFO Found no parameter file.
2025-08-30T09:58:47.2008177Z 2025-08-30 09:54:53 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2008354Z 2025-08-30 09:54:53 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.2008543Z 2025-08-30 09:54:53 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2008740Z 2025-08-30 09:54:53 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.2008935Z 2025-08-30 09:54:53 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.2009199Z 2025-08-30 09:54:53 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2009400Z 2025-08-30 09:54:53 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2009588Z 2025-08-30 09:54:53 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2009782Z 2025-08-30 09:54:53 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2009887Z 2025-08-30 09:54:53 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.2009993Z 2025-08-30 09:54:53 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2010112Z 2025-08-30 09:54:53 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2010260Z 2025-08-30 09:54:53 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2010507Z 2025-08-30 09:54:53 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2010633Z 2025-08-30 09:54:53 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2010773Z 2025-08-30 09:54:53 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2011075Z 2025-08-30 09:54:53 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2011262Z 2025-08-30 09:54:53 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2011381Z 2025-08-30 09:54:53 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.2011490Z 2025-08-30 09:54:53 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.2011687Z 2025-08-30 09:54:53 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2011860Z 2025-08-30 09:54:53 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2011985Z 2025-08-30 09:54:53 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2012116Z 2025-08-30 09:54:53 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2012267Z 2025-08-30 09:54:53 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2012387Z 2025-08-30 09:54:53 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2012528Z 2025-08-30 09:54:53 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2012684Z 2025-08-30 09:54:53 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2012829Z 2025-08-30 09:54:53 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2012971Z 2025-08-30 09:54:53 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2013087Z 2025-08-30 09:54:53 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2013200Z 2025-08-30 09:54:53 INFO Validating configuration ...
2025-08-30T09:58:47.2013666Z 2025-08-30 09:54:53 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2014188Z 2025-08-30 09:54:53 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2014899Z 2025-08-30 09:54:53 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2015131Z 2025-08-30 09:54:53 DEBUG Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2015359Z 2025-08-30 09:54:53 WARNING Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2015566Z 2025-08-30 09:54:53 DEBUG Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2015786Z 2025-08-30 09:54:53 WARNING Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2015994Z 2025-08-30 09:54:53 DEBUG Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2016211Z 2025-08-30 09:54:53 WARNING Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2016415Z 2025-08-30 09:54:53 DEBUG Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2016628Z 2025-08-30 09:54:53 WARNING Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2016832Z 2025-08-30 09:54:53 DEBUG Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2017042Z 2025-08-30 09:54:53 WARNING Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2017150Z 2025-08-30 09:54:53 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.2017330Z 2025-08-30 09:54:53 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2017472Z 2025-08-30 09:54:53 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2017589Z 2025-08-30 09:54:53 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2017968Z 2025-08-30 09:54:53 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2018081Z 2025-08-30 09:54:53 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2018236Z 2025-08-30 09:54:53 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2018426Z 2025-08-30 09:54:53 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2018586Z 2025-08-30 09:54:53 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2018734Z _____________________ test_backtest_multi_pair[20-LTC/BTC] _____________________
2025-08-30T09:58:47.2018740Z 
2025-08-30T09:58:47.2019435Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2019520Z fee = <MagicMock id='140075467374160'>
2025-08-30T09:58:47.2019712Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65b4d91910>, tres = 20
2025-08-30T09:58:47.2019783Z pair = 'LTC/BTC'
2025-08-30T09:58:47.2019977Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2019982Z 
2025-08-30T09:58:47.2020112Z     @pytest.mark.parametrize("pair", ["ADA/BTC", "LTC/BTC"])
2025-08-30T09:58:47.2020216Z     @pytest.mark.parametrize("tres", [0, 20, 30])
2025-08-30T09:58:47.2020409Z     def test_backtest_multi_pair(default_conf, fee, mocker, tres, pair, testdatadir):
2025-08-30T09:58:47.2020538Z         def _trend_alternate_hold(dataframe=None, metadata=None):
2025-08-30T09:58:47.2020599Z             """
2025-08-30T09:58:47.2020775Z             Buy every xth candle - sell every other xth -2 (hold on to pairs a bit)
2025-08-30T09:58:47.2020832Z             """
2025-08-30T09:58:47.2020931Z             if metadata["pair"] in ("ETH/BTC", "LTC/BTC"):
2025-08-30T09:58:47.2021006Z                 multi = 20
2025-08-30T09:58:47.2021065Z             else:
2025-08-30T09:58:47.2021129Z                 multi = 18
2025-08-30T09:58:47.2021294Z             dataframe["enter_long"] = np.where(dataframe.index % multi == 0, 1, 0)
2025-08-30T09:58:47.2021484Z             dataframe["exit_long"] = np.where((dataframe.index + multi - 2) % multi == 0, 1, 0)
2025-08-30T09:58:47.2021564Z             dataframe["enter_short"] = 0
2025-08-30T09:58:47.2021645Z             dataframe["exit_short"] = 0
2025-08-30T09:58:47.2021715Z             return dataframe
2025-08-30T09:58:47.2021771Z     
2025-08-30T09:58:47.2021855Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.2022017Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2022187Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2022269Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2022348Z         patch_exchange(mocker)
2025-08-30T09:58:47.2022406Z     
2025-08-30T09:58:47.2022537Z         pairs = ["ADA/BTC", "DASH/BTC", "ETH/BTC", "LTC/BTC", "NXT/BTC"]
2025-08-30T09:58:47.2022717Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=pairs)
2025-08-30T09:58:47.2022813Z         # Only use 500 lines to increase performance
2025-08-30T09:58:47.2022894Z         data = trim_dictlist(data, -500)
2025-08-30T09:58:47.2022948Z     
2025-08-30T09:58:47.2023075Z         # Remove data for one pair from the beginning of the data
2025-08-30T09:58:47.2023138Z         if tres > 0:
2025-08-30T09:58:47.2023237Z >           data[pair] = data[pair][tres:].reset_index()
2025-08-30T09:58:47.2023314Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2023319Z 
2025-08-30T09:58:47.2023633Z tests/optimize/test_backtesting.py:1545: 
2025-08-30T09:58:47.2023742Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2023935Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6479: in reset_index
2025-08-30T09:58:47.2024153Z     new_obj.insert(
2025-08-30T09:58:47.2024251Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2024256Z 
2025-08-30T09:58:47.2024377Z self =      level_0                     index  ...     close       volume
2025-08-30T09:58:47.2024505Z 20      5280 2018-01-28 12:55:00+00:00  ...  0.0160...  ...  0.016072    60.072092
2025-08-30T09:58:47.2024617Z 499     5759 2018-01-30 04:50:00+00:00  ...  0.016145    20.970956
2025-08-30T09:58:47.2024621Z 
2025-08-30T09:58:47.2024688Z [480 rows x 7 columns]
2025-08-30T09:58:47.2024757Z loc = 0, column = 'level_0'
2025-08-30T09:58:47.2024879Z value = array([ 20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,
2025-08-30T09:58:47.2025105Z         33,  34,  35,  36,  37,  38,  39,  40,..., 478, 479, 480, 481, 482, 483, 484, 485, 486, 487,
2025-08-30T09:58:47.2025212Z        488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499])
2025-08-30T09:58:47.2025292Z allow_duplicates = False
2025-08-30T09:58:47.2025297Z 
2025-08-30T09:58:47.2025357Z     def insert(
2025-08-30T09:58:47.2025419Z         self,
2025-08-30T09:58:47.2025477Z         loc: int,
2025-08-30T09:58:47.2025545Z         column: Hashable,
2025-08-30T09:58:47.2025627Z         value: Scalar | AnyArrayLike,
2025-08-30T09:58:47.2025755Z         allow_duplicates: bool | lib.NoDefault = lib.no_default,
2025-08-30T09:58:47.2025817Z     ) -> None:
2025-08-30T09:58:47.2025875Z         """
2025-08-30T09:58:47.2026025Z         Insert column into DataFrame at specified location.
2025-08-30T09:58:47.2026080Z     
2025-08-30T09:58:47.2026240Z         Raises a ValueError if `column` is already contained in the DataFrame,
2025-08-30T09:58:47.2026336Z         unless `allow_duplicates` is set to True.
2025-08-30T09:58:47.2026396Z     
2025-08-30T09:58:47.2026460Z         Parameters
2025-08-30T09:58:47.2026525Z         ----------
2025-08-30T09:58:47.2026587Z         loc : int
2025-08-30T09:58:47.2026712Z             Insertion index. Must verify 0 <= loc <= len(columns).
2025-08-30T09:58:47.2026800Z         column : str, number, or hashable object
2025-08-30T09:58:47.2026881Z             Label of the inserted column.
2025-08-30T09:58:47.2026966Z         value : Scalar, Series, or array-like
2025-08-30T09:58:47.2027049Z             Content of the inserted column.
2025-08-30T09:58:47.2027179Z         allow_duplicates : bool, optional, default lib.no_default
2025-08-30T09:58:47.2027279Z             Allow duplicate column labels to be created.
2025-08-30T09:58:47.2027334Z     
2025-08-30T09:58:47.2027391Z         See Also
2025-08-30T09:58:47.2027454Z         --------
2025-08-30T09:58:47.2027542Z         Index.insert : Insert new item by index.
2025-08-30T09:58:47.2027595Z     
2025-08-30T09:58:47.2027660Z         Examples
2025-08-30T09:58:47.2027718Z         --------
2025-08-30T09:58:47.2027819Z         >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
2025-08-30T09:58:47.2027876Z         >>> df
2025-08-30T09:58:47.2027945Z            col1  col2
2025-08-30T09:58:47.2028004Z         0     1     3
2025-08-30T09:58:47.2028061Z         1     2     4
2025-08-30T09:58:47.2028141Z         >>> df.insert(1, "newcol", [99, 99])
2025-08-30T09:58:47.2028199Z         >>> df
2025-08-30T09:58:47.2028268Z            col1  newcol  col2
2025-08-30T09:58:47.2028329Z         0     1      99     3
2025-08-30T09:58:47.2028393Z         1     2      99     4
2025-08-30T09:58:47.2028503Z         >>> df.insert(0, "col1", [100, 100], allow_duplicates=True)
2025-08-30T09:58:47.2028561Z         >>> df
2025-08-30T09:58:47.2028638Z            col1  col1  newcol  col2
2025-08-30T09:58:47.2028701Z         0   100     1      99     3
2025-08-30T09:58:47.2028765Z         1   100     2      99     4
2025-08-30T09:58:47.2028819Z     
2025-08-30T09:58:47.2029016Z         Notice that pandas uses index alignment in case of `value` from type `Series`:
2025-08-30T09:58:47.2029072Z     
2025-08-30T09:58:47.2029180Z         >>> df.insert(0, "col0", pd.Series([5, 6], index=[1, 2]))
2025-08-30T09:58:47.2029350Z         >>> df
2025-08-30T09:58:47.2029426Z            col0  col1  col1  newcol  col2
2025-08-30T09:58:47.2029495Z         0   NaN   100     1      99     3
2025-08-30T09:58:47.2029565Z         1   5.0   100     2      99     4
2025-08-30T09:58:47.2029621Z         """
2025-08-30T09:58:47.2029709Z         if allow_duplicates is lib.no_default:
2025-08-30T09:58:47.2029783Z             allow_duplicates = False
2025-08-30T09:58:47.2029932Z         if allow_duplicates and not self.flags.allows_duplicate_labels:
2025-08-30T09:58:47.2030001Z             raise ValueError(
2025-08-30T09:58:47.2030108Z                 "Cannot specify 'allow_duplicates=True' when "
2025-08-30T09:58:47.2030220Z                 "'self.flags.allows_duplicate_labels' is False."
2025-08-30T09:58:47.2030352Z             )
2025-08-30T09:58:47.2030464Z         if not allow_duplicates and column in self.columns:
2025-08-30T09:58:47.2030563Z             # Should this be a different kind of error??
2025-08-30T09:58:47.2030703Z >           raise ValueError(f"cannot insert {column}, already exists")
2025-08-30T09:58:47.2030816Z E           ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.2030821Z 
2025-08-30T09:58:47.2030996Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:5165: ValueError
2025-08-30T09:58:47.2031139Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2031355Z 2025-08-30 09:54:55 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5720 - after: 5760 - 0.70%
2025-08-30T09:58:47.2031563Z 2025-08-30 09:54:55 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.2031708Z _____________________ test_backtest_multi_pair[0-ADA/BTC] ______________________
2025-08-30T09:58:47.2031717Z 
2025-08-30T09:58:47.2031900Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2031960Z key = 'date'
2025-08-30T09:58:47.2031969Z 
2025-08-30T09:58:47.2032043Z     def get_loc(self, key):
2025-08-30T09:58:47.2032099Z         """
2025-08-30T09:58:47.2032248Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2032306Z     
2025-08-30T09:58:47.2032367Z         Parameters
2025-08-30T09:58:47.2032427Z         ----------
2025-08-30T09:58:47.2032487Z         key : label
2025-08-30T09:58:47.2032544Z     
2025-08-30T09:58:47.2032600Z         Returns
2025-08-30T09:58:47.2032659Z         -------
2025-08-30T09:58:47.2032781Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2032835Z     
2025-08-30T09:58:47.2032893Z         Examples
2025-08-30T09:58:47.2032951Z         --------
2025-08-30T09:58:47.2033038Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2033119Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2033177Z         1
2025-08-30T09:58:47.2033235Z     
2025-08-30T09:58:47.2033332Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2033521Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2033591Z         slice(1, 3, None)
2025-08-30T09:58:47.2033645Z     
2025-08-30T09:58:47.2033744Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2033826Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2033912Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2033967Z         """
2025-08-30T09:58:47.2034057Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2034117Z         try:
2025-08-30T09:58:47.2034204Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2034274Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2034278Z 
2025-08-30T09:58:47.2034450Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2034550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2034716Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2034900Z     ???
2025-08-30T09:58:47.2035063Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2035119Z     ???
2025-08-30T09:58:47.2035373Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2035431Z     ???
2025-08-30T09:58:47.2035525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2035530Z 
2025-08-30T09:58:47.2035584Z >   ???
2025-08-30T09:58:47.2035651Z E   KeyError: 'date'
2025-08-30T09:58:47.2035656Z 
2025-08-30T09:58:47.2035772Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2035776Z 
2025-08-30T09:58:47.2036035Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2036041Z 
2025-08-30T09:58:47.2036486Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2036569Z fee = <MagicMock id='140075685373264'>
2025-08-30T09:58:47.2036753Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8613ed0>, tres = 0
2025-08-30T09:58:47.2036819Z pair = 'ADA/BTC'
2025-08-30T09:58:47.2037017Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2037022Z 
2025-08-30T09:58:47.2037151Z     @pytest.mark.parametrize("pair", ["ADA/BTC", "LTC/BTC"])
2025-08-30T09:58:47.2037249Z     @pytest.mark.parametrize("tres", [0, 20, 30])
2025-08-30T09:58:47.2037447Z     def test_backtest_multi_pair(default_conf, fee, mocker, tres, pair, testdatadir):
2025-08-30T09:58:47.2037573Z         def _trend_alternate_hold(dataframe=None, metadata=None):
2025-08-30T09:58:47.2037635Z             """
2025-08-30T09:58:47.2037806Z             Buy every xth candle - sell every other xth -2 (hold on to pairs a bit)
2025-08-30T09:58:47.2037864Z             """
2025-08-30T09:58:47.2037968Z             if metadata["pair"] in ("ETH/BTC", "LTC/BTC"):
2025-08-30T09:58:47.2038039Z                 multi = 20
2025-08-30T09:58:47.2038097Z             else:
2025-08-30T09:58:47.2038161Z                 multi = 18
2025-08-30T09:58:47.2038334Z             dataframe["enter_long"] = np.where(dataframe.index % multi == 0, 1, 0)
2025-08-30T09:58:47.2038543Z             dataframe["exit_long"] = np.where((dataframe.index + multi - 2) % multi == 0, 1, 0)
2025-08-30T09:58:47.2038622Z             dataframe["enter_short"] = 0
2025-08-30T09:58:47.2038699Z             dataframe["exit_short"] = 0
2025-08-30T09:58:47.2038773Z             return dataframe
2025-08-30T09:58:47.2038828Z     
2025-08-30T09:58:47.2038910Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.2039078Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2039244Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2039329Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2039403Z         patch_exchange(mocker)
2025-08-30T09:58:47.2039462Z     
2025-08-30T09:58:47.2039590Z         pairs = ["ADA/BTC", "DASH/BTC", "ETH/BTC", "LTC/BTC", "NXT/BTC"]
2025-08-30T09:58:47.2039761Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=pairs)
2025-08-30T09:58:47.2039861Z         # Only use 500 lines to increase performance
2025-08-30T09:58:47.2039940Z         data = trim_dictlist(data, -500)
2025-08-30T09:58:47.2039995Z     
2025-08-30T09:58:47.2040121Z         # Remove data for one pair from the beginning of the data
2025-08-30T09:58:47.2040183Z         if tres > 0:
2025-08-30T09:58:47.2040278Z             data[pair] = data[pair][tres:].reset_index()
2025-08-30T09:58:47.2040360Z         default_conf["timeframe"] = "5m"
2025-08-30T09:58:47.2040445Z         default_conf["max_open_trades"] = 3
2025-08-30T09:58:47.2040501Z     
2025-08-30T09:58:47.2040590Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2040787Z         vr_spy = mocker.spy(backtesting, "validate_row")
2025-08-30T09:58:47.2040920Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2041035Z         backtesting.strategy.bot_loop_start = MagicMock()
2025-08-30T09:58:47.2041210Z         backtesting.strategy.advise_entry = _trend_alternate_hold  # Override
2025-08-30T09:58:47.2041379Z         backtesting.strategy.advise_exit = _trend_alternate_hold  # Override
2025-08-30T09:58:47.2041433Z     
2025-08-30T09:58:47.2041578Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2041658Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2041663Z 
2025-08-30T09:58:47.2041752Z tests/optimize/test_backtesting.py:1556: 
2025-08-30T09:58:47.2041954Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2042110Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2042203Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2042336Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2042443Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2042512Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2042694Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2042780Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2042845Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2042941Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2042946Z 
2025-08-30T09:58:47.2043130Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2043199Z key = 'date'
2025-08-30T09:58:47.2043204Z 
2025-08-30T09:58:47.2043275Z     def get_loc(self, key):
2025-08-30T09:58:47.2043332Z         """
2025-08-30T09:58:47.2043591Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2043651Z     
2025-08-30T09:58:47.2043712Z         Parameters
2025-08-30T09:58:47.2043776Z         ----------
2025-08-30T09:58:47.2043836Z         key : label
2025-08-30T09:58:47.2043891Z     
2025-08-30T09:58:47.2043947Z         Returns
2025-08-30T09:58:47.2044010Z         -------
2025-08-30T09:58:47.2044134Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2044188Z     
2025-08-30T09:58:47.2044249Z         Examples
2025-08-30T09:58:47.2044308Z         --------
2025-08-30T09:58:47.2044396Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2044473Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2044536Z         1
2025-08-30T09:58:47.2044590Z     
2025-08-30T09:58:47.2044686Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2044768Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2044834Z         slice(1, 3, None)
2025-08-30T09:58:47.2044893Z     
2025-08-30T09:58:47.2044996Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2045079Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2045159Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2045219Z         """
2025-08-30T09:58:47.2045314Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2045372Z         try:
2025-08-30T09:58:47.2045461Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2045534Z         except KeyError as err:
2025-08-30T09:58:47.2045623Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2045713Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2045821Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2045884Z             ):
2025-08-30T09:58:47.2045968Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2046044Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2046263Z E           KeyError: 'date'
2025-08-30T09:58:47.2046268Z 
2025-08-30T09:58:47.2046455Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2046591Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2046803Z 2025-08-30 09:54:55 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5720 - after: 5760 - 0.70%
2025-08-30T09:58:47.2047008Z 2025-08-30 09:54:55 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.2047116Z 2025-08-30 09:54:55 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2047241Z 2025-08-30 09:54:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2047321Z 2025-08-30 09:54:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2047518Z 2025-08-30 09:54:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2047643Z 2025-08-30 09:54:55 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2047764Z 2025-08-30 09:54:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2048093Z 2025-08-30 09:54:55 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2048578Z 2025-08-30 09:54:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2048998Z 2025-08-30 09:54:55 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2049092Z 2025-08-30 09:54:55 INFO Found no parameter file.
2025-08-30T09:58:47.2049377Z 2025-08-30 09:54:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2049563Z 2025-08-30 09:54:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2049738Z 2025-08-30 09:54:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2049934Z 2025-08-30 09:54:55 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2050125Z 2025-08-30 09:54:55 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2050388Z 2025-08-30 09:54:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2050576Z 2025-08-30 09:54:55 INFO Override strategy 'max_open_trades' with value in config file: 3.
2025-08-30T09:58:47.2050772Z 2025-08-30 09:54:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2050875Z 2025-08-30 09:54:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2050981Z 2025-08-30 09:54:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2051105Z 2025-08-30 09:54:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2051253Z 2025-08-30 09:54:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2051412Z 2025-08-30 09:54:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2051540Z 2025-08-30 09:54:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2051681Z 2025-08-30 09:54:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2051985Z 2025-08-30 09:54:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2052178Z 2025-08-30 09:54:55 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2052294Z 2025-08-30 09:54:55 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2052402Z 2025-08-30 09:54:55 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2052528Z 2025-08-30 09:54:55 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2052698Z 2025-08-30 09:54:55 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2052814Z 2025-08-30 09:54:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2053023Z 2025-08-30 09:54:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2053168Z 2025-08-30 09:54:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2053285Z 2025-08-30 09:54:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2053523Z 2025-08-30 09:54:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2053680Z 2025-08-30 09:54:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2053821Z 2025-08-30 09:54:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2053962Z 2025-08-30 09:54:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2054071Z 2025-08-30 09:54:55 INFO Strategy using max_open_trades: 3
2025-08-30T09:58:47.2054288Z 2025-08-30 09:54:55 INFO Validating configuration ...
2025-08-30T09:58:47.2054638Z 2025-08-30 09:54:55 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2054927Z 2025-08-30 09:54:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2055363Z 2025-08-30 09:54:55 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2055558Z 2025-08-30 09:54:55 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2055731Z 2025-08-30 09:54:55 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2055873Z 2025-08-30 09:54:55 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2055980Z 2025-08-30 09:54:55 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2056213Z 2025-08-30 09:54:55 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2056327Z 2025-08-30 09:54:55 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2056482Z 2025-08-30 09:54:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2056664Z 2025-08-30 09:54:55 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2056919Z 2025-08-30 09:54:55 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2057195Z _____________________ test_backtest_timedout_entry_orders ______________________
2025-08-30T09:58:47.2057204Z 
2025-08-30T09:58:47.2057454Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2057525Z key = 'date'
2025-08-30T09:58:47.2057530Z 
2025-08-30T09:58:47.2057604Z     def get_loc(self, key):
2025-08-30T09:58:47.2057663Z         """
2025-08-30T09:58:47.2057821Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2057877Z     
2025-08-30T09:58:47.2057939Z         Parameters
2025-08-30T09:58:47.2057999Z         ----------
2025-08-30T09:58:47.2058062Z         key : label
2025-08-30T09:58:47.2058122Z     
2025-08-30T09:58:47.2058179Z         Returns
2025-08-30T09:58:47.2058237Z         -------
2025-08-30T09:58:47.2058363Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2058417Z     
2025-08-30T09:58:47.2058475Z         Examples
2025-08-30T09:58:47.2058536Z         --------
2025-08-30T09:58:47.2058625Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2058702Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2058761Z         1
2025-08-30T09:58:47.2058813Z     
2025-08-30T09:58:47.2058906Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2058985Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2059056Z         slice(1, 3, None)
2025-08-30T09:58:47.2059111Z     
2025-08-30T09:58:47.2059214Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2059300Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2059380Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2059575Z         """
2025-08-30T09:58:47.2059669Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2059730Z         try:
2025-08-30T09:58:47.2059818Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2059887Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2059892Z 
2025-08-30T09:58:47.2060065Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2060166Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2060328Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2060387Z     ???
2025-08-30T09:58:47.2060543Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2060677Z     ???
2025-08-30T09:58:47.2060940Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2061000Z     ???
2025-08-30T09:58:47.2061101Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2061106Z 
2025-08-30T09:58:47.2061167Z >   ???
2025-08-30T09:58:47.2061239Z E   KeyError: 'date'
2025-08-30T09:58:47.2061244Z 
2025-08-30T09:58:47.2061359Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2061363Z 
2025-08-30T09:58:47.2061520Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2061524Z 
2025-08-30T09:58:47.2061964Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2062043Z fee = <MagicMock id='140075127434192'>
2025-08-30T09:58:47.2062206Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc3d1dd0>
2025-08-30T09:58:47.2062405Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2062410Z 
2025-08-30T09:58:47.2062632Z     def test_backtest_timedout_entry_orders(default_conf, fee, mocker, testdatadir) -> None:
2025-08-30T09:58:47.2062757Z         # This strategy intentionally places unfillable orders.
2025-08-30T09:58:47.2062911Z         default_conf["strategy"] = "StrategyTestV3CustomEntryPrice"
2025-08-30T09:58:47.2063005Z         default_conf["startup_candle_count"] = 0
2025-08-30T09:58:47.2063129Z         # Cancel unfilled order after 4 minutes on 5m timeframe.
2025-08-30T09:58:47.2063235Z         default_conf["unfilledtimeout"] = {"entry": 4}
2025-08-30T09:58:47.2063322Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2063698Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2063884Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2063964Z         patch_exchange(mocker)
2025-08-30T09:58:47.2064052Z         default_conf["max_open_trades"] = 1
2025-08-30T09:58:47.2064144Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2064286Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2064450Z         # Testing dataframe contains 11 candles. Expecting 10 timed out orders.
2025-08-30T09:58:47.2064579Z         timerange = TimeRange("date", "date", 1517227800, 1517231100)
2025-08-30T09:58:47.2064660Z         data = history.load_data(
2025-08-30T09:58:47.2064858Z             datadir=testdatadir, timeframe="5m", pairs=["UNITTEST/BTC"], timerange=timerange
2025-08-30T09:58:47.2064916Z         )
2025-08-30T09:58:47.2065012Z >       min_date, max_date = get_timerange(data)
2025-08-30T09:58:47.2065080Z                              ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2065085Z 
2025-08-30T09:58:47.2065177Z tests/optimize/test_backtesting.py:1228: 
2025-08-30T09:58:47.2065281Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2065431Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.2065629Z     timeranges = [
2025-08-30T09:58:47.2065765Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.2065922Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.2065980Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.2066165Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2066251Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2066315Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2066412Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2066417Z 
2025-08-30T09:58:47.2066580Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2066641Z key = 'date'
2025-08-30T09:58:47.2066771Z 
2025-08-30T09:58:47.2066848Z     def get_loc(self, key):
2025-08-30T09:58:47.2066904Z         """
2025-08-30T09:58:47.2067064Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2067129Z     
2025-08-30T09:58:47.2067192Z         Parameters
2025-08-30T09:58:47.2067256Z         ----------
2025-08-30T09:58:47.2067317Z         key : label
2025-08-30T09:58:47.2067372Z     
2025-08-30T09:58:47.2067429Z         Returns
2025-08-30T09:58:47.2067491Z         -------
2025-08-30T09:58:47.2067614Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2067667Z     
2025-08-30T09:58:47.2067730Z         Examples
2025-08-30T09:58:47.2067791Z         --------
2025-08-30T09:58:47.2067879Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2067956Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2068016Z         1
2025-08-30T09:58:47.2068070Z     
2025-08-30T09:58:47.2068170Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2068254Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2068321Z         slice(1, 3, None)
2025-08-30T09:58:47.2068376Z     
2025-08-30T09:58:47.2068484Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2068565Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2068645Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2068701Z         """
2025-08-30T09:58:47.2068794Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2068851Z         try:
2025-08-30T09:58:47.2068940Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2069017Z         except KeyError as err:
2025-08-30T09:58:47.2069104Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2069193Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2069305Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2069366Z             ):
2025-08-30T09:58:47.2069452Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2069530Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2069605Z E           KeyError: 'date'
2025-08-30T09:58:47.2069614Z 
2025-08-30T09:58:47.2069805Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2069942Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2070055Z 2025-08-30 09:54:55 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2070180Z 2025-08-30 09:54:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2070257Z 2025-08-30 09:54:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2070352Z 2025-08-30 09:54:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2070474Z 2025-08-30 09:54:55 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2070588Z 2025-08-30 09:54:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2070986Z 2025-08-30 09:54:55 DEBUG Searching for IStrategy StrategyTestV3CustomEntryPrice in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2071480Z 2025-08-30 09:54:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2071832Z 2025-08-30 09:54:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/__pycache__
2025-08-30T09:58:47.2072098Z 2025-08-30 09:54:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/broken_strats
2025-08-30T09:58:47.2072664Z 2025-08-30 09:54:55 INFO Using resolved strategy StrategyTestV3CustomEntryPrice from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3_custom_entry_price.py'...
2025-08-30T09:58:47.2072759Z 2025-08-30 09:54:55 INFO Found no parameter file.
2025-08-30T09:58:47.2073122Z 2025-08-30 09:54:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2073305Z 2025-08-30 09:54:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2073593Z 2025-08-30 09:54:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2073795Z 2025-08-30 09:54:55 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2073987Z 2025-08-30 09:54:55 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2074191Z 2025-08-30 09:54:55 INFO Override strategy 'startup_candle_count' with value in config file: 0.
2025-08-30T09:58:47.2074417Z 2025-08-30 09:54:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 4}.
2025-08-30T09:58:47.2074607Z 2025-08-30 09:54:55 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2074800Z 2025-08-30 09:54:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2074913Z 2025-08-30 09:54:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2075022Z 2025-08-30 09:54:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2075139Z 2025-08-30 09:54:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2075292Z 2025-08-30 09:54:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2075449Z 2025-08-30 09:54:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2075578Z 2025-08-30 09:54:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2075716Z 2025-08-30 09:54:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2076023Z 2025-08-30 09:54:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2076212Z 2025-08-30 09:54:55 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2076327Z 2025-08-30 09:54:55 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2076438Z 2025-08-30 09:54:55 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2076564Z 2025-08-30 09:54:55 INFO Strategy using startup_candle_count: 0
2025-08-30T09:58:47.2076704Z 2025-08-30 09:54:55 INFO Strategy using unfilledtimeout: {'entry': 4}
2025-08-30T09:58:47.2076819Z 2025-08-30 09:54:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2076943Z 2025-08-30 09:54:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2077086Z 2025-08-30 09:54:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2077203Z 2025-08-30 09:54:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2077345Z 2025-08-30 09:54:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2077495Z 2025-08-30 09:54:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2077639Z 2025-08-30 09:54:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2077787Z 2025-08-30 09:54:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2077897Z 2025-08-30 09:54:55 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2078000Z 2025-08-30 09:54:55 INFO Validating configuration ...
2025-08-30T09:58:47.2078479Z 2025-08-30 09:54:55 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2078758Z 2025-08-30 09:54:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2079366Z 2025-08-30 09:54:55 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2079674Z 2025-08-30 09:54:55 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2079854Z 2025-08-30 09:54:55 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2080124Z 2025-08-30 09:54:55 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2080240Z 2025-08-30 09:54:55 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2080473Z 2025-08-30 09:54:55 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2080590Z 2025-08-30 09:54:55 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2080743Z 2025-08-30 09:54:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2080930Z 2025-08-30 09:54:55 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2081091Z 2025-08-30 09:54:55 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2081233Z _______________________ test_backtest_start_multi_strat ________________________
2025-08-30T09:58:47.2081238Z 
2025-08-30T09:58:47.2081400Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2081461Z key = 'date'
2025-08-30T09:58:47.2081467Z 
2025-08-30T09:58:47.2081542Z     def get_loc(self, key):
2025-08-30T09:58:47.2081604Z         """
2025-08-30T09:58:47.2081752Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2081811Z     
2025-08-30T09:58:47.2081873Z         Parameters
2025-08-30T09:58:47.2081938Z         ----------
2025-08-30T09:58:47.2082001Z         key : label
2025-08-30T09:58:47.2082055Z     
2025-08-30T09:58:47.2082116Z         Returns
2025-08-30T09:58:47.2082174Z         -------
2025-08-30T09:58:47.2082293Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2082346Z     
2025-08-30T09:58:47.2082408Z         Examples
2025-08-30T09:58:47.2082465Z         --------
2025-08-30T09:58:47.2082550Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2082631Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2082687Z         1
2025-08-30T09:58:47.2082741Z     
2025-08-30T09:58:47.2082836Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2082919Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2082985Z         slice(1, 3, None)
2025-08-30T09:58:47.2083040Z     
2025-08-30T09:58:47.2083145Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2083232Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2083313Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2083481Z         """
2025-08-30T09:58:47.2083575Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2083633Z         try:
2025-08-30T09:58:47.2083721Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2083794Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2083799Z 
2025-08-30T09:58:47.2083968Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2084067Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2084234Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2084295Z     ???
2025-08-30T09:58:47.2084450Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2084508Z     ???
2025-08-30T09:58:47.2084887Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2084942Z     ???
2025-08-30T09:58:47.2085040Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2085048Z 
2025-08-30T09:58:47.2085104Z >   ???
2025-08-30T09:58:47.2085171Z E   KeyError: 'date'
2025-08-30T09:58:47.2085177Z 
2025-08-30T09:58:47.2085292Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2085300Z 
2025-08-30T09:58:47.2085454Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2085459Z 
2025-08-30T09:58:47.2086143Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2086305Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c899cad0>
2025-08-30T09:58:47.2086460Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594425950>
2025-08-30T09:58:47.2086658Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2086662Z 
2025-08-30T09:58:47.2086779Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2086966Z     def test_backtest_start_multi_strat(default_conf, mocker, caplog, testdatadir):
2025-08-30T09:58:47.2087042Z         default_conf.update(
2025-08-30T09:58:47.2087098Z             {
2025-08-30T09:58:47.2087181Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2087259Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2087336Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2087426Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2087482Z             }
2025-08-30T09:58:47.2087545Z         )
2025-08-30T09:58:47.2087620Z         patch_exchange(mocker)
2025-08-30T09:58:47.2087703Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2087772Z             return_value={
2025-08-30T09:58:47.2087890Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2087972Z                 "config": default_conf,
2025-08-30T09:58:47.2088039Z                 "locks": [],
2025-08-30T09:58:47.2088113Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2088201Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2088278Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2088357Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2088434Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2088515Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2088590Z                 "final_balance": 1000,
2025-08-30T09:58:47.2088646Z             }
2025-08-30T09:58:47.2088708Z         )
2025-08-30T09:58:47.2088780Z         mocker.patch(
2025-08-30T09:58:47.2088966Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2089068Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2089133Z         )
2025-08-30T09:58:47.2089368Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2089445Z         text_table_mock = MagicMock()
2025-08-30T09:58:47.2089527Z         tag_metrics_mock = MagicMock()
2025-08-30T09:58:47.2089604Z         strattable_mock = MagicMock()
2025-08-30T09:58:47.2089679Z         strat_summary = MagicMock()
2025-08-30T09:58:47.2089738Z     
2025-08-30T09:58:47.2089816Z         mocker.patch.multiple(
2025-08-30T09:58:47.2089935Z             "freqtrade.optimize.optimize_reports.bt_output",
2025-08-30T09:58:47.2090024Z             text_table_bt_results=text_table_mock,
2025-08-30T09:58:47.2090114Z             text_table_strategy=strattable_mock,
2025-08-30T09:58:47.2090174Z         )
2025-08-30T09:58:47.2090251Z         mocker.patch.multiple(
2025-08-30T09:58:47.2090396Z             "freqtrade.optimize.optimize_reports.optimize_reports",
2025-08-30T09:58:47.2090580Z             generate_pair_metrics=MagicMock(),
2025-08-30T09:58:47.2090668Z             generate_tag_metrics=tag_metrics_mock,
2025-08-30T09:58:47.2090766Z             generate_strategy_comparison=strat_summary,
2025-08-30T09:58:47.2090854Z             generate_daily_stats=MagicMock(),
2025-08-30T09:58:47.2090911Z         )
2025-08-30T09:58:47.2091056Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.2091117Z     
2025-08-30T09:58:47.2091176Z         args = [
2025-08-30T09:58:47.2091247Z             "backtesting",
2025-08-30T09:58:47.2091315Z             "--config",
2025-08-30T09:58:47.2091382Z             "config.json",
2025-08-30T09:58:47.2091446Z             "--datadir",
2025-08-30T09:58:47.2091515Z             str(testdatadir),
2025-08-30T09:58:47.2091741Z             "--strategy-path",
2025-08-30T09:58:47.2091858Z             str(Path(__file__).parents[1] / "strategy/strats"),
2025-08-30T09:58:47.2091923Z             "--timeframe",
2025-08-30T09:58:47.2091989Z             "1m",
2025-08-30T09:58:47.2092054Z             "--timerange",
2025-08-30T09:58:47.2092121Z             "1510694220-1510700340",
2025-08-30T09:58:47.2092209Z             "--enable-position-stacking",
2025-08-30T09:58:47.2092281Z             "--strategy-list",
2025-08-30T09:58:47.2092355Z             CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.2092425Z             "StrategyTestV2",
2025-08-30T09:58:47.2092483Z         ]
2025-08-30T09:58:47.2092551Z         args = get_args(args)
2025-08-30T09:58:47.2092625Z >       start_backtesting(args)
2025-08-30T09:58:47.2092630Z 
2025-08-30T09:58:47.2092720Z tests/optimize/test_backtesting.py:2092: 
2025-08-30T09:58:47.2092824Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2092985Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.2093057Z     backtesting.start()
2025-08-30T09:58:47.2093168Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.2093257Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.2093321Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2093547Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.2093649Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.2093722Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2093868Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.2093930Z     timeranges = [
2025-08-30T09:58:47.2094060Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.2094214Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.2094274Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.2094468Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2094550Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2094617Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2094714Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2094723Z 
2025-08-30T09:58:47.2094882Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2094946Z key = 'date'
2025-08-30T09:58:47.2094951Z 
2025-08-30T09:58:47.2095022Z     def get_loc(self, key):
2025-08-30T09:58:47.2095079Z         """
2025-08-30T09:58:47.2095227Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2095285Z     
2025-08-30T09:58:47.2095347Z         Parameters
2025-08-30T09:58:47.2095409Z         ----------
2025-08-30T09:58:47.2095473Z         key : label
2025-08-30T09:58:47.2095529Z     
2025-08-30T09:58:47.2095587Z         Returns
2025-08-30T09:58:47.2095644Z         -------
2025-08-30T09:58:47.2095778Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2095835Z     
2025-08-30T09:58:47.2095894Z         Examples
2025-08-30T09:58:47.2095956Z         --------
2025-08-30T09:58:47.2096169Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2096245Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2096301Z         1
2025-08-30T09:58:47.2096358Z     
2025-08-30T09:58:47.2096447Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2096525Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2096594Z         slice(1, 3, None)
2025-08-30T09:58:47.2096647Z     
2025-08-30T09:58:47.2096747Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2096829Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2096909Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2096964Z         """
2025-08-30T09:58:47.2097054Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2097222Z         try:
2025-08-30T09:58:47.2097314Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2097388Z         except KeyError as err:
2025-08-30T09:58:47.2097480Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2097572Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2097680Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2097737Z             ):
2025-08-30T09:58:47.2097825Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2097900Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2097968Z E           KeyError: 'date'
2025-08-30T09:58:47.2097973Z 
2025-08-30T09:58:47.2098163Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2098301Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2098408Z 2025-08-30 09:54:57 INFO Using config: config.json ...
2025-08-30T09:58:47.2098512Z 2025-08-30 09:54:57 INFO Enabling colorized output.
2025-08-30T09:58:47.2098593Z 2025-08-30 09:54:57 INFO Logfile configured
2025-08-30T09:58:47.2098675Z 2025-08-30 09:54:57 INFO Verbosity set to 3
2025-08-30T09:58:47.2098992Z 2025-08-30 09:54:57 INFO Using additional Strategy lookup path: /home/runner/work/freqtrade/freqtrade/tests/strategy/strats
2025-08-30T09:58:47.2099179Z 2025-08-30 09:54:57 INFO Parameter -i/--timeframe detected ... Using timeframe: 1m ...
2025-08-30T09:58:47.2099334Z 2025-08-30 09:54:57 INFO Parameter --enable-position-stacking detected ...
2025-08-30T09:58:47.2099434Z 2025-08-30 09:54:57 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.2099596Z 2025-08-30 09:54:57 INFO Parameter --timerange detected: 1510694220-1510700340 ...
2025-08-30T09:58:47.2099912Z 2025-08-30 09:54:57 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_start_multi_stra6/user_data ...
2025-08-30T09:58:47.2100149Z 2025-08-30 09:54:57 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.2100268Z 2025-08-30 09:54:57 INFO Using strategy list of 2 strategies
2025-08-30T09:58:47.2100409Z 2025-08-30 09:54:57 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.2100527Z 2025-08-30 09:54:57 INFO Parameter --cache=day detected ...
2025-08-30T09:58:47.2100666Z 2025-08-30 09:54:57 INFO Filter trades by timerange: 1510694220-1510700340
2025-08-30T09:58:47.2100754Z 2025-08-30 09:54:57 INFO Checking exchange...
2025-08-30T09:58:47.2100977Z 2025-08-30 09:54:57 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.2101092Z 2025-08-30 09:54:57 INFO Using pairlist from configuration.
2025-08-30T09:58:47.2101194Z 2025-08-30 09:54:57 INFO Validating configuration ...
2025-08-30T09:58:47.2101315Z 2025-08-30 09:54:57 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.2101425Z 2025-08-30 09:54:57 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2101553Z 2025-08-30 09:54:57 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2101631Z 2025-08-30 09:54:57 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2101725Z 2025-08-30 09:54:57 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2101957Z 2025-08-30 09:54:57 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2102071Z 2025-08-30 09:54:57 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2102390Z 2025-08-30 09:54:57 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2103187Z 2025-08-30 09:54:57 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2103809Z 2025-08-30 09:54:57 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2103909Z 2025-08-30 09:54:57 INFO Found no parameter file.
2025-08-30T09:58:47.2104341Z 2025-08-30 09:54:57 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2104524Z 2025-08-30 09:54:57 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2104708Z 2025-08-30 09:54:57 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2104910Z 2025-08-30 09:54:57 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2105100Z 2025-08-30 09:54:57 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2105460Z 2025-08-30 09:54:57 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2105660Z 2025-08-30 09:54:57 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.2105868Z 2025-08-30 09:54:57 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.2106099Z 2025-08-30 09:54:57 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.2106300Z 2025-08-30 09:54:57 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.2106492Z 2025-08-30 09:54:57 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2106686Z 2025-08-30 09:54:57 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2106794Z 2025-08-30 09:54:57 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2106898Z 2025-08-30 09:54:57 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2107013Z 2025-08-30 09:54:57 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2107167Z 2025-08-30 09:54:57 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2107324Z 2025-08-30 09:54:57 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2107455Z 2025-08-30 09:54:57 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2107594Z 2025-08-30 09:54:57 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2107903Z 2025-08-30 09:54:57 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2108092Z 2025-08-30 09:54:57 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2108206Z 2025-08-30 09:54:57 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2108318Z 2025-08-30 09:54:57 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2108442Z 2025-08-30 09:54:57 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2108714Z 2025-08-30 09:54:57 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2108836Z 2025-08-30 09:54:57 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2108960Z 2025-08-30 09:54:57 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2109103Z 2025-08-30 09:54:57 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2109223Z 2025-08-30 09:54:57 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2109478Z 2025-08-30 09:54:57 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2109628Z 2025-08-30 09:54:57 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2109773Z 2025-08-30 09:54:57 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2109916Z 2025-08-30 09:54:57 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2110028Z 2025-08-30 09:54:57 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2110133Z 2025-08-30 09:54:57 INFO Validating configuration ...
2025-08-30T09:58:47.2110456Z 2025-08-30 09:54:57 DEBUG Searching for IStrategy StrategyTestV2 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2110949Z 2025-08-30 09:54:57 INFO Using resolved strategy StrategyTestV2 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v2.py'...
2025-08-30T09:58:47.2111047Z 2025-08-30 09:54:57 INFO Found no parameter file.
2025-08-30T09:58:47.2111249Z 2025-08-30 09:54:57 WARNING DEPRECATED: Using 'use_sell_signal' moved to 'use_exit_signal'.
2025-08-30T09:58:47.2111536Z 2025-08-30 09:54:57 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2111710Z 2025-08-30 09:54:57 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2111894Z 2025-08-30 09:54:57 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2112085Z 2025-08-30 09:54:57 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2112273Z 2025-08-30 09:54:57 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2112639Z 2025-08-30 09:54:57 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2112836Z 2025-08-30 09:54:57 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.2113040Z 2025-08-30 09:54:57 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.2113276Z 2025-08-30 09:54:57 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.2113664Z 2025-08-30 09:54:57 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.2113857Z 2025-08-30 09:54:57 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2114056Z 2025-08-30 09:54:57 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2114158Z 2025-08-30 09:54:57 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2114268Z 2025-08-30 09:54:57 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2114390Z 2025-08-30 09:54:57 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2114537Z 2025-08-30 09:54:57 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2114700Z 2025-08-30 09:54:57 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2114832Z 2025-08-30 09:54:57 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2114969Z 2025-08-30 09:54:57 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2115275Z 2025-08-30 09:54:57 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2115463Z 2025-08-30 09:54:57 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2115580Z 2025-08-30 09:54:57 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2115691Z 2025-08-30 09:54:57 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2115817Z 2025-08-30 09:54:57 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2116096Z 2025-08-30 09:54:57 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2116362Z 2025-08-30 09:54:57 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2116484Z 2025-08-30 09:54:57 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2116627Z 2025-08-30 09:54:57 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2116744Z 2025-08-30 09:54:57 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2116882Z 2025-08-30 09:54:57 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2117036Z 2025-08-30 09:54:57 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2117178Z 2025-08-30 09:54:57 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2117318Z 2025-08-30 09:54:57 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2117543Z 2025-08-30 09:54:57 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2117649Z 2025-08-30 09:54:57 INFO Validating configuration ...
2025-08-30T09:58:47.2118005Z 2025-08-30 09:54:57 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2118286Z 2025-08-30 09:54:57 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2118722Z 2025-08-30 09:54:57 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2118918Z 2025-08-30 09:54:57 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2119092Z 2025-08-30 09:54:57 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2119222Z 2025-08-30 09:54:57 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.2119439Z 2025-08-30 09:54:57 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 118 - after: 123 - 4.24%
2025-08-30T09:58:47.2119612Z _________ test_backtest_start_multi_strat_caching[day-start_delta1-2] __________
2025-08-30T09:58:47.2119626Z 
2025-08-30T09:58:47.2120200Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2120362Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584e7a210>
2025-08-30T09:58:47.2120524Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c87ab950>
2025-08-30T09:58:47.2120723Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2120824Z run_id = '2', start_delta = {'days': 1}, cache = 'day'
2025-08-30T09:58:47.2120830Z 
2025-08-30T09:58:47.2120944Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2121067Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2121283Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2121439Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2121539Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2121698Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2121756Z     ):
2025-08-30T09:58:47.2121835Z         default_conf.update(
2025-08-30T09:58:47.2121893Z             {
2025-08-30T09:58:47.2121972Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2122052Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2122131Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2122217Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2122273Z             }
2025-08-30T09:58:47.2122333Z         )
2025-08-30T09:58:47.2122413Z         patch_exchange(mocker)
2025-08-30T09:58:47.2122492Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2122560Z             return_value={
2025-08-30T09:58:47.2122677Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2122850Z                 "config": default_conf,
2025-08-30T09:58:47.2122917Z                 "locks": [],
2025-08-30T09:58:47.2122995Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2123074Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2123150Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2123232Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2123308Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2123559Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2123654Z                 "final_balance": 1000,
2025-08-30T09:58:47.2123717Z             }
2025-08-30T09:58:47.2123772Z         )
2025-08-30T09:58:47.2123841Z         mocker.patch(
2025-08-30T09:58:47.2124157Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2124271Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2124328Z         )
2025-08-30T09:58:47.2124568Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2124787Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2124842Z     
2025-08-30T09:58:47.2124942Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2125092Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2125161Z         if cache == "none":
2025-08-30T09:58:47.2125258Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2125331Z         elif cache == "day":
2025-08-30T09:58:47.2125423Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2125492Z         elif cache == "week":
2025-08-30T09:58:47.2125594Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2125667Z         elif cache == "month":
2025-08-30T09:58:47.2125761Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2125847Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2125917Z             return_value={
2025-08-30T09:58:47.2126114Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2126302Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2126364Z             }
2025-08-30T09:58:47.2126420Z         )
2025-08-30T09:58:47.2126503Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2126570Z             side_effect=[
2025-08-30T09:58:47.2126631Z                 {
2025-08-30T09:58:47.2126738Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2126824Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2126951Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2127009Z                 },
2025-08-30T09:58:47.2127067Z                 {
2025-08-30T09:58:47.2127178Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2127261Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2127370Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2127427Z                 },
2025-08-30T09:58:47.2127486Z             ]
2025-08-30T09:58:47.2127542Z         )
2025-08-30T09:58:47.2127660Z         mocker.patch(
2025-08-30T09:58:47.2127812Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2127931Z             return_value=[
2025-08-30T09:58:47.2128267Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2128328Z             ],
2025-08-30T09:58:47.2128387Z         )
2025-08-30T09:58:47.2128473Z         mocker.patch.multiple(
2025-08-30T09:58:47.2128579Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2128687Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2128915Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2128971Z         )
2025-08-30T09:58:47.2129234Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2129239Z 
2025-08-30T09:58:47.2129331Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2129436Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2129624Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2129700Z     return self._start_patch(
2025-08-30T09:58:47.2129893Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2129974Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2130122Z                        ^^^^^^^^^
2025-08-30T09:58:47.2130341Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2130478Z     result = self.__enter__()
2025-08-30T09:58:47.2130610Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2131002Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2131091Z     original, local = self.get_original()
2025-08-30T09:58:47.2131163Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2131264Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2131269Z 
2025-08-30T09:58:47.2131383Z self = <unittest.mock._patch object at 0x7f6584e58a90>
2025-08-30T09:58:47.2131388Z 
2025-08-30T09:58:47.2131463Z     def get_original(self):
2025-08-30T09:58:47.2131535Z         target = self.getter()
2025-08-30T09:58:47.2131605Z         name = self.attribute
2025-08-30T09:58:47.2131660Z     
2025-08-30T09:58:47.2131736Z         original = DEFAULT
2025-08-30T09:58:47.2131802Z         local = False
2025-08-30T09:58:47.2131857Z     
2025-08-30T09:58:47.2131917Z         try:
2025-08-30T09:58:47.2132001Z             original = target.__dict__[name]
2025-08-30T09:58:47.2132092Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2132183Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2132244Z         else:
2025-08-30T09:58:47.2132310Z             local = True
2025-08-30T09:58:47.2132364Z     
2025-08-30T09:58:47.2132493Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2132562Z             self.create = True
2025-08-30T09:58:47.2132617Z     
2025-08-30T09:58:47.2132710Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2132797Z >           raise AttributeError(
2025-08-30T09:58:47.2132906Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2132963Z             )
2025-08-30T09:58:47.2133684Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2133696Z 
2025-08-30T09:58:47.2133937Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2134113Z __ test_backtest_one_detail_futures_funding_fees[True-50-3000-55--1.18038144] __
2025-08-30T09:58:47.2134118Z 
2025-08-30T09:58:47.2134591Z default_conf_usdt = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2134669Z fee = <MagicMock id='140075466026576'>
2025-08-30T09:58:47.2134826Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65847202d0>
2025-08-30T09:58:47.2135026Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2135166Z use_detail = True, entries = 50, max_stake = 3000, ff_updates = 55
2025-08-30T09:58:47.2135239Z expected_ff = -1.18038144
2025-08-30T09:58:47.2135245Z 
2025-08-30T09:58:47.2135330Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.2135604Z         "use_detail,entries,max_stake,ff_updates,expected_ff",
2025-08-30T09:58:47.2135662Z         [
2025-08-30T09:58:47.2135745Z             (True, 50, 3000, 55, -1.18038144),
2025-08-30T09:58:47.2135819Z             (False, 6, 360, 11, -0.14679994),
2025-08-30T09:58:47.2135877Z         ],
2025-08-30T09:58:47.2135932Z     )
2025-08-30T09:58:47.2136043Z     def test_backtest_one_detail_futures_funding_fees(
2025-08-30T09:58:47.2136112Z         default_conf_usdt,
2025-08-30T09:58:47.2136171Z         fee,
2025-08-30T09:58:47.2136233Z         mocker,
2025-08-30T09:58:47.2136297Z         testdatadir,
2025-08-30T09:58:47.2136357Z         use_detail,
2025-08-30T09:58:47.2136415Z         entries,
2025-08-30T09:58:47.2136481Z         max_stake,
2025-08-30T09:58:47.2136543Z         ff_updates,
2025-08-30T09:58:47.2136718Z         expected_ff,
2025-08-30T09:58:47.2136789Z     ) -> None:
2025-08-30T09:58:47.2136847Z         """
2025-08-30T09:58:47.2137029Z         Funding fees are expected to differ, as the maximum position size differs.
2025-08-30T09:58:47.2137091Z         """
2025-08-30T09:58:47.2137194Z         default_conf_usdt["use_exit_signal"] = False
2025-08-30T09:58:47.2137292Z         default_conf_usdt["trading_mode"] = "futures"
2025-08-30T09:58:47.2137385Z         default_conf_usdt["margin_mode"] = "isolated"
2025-08-30T09:58:47.2137522Z         default_conf_usdt["candle_type_def"] = CandleType.FUTURES
2025-08-30T09:58:47.2137613Z         default_conf_usdt["minimal_roi"] = {"0": 1}
2025-08-30T09:58:47.2137705Z         default_conf_usdt["dry_run_wallet"] = 100000
2025-08-30T09:58:47.2137764Z     
2025-08-30T09:58:47.2137852Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2138014Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2138188Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2138262Z         mocker.patch(
2025-08-30T09:58:47.2138446Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2138560Z             PropertyMock(return_value=["XRP/USDT:USDT"]),
2025-08-30T09:58:47.2138623Z         )
2025-08-30T09:58:47.2138806Z         mocker.patch(f"{EXMS}.get_maintenance_ratio_and_amt", return_value=(0.01, 0.01))
2025-08-30T09:58:47.2138893Z         default_conf_usdt["timeframe"] = "1h"
2025-08-30T09:58:47.2138961Z         if use_detail:
2025-08-30T09:58:47.2139062Z             default_conf_usdt["timeframe_detail"] = "5m"
2025-08-30T09:58:47.2139137Z         patch_exchange(mocker)
2025-08-30T09:58:47.2139193Z     
2025-08-30T09:58:47.2139282Z         def advise_entry(df, *args, **kwargs):
2025-08-30T09:58:47.2139370Z             # Mock function to force several entries
2025-08-30T09:58:47.2139446Z             df.loc[:, "enter_long"] = 1
2025-08-30T09:58:47.2139516Z             return df
2025-08-30T09:58:47.2139571Z     
2025-08-30T09:58:47.2139697Z         def adjust_trade_position(trade, current_time, **kwargs):
2025-08-30T09:58:47.2139830Z             if current_time > datetime(2021, 11, 18, 2, 0, 0, tzinfo=UTC):
2025-08-30T09:58:47.2139900Z                 return None
2025-08-30T09:58:47.2139988Z             return default_conf_usdt["stake_amount"]
2025-08-30T09:58:47.2140044Z     
2025-08-30T09:58:47.2140139Z         default_conf_usdt["max_open_trades"] = 1
2025-08-30T09:58:47.2140193Z     
2025-08-30T09:58:47.2140289Z         backtesting = Backtesting(default_conf_usdt)
2025-08-30T09:58:47.2140446Z         ff_spy = mocker.spy(backtesting.exchange, "calculate_funding_fees")
2025-08-30T09:58:47.2140577Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2140715Z         backtesting.strategy.populate_entry_trend = advise_entry
2025-08-30T09:58:47.2140882Z         backtesting.strategy.adjust_trade_position = adjust_trade_position
2025-08-30T09:58:47.2141006Z         backtesting.strategy.leverage = lambda **kwargs: 1
2025-08-30T09:58:47.2141139Z         backtesting.strategy.position_adjustment_enable = True
2025-08-30T09:58:47.2141323Z         pair = "XRP/USDT:USDT"
2025-08-30T09:58:47.2141440Z         # Pick a timerange adapted to the pair we use to test
2025-08-30T09:58:47.2141569Z         timerange = TimeRange.parse_timerange("20211117-20211119")
2025-08-30T09:58:47.2141646Z         data = history.load_data(
2025-08-30T09:58:47.2141731Z             datadir=Path(testdatadir),
2025-08-30T09:58:47.2141802Z             timeframe="1h",
2025-08-30T09:58:47.2141870Z             pairs=[pair],
2025-08-30T09:58:47.2141945Z             timerange=timerange,
2025-08-30T09:58:47.2142035Z             candle_type=CandleType.FUTURES,
2025-08-30T09:58:47.2142091Z         )
2025-08-30T09:58:47.2142174Z >       backtesting._load_bt_data_detail()
2025-08-30T09:58:47.2142179Z 
2025-08-30T09:58:47.2142353Z tests/optimize/test_backtesting.py:1181: 
2025-08-30T09:58:47.2142459Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2142607Z freqtrade/optimize/backtesting.py:403: in _load_bt_data_detail
2025-08-30T09:58:47.2142769Z     self.futures_data[pair] = self.exchange.combine_funding_and_mark(
2025-08-30T09:58:47.2142925Z freqtrade/exchange/exchange.py:3649: in combine_funding_and_mark
2025-08-30T09:58:47.2143000Z     return mark_rates.merge(
2025-08-30T09:58:47.2143175Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:10839: in merge
2025-08-30T09:58:47.2143242Z     return merge(
2025-08-30T09:58:47.2143636Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:170: in merge
2025-08-30T09:58:47.2143718Z     op = _MergeOperation(
2025-08-30T09:58:47.2143928Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:794: in __init__
2025-08-30T09:58:47.2144003Z     ) = self._get_merge_keys()
2025-08-30T09:58:47.2144065Z         ^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2144304Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:1298: in _get_merge_keys
2025-08-30T09:58:47.2144433Z     right_keys.append(right._get_label_or_level_values(rk))
2025-08-30T09:58:47.2144517Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2144616Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2144625Z 
2025-08-30T09:58:47.2144735Z self =                        index    open  high  low  close  volume
2025-08-30T09:58:47.2144885Z 0  2021-11-18 00:00:00+00:00  0.0001   0.0  0.0    0.0 ... 0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.2144988Z 90 2021-12-18 00:00:00+00:00  0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.2144997Z 
2025-08-30T09:58:47.2145062Z [91 rows x 6 columns]
2025-08-30T09:58:47.2145128Z key = 'date', axis = 0
2025-08-30T09:58:47.2145133Z 
2025-08-30T09:58:47.2145191Z     @final
2025-08-30T09:58:47.2145385Z     def _get_label_or_level_values(self, key: Level, axis: AxisInt = 0) -> ArrayLike:
2025-08-30T09:58:47.2145441Z         """
2025-08-30T09:58:47.2145594Z         Return a 1-D array of values associated with `key`, a label or level
2025-08-30T09:58:47.2145673Z         from the given `axis`.
2025-08-30T09:58:47.2145728Z     
2025-08-30T09:58:47.2145800Z         Retrieval logic:
2025-08-30T09:58:47.2145940Z           - (axis=0): Return column values if `key` matches a column label.
2025-08-30T09:58:47.2146088Z             Otherwise return index level values if `key` matches an index
2025-08-30T09:58:47.2146148Z             level.
2025-08-30T09:58:47.2146274Z           - (axis=1): Return row values if `key` matches an index label.
2025-08-30T09:58:47.2146419Z             Otherwise return column level values if 'key' matches a column
2025-08-30T09:58:47.2146478Z             level
2025-08-30T09:58:47.2146532Z     
2025-08-30T09:58:47.2146597Z         Parameters
2025-08-30T09:58:47.2146657Z         ----------
2025-08-30T09:58:47.2146721Z         key : Hashable
2025-08-30T09:58:47.2146796Z             Label or level name.
2025-08-30T09:58:47.2146871Z         axis : int, default 0
2025-08-30T09:58:47.2147015Z             Axis that levels are associated with (0 for index, 1 for columns)
2025-08-30T09:58:47.2147203Z     
2025-08-30T09:58:47.2147265Z         Returns
2025-08-30T09:58:47.2147327Z         -------
2025-08-30T09:58:47.2147407Z         np.ndarray or ExtensionArray
2025-08-30T09:58:47.2147462Z     
2025-08-30T09:58:47.2147523Z         Raises
2025-08-30T09:58:47.2147581Z         ------
2025-08-30T09:58:47.2147640Z         KeyError
2025-08-30T09:58:47.2147742Z             if `key` matches neither a label nor a level
2025-08-30T09:58:47.2147802Z         ValueError
2025-08-30T09:58:47.2147885Z             if `key` matches multiple labels
2025-08-30T09:58:47.2147941Z         """
2025-08-30T09:58:47.2148025Z         axis = self._get_axis_number(axis)
2025-08-30T09:58:47.2148159Z         other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]
2025-08-30T09:58:47.2148212Z     
2025-08-30T09:58:47.2148421Z         if self._is_label_reference(key, axis=axis):
2025-08-30T09:58:47.2148541Z             self._check_label_or_level_ambiguity(key, axis=axis)
2025-08-30T09:58:47.2148650Z             values = self.xs(key, axis=other_axes[0])._values
2025-08-30T09:58:47.2148752Z         elif self._is_level_reference(key, axis=axis):
2025-08-30T09:58:47.2148873Z             values = self.axes[axis].get_level_values(key)._values
2025-08-30T09:58:47.2148931Z         else:
2025-08-30T09:58:47.2149003Z >           raise KeyError(key)
2025-08-30T09:58:47.2149076Z E           KeyError: 'date'
2025-08-30T09:58:47.2149081Z 
2025-08-30T09:58:47.2149256Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:1911: KeyError
2025-08-30T09:58:47.2149396Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2149509Z 2025-08-30 09:54:57 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2149640Z 2025-08-30 09:54:57 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2149718Z 2025-08-30 09:54:57 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2149817Z 2025-08-30 09:54:57 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2149937Z 2025-08-30 09:54:57 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2150058Z 2025-08-30 09:54:57 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2150388Z 2025-08-30 09:54:57 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2150877Z 2025-08-30 09:54:57 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2151294Z 2025-08-30 09:54:57 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2151394Z 2025-08-30 09:54:57 INFO Found no parameter file.
2025-08-30T09:58:47.2151602Z 2025-08-30 09:54:57 INFO Override strategy 'minimal_roi' with value in config file: {'0': 1}.
2025-08-30T09:58:47.2151777Z 2025-08-30 09:54:57 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.2151959Z 2025-08-30 09:54:57 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2152155Z 2025-08-30 09:54:57 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.2152343Z 2025-08-30 09:54:57 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.2152606Z 2025-08-30 09:54:57 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2152808Z 2025-08-30 09:54:57 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2152995Z 2025-08-30 09:54:57 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2153109Z 2025-08-30 09:54:57 INFO Strategy using minimal_roi: {'0': 1}
2025-08-30T09:58:47.2153222Z 2025-08-30 09:54:57 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.2153325Z 2025-08-30 09:54:57 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2153549Z 2025-08-30 09:54:57 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2153994Z 2025-08-30 09:54:57 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2154290Z 2025-08-30 09:54:57 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2154432Z 2025-08-30 09:54:57 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2154578Z 2025-08-30 09:54:57 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2154884Z 2025-08-30 09:54:57 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2155075Z 2025-08-30 09:54:57 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2155320Z 2025-08-30 09:54:57 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.2155437Z 2025-08-30 09:54:57 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.2155562Z 2025-08-30 09:54:57 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2155734Z 2025-08-30 09:54:57 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2155857Z 2025-08-30 09:54:57 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2155979Z 2025-08-30 09:54:57 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2156124Z 2025-08-30 09:54:57 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2156246Z 2025-08-30 09:54:57 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2156385Z 2025-08-30 09:54:57 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2156536Z 2025-08-30 09:54:57 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2156685Z 2025-08-30 09:54:57 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2156831Z 2025-08-30 09:54:57 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2156943Z 2025-08-30 09:54:57 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2157058Z 2025-08-30 09:54:57 INFO Validating configuration ...
2025-08-30T09:58:47.2157409Z 2025-08-30 09:54:57 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2157692Z 2025-08-30 09:54:57 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2158133Z 2025-08-30 09:54:57 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2158350Z 2025-08-30 09:54:57 DEBUG Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2158569Z 2025-08-30 09:54:57 WARNING Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2158783Z 2025-08-30 09:54:57 DEBUG Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2158999Z 2025-08-30 09:54:57 WARNING Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2159207Z 2025-08-30 09:54:57 DEBUG Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2159425Z 2025-08-30 09:54:57 WARNING Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2159630Z 2025-08-30 09:54:57 DEBUG Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2159844Z 2025-08-30 09:54:57 WARNING Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2160050Z 2025-08-30 09:54:57 DEBUG Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2160259Z 2025-08-30 09:54:57 WARNING Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2160364Z 2025-08-30 09:54:57 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.2160539Z 2025-08-30 09:54:57 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2160769Z 2025-08-30 09:54:57 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2160880Z 2025-08-30 09:54:57 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2161104Z 2025-08-30 09:54:57 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2161217Z 2025-08-30 09:54:57 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2161372Z 2025-08-30 09:54:57 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2161555Z 2025-08-30 09:54:57 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2161720Z 2025-08-30 09:54:57 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2161951Z __________________________ test_data_to_dataframe_bt ___________________________
2025-08-30T09:58:47.2161957Z 
2025-08-30T09:58:47.2162117Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2162186Z key = 'date'
2025-08-30T09:58:47.2162191Z 
2025-08-30T09:58:47.2162264Z     def get_loc(self, key):
2025-08-30T09:58:47.2162320Z         """
2025-08-30T09:58:47.2162472Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2162529Z     
2025-08-30T09:58:47.2162593Z         Parameters
2025-08-30T09:58:47.2162661Z         ----------
2025-08-30T09:58:47.2162729Z         key : label
2025-08-30T09:58:47.2162785Z     
2025-08-30T09:58:47.2162843Z         Returns
2025-08-30T09:58:47.2162907Z         -------
2025-08-30T09:58:47.2163033Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2163089Z     
2025-08-30T09:58:47.2163150Z         Examples
2025-08-30T09:58:47.2163214Z         --------
2025-08-30T09:58:47.2163308Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2163580Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2163656Z         1
2025-08-30T09:58:47.2163713Z     
2025-08-30T09:58:47.2163812Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2163898Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2163976Z         slice(1, 3, None)
2025-08-30T09:58:47.2164032Z     
2025-08-30T09:58:47.2164134Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2164222Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2164305Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2164362Z         """
2025-08-30T09:58:47.2164455Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2164517Z         try:
2025-08-30T09:58:47.2164607Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2164675Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2164681Z 
2025-08-30T09:58:47.2164859Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2164963Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2165133Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2165198Z     ???
2025-08-30T09:58:47.2165355Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2165414Z     ???
2025-08-30T09:58:47.2165680Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2165735Z     ???
2025-08-30T09:58:47.2165834Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2165838Z 
2025-08-30T09:58:47.2165893Z >   ???
2025-08-30T09:58:47.2165964Z E   KeyError: 'date'
2025-08-30T09:58:47.2165969Z 
2025-08-30T09:58:47.2166086Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2166091Z 
2025-08-30T09:58:47.2166250Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2166255Z 
2025-08-30T09:58:47.2166698Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2167013Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc881650>
2025-08-30T09:58:47.2167213Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2167221Z 
2025-08-30T09:58:47.2167386Z     def test_data_to_dataframe_bt(default_conf, mocker, testdatadir) -> None:
2025-08-30T09:58:47.2167461Z         patch_exchange(mocker)
2025-08-30T09:58:47.2167602Z         timerange = TimeRange.parse_timerange("1510694220-1510700340")
2025-08-30T09:58:47.2167684Z         data = history.load_data(
2025-08-30T09:58:47.2167866Z             testdatadir, "1m", ["UNITTEST/BTC"], timerange=timerange, fill_up_missing=True
2025-08-30T09:58:47.2167923Z         )
2025-08-30T09:58:47.2168135Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2168272Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2168423Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2168505Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2168510Z 
2025-08-30T09:58:47.2168602Z tests/optimize/test_backtesting.py:376: 
2025-08-30T09:58:47.2168704Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2168855Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2168951Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2169091Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2169196Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2169274Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2169468Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2169551Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2176455Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2176697Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2176714Z 
2025-08-30T09:58:47.2177000Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2177069Z key = 'date'
2025-08-30T09:58:47.2177075Z 
2025-08-30T09:58:47.2177150Z     def get_loc(self, key):
2025-08-30T09:58:47.2177211Z         """
2025-08-30T09:58:47.2177375Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2177429Z     
2025-08-30T09:58:47.2177498Z         Parameters
2025-08-30T09:58:47.2177560Z         ----------
2025-08-30T09:58:47.2177621Z         key : label
2025-08-30T09:58:47.2177678Z     
2025-08-30T09:58:47.2177737Z         Returns
2025-08-30T09:58:47.2177796Z         -------
2025-08-30T09:58:47.2177934Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2177993Z     
2025-08-30T09:58:47.2178052Z         Examples
2025-08-30T09:58:47.2178118Z         --------
2025-08-30T09:58:47.2178212Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2178290Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2178347Z         1
2025-08-30T09:58:47.2178401Z     
2025-08-30T09:58:47.2178503Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2178582Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2178650Z         slice(1, 3, None)
2025-08-30T09:58:47.2178708Z     
2025-08-30T09:58:47.2178810Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2178898Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2178980Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2179042Z         """
2025-08-30T09:58:47.2179138Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2179196Z         try:
2025-08-30T09:58:47.2179289Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2179367Z         except KeyError as err:
2025-08-30T09:58:47.2179629Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2179722Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2179842Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2179897Z             ):
2025-08-30T09:58:47.2179983Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2180066Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2180137Z E           KeyError: 'date'
2025-08-30T09:58:47.2180142Z 
2025-08-30T09:58:47.2180345Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2180494Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2180610Z 2025-08-30 09:55:02 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2180851Z 2025-08-30 09:55:02 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2180937Z 2025-08-30 09:55:02 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2181039Z 2025-08-30 09:55:02 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2181163Z 2025-08-30 09:55:02 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2181281Z 2025-08-30 09:55:02 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2181617Z 2025-08-30 09:55:02 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2182126Z 2025-08-30 09:55:02 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2182548Z 2025-08-30 09:55:02 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2182651Z 2025-08-30 09:55:02 INFO Found no parameter file.
2025-08-30T09:58:47.2182938Z 2025-08-30 09:55:02 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2183121Z 2025-08-30 09:55:02 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2183303Z 2025-08-30 09:55:02 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2183747Z 2025-08-30 09:55:02 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2183943Z 2025-08-30 09:55:02 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2184209Z 2025-08-30 09:55:02 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2184396Z 2025-08-30 09:55:02 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2184596Z 2025-08-30 09:55:02 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2184707Z 2025-08-30 09:55:02 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2184813Z 2025-08-30 09:55:02 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2184935Z 2025-08-30 09:55:02 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2185092Z 2025-08-30 09:55:02 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2185249Z 2025-08-30 09:55:02 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2185377Z 2025-08-30 09:55:02 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2185521Z 2025-08-30 09:55:02 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2185823Z 2025-08-30 09:55:02 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2186014Z 2025-08-30 09:55:02 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2186132Z 2025-08-30 09:55:02 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2186245Z 2025-08-30 09:55:02 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2186370Z 2025-08-30 09:55:02 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2186692Z 2025-08-30 09:55:02 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2186815Z 2025-08-30 09:55:02 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2186934Z 2025-08-30 09:55:02 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2187076Z 2025-08-30 09:55:02 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2187197Z 2025-08-30 09:55:02 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2187344Z 2025-08-30 09:55:02 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2187501Z 2025-08-30 09:55:02 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2187789Z 2025-08-30 09:55:02 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2187939Z 2025-08-30 09:55:02 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2188050Z 2025-08-30 09:55:02 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2188165Z 2025-08-30 09:55:02 INFO Validating configuration ...
2025-08-30T09:58:47.2188514Z 2025-08-30 09:55:02 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2188795Z 2025-08-30 09:55:02 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2189231Z 2025-08-30 09:55:02 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2189426Z 2025-08-30 09:55:02 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2189598Z 2025-08-30 09:55:02 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2189739Z 2025-08-30 09:55:02 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2189853Z 2025-08-30 09:55:02 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2190083Z 2025-08-30 09:55:02 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2190192Z 2025-08-30 09:55:02 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2190350Z 2025-08-30 09:55:02 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2190535Z 2025-08-30 09:55:02 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2190693Z 2025-08-30 09:55:02 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2190906Z 2025-08-30 09:55:02 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 100 - after: 103 - 3.00%
2025-08-30T09:58:47.2191049Z ________________________ test_backtest_one_detail[True] ________________________
2025-08-30T09:58:47.2191054Z 
2025-08-30T09:58:47.2191219Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2191286Z key = 'date'
2025-08-30T09:58:47.2191290Z 
2025-08-30T09:58:47.2191368Z     def get_loc(self, key):
2025-08-30T09:58:47.2191425Z         """
2025-08-30T09:58:47.2191579Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2191634Z     
2025-08-30T09:58:47.2191698Z         Parameters
2025-08-30T09:58:47.2191759Z         ----------
2025-08-30T09:58:47.2191825Z         key : label
2025-08-30T09:58:47.2191879Z     
2025-08-30T09:58:47.2191938Z         Returns
2025-08-30T09:58:47.2192003Z         -------
2025-08-30T09:58:47.2192124Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2192179Z     
2025-08-30T09:58:47.2192241Z         Examples
2025-08-30T09:58:47.2192306Z         --------
2025-08-30T09:58:47.2192395Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2192477Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2192537Z         1
2025-08-30T09:58:47.2192591Z     
2025-08-30T09:58:47.2192688Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2192858Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2192928Z         slice(1, 3, None)
2025-08-30T09:58:47.2192982Z     
2025-08-30T09:58:47.2193083Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2193168Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2193248Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2193304Z         """
2025-08-30T09:58:47.2193502Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2193564Z         try:
2025-08-30T09:58:47.2193652Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2193721Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2193726Z 
2025-08-30T09:58:47.2193902Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2194140Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2194315Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2194382Z     ???
2025-08-30T09:58:47.2194538Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2194593Z     ???
2025-08-30T09:58:47.2194855Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2194910Z     ???
2025-08-30T09:58:47.2195009Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2195014Z 
2025-08-30T09:58:47.2195068Z >   ???
2025-08-30T09:58:47.2195139Z E   KeyError: 'date'
2025-08-30T09:58:47.2195144Z 
2025-08-30T09:58:47.2195262Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2195267Z 
2025-08-30T09:58:47.2195425Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2195438Z 
2025-08-30T09:58:47.2195891Z default_conf_usdt = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2196051Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584e419d0>
2025-08-30T09:58:47.2196247Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2196316Z use_detail = True
2025-08-30T09:58:47.2196321Z 
2025-08-30T09:58:47.2196445Z     @pytest.mark.parametrize("use_detail", [True, False])
2025-08-30T09:58:47.2196664Z     def test_backtest_one_detail(default_conf_usdt, mocker, testdatadir, use_detail) -> None:
2025-08-30T09:58:47.2196767Z         default_conf_usdt["use_exit_signal"] = False
2025-08-30T09:58:47.2196844Z         patch_exchange(mocker)
2025-08-30T09:58:47.2197004Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2197176Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2197242Z         if use_detail:
2025-08-30T09:58:47.2197340Z             default_conf_usdt["timeframe_detail"] = "1m"
2025-08-30T09:58:47.2197400Z     
2025-08-30T09:58:47.2197484Z         def advise_entry(df, *args, **kwargs):
2025-08-30T09:58:47.2197572Z             # Mock function to force several entries
2025-08-30T09:58:47.2197660Z             df.loc[(df["rsi"] < 40), "enter_long"] = 1
2025-08-30T09:58:47.2197725Z             return df
2025-08-30T09:58:47.2197779Z     
2025-08-30T09:58:47.2197880Z         def custom_entry_price(proposed_rate, **kwargs):
2025-08-30T09:58:47.2197961Z             return proposed_rate * 0.997
2025-08-30T09:58:47.2198016Z     
2025-08-30T09:58:47.2198108Z         default_conf_usdt["max_open_trades"] = 10
2025-08-30T09:58:47.2198162Z     
2025-08-30T09:58:47.2198259Z         backtesting = Backtesting(default_conf_usdt)
2025-08-30T09:58:47.2198393Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2198529Z         backtesting.strategy.populate_entry_trend = advise_entry
2025-08-30T09:58:47.2198680Z         backtesting.strategy.ignore_buying_expired_candle_after = 59
2025-08-30T09:58:47.2198950Z         backtesting.strategy.custom_entry_price = custom_entry_price
2025-08-30T09:58:47.2199019Z         pair = "XRP/ETH"
2025-08-30T09:58:47.2199138Z         # Pick a timerange adapted to the pair we use to test
2025-08-30T09:58:47.2199267Z         timerange = TimeRange.parse_timerange("20191010-20191013")
2025-08-30T09:58:47.2199511Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=[pair], timerange=timerange)
2025-08-30T09:58:47.2199575Z         if use_detail:
2025-08-30T09:58:47.2199657Z             data_1m = history.load_data(
2025-08-30T09:58:47.2199830Z                 datadir=testdatadir, timeframe="1m", pairs=[pair], timerange=timerange
2025-08-30T09:58:47.2199887Z             )
2025-08-30T09:58:47.2199977Z             backtesting.detail_data = data_1m
2025-08-30T09:58:47.2200199Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2200277Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2200287Z 
2025-08-30T09:58:47.2200381Z tests/optimize/test_backtesting.py:943: 
2025-08-30T09:58:47.2200482Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2200628Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2200719Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2200852Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2200959Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2201036Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2201224Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2201306Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2201373Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2201475Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2201480Z 
2025-08-30T09:58:47.2201644Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2201705Z key = 'date'
2025-08-30T09:58:47.2201709Z 
2025-08-30T09:58:47.2201783Z     def get_loc(self, key):
2025-08-30T09:58:47.2201840Z         """
2025-08-30T09:58:47.2201991Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2202051Z     
2025-08-30T09:58:47.2202116Z         Parameters
2025-08-30T09:58:47.2202177Z         ----------
2025-08-30T09:58:47.2202237Z         key : label
2025-08-30T09:58:47.2202298Z     
2025-08-30T09:58:47.2202356Z         Returns
2025-08-30T09:58:47.2202414Z         -------
2025-08-30T09:58:47.2202543Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2202598Z     
2025-08-30T09:58:47.2202662Z         Examples
2025-08-30T09:58:47.2202722Z         --------
2025-08-30T09:58:47.2202815Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2202892Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2202952Z         1
2025-08-30T09:58:47.2203010Z     
2025-08-30T09:58:47.2203103Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2203181Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2203246Z         slice(1, 3, None)
2025-08-30T09:58:47.2203305Z     
2025-08-30T09:58:47.2203617Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2203708Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2203789Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2203846Z         """
2025-08-30T09:58:47.2203939Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2203997Z         try:
2025-08-30T09:58:47.2204087Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2204170Z         except KeyError as err:
2025-08-30T09:58:47.2204258Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2204346Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2204589Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2204656Z             ):
2025-08-30T09:58:47.2204739Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2204816Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2204891Z E           KeyError: 'date'
2025-08-30T09:58:47.2204896Z 
2025-08-30T09:58:47.2205083Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2205221Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2205336Z 2025-08-30 09:55:02 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2205464Z 2025-08-30 09:55:02 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2205649Z 2025-08-30 09:55:02 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2205746Z 2025-08-30 09:55:02 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2205872Z 2025-08-30 09:55:02 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2205994Z 2025-08-30 09:55:02 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2206319Z 2025-08-30 09:55:02 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2206816Z 2025-08-30 09:55:02 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2207233Z 2025-08-30 09:55:02 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2207328Z 2025-08-30 09:55:02 INFO Found no parameter file.
2025-08-30T09:58:47.2207622Z 2025-08-30 09:55:02 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2207797Z 2025-08-30 09:55:02 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2207974Z 2025-08-30 09:55:02 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2208177Z 2025-08-30 09:55:02 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.2208365Z 2025-08-30 09:55:02 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.2208627Z 2025-08-30 09:55:02 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2208830Z 2025-08-30 09:55:02 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2209024Z 2025-08-30 09:55:02 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2209219Z 2025-08-30 09:55:02 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2209330Z 2025-08-30 09:55:02 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2209435Z 2025-08-30 09:55:02 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2209557Z 2025-08-30 09:55:02 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2209707Z 2025-08-30 09:55:02 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2209860Z 2025-08-30 09:55:02 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2209986Z 2025-08-30 09:55:02 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2210124Z 2025-08-30 09:55:02 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2210429Z 2025-08-30 09:55:02 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2210616Z 2025-08-30 09:55:02 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2210733Z 2025-08-30 09:55:02 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.2210847Z 2025-08-30 09:55:02 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.2210968Z 2025-08-30 09:55:02 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2211220Z 2025-08-30 09:55:02 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2211348Z 2025-08-30 09:55:02 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2211467Z 2025-08-30 09:55:02 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2211610Z 2025-08-30 09:55:02 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2211730Z 2025-08-30 09:55:02 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2211868Z 2025-08-30 09:55:02 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2212019Z 2025-08-30 09:55:02 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2212167Z 2025-08-30 09:55:02 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2212386Z 2025-08-30 09:55:02 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2212504Z 2025-08-30 09:55:02 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2212613Z 2025-08-30 09:55:02 INFO Validating configuration ...
2025-08-30T09:58:47.2212967Z 2025-08-30 09:55:02 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2213251Z 2025-08-30 09:55:02 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2213802Z 2025-08-30 09:55:02 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2213981Z 2025-08-30 09:55:02 DEBUG Ignoring LTC/USDT from whitelist. Market is not active.
2025-08-30T09:58:47.2214144Z 2025-08-30 09:55:02 INFO Ignoring LTC/USDT from whitelist. Market is not active.
2025-08-30T09:58:47.2214358Z 2025-08-30 09:55:02 DEBUG Whitelist with 4 pairs: ['ETH/USDT', 'XRP/USDT', 'NEO/USDT', 'TKN/USDT']
2025-08-30T09:58:47.2214538Z 2025-08-30 09:55:02 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2214685Z 2025-08-30 09:55:02 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2214796Z 2025-08-30 09:55:02 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2215030Z 2025-08-30 09:55:02 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2215142Z 2025-08-30 09:55:02 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2215295Z 2025-08-30 09:55:02 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2215484Z 2025-08-30 09:55:02 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2215644Z 2025-08-30 09:55:02 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2215806Z 2025-08-30 09:55:02 WARNING XRP/ETH, spot, 5m, data starts at 2019-10-11 00:00:00
2025-08-30T09:58:47.2216012Z 2025-08-30 09:55:02 DEBUG Missing data fillup for XRP/ETH, 5m: before: 574 - after: 577 - 0.52%
2025-08-30T09:58:47.2216151Z _________________________ test_backtest_clash_buy_sell _________________________
2025-08-30T09:58:47.2216161Z 
2025-08-30T09:58:47.2216341Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2216406Z key = 'date'
2025-08-30T09:58:47.2216410Z 
2025-08-30T09:58:47.2216483Z     def get_loc(self, key):
2025-08-30T09:58:47.2216541Z         """
2025-08-30T09:58:47.2216689Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2216748Z     
2025-08-30T09:58:47.2216811Z         Parameters
2025-08-30T09:58:47.2216871Z         ----------
2025-08-30T09:58:47.2216937Z         key : label
2025-08-30T09:58:47.2216994Z     
2025-08-30T09:58:47.2217053Z         Returns
2025-08-30T09:58:47.2217112Z         -------
2025-08-30T09:58:47.2217241Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2217295Z     
2025-08-30T09:58:47.2217354Z         Examples
2025-08-30T09:58:47.2217419Z         --------
2025-08-30T09:58:47.2217649Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2217727Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2217786Z         1
2025-08-30T09:58:47.2217842Z     
2025-08-30T09:58:47.2217937Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2218015Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2218118Z         slice(1, 3, None)
2025-08-30T09:58:47.2218225Z     
2025-08-30T09:58:47.2218408Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2218563Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2218709Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2218772Z         """
2025-08-30T09:58:47.2218866Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2219059Z         try:
2025-08-30T09:58:47.2219154Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2219223Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2219234Z 
2025-08-30T09:58:47.2219410Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2219511Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2219676Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2219736Z     ???
2025-08-30T09:58:47.2219895Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2219957Z     ???
2025-08-30T09:58:47.2220226Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2220281Z     ???
2025-08-30T09:58:47.2220378Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2220384Z 
2025-08-30T09:58:47.2220442Z >   ???
2025-08-30T09:58:47.2220514Z E   KeyError: 'date'
2025-08-30T09:58:47.2220520Z 
2025-08-30T09:58:47.2220638Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2220651Z 
2025-08-30T09:58:47.2220811Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2220815Z 
2025-08-30T09:58:47.2220970Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8b0a410>
2025-08-30T09:58:47.2221411Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2221612Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2221616Z 
2025-08-30T09:58:47.2221773Z     def test_backtest_clash_buy_sell(mocker, default_conf, testdatadir):
2025-08-30T09:58:47.2221912Z         # Override the default buy trend function in our StrategyTest
2025-08-30T09:58:47.2222004Z         def fun(dataframe=None, pair=None):
2025-08-30T09:58:47.2222071Z             buy_value = 1
2025-08-30T09:58:47.2222138Z             sell_value = 1
2025-08-30T09:58:47.2222247Z             return _trend(dataframe, buy_value, sell_value)
2025-08-30T09:58:47.2222309Z     
2025-08-30T09:58:47.2222394Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.2222593Z >       backtest_conf = _make_backtest_conf(mocker, conf=default_conf, datadir=testdatadir)
2025-08-30T09:58:47.2222681Z                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2222686Z 
2025-08-30T09:58:47.2222780Z tests/optimize/test_backtesting.py:1456: 
2025-08-30T09:58:47.2222876Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2223027Z tests/optimize/test_backtesting.py:101: in _make_backtest_conf
2025-08-30T09:58:47.2223173Z     processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2223251Z                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2223613Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2223712Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2223991Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2224098Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2224171Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2224361Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2224445Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2224513Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2224609Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2224614Z 
2025-08-30T09:58:47.2224796Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2224859Z key = 'date'
2025-08-30T09:58:47.2224864Z 
2025-08-30T09:58:47.2225048Z     def get_loc(self, key):
2025-08-30T09:58:47.2225107Z         """
2025-08-30T09:58:47.2225262Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2225322Z     
2025-08-30T09:58:47.2225384Z         Parameters
2025-08-30T09:58:47.2225445Z         ----------
2025-08-30T09:58:47.2225509Z         key : label
2025-08-30T09:58:47.2225566Z     
2025-08-30T09:58:47.2225622Z         Returns
2025-08-30T09:58:47.2225683Z         -------
2025-08-30T09:58:47.2225803Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2225857Z     
2025-08-30T09:58:47.2225916Z         Examples
2025-08-30T09:58:47.2225976Z         --------
2025-08-30T09:58:47.2226096Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2226173Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2226233Z         1
2025-08-30T09:58:47.2226286Z     
2025-08-30T09:58:47.2226380Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2226493Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2226582Z         slice(1, 3, None)
2025-08-30T09:58:47.2226636Z     
2025-08-30T09:58:47.2226733Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2226826Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2226905Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2226960Z         """
2025-08-30T09:58:47.2227049Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2227109Z         try:
2025-08-30T09:58:47.2227197Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2227270Z         except KeyError as err:
2025-08-30T09:58:47.2227361Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2227604Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2227800Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2227864Z             ):
2025-08-30T09:58:47.2227958Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2228036Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2228107Z E           KeyError: 'date'
2025-08-30T09:58:47.2228117Z 
2025-08-30T09:58:47.2228312Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2228450Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2228679Z 2025-08-30 09:55:02 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.2228792Z 2025-08-30 09:55:02 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2228916Z 2025-08-30 09:55:02 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2228993Z 2025-08-30 09:55:02 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2229088Z 2025-08-30 09:55:02 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2229209Z 2025-08-30 09:55:02 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2229329Z 2025-08-30 09:55:02 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2229655Z 2025-08-30 09:55:02 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2230260Z 2025-08-30 09:55:02 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2230809Z 2025-08-30 09:55:02 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2230915Z 2025-08-30 09:55:02 INFO Found no parameter file.
2025-08-30T09:58:47.2231201Z 2025-08-30 09:55:02 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2231376Z 2025-08-30 09:55:02 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2231675Z 2025-08-30 09:55:02 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2231875Z 2025-08-30 09:55:02 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2232065Z 2025-08-30 09:55:02 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2232337Z 2025-08-30 09:55:02 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2232524Z 2025-08-30 09:55:02 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2232717Z 2025-08-30 09:55:02 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2232822Z 2025-08-30 09:55:02 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2232929Z 2025-08-30 09:55:02 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2233043Z 2025-08-30 09:55:02 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2233192Z 2025-08-30 09:55:02 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2233464Z 2025-08-30 09:55:02 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2233595Z 2025-08-30 09:55:02 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2233738Z 2025-08-30 09:55:02 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2234044Z 2025-08-30 09:55:02 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2234230Z 2025-08-30 09:55:02 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2234343Z 2025-08-30 09:55:02 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2234454Z 2025-08-30 09:55:02 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2234578Z 2025-08-30 09:55:02 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2234745Z 2025-08-30 09:55:02 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2234869Z 2025-08-30 09:55:02 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2234987Z 2025-08-30 09:55:02 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2235130Z 2025-08-30 09:55:02 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2235250Z 2025-08-30 09:55:02 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2235393Z 2025-08-30 09:55:02 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2235542Z 2025-08-30 09:55:02 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2235687Z 2025-08-30 09:55:02 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2235828Z 2025-08-30 09:55:02 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2235934Z 2025-08-30 09:55:02 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2236037Z 2025-08-30 09:55:02 INFO Validating configuration ...
2025-08-30T09:58:47.2236390Z 2025-08-30 09:55:02 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2236672Z 2025-08-30 09:55:02 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2237232Z 2025-08-30 09:55:02 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2237430Z 2025-08-30 09:55:02 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2237603Z 2025-08-30 09:55:02 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2237741Z 2025-08-30 09:55:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.2237879Z 2025-08-30 09:55:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.2238011Z 2025-08-30 09:55:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.2238146Z 2025-08-30 09:55:03 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2238367Z 2025-08-30 09:55:03 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2238599Z 2025-08-30 09:55:03 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2238714Z 2025-08-30 09:55:03 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2238864Z 2025-08-30 09:55:03 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2239050Z 2025-08-30 09:55:03 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2239210Z 2025-08-30 09:55:03 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2239377Z _________ test_backtest_start_multi_strat_caching[day-start_delta2-2] __________
2025-08-30T09:58:47.2239383Z 
2025-08-30T09:58:47.2239965Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2240131Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c85bb690>
2025-08-30T09:58:47.2240293Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65dda2d110>
2025-08-30T09:58:47.2240493Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2240598Z run_id = '2', start_delta = {'weeks': 1}, cache = 'day'
2025-08-30T09:58:47.2240603Z 
2025-08-30T09:58:47.2240717Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2240835Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2241050Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2241198Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2241299Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2241458Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2241519Z     ):
2025-08-30T09:58:47.2241599Z         default_conf.update(
2025-08-30T09:58:47.2241656Z             {
2025-08-30T09:58:47.2241733Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2241816Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2241896Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2241982Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2242038Z             }
2025-08-30T09:58:47.2242097Z         )
2025-08-30T09:58:47.2242171Z         patch_exchange(mocker)
2025-08-30T09:58:47.2242248Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2242317Z             return_value={
2025-08-30T09:58:47.2242431Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2242503Z                 "config": default_conf,
2025-08-30T09:58:47.2242569Z                 "locks": [],
2025-08-30T09:58:47.2242645Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2242728Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2242805Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2242885Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2243183Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2243325Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2243590Z                 "final_balance": 1000,
2025-08-30T09:58:47.2243704Z             }
2025-08-30T09:58:47.2243790Z         )
2025-08-30T09:58:47.2243861Z         mocker.patch(
2025-08-30T09:58:47.2244050Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2244158Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2244215Z         )
2025-08-30T09:58:47.2244450Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2244666Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2244721Z     
2025-08-30T09:58:47.2244955Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2245107Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2245181Z         if cache == "none":
2025-08-30T09:58:47.2245277Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2245348Z         elif cache == "day":
2025-08-30T09:58:47.2245441Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2245510Z         elif cache == "week":
2025-08-30T09:58:47.2245607Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2245681Z         elif cache == "month":
2025-08-30T09:58:47.2245773Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2245854Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2245925Z             return_value={
2025-08-30T09:58:47.2246089Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2246280Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2246338Z             }
2025-08-30T09:58:47.2246394Z         )
2025-08-30T09:58:47.2246479Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2246547Z             side_effect=[
2025-08-30T09:58:47.2246607Z                 {
2025-08-30T09:58:47.2246716Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2246802Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2246920Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2246977Z                 },
2025-08-30T09:58:47.2247033Z                 {
2025-08-30T09:58:47.2247139Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2247222Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2247331Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2247392Z                 },
2025-08-30T09:58:47.2247451Z             ]
2025-08-30T09:58:47.2247506Z         )
2025-08-30T09:58:47.2247573Z         mocker.patch(
2025-08-30T09:58:47.2247657Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2247724Z             return_value=[
2025-08-30T09:58:47.2247929Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2247986Z             ],
2025-08-30T09:58:47.2248044Z         )
2025-08-30T09:58:47.2248123Z         mocker.patch.multiple(
2025-08-30T09:58:47.2248223Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2248330Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2248419Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2248474Z         )
2025-08-30T09:58:47.2248731Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2248737Z 
2025-08-30T09:58:47.2248831Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2248933Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2249235Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2249310Z     return self._start_patch(
2025-08-30T09:58:47.2249493Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2249570Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2249636Z                        ^^^^^^^^^
2025-08-30T09:58:47.2249849Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2249920Z     result = self.__enter__()
2025-08-30T09:58:47.2249982Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2250205Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2250291Z     original, local = self.get_original()
2025-08-30T09:58:47.2250441Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2250544Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2250549Z 
2025-08-30T09:58:47.2250668Z self = <unittest.mock._patch object at 0x7f65c83abe50>
2025-08-30T09:58:47.2250672Z 
2025-08-30T09:58:47.2250747Z     def get_original(self):
2025-08-30T09:58:47.2250818Z         target = self.getter()
2025-08-30T09:58:47.2250887Z         name = self.attribute
2025-08-30T09:58:47.2250942Z     
2025-08-30T09:58:47.2251010Z         original = DEFAULT
2025-08-30T09:58:47.2251071Z         local = False
2025-08-30T09:58:47.2251124Z     
2025-08-30T09:58:47.2251183Z         try:
2025-08-30T09:58:47.2251264Z             original = target.__dict__[name]
2025-08-30T09:58:47.2251349Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2251463Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2251522Z         else:
2025-08-30T09:58:47.2251587Z             local = True
2025-08-30T09:58:47.2251645Z     
2025-08-30T09:58:47.2251772Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2251841Z             self.create = True
2025-08-30T09:58:47.2251899Z     
2025-08-30T09:58:47.2251992Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2252073Z >           raise AttributeError(
2025-08-30T09:58:47.2252181Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2252236Z             )
2025-08-30T09:58:47.2252833Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2252839Z 
2025-08-30T09:58:47.2253077Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2253217Z ________________________ test_backtest_start_timerange _________________________
2025-08-30T09:58:47.2253222Z 
2025-08-30T09:58:47.2253582Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2253658Z key = 'date'
2025-08-30T09:58:47.2253663Z 
2025-08-30T09:58:47.2253738Z     def get_loc(self, key):
2025-08-30T09:58:47.2253798Z         """
2025-08-30T09:58:47.2253946Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2254001Z     
2025-08-30T09:58:47.2254062Z         Parameters
2025-08-30T09:58:47.2254127Z         ----------
2025-08-30T09:58:47.2254186Z         key : label
2025-08-30T09:58:47.2254239Z     
2025-08-30T09:58:47.2254298Z         Returns
2025-08-30T09:58:47.2254357Z         -------
2025-08-30T09:58:47.2254476Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2254530Z     
2025-08-30T09:58:47.2254591Z         Examples
2025-08-30T09:58:47.2254649Z         --------
2025-08-30T09:58:47.2254736Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2254820Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2254877Z         1
2025-08-30T09:58:47.2254931Z     
2025-08-30T09:58:47.2255022Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2255240Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2255306Z         slice(1, 3, None)
2025-08-30T09:58:47.2255359Z     
2025-08-30T09:58:47.2255461Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2255542Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2255622Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2255681Z         """
2025-08-30T09:58:47.2255769Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2255826Z         try:
2025-08-30T09:58:47.2255912Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2255984Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2255988Z 
2025-08-30T09:58:47.2256154Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2256361Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2256533Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2256595Z     ???
2025-08-30T09:58:47.2256751Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2256810Z     ???
2025-08-30T09:58:47.2257065Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2257118Z     ???
2025-08-30T09:58:47.2257213Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2257221Z 
2025-08-30T09:58:47.2257273Z >   ???
2025-08-30T09:58:47.2257338Z E   KeyError: 'date'
2025-08-30T09:58:47.2257343Z 
2025-08-30T09:58:47.2257458Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2257466Z 
2025-08-30T09:58:47.2257618Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2257628Z 
2025-08-30T09:58:47.2258203Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2258363Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dda1eb50>
2025-08-30T09:58:47.2258516Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594f5fc90>
2025-08-30T09:58:47.2258707Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2258713Z 
2025-08-30T09:58:47.2258900Z     def test_backtest_start_timerange(default_conf, mocker, caplog, testdatadir):
2025-08-30T09:58:47.2258975Z         patch_exchange(mocker)
2025-08-30T09:58:47.2259165Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest")
2025-08-30T09:58:47.2259347Z         mocker.patch("freqtrade.optimize.backtesting.generate_backtest_stats")
2025-08-30T09:58:47.2259527Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results")
2025-08-30T09:58:47.2259594Z         mocker.patch(
2025-08-30T09:58:47.2259773Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2259883Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2259938Z         )
2025-08-30T09:58:47.2260078Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.2260135Z     
2025-08-30T09:58:47.2260193Z         args = [
2025-08-30T09:58:47.2260260Z             "backtesting",
2025-08-30T09:58:47.2260323Z             "--config",
2025-08-30T09:58:47.2260393Z             "config.json",
2025-08-30T09:58:47.2260457Z             "--strategy",
2025-08-30T09:58:47.2260531Z             CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.2260601Z             "--datadir",
2025-08-30T09:58:47.2260670Z             str(testdatadir),
2025-08-30T09:58:47.2260734Z             "--timeframe",
2025-08-30T09:58:47.2260791Z             "1m",
2025-08-30T09:58:47.2260862Z             "--timerange",
2025-08-30T09:58:47.2260930Z             "1510694220-1510700340",
2025-08-30T09:58:47.2261017Z             "--enable-position-stacking",
2025-08-30T09:58:47.2261166Z         ]
2025-08-30T09:58:47.2261236Z         args = get_args(args)
2025-08-30T09:58:47.2261309Z >       start_backtesting(args)
2025-08-30T09:58:47.2261314Z 
2025-08-30T09:58:47.2261417Z tests/optimize/test_backtesting.py:2010: 
2025-08-30T09:58:47.2261525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2261682Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.2261751Z     backtesting.start()
2025-08-30T09:58:47.2261856Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.2261937Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.2262000Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2262122Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.2262319Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.2262393Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2262539Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.2262610Z     timeranges = [
2025-08-30T09:58:47.2262742Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.2262892Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.2262952Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.2263136Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2263219Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2263286Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2263566Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2263575Z 
2025-08-30T09:58:47.2263748Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2263816Z key = 'date'
2025-08-30T09:58:47.2263822Z 
2025-08-30T09:58:47.2263893Z     def get_loc(self, key):
2025-08-30T09:58:47.2263950Z         """
2025-08-30T09:58:47.2264106Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2264166Z     
2025-08-30T09:58:47.2264227Z         Parameters
2025-08-30T09:58:47.2264288Z         ----------
2025-08-30T09:58:47.2264352Z         key : label
2025-08-30T09:58:47.2264407Z     
2025-08-30T09:58:47.2264465Z         Returns
2025-08-30T09:58:47.2264523Z         -------
2025-08-30T09:58:47.2264646Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2264700Z     
2025-08-30T09:58:47.2264758Z         Examples
2025-08-30T09:58:47.2264820Z         --------
2025-08-30T09:58:47.2264907Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2264983Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2265038Z         1
2025-08-30T09:58:47.2265094Z     
2025-08-30T09:58:47.2265191Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2265269Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2265337Z         slice(1, 3, None)
2025-08-30T09:58:47.2265400Z     
2025-08-30T09:58:47.2265495Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2265576Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2265659Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2265714Z         """
2025-08-30T09:58:47.2265804Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2265863Z         try:
2025-08-30T09:58:47.2265951Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2266022Z         except KeyError as err:
2025-08-30T09:58:47.2266112Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2266198Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2266305Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2266365Z             ):
2025-08-30T09:58:47.2266457Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2266535Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2266736Z E           KeyError: 'date'
2025-08-30T09:58:47.2266741Z 
2025-08-30T09:58:47.2266935Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2267074Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2267180Z 2025-08-30 09:55:03 INFO Using config: config.json ...
2025-08-30T09:58:47.2267281Z 2025-08-30 09:55:03 INFO Enabling colorized output.
2025-08-30T09:58:47.2267361Z 2025-08-30 09:55:03 INFO Logfile configured
2025-08-30T09:58:47.2267439Z 2025-08-30 09:55:03 INFO Verbosity set to 3
2025-08-30T09:58:47.2267623Z 2025-08-30 09:55:03 INFO Parameter -i/--timeframe detected ... Using timeframe: 1m ...
2025-08-30T09:58:47.2267785Z 2025-08-30 09:55:03 INFO Parameter --enable-position-stacking detected ...
2025-08-30T09:58:47.2267993Z 2025-08-30 09:55:03 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.2268157Z 2025-08-30 09:55:03 INFO Parameter --timerange detected: 1510694220-1510700340 ...
2025-08-30T09:58:47.2268487Z 2025-08-30 09:55:03 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_start_timerange0/user_data ...
2025-08-30T09:58:47.2268720Z 2025-08-30 09:55:03 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.2268862Z 2025-08-30 09:55:03 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.2268984Z 2025-08-30 09:55:03 INFO Parameter --cache=day detected ...
2025-08-30T09:58:47.2269121Z 2025-08-30 09:55:03 INFO Filter trades by timerange: 1510694220-1510700340
2025-08-30T09:58:47.2269212Z 2025-08-30 09:55:03 INFO Checking exchange...
2025-08-30T09:58:47.2269439Z 2025-08-30 09:55:03 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.2269555Z 2025-08-30 09:55:03 INFO Using pairlist from configuration.
2025-08-30T09:58:47.2269658Z 2025-08-30 09:55:03 INFO Validating configuration ...
2025-08-30T09:58:47.2269783Z 2025-08-30 09:55:03 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.2269896Z 2025-08-30 09:55:03 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2270017Z 2025-08-30 09:55:03 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2270094Z 2025-08-30 09:55:03 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2270190Z 2025-08-30 09:55:03 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2270311Z 2025-08-30 09:55:03 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2270425Z 2025-08-30 09:55:03 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2270751Z 2025-08-30 09:55:03 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2271243Z 2025-08-30 09:55:03 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2271655Z 2025-08-30 09:55:03 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2271762Z 2025-08-30 09:55:03 INFO Found no parameter file.
2025-08-30T09:58:47.2272045Z 2025-08-30 09:55:03 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2272219Z 2025-08-30 09:55:03 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2272400Z 2025-08-30 09:55:03 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2272594Z 2025-08-30 09:55:03 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2272782Z 2025-08-30 09:55:03 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2273150Z 2025-08-30 09:55:03 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2273440Z 2025-08-30 09:55:03 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2273779Z 2025-08-30 09:55:03 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2273891Z 2025-08-30 09:55:03 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2273998Z 2025-08-30 09:55:03 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2274114Z 2025-08-30 09:55:03 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2274266Z 2025-08-30 09:55:03 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2274421Z 2025-08-30 09:55:03 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2274551Z 2025-08-30 09:55:03 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2274799Z 2025-08-30 09:55:03 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2275135Z 2025-08-30 09:55:03 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2275332Z 2025-08-30 09:55:03 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2275442Z 2025-08-30 09:55:03 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2275552Z 2025-08-30 09:55:03 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2275674Z 2025-08-30 09:55:03 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2275948Z 2025-08-30 09:55:03 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2276069Z 2025-08-30 09:55:03 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2276191Z 2025-08-30 09:55:03 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2276337Z 2025-08-30 09:55:03 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2276457Z 2025-08-30 09:55:03 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2276593Z 2025-08-30 09:55:03 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2276753Z 2025-08-30 09:55:03 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2276898Z 2025-08-30 09:55:03 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2277036Z 2025-08-30 09:55:03 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2277144Z 2025-08-30 09:55:03 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2277249Z 2025-08-30 09:55:03 INFO Validating configuration ...
2025-08-30T09:58:47.2277607Z 2025-08-30 09:55:03 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2277894Z 2025-08-30 09:55:03 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2278332Z 2025-08-30 09:55:03 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2278530Z 2025-08-30 09:55:03 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2278710Z 2025-08-30 09:55:03 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2278835Z 2025-08-30 09:55:03 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.2279050Z 2025-08-30 09:55:03 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 118 - after: 123 - 4.24%
2025-08-30T09:58:47.2279203Z ____________________ test_backtest_dataprovider_analyzed_df ____________________
2025-08-30T09:58:47.2279209Z 
2025-08-30T09:58:47.2279366Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2279431Z key = 'date'
2025-08-30T09:58:47.2279435Z 
2025-08-30T09:58:47.2279506Z     def get_loc(self, key):
2025-08-30T09:58:47.2279566Z         """
2025-08-30T09:58:47.2279720Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2279775Z     
2025-08-30T09:58:47.2279837Z         Parameters
2025-08-30T09:58:47.2279992Z         ----------
2025-08-30T09:58:47.2280053Z         key : label
2025-08-30T09:58:47.2280107Z     
2025-08-30T09:58:47.2280164Z         Returns
2025-08-30T09:58:47.2280226Z         -------
2025-08-30T09:58:47.2280346Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2280399Z     
2025-08-30T09:58:47.2280462Z         Examples
2025-08-30T09:58:47.2280522Z         --------
2025-08-30T09:58:47.2280613Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2280690Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2280752Z         1
2025-08-30T09:58:47.2280805Z     
2025-08-30T09:58:47.2280899Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2280981Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2281125Z         slice(1, 3, None)
2025-08-30T09:58:47.2281182Z     
2025-08-30T09:58:47.2281282Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2281374Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2281455Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2281510Z         """
2025-08-30T09:58:47.2281602Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2281659Z         try:
2025-08-30T09:58:47.2281747Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2281815Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2281823Z 
2025-08-30T09:58:47.2281994Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2282093Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2282258Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2282319Z     ???
2025-08-30T09:58:47.2282479Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2282534Z     ???
2025-08-30T09:58:47.2282794Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2282853Z     ???
2025-08-30T09:58:47.2282951Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2282956Z 
2025-08-30T09:58:47.2283013Z >   ???
2025-08-30T09:58:47.2283081Z E   KeyError: 'date'
2025-08-30T09:58:47.2283086Z 
2025-08-30T09:58:47.2283202Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2283206Z 
2025-08-30T09:58:47.2283463Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2283469Z 
2025-08-30T09:58:47.2284031Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2284122Z fee = <MagicMock id='140074258760272'>
2025-08-30T09:58:47.2284281Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c87b7310>
2025-08-30T09:58:47.2284478Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2284488Z 
2025-08-30T09:58:47.2284717Z     def test_backtest_dataprovider_analyzed_df(default_conf, fee, mocker, testdatadir) -> None:
2025-08-30T09:58:47.2284809Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.2284894Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.2284973Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.2285052Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2285213Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2285365Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=100000)
2025-08-30T09:58:47.2285441Z         patch_exchange(mocker)
2025-08-30T09:58:47.2285537Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2285670Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2285775Z         timerange = TimeRange("date", None, 1517227800, 0)
2025-08-30T09:58:47.2285995Z         data = history.load_data(
2025-08-30T09:58:47.2286195Z             datadir=testdatadir, timeframe="5m", pairs=["UNITTEST/BTC"], timerange=timerange
2025-08-30T09:58:47.2286252Z         )
2025-08-30T09:58:47.2286396Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2286477Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2286482Z 
2025-08-30T09:58:47.2286572Z tests/optimize/test_backtesting.py:1324: 
2025-08-30T09:58:47.2286670Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2286823Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2286913Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2287172Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2287282Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2287350Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2287540Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2287624Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2287688Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2287786Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2287791Z 
2025-08-30T09:58:47.2287952Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2288011Z key = 'date'
2025-08-30T09:58:47.2288015Z 
2025-08-30T09:58:47.2288085Z     def get_loc(self, key):
2025-08-30T09:58:47.2288141Z         """
2025-08-30T09:58:47.2288294Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2288347Z     
2025-08-30T09:58:47.2288411Z         Parameters
2025-08-30T09:58:47.2288474Z         ----------
2025-08-30T09:58:47.2288534Z         key : label
2025-08-30T09:58:47.2288588Z     
2025-08-30T09:58:47.2288649Z         Returns
2025-08-30T09:58:47.2288711Z         -------
2025-08-30T09:58:47.2288831Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2288885Z     
2025-08-30T09:58:47.2288947Z         Examples
2025-08-30T09:58:47.2289005Z         --------
2025-08-30T09:58:47.2289092Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2289168Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2289229Z         1
2025-08-30T09:58:47.2289283Z     
2025-08-30T09:58:47.2289375Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2289456Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2289523Z         slice(1, 3, None)
2025-08-30T09:58:47.2289577Z     
2025-08-30T09:58:47.2289679Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2289763Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2289842Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2289898Z         """
2025-08-30T09:58:47.2289996Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2290052Z         try:
2025-08-30T09:58:47.2290138Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2290216Z         except KeyError as err:
2025-08-30T09:58:47.2290304Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2290393Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2290501Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2290561Z             ):
2025-08-30T09:58:47.2290643Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2290718Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2290790Z E           KeyError: 'date'
2025-08-30T09:58:47.2290796Z 
2025-08-30T09:58:47.2290987Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2291124Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2291329Z 2025-08-30 09:55:04 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2291453Z 2025-08-30 09:55:04 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2291533Z 2025-08-30 09:55:04 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2291627Z 2025-08-30 09:55:04 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2291750Z 2025-08-30 09:55:04 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2291865Z 2025-08-30 09:55:04 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2292468Z 2025-08-30 09:55:04 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2293661Z 2025-08-30 09:55:04 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2294236Z 2025-08-30 09:55:04 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2294351Z 2025-08-30 09:55:04 INFO Found no parameter file.
2025-08-30T09:58:47.2294654Z 2025-08-30 09:55:04 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2294844Z 2025-08-30 09:55:04 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2295027Z 2025-08-30 09:55:04 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2295228Z 2025-08-30 09:55:04 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2295416Z 2025-08-30 09:55:04 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2295684Z 2025-08-30 09:55:04 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2295894Z 2025-08-30 09:55:04 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2296084Z 2025-08-30 09:55:04 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2296278Z 2025-08-30 09:55:04 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2296387Z 2025-08-30 09:55:04 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2296492Z 2025-08-30 09:55:04 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2296609Z 2025-08-30 09:55:04 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2296761Z 2025-08-30 09:55:04 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2296918Z 2025-08-30 09:55:04 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2297045Z 2025-08-30 09:55:04 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2297296Z 2025-08-30 09:55:04 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2297863Z 2025-08-30 09:55:04 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2298204Z 2025-08-30 09:55:04 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2298397Z 2025-08-30 09:55:04 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2298590Z 2025-08-30 09:55:04 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2298771Z 2025-08-30 09:55:04 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2298942Z 2025-08-30 09:55:04 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2299066Z 2025-08-30 09:55:04 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2299190Z 2025-08-30 09:55:04 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2299335Z 2025-08-30 09:55:04 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2299457Z 2025-08-30 09:55:04 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2299596Z 2025-08-30 09:55:04 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2299892Z 2025-08-30 09:55:04 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2300040Z 2025-08-30 09:55:04 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2300179Z 2025-08-30 09:55:04 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2300292Z 2025-08-30 09:55:04 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2300396Z 2025-08-30 09:55:04 INFO Validating configuration ...
2025-08-30T09:58:47.2300758Z 2025-08-30 09:55:04 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2301047Z 2025-08-30 09:55:04 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2301565Z 2025-08-30 09:55:04 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2301766Z 2025-08-30 09:55:04 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2301947Z 2025-08-30 09:55:04 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2302084Z 2025-08-30 09:55:04 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2302197Z 2025-08-30 09:55:04 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2302425Z 2025-08-30 09:55:04 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2302534Z 2025-08-30 09:55:04 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2302696Z 2025-08-30 09:55:04 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2302880Z 2025-08-30 09:55:04 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2303271Z 2025-08-30 09:55:04 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2303642Z ________________________________ test_processed ________________________________
2025-08-30T09:58:47.2303661Z 
2025-08-30T09:58:47.2303873Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2303938Z key = 'date'
2025-08-30T09:58:47.2303943Z 
2025-08-30T09:58:47.2304023Z     def get_loc(self, key):
2025-08-30T09:58:47.2304082Z         """
2025-08-30T09:58:47.2304234Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2304294Z     
2025-08-30T09:58:47.2304356Z         Parameters
2025-08-30T09:58:47.2304419Z         ----------
2025-08-30T09:58:47.2304480Z         key : label
2025-08-30T09:58:47.2304538Z     
2025-08-30T09:58:47.2304595Z         Returns
2025-08-30T09:58:47.2304655Z         -------
2025-08-30T09:58:47.2304785Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2304839Z     
2025-08-30T09:58:47.2304898Z         Examples
2025-08-30T09:58:47.2304957Z         --------
2025-08-30T09:58:47.2305050Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2305131Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2305187Z         1
2025-08-30T09:58:47.2305244Z     
2025-08-30T09:58:47.2305339Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2305418Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2305485Z         slice(1, 3, None)
2025-08-30T09:58:47.2305548Z     
2025-08-30T09:58:47.2305646Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2305728Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2305816Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2305872Z         """
2025-08-30T09:58:47.2305962Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2306020Z         try:
2025-08-30T09:58:47.2306115Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2306184Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2306189Z 
2025-08-30T09:58:47.2306361Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2306607Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2306775Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2306832Z     ???
2025-08-30T09:58:47.2306992Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2307048Z     ???
2025-08-30T09:58:47.2307306Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2307366Z     ???
2025-08-30T09:58:47.2307464Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2307469Z 
2025-08-30T09:58:47.2307525Z >   ???
2025-08-30T09:58:47.2307696Z E   KeyError: 'date'
2025-08-30T09:58:47.2307702Z 
2025-08-30T09:58:47.2307826Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2307830Z 
2025-08-30T09:58:47.2307985Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2307995Z 
2025-08-30T09:58:47.2308435Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2308592Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e418b710>
2025-08-30T09:58:47.2308790Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2308795Z 
2025-08-30T09:58:47.2308938Z     def test_processed(default_conf, mocker, testdatadir) -> None:
2025-08-30T09:58:47.2309015Z         patch_exchange(mocker)
2025-08-30T09:58:47.2309108Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2309246Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2309305Z     
2025-08-30T09:58:47.2309432Z         dict_of_tickerrows = load_data_test("raise", testdatadir)
2025-08-30T09:58:47.2309624Z >       dataframes = backtesting.strategy.advise_all_indicators(dict_of_tickerrows)
2025-08-30T09:58:47.2309714Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2309718Z 
2025-08-30T09:58:47.2309809Z tests/optimize/test_backtesting.py:1302: 
2025-08-30T09:58:47.2309909Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2310058Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2310146Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2310277Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2310383Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2310459Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2310648Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2310729Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2310799Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2310901Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2310905Z 
2025-08-30T09:58:47.2311061Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2311126Z key = 'date'
2025-08-30T09:58:47.2311131Z 
2025-08-30T09:58:47.2311204Z     def get_loc(self, key):
2025-08-30T09:58:47.2311261Z         """
2025-08-30T09:58:47.2311413Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2311470Z     
2025-08-30T09:58:47.2311532Z         Parameters
2025-08-30T09:58:47.2311592Z         ----------
2025-08-30T09:58:47.2311657Z         key : label
2025-08-30T09:58:47.2311710Z     
2025-08-30T09:58:47.2311767Z         Returns
2025-08-30T09:58:47.2311835Z         -------
2025-08-30T09:58:47.2311955Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2312009Z     
2025-08-30T09:58:47.2312068Z         Examples
2025-08-30T09:58:47.2312247Z         --------
2025-08-30T09:58:47.2312338Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2312415Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2312478Z         1
2025-08-30T09:58:47.2312532Z     
2025-08-30T09:58:47.2312623Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2312701Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2312769Z         slice(1, 3, None)
2025-08-30T09:58:47.2312823Z     
2025-08-30T09:58:47.2312922Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2313007Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2313086Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2313141Z         """
2025-08-30T09:58:47.2313308Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2313488Z         try:
2025-08-30T09:58:47.2313581Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2313655Z         except KeyError as err:
2025-08-30T09:58:47.2313751Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2313840Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2313948Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2314008Z             ):
2025-08-30T09:58:47.2314090Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2314167Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2314237Z E           KeyError: 'date'
2025-08-30T09:58:47.2314242Z 
2025-08-30T09:58:47.2314440Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2314578Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2314694Z 2025-08-30 09:55:04 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2314825Z 2025-08-30 09:55:04 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2314901Z 2025-08-30 09:55:04 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2314998Z 2025-08-30 09:55:04 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2315150Z 2025-08-30 09:55:04 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2315266Z 2025-08-30 09:55:04 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2315593Z 2025-08-30 09:55:04 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2316085Z 2025-08-30 09:55:04 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2316503Z 2025-08-30 09:55:04 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2316600Z 2025-08-30 09:55:04 INFO Found no parameter file.
2025-08-30T09:58:47.2316889Z 2025-08-30 09:55:04 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2317071Z 2025-08-30 09:55:04 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2317248Z 2025-08-30 09:55:04 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2317450Z 2025-08-30 09:55:04 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2317639Z 2025-08-30 09:55:04 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2317902Z 2025-08-30 09:55:04 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2318092Z 2025-08-30 09:55:04 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2318290Z 2025-08-30 09:55:04 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2318395Z 2025-08-30 09:55:04 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2318499Z 2025-08-30 09:55:04 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2318744Z 2025-08-30 09:55:04 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2318890Z 2025-08-30 09:55:04 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2319044Z 2025-08-30 09:55:04 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2319175Z 2025-08-30 09:55:04 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2319312Z 2025-08-30 09:55:04 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2319614Z 2025-08-30 09:55:04 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2319812Z 2025-08-30 09:55:04 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2320038Z 2025-08-30 09:55:04 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2320149Z 2025-08-30 09:55:04 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2320274Z 2025-08-30 09:55:04 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2320447Z 2025-08-30 09:55:04 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2320562Z 2025-08-30 09:55:04 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2320686Z 2025-08-30 09:55:04 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2320831Z 2025-08-30 09:55:04 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2320961Z 2025-08-30 09:55:04 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2321217Z 2025-08-30 09:55:04 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2321486Z 2025-08-30 09:55:04 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2321754Z 2025-08-30 09:55:04 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2322008Z 2025-08-30 09:55:04 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2322165Z 2025-08-30 09:55:04 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2322278Z 2025-08-30 09:55:04 INFO Validating configuration ...
2025-08-30T09:58:47.2322631Z 2025-08-30 09:55:04 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2322918Z 2025-08-30 09:55:04 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2323515Z 2025-08-30 09:55:04 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2323735Z 2025-08-30 09:55:04 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2323923Z 2025-08-30 09:55:04 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2324065Z 2025-08-30 09:55:04 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2324177Z 2025-08-30 09:55:04 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2324418Z 2025-08-30 09:55:04 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2324529Z 2025-08-30 09:55:04 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2324683Z 2025-08-30 09:55:04 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2324872Z 2025-08-30 09:55:04 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2325030Z 2025-08-30 09:55:04 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2325123Z 2025-08-30 09:55:04 DEBUG Dropping last candle
2025-08-30T09:58:47.2325331Z 2025-08-30 09:55:04 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.2325484Z _____________________ test_backtest_multi_pair[30-LTC/BTC] _____________________
2025-08-30T09:58:47.2325489Z 
2025-08-30T09:58:47.2326096Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2326336Z fee = <MagicMock id='140074803302224'>
2025-08-30T09:58:47.2326524Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c88ca090>, tres = 30
2025-08-30T09:58:47.2326588Z pair = 'LTC/BTC'
2025-08-30T09:58:47.2326779Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2326783Z 
2025-08-30T09:58:47.2326917Z     @pytest.mark.parametrize("pair", ["ADA/BTC", "LTC/BTC"])
2025-08-30T09:58:47.2327016Z     @pytest.mark.parametrize("tres", [0, 20, 30])
2025-08-30T09:58:47.2327210Z     def test_backtest_multi_pair(default_conf, fee, mocker, tres, pair, testdatadir):
2025-08-30T09:58:47.2327454Z         def _trend_alternate_hold(dataframe=None, metadata=None):
2025-08-30T09:58:47.2327516Z             """
2025-08-30T09:58:47.2327680Z             Buy every xth candle - sell every other xth -2 (hold on to pairs a bit)
2025-08-30T09:58:47.2327745Z             """
2025-08-30T09:58:47.2327844Z             if metadata["pair"] in ("ETH/BTC", "LTC/BTC"):
2025-08-30T09:58:47.2327911Z                 multi = 20
2025-08-30T09:58:47.2327969Z             else:
2025-08-30T09:58:47.2328035Z                 multi = 18
2025-08-30T09:58:47.2328218Z             dataframe["enter_long"] = np.where(dataframe.index % multi == 0, 1, 0)
2025-08-30T09:58:47.2328558Z             dataframe["exit_long"] = np.where((dataframe.index + multi - 2) % multi == 0, 1, 0)
2025-08-30T09:58:47.2328648Z             dataframe["enter_short"] = 0
2025-08-30T09:58:47.2328730Z             dataframe["exit_short"] = 0
2025-08-30T09:58:47.2328800Z             return dataframe
2025-08-30T09:58:47.2328857Z     
2025-08-30T09:58:47.2328942Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.2329107Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2329274Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2329365Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2329440Z         patch_exchange(mocker)
2025-08-30T09:58:47.2329495Z     
2025-08-30T09:58:47.2329628Z         pairs = ["ADA/BTC", "DASH/BTC", "ETH/BTC", "LTC/BTC", "NXT/BTC"]
2025-08-30T09:58:47.2329800Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=pairs)
2025-08-30T09:58:47.2329895Z         # Only use 500 lines to increase performance
2025-08-30T09:58:47.2329978Z         data = trim_dictlist(data, -500)
2025-08-30T09:58:47.2330033Z     
2025-08-30T09:58:47.2330156Z         # Remove data for one pair from the beginning of the data
2025-08-30T09:58:47.2330220Z         if tres > 0:
2025-08-30T09:58:47.2330321Z >           data[pair] = data[pair][tres:].reset_index()
2025-08-30T09:58:47.2330397Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2330403Z 
2025-08-30T09:58:47.2330493Z tests/optimize/test_backtesting.py:1545: 
2025-08-30T09:58:47.2330601Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2330787Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6479: in reset_index
2025-08-30T09:58:47.2330850Z     new_obj.insert(
2025-08-30T09:58:47.2330950Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2330956Z 
2025-08-30T09:58:47.2331070Z self =      level_0                     index  ...     close      volume
2025-08-30T09:58:47.2331203Z 30      5290 2018-01-28 13:45:00+00:00  ...   0.0161...00  ...  0.016072   60.072092
2025-08-30T09:58:47.2331314Z 499     5759 2018-01-30 04:50:00+00:00  ...  0.016145   20.970956
2025-08-30T09:58:47.2331318Z 
2025-08-30T09:58:47.2331384Z [470 rows x 7 columns]
2025-08-30T09:58:47.2331457Z loc = 0, column = 'level_0'
2025-08-30T09:58:47.2331583Z value = array([ 30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,
2025-08-30T09:58:47.2331677Z         43,  44,  45,  46,  47,  48,  49,  50,...479, 480, 481, 482, 483, 484,
2025-08-30T09:58:47.2331884Z        485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497,
2025-08-30T09:58:47.2331942Z        498, 499])
2025-08-30T09:58:47.2332018Z allow_duplicates = False
2025-08-30T09:58:47.2332023Z 
2025-08-30T09:58:47.2332081Z     def insert(
2025-08-30T09:58:47.2332138Z         self,
2025-08-30T09:58:47.2332202Z         loc: int,
2025-08-30T09:58:47.2332271Z         column: Hashable,
2025-08-30T09:58:47.2332351Z         value: Scalar | AnyArrayLike,
2025-08-30T09:58:47.2332481Z         allow_duplicates: bool | lib.NoDefault = lib.no_default,
2025-08-30T09:58:47.2332542Z     ) -> None:
2025-08-30T09:58:47.2332598Z         """
2025-08-30T09:58:47.2332713Z         Insert column into DataFrame at specified location.
2025-08-30T09:58:47.2332771Z     
2025-08-30T09:58:47.2333008Z         Raises a ValueError if `column` is already contained in the DataFrame,
2025-08-30T09:58:47.2333104Z         unless `allow_duplicates` is set to True.
2025-08-30T09:58:47.2333167Z     
2025-08-30T09:58:47.2333228Z         Parameters
2025-08-30T09:58:47.2333289Z         ----------
2025-08-30T09:58:47.2333457Z         loc : int
2025-08-30T09:58:47.2333592Z             Insertion index. Must verify 0 <= loc <= len(columns).
2025-08-30T09:58:47.2333683Z         column : str, number, or hashable object
2025-08-30T09:58:47.2333763Z             Label of the inserted column.
2025-08-30T09:58:47.2333850Z         value : Scalar, Series, or array-like
2025-08-30T09:58:47.2333930Z             Content of the inserted column.
2025-08-30T09:58:47.2334059Z         allow_duplicates : bool, optional, default lib.no_default
2025-08-30T09:58:47.2334163Z             Allow duplicate column labels to be created.
2025-08-30T09:58:47.2334217Z     
2025-08-30T09:58:47.2334276Z         See Also
2025-08-30T09:58:47.2334341Z         --------
2025-08-30T09:58:47.2334434Z         Index.insert : Insert new item by index.
2025-08-30T09:58:47.2334488Z     
2025-08-30T09:58:47.2334547Z         Examples
2025-08-30T09:58:47.2334613Z         --------
2025-08-30T09:58:47.2334716Z         >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
2025-08-30T09:58:47.2334774Z         >>> df
2025-08-30T09:58:47.2334836Z            col1  col2
2025-08-30T09:58:47.2334899Z         0     1     3
2025-08-30T09:58:47.2334958Z         1     2     4
2025-08-30T09:58:47.2335035Z         >>> df.insert(1, "newcol", [99, 99])
2025-08-30T09:58:47.2335099Z         >>> df
2025-08-30T09:58:47.2335169Z            col1  newcol  col2
2025-08-30T09:58:47.2335230Z         0     1      99     3
2025-08-30T09:58:47.2335290Z         1     2      99     4
2025-08-30T09:58:47.2335409Z         >>> df.insert(0, "col1", [100, 100], allow_duplicates=True)
2025-08-30T09:58:47.2335468Z         >>> df
2025-08-30T09:58:47.2335545Z            col1  col1  newcol  col2
2025-08-30T09:58:47.2335612Z         0   100     1      99     3
2025-08-30T09:58:47.2335674Z         1   100     2      99     4
2025-08-30T09:58:47.2335728Z     
2025-08-30T09:58:47.2335919Z         Notice that pandas uses index alignment in case of `value` from type `Series`:
2025-08-30T09:58:47.2335978Z     
2025-08-30T09:58:47.2336087Z         >>> df.insert(0, "col0", pd.Series([5, 6], index=[1, 2]))
2025-08-30T09:58:47.2336144Z         >>> df
2025-08-30T09:58:47.2336224Z            col0  col1  col1  newcol  col2
2025-08-30T09:58:47.2336291Z         0   NaN   100     1      99     3
2025-08-30T09:58:47.2336356Z         1   5.0   100     2      99     4
2025-08-30T09:58:47.2336415Z         """
2025-08-30T09:58:47.2336503Z         if allow_duplicates is lib.no_default:
2025-08-30T09:58:47.2336580Z             allow_duplicates = False
2025-08-30T09:58:47.2336726Z         if allow_duplicates and not self.flags.allows_duplicate_labels:
2025-08-30T09:58:47.2336799Z             raise ValueError(
2025-08-30T09:58:47.2336912Z                 "Cannot specify 'allow_duplicates=True' when "
2025-08-30T09:58:47.2337022Z                 "'self.flags.allows_duplicate_labels' is False."
2025-08-30T09:58:47.2337230Z             )
2025-08-30T09:58:47.2337344Z         if not allow_duplicates and column in self.columns:
2025-08-30T09:58:47.2337437Z             # Should this be a different kind of error??
2025-08-30T09:58:47.2337576Z >           raise ValueError(f"cannot insert {column}, already exists")
2025-08-30T09:58:47.2337688Z E           ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.2337694Z 
2025-08-30T09:58:47.2337871Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:5165: ValueError
2025-08-30T09:58:47.2338009Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2338224Z 2025-08-30 09:55:06 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5720 - after: 5760 - 0.70%
2025-08-30T09:58:47.2338536Z 2025-08-30 09:55:06 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.2338681Z _______________________ test_backtest_alternate_buy_sell _______________________
2025-08-30T09:58:47.2338695Z 
2025-08-30T09:58:47.2338875Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2338934Z key = 'date'
2025-08-30T09:58:47.2338939Z 
2025-08-30T09:58:47.2339010Z     def get_loc(self, key):
2025-08-30T09:58:47.2339070Z         """
2025-08-30T09:58:47.2339219Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2339273Z     
2025-08-30T09:58:47.2339337Z         Parameters
2025-08-30T09:58:47.2339397Z         ----------
2025-08-30T09:58:47.2339459Z         key : label
2025-08-30T09:58:47.2339514Z     
2025-08-30T09:58:47.2339575Z         Returns
2025-08-30T09:58:47.2339633Z         -------
2025-08-30T09:58:47.2339754Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2339817Z     
2025-08-30T09:58:47.2339877Z         Examples
2025-08-30T09:58:47.2339936Z         --------
2025-08-30T09:58:47.2340022Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2340107Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2340162Z         1
2025-08-30T09:58:47.2340216Z     
2025-08-30T09:58:47.2340314Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2340392Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2340459Z         slice(1, 3, None)
2025-08-30T09:58:47.2340513Z     
2025-08-30T09:58:47.2340614Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2340695Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2340775Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2340835Z         """
2025-08-30T09:58:47.2340926Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2340983Z         try:
2025-08-30T09:58:47.2341082Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2341151Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2341156Z 
2025-08-30T09:58:47.2341327Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2341434Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2341605Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2341663Z     ???
2025-08-30T09:58:47.2341820Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2341879Z     ???
2025-08-30T09:58:47.2342136Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2342192Z     ???
2025-08-30T09:58:47.2342295Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2342300Z 
2025-08-30T09:58:47.2342355Z >   ???
2025-08-30T09:58:47.2342423Z E   KeyError: 'date'
2025-08-30T09:58:47.2342428Z 
2025-08-30T09:58:47.2342555Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2342560Z 
2025-08-30T09:58:47.2342717Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2342813Z 
2025-08-30T09:58:47.2343256Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2343484Z fee = <MagicMock id='140075621924752'>
2025-08-30T09:58:47.2343715Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c872b110>
2025-08-30T09:58:47.2343933Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2343939Z 
2025-08-30T09:58:47.2344130Z     def test_backtest_alternate_buy_sell(default_conf, fee, mocker, testdatadir):
2025-08-30T09:58:47.2344291Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2344584Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2344682Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2344769Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.2344854Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.2344934Z >       backtest_conf = _make_backtest_conf(
2025-08-30T09:58:47.2345097Z             mocker, conf=default_conf, pair="UNITTEST/BTC", datadir=testdatadir
2025-08-30T09:58:47.2345160Z         )
2025-08-30T09:58:47.2345165Z 
2025-08-30T09:58:47.2345254Z tests/optimize/test_backtesting.py:1488: 
2025-08-30T09:58:47.2345355Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2345505Z tests/optimize/test_backtesting.py:101: in _make_backtest_conf
2025-08-30T09:58:47.2345651Z     processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2345730Z                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2345880Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2345971Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2346105Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2346219Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2346288Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2346473Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2346561Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2346627Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2346725Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2346729Z 
2025-08-30T09:58:47.2346921Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2346981Z key = 'date'
2025-08-30T09:58:47.2346985Z 
2025-08-30T09:58:47.2347057Z     def get_loc(self, key):
2025-08-30T09:58:47.2347123Z         """
2025-08-30T09:58:47.2347271Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2347327Z     
2025-08-30T09:58:47.2347392Z         Parameters
2025-08-30T09:58:47.2347460Z         ----------
2025-08-30T09:58:47.2347520Z         key : label
2025-08-30T09:58:47.2347574Z     
2025-08-30T09:58:47.2347637Z         Returns
2025-08-30T09:58:47.2347696Z         -------
2025-08-30T09:58:47.2347829Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2347888Z     
2025-08-30T09:58:47.2347970Z         Examples
2025-08-30T09:58:47.2348029Z         --------
2025-08-30T09:58:47.2348115Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2348195Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2348253Z         1
2025-08-30T09:58:47.2348307Z     
2025-08-30T09:58:47.2348399Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2348486Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2348553Z         slice(1, 3, None)
2025-08-30T09:58:47.2348607Z     
2025-08-30T09:58:47.2348711Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2348912Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2348993Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2349050Z         """
2025-08-30T09:58:47.2349143Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2349200Z         try:
2025-08-30T09:58:47.2349290Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2349371Z         except KeyError as err:
2025-08-30T09:58:47.2349462Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2349551Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2349663Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2349721Z             ):
2025-08-30T09:58:47.2349804Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2349962Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2350040Z E           KeyError: 'date'
2025-08-30T09:58:47.2350045Z 
2025-08-30T09:58:47.2350235Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2350378Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2350610Z 2025-08-30 09:55:06 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.2350722Z 2025-08-30 09:55:06 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2350848Z 2025-08-30 09:55:06 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2350932Z 2025-08-30 09:55:06 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2351023Z 2025-08-30 09:55:06 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2351144Z 2025-08-30 09:55:06 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2351262Z 2025-08-30 09:55:06 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2351588Z 2025-08-30 09:55:06 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2352077Z 2025-08-30 09:55:06 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2352500Z 2025-08-30 09:55:06 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2352596Z 2025-08-30 09:55:06 INFO Found no parameter file.
2025-08-30T09:58:47.2352879Z 2025-08-30 09:55:06 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2353058Z 2025-08-30 09:55:06 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2353235Z 2025-08-30 09:55:06 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2353542Z 2025-08-30 09:55:06 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2353733Z 2025-08-30 09:55:06 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2354005Z 2025-08-30 09:55:06 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2354190Z 2025-08-30 09:55:06 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2354385Z 2025-08-30 09:55:06 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2354492Z 2025-08-30 09:55:06 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2354598Z 2025-08-30 09:55:06 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2354713Z 2025-08-30 09:55:06 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2354863Z 2025-08-30 09:55:06 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2355021Z 2025-08-30 09:55:06 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2355150Z 2025-08-30 09:55:06 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2355292Z 2025-08-30 09:55:06 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2355740Z 2025-08-30 09:55:06 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2355930Z 2025-08-30 09:55:06 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2356049Z 2025-08-30 09:55:06 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2356160Z 2025-08-30 09:55:06 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2356284Z 2025-08-30 09:55:06 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2356455Z 2025-08-30 09:55:06 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2356571Z 2025-08-30 09:55:06 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2356815Z 2025-08-30 09:55:06 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2356965Z 2025-08-30 09:55:06 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2357092Z 2025-08-30 09:55:06 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2357232Z 2025-08-30 09:55:06 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2357381Z 2025-08-30 09:55:06 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2357527Z 2025-08-30 09:55:06 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2357667Z 2025-08-30 09:55:06 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2357774Z 2025-08-30 09:55:06 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2357882Z 2025-08-30 09:55:06 INFO Validating configuration ...
2025-08-30T09:58:47.2358234Z 2025-08-30 09:55:06 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2358527Z 2025-08-30 09:55:06 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2358969Z 2025-08-30 09:55:06 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2359172Z 2025-08-30 09:55:06 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2359346Z 2025-08-30 09:55:06 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2359488Z 2025-08-30 09:55:06 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2359600Z 2025-08-30 09:55:06 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2359828Z 2025-08-30 09:55:06 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2359945Z 2025-08-30 09:55:06 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2360103Z 2025-08-30 09:55:06 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2360288Z 2025-08-30 09:55:06 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2360452Z 2025-08-30 09:55:06 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2360634Z ______ test_backtest_start_multi_strat_caching[day-start_delta3-changed] _______
2025-08-30T09:58:47.2360639Z 
2025-08-30T09:58:47.2361221Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2361385Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e476bb90>
2025-08-30T09:58:47.2361549Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c897b410>
2025-08-30T09:58:47.2361740Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2361867Z run_id = 'changed', start_delta = {'weeks': 4}, cache = 'day'
2025-08-30T09:58:47.2361877Z 
2025-08-30T09:58:47.2361992Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2362198Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2362417Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2362574Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2362670Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2362832Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2362894Z     ):
2025-08-30T09:58:47.2362969Z         default_conf.update(
2025-08-30T09:58:47.2363027Z             {
2025-08-30T09:58:47.2363104Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2363188Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2363264Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2363555Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2363622Z             }
2025-08-30T09:58:47.2363679Z         )
2025-08-30T09:58:47.2363756Z         patch_exchange(mocker)
2025-08-30T09:58:47.2363845Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2363914Z             return_value={
2025-08-30T09:58:47.2364026Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2364099Z                 "config": default_conf,
2025-08-30T09:58:47.2364169Z                 "locks": [],
2025-08-30T09:58:47.2364241Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2364321Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2364399Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2364478Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2364555Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2364630Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2364712Z                 "final_balance": 1000,
2025-08-30T09:58:47.2364768Z             }
2025-08-30T09:58:47.2364823Z         )
2025-08-30T09:58:47.2364895Z         mocker.patch(
2025-08-30T09:58:47.2365083Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2365185Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2365246Z         )
2025-08-30T09:58:47.2365480Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2365692Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2365750Z     
2025-08-30T09:58:47.2365854Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2365995Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2366063Z         if cache == "none":
2025-08-30T09:58:47.2366162Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2366236Z         elif cache == "day":
2025-08-30T09:58:47.2366332Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2366407Z         elif cache == "week":
2025-08-30T09:58:47.2366506Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2366575Z         elif cache == "month":
2025-08-30T09:58:47.2366668Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2366755Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2366822Z             return_value={
2025-08-30T09:58:47.2367065Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2367419Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2367514Z             }
2025-08-30T09:58:47.2367621Z         )
2025-08-30T09:58:47.2367734Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2367804Z             side_effect=[
2025-08-30T09:58:47.2367865Z                 {
2025-08-30T09:58:47.2367977Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2368070Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2368322Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2368380Z                 },
2025-08-30T09:58:47.2368448Z                 {
2025-08-30T09:58:47.2368567Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2368662Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2368778Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2368836Z                 },
2025-08-30T09:58:47.2368892Z             ]
2025-08-30T09:58:47.2368949Z         )
2025-08-30T09:58:47.2369024Z         mocker.patch(
2025-08-30T09:58:47.2369104Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2369171Z             return_value=[
2025-08-30T09:58:47.2369467Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2369527Z             ],
2025-08-30T09:58:47.2369583Z         )
2025-08-30T09:58:47.2369663Z         mocker.patch.multiple(
2025-08-30T09:58:47.2369774Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2369878Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2369969Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2370029Z         )
2025-08-30T09:58:47.2370415Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2370426Z 
2025-08-30T09:58:47.2370595Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2370720Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2370908Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2370984Z     return self._start_patch(
2025-08-30T09:58:47.2371208Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2371343Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2371409Z                        ^^^^^^^^^
2025-08-30T09:58:47.2371692Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2371773Z     result = self.__enter__()
2025-08-30T09:58:47.2371837Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2372125Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2372286Z     original, local = self.get_original()
2025-08-30T09:58:47.2372406Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2372584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2372593Z 
2025-08-30T09:58:47.2372777Z self = <unittest.mock._patch object at 0x7f6584e63e10>
2025-08-30T09:58:47.2372783Z 
2025-08-30T09:58:47.2372858Z     def get_original(self):
2025-08-30T09:58:47.2372936Z         target = self.getter()
2025-08-30T09:58:47.2373007Z         name = self.attribute
2025-08-30T09:58:47.2373067Z     
2025-08-30T09:58:47.2373135Z         original = DEFAULT
2025-08-30T09:58:47.2373203Z         local = False
2025-08-30T09:58:47.2373263Z     
2025-08-30T09:58:47.2373322Z         try:
2025-08-30T09:58:47.2373598Z             original = target.__dict__[name]
2025-08-30T09:58:47.2373690Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2373791Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2373850Z         else:
2025-08-30T09:58:47.2373917Z             local = True
2025-08-30T09:58:47.2373978Z     
2025-08-30T09:58:47.2374106Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2374178Z             self.create = True
2025-08-30T09:58:47.2381175Z     
2025-08-30T09:58:47.2381301Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2381394Z >           raise AttributeError(
2025-08-30T09:58:47.2381526Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2381585Z             )
2025-08-30T09:58:47.2382208Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2382389Z 
2025-08-30T09:58:47.2382653Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2382839Z ______ test_backtest_start_multi_strat_caching[day-start_delta1-changed] _______
2025-08-30T09:58:47.2382844Z 
2025-08-30T09:58:47.2383714Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2383904Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65945ac810>
2025-08-30T09:58:47.2384202Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e464c150>
2025-08-30T09:58:47.2384414Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2384548Z run_id = 'changed', start_delta = {'days': 1}, cache = 'day'
2025-08-30T09:58:47.2384553Z 
2025-08-30T09:58:47.2384674Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2384796Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2385024Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2385184Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2385285Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2385454Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2385513Z     ):
2025-08-30T09:58:47.2385591Z         default_conf.update(
2025-08-30T09:58:47.2385654Z             {
2025-08-30T09:58:47.2385738Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2385816Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2385892Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2385987Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2386045Z             }
2025-08-30T09:58:47.2386103Z         )
2025-08-30T09:58:47.2386179Z         patch_exchange(mocker)
2025-08-30T09:58:47.2386261Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2386330Z             return_value={
2025-08-30T09:58:47.2386445Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2386526Z                 "config": default_conf,
2025-08-30T09:58:47.2386594Z                 "locks": [],
2025-08-30T09:58:47.2386666Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2386745Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2386827Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2386910Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2386988Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2387069Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2387148Z                 "final_balance": 1000,
2025-08-30T09:58:47.2387205Z             }
2025-08-30T09:58:47.2387267Z         )
2025-08-30T09:58:47.2387339Z         mocker.patch(
2025-08-30T09:58:47.2387629Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2387822Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2387897Z         )
2025-08-30T09:58:47.2388137Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2388348Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2388409Z     
2025-08-30T09:58:47.2388514Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2388665Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2388738Z         if cache == "none":
2025-08-30T09:58:47.2388901Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2389121Z         elif cache == "day":
2025-08-30T09:58:47.2389225Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2389302Z         elif cache == "week":
2025-08-30T09:58:47.2389400Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2389471Z         elif cache == "month":
2025-08-30T09:58:47.2389568Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2389651Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2389718Z             return_value={
2025-08-30T09:58:47.2389895Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2390084Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2390223Z             }
2025-08-30T09:58:47.2390283Z         )
2025-08-30T09:58:47.2390370Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2390437Z             side_effect=[
2025-08-30T09:58:47.2390500Z                 {
2025-08-30T09:58:47.2390660Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2390771Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2390893Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2390953Z                 },
2025-08-30T09:58:47.2391014Z                 {
2025-08-30T09:58:47.2391121Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2391206Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2391401Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2391502Z                 },
2025-08-30T09:58:47.2391560Z             ]
2025-08-30T09:58:47.2391627Z         )
2025-08-30T09:58:47.2391697Z         mocker.patch(
2025-08-30T09:58:47.2391779Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2391847Z             return_value=[
2025-08-30T09:58:47.2392067Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2392129Z             ],
2025-08-30T09:58:47.2392184Z         )
2025-08-30T09:58:47.2392267Z         mocker.patch.multiple(
2025-08-30T09:58:47.2392373Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2392481Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2392573Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2392638Z         )
2025-08-30T09:58:47.2392895Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2392901Z 
2025-08-30T09:58:47.2392992Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2393104Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2393287Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2393564Z     return self._start_patch(
2025-08-30T09:58:47.2393793Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2393874Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2393939Z                        ^^^^^^^^^
2025-08-30T09:58:47.2394162Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2394236Z     result = self.__enter__()
2025-08-30T09:58:47.2394297Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2394519Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2394607Z     original, local = self.get_original()
2025-08-30T09:58:47.2394673Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2394778Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2394784Z 
2025-08-30T09:58:47.2394906Z self = <unittest.mock._patch object at 0x7f65def528d0>
2025-08-30T09:58:47.2394912Z 
2025-08-30T09:58:47.2395129Z     def get_original(self):
2025-08-30T09:58:47.2395203Z         target = self.getter()
2025-08-30T09:58:47.2395278Z         name = self.attribute
2025-08-30T09:58:47.2395334Z     
2025-08-30T09:58:47.2395400Z         original = DEFAULT
2025-08-30T09:58:47.2395465Z         local = False
2025-08-30T09:58:47.2395528Z     
2025-08-30T09:58:47.2395586Z         try:
2025-08-30T09:58:47.2395670Z             original = target.__dict__[name]
2025-08-30T09:58:47.2395761Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2395853Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2395910Z         else:
2025-08-30T09:58:47.2395983Z             local = True
2025-08-30T09:58:47.2396037Z     
2025-08-30T09:58:47.2396271Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2396345Z             self.create = True
2025-08-30T09:58:47.2396405Z     
2025-08-30T09:58:47.2396499Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2396580Z >           raise AttributeError(
2025-08-30T09:58:47.2396696Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2396754Z             )
2025-08-30T09:58:47.2397358Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2397363Z 
2025-08-30T09:58:47.2397610Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2397759Z ____________________ test_backtest_start_multi_strat_nomock ____________________
2025-08-30T09:58:47.2397764Z 
2025-08-30T09:58:47.2397928Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2397997Z key = 'date'
2025-08-30T09:58:47.2398002Z 
2025-08-30T09:58:47.2398073Z     def get_loc(self, key):
2025-08-30T09:58:47.2398130Z         """
2025-08-30T09:58:47.2398284Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2398344Z     
2025-08-30T09:58:47.2398408Z         Parameters
2025-08-30T09:58:47.2398471Z         ----------
2025-08-30T09:58:47.2398538Z         key : label
2025-08-30T09:58:47.2398593Z     
2025-08-30T09:58:47.2398651Z         Returns
2025-08-30T09:58:47.2398712Z         -------
2025-08-30T09:58:47.2398906Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2398962Z     
2025-08-30T09:58:47.2399022Z         Examples
2025-08-30T09:58:47.2399087Z         --------
2025-08-30T09:58:47.2399177Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2399255Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2399312Z         1
2025-08-30T09:58:47.2399372Z     
2025-08-30T09:58:47.2399470Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2399550Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2399623Z         slice(1, 3, None)
2025-08-30T09:58:47.2399686Z     
2025-08-30T09:58:47.2399790Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2399878Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2399960Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2400018Z         """
2025-08-30T09:58:47.2400110Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2400173Z         try:
2025-08-30T09:58:47.2400535Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2400609Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2400614Z 
2025-08-30T09:58:47.2400796Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2400901Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2401074Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2401139Z     ???
2025-08-30T09:58:47.2401295Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2401460Z     ???
2025-08-30T09:58:47.2401736Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2401846Z     ???
2025-08-30T09:58:47.2401962Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2401968Z 
2025-08-30T09:58:47.2402024Z >   ???
2025-08-30T09:58:47.2402101Z E   KeyError: 'date'
2025-08-30T09:58:47.2402105Z 
2025-08-30T09:58:47.2402224Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2402229Z 
2025-08-30T09:58:47.2402384Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2402389Z 
2025-08-30T09:58:47.2403083Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2403242Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65845df1d0>
2025-08-30T09:58:47.2403532Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594027010>
2025-08-30T09:58:47.2403737Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2403890Z capsys = <_pytest.capture.CaptureFixture object at 0x7f65940272d0>
2025-08-30T09:58:47.2403895Z 
2025-08-30T09:58:47.2404126Z     def test_backtest_start_multi_strat_nomock(default_conf, mocker, caplog, testdatadir, capsys):
2025-08-30T09:58:47.2404207Z         default_conf.update(
2025-08-30T09:58:47.2404263Z             {
2025-08-30T09:58:47.2404342Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2404427Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2404503Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2404597Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2404655Z             }
2025-08-30T09:58:47.2404715Z         )
2025-08-30T09:58:47.2404796Z         patch_exchange(mocker)
2025-08-30T09:58:47.2404871Z         result1 = pd.DataFrame(
2025-08-30T09:58:47.2404932Z             {
2025-08-30T09:58:47.2405016Z                 "pair": ["XRP/BTC", "LTC/BTC"],
2025-08-30T09:58:47.2405093Z                 "profit_ratio": [0.0, 0.0],
2025-08-30T09:58:47.2405166Z                 "profit_abs": [0.0, 0.0],
2025-08-30T09:58:47.2405252Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.2405314Z                     [
2025-08-30T09:58:47.2405388Z                         "2018-01-29 18:40:00",
2025-08-30T09:58:47.2405463Z                         "2018-01-30 03:30:00",
2025-08-30T09:58:47.2405531Z                     ],
2025-08-30T09:58:47.2405598Z                     utc=True,
2025-08-30T09:58:47.2405659Z                 ),
2025-08-30T09:58:47.2405747Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.2405808Z                     [
2025-08-30T09:58:47.2405879Z                         "2018-01-29 20:45:00",
2025-08-30T09:58:47.2405955Z                         "2018-01-30 05:35:00",
2025-08-30T09:58:47.2406016Z                     ],
2025-08-30T09:58:47.2406081Z                     utc=True,
2025-08-30T09:58:47.2406142Z                 ),
2025-08-30T09:58:47.2406220Z                 "trade_duration": [235, 40],
2025-08-30T09:58:47.2406297Z                 "is_open": [False, False],
2025-08-30T09:58:47.2406373Z                 "stake_amount": [0.01, 0.01],
2025-08-30T09:58:47.2406458Z                 "open_rate": [0.104445, 0.10302485],
2025-08-30T09:58:47.2406535Z                 "close_rate": [0.104969, 0.103541],
2025-08-30T09:58:47.2406612Z                 "is_short": [False, False],
2025-08-30T09:58:47.2406748Z                 "exit_reason": [ExitType.ROI.value, ExitType.ROI.value],
2025-08-30T09:58:47.2406806Z             }
2025-08-30T09:58:47.2406867Z         )
2025-08-30T09:58:47.2406946Z         result2 = pd.DataFrame(
2025-08-30T09:58:47.2407002Z             {
2025-08-30T09:58:47.2407096Z                 "pair": ["XRP/BTC", "LTC/BTC", "ETH/BTC"],
2025-08-30T09:58:47.2407320Z                 "profit_ratio": [0.03, 0.01, 0.1],
2025-08-30T09:58:47.2407405Z                 "profit_abs": [0.01, 0.02, 0.2],
2025-08-30T09:58:47.2407484Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.2407626Z                     ["2018-01-29 18:40:00", "2018-01-30 03:30:00", "2018-01-30 05:30:00"], utc=True
2025-08-30T09:58:47.2407688Z                 ),
2025-08-30T09:58:47.2407769Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.2407897Z                     ["2018-01-29 20:45:00", "2018-01-30 05:35:00", "2018-01-30 08:30:00"], utc=True
2025-08-30T09:58:47.2407959Z                 ),
2025-08-30T09:58:47.2408038Z                 "trade_duration": [47, 40, 20],
2025-08-30T09:58:47.2408124Z                 "is_open": [False, False, False],
2025-08-30T09:58:47.2408309Z                 "stake_amount": [0.01, 0.01, 0.01],
2025-08-30T09:58:47.2408412Z                 "open_rate": [0.104445, 0.10302485, 0.122541],
2025-08-30T09:58:47.2408506Z                 "close_rate": [0.104969, 0.103541, 0.123541],
2025-08-30T09:58:47.2408586Z                 "is_short": [False, False, False],
2025-08-30T09:58:47.2408793Z                 "exit_reason": [ExitType.ROI.value, ExitType.ROI.value, ExitType.STOP_LOSS.value],
2025-08-30T09:58:47.2408854Z             }
2025-08-30T09:58:47.2408910Z         )
2025-08-30T09:58:47.2408987Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2409058Z             side_effect=[
2025-08-30T09:58:47.2409113Z                 {
2025-08-30T09:58:47.2409187Z                     "results": result1,
2025-08-30T09:58:47.2409268Z                     "config": default_conf,
2025-08-30T09:58:47.2409337Z                     "locks": [],
2025-08-30T09:58:47.2409414Z                     "rejected_signals": 20,
2025-08-30T09:58:47.2409499Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.2409582Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.2409663Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.2409744Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.2409824Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.2409902Z                     "final_balance": 1000,
2025-08-30T09:58:47.2409958Z                 },
2025-08-30T09:58:47.2410015Z                 {
2025-08-30T09:58:47.2410091Z                     "results": result2,
2025-08-30T09:58:47.2410164Z                     "config": default_conf,
2025-08-30T09:58:47.2410232Z                     "locks": [],
2025-08-30T09:58:47.2410310Z                     "rejected_signals": 20,
2025-08-30T09:58:47.2410386Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.2410464Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.2410550Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.2410627Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.2410702Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.2410782Z                     "final_balance": 1000,
2025-08-30T09:58:47.2410843Z                 },
2025-08-30T09:58:47.2410899Z             ]
2025-08-30T09:58:47.2410955Z         )
2025-08-30T09:58:47.2411029Z         mocker.patch(
2025-08-30T09:58:47.2411215Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2411319Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2411375Z         )
2025-08-30T09:58:47.2411614Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2411670Z     
2025-08-30T09:58:47.2411814Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.2411874Z     
2025-08-30T09:58:47.2411933Z         args = [
2025-08-30T09:58:47.2412007Z             "backtesting",
2025-08-30T09:58:47.2412077Z             "--config",
2025-08-30T09:58:47.2412144Z             "config.json",
2025-08-30T09:58:47.2412209Z             "--datadir",
2025-08-30T09:58:47.2412373Z             str(testdatadir),
2025-08-30T09:58:47.2412450Z             "--strategy-path",
2025-08-30T09:58:47.2412563Z             str(Path(__file__).parents[1] / "strategy/strats"),
2025-08-30T09:58:47.2412629Z             "--timeframe",
2025-08-30T09:58:47.2412691Z             "1m",
2025-08-30T09:58:47.2412756Z             "--timerange",
2025-08-30T09:58:47.2412823Z             "1510694220-1510700340",
2025-08-30T09:58:47.2412911Z             "--enable-position-stacking",
2025-08-30T09:58:47.2412979Z             "--breakdown",
2025-08-30T09:58:47.2413051Z             "day",
2025-08-30T09:58:47.2413126Z             "--strategy-list",
2025-08-30T09:58:47.2413204Z             CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.2413273Z             "StrategyTestV2",
2025-08-30T09:58:47.2413329Z         ]
2025-08-30T09:58:47.2413612Z         args = get_args(args)
2025-08-30T09:58:47.2413696Z >       start_backtesting(args)
2025-08-30T09:58:47.2413701Z 
2025-08-30T09:58:47.2413794Z tests/optimize/test_backtesting.py:2230: 
2025-08-30T09:58:47.2413902Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2414065Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.2414136Z     backtesting.start()
2025-08-30T09:58:47.2414239Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.2414324Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.2414389Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2414510Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.2414612Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.2414692Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2414832Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.2414899Z     timeranges = [
2025-08-30T09:58:47.2415036Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.2415190Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.2415252Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.2415442Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2415525Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2415589Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2415687Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2415697Z 
2025-08-30T09:58:47.2415855Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2415916Z key = 'date'
2025-08-30T09:58:47.2415921Z 
2025-08-30T09:58:47.2415992Z     def get_loc(self, key):
2025-08-30T09:58:47.2416055Z         """
2025-08-30T09:58:47.2416212Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2416268Z     
2025-08-30T09:58:47.2416333Z         Parameters
2025-08-30T09:58:47.2416395Z         ----------
2025-08-30T09:58:47.2416456Z         key : label
2025-08-30T09:58:47.2416515Z     
2025-08-30T09:58:47.2416577Z         Returns
2025-08-30T09:58:47.2416637Z         -------
2025-08-30T09:58:47.2416760Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2416819Z     
2025-08-30T09:58:47.2416878Z         Examples
2025-08-30T09:58:47.2416939Z         --------
2025-08-30T09:58:47.2417026Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2417107Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2417161Z         1
2025-08-30T09:58:47.2417215Z     
2025-08-30T09:58:47.2417307Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2417387Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2417452Z         slice(1, 3, None)
2025-08-30T09:58:47.2417505Z     
2025-08-30T09:58:47.2417617Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2417699Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2417781Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2417962Z         """
2025-08-30T09:58:47.2418055Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2418112Z         try:
2025-08-30T09:58:47.2418204Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2418276Z         except KeyError as err:
2025-08-30T09:58:47.2418363Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2418453Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2418571Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2418633Z             ):
2025-08-30T09:58:47.2418723Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2418799Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2418868Z E           KeyError: 'date'
2025-08-30T09:58:47.2418953Z 
2025-08-30T09:58:47.2419154Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2419297Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2419410Z 2025-08-30 09:55:10 INFO Using config: config.json ...
2025-08-30T09:58:47.2419505Z 2025-08-30 09:55:10 INFO Enabling colorized output.
2025-08-30T09:58:47.2419629Z 2025-08-30 09:55:10 INFO Logfile configured
2025-08-30T09:58:47.2419777Z 2025-08-30 09:55:10 INFO Verbosity set to 3
2025-08-30T09:58:47.2420311Z 2025-08-30 09:55:10 INFO Using additional Strategy lookup path: /home/runner/work/freqtrade/freqtrade/tests/strategy/strats
2025-08-30T09:58:47.2420507Z 2025-08-30 09:55:10 INFO Parameter -i/--timeframe detected ... Using timeframe: 1m ...
2025-08-30T09:58:47.2420667Z 2025-08-30 09:55:10 INFO Parameter --enable-position-stacking detected ...
2025-08-30T09:58:47.2420771Z 2025-08-30 09:55:10 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.2420941Z 2025-08-30 09:55:10 INFO Parameter --timerange detected: 1510694220-1510700340 ...
2025-08-30T09:58:47.2421267Z 2025-08-30 09:55:10 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_start_multi_stra11/user_data ...
2025-08-30T09:58:47.2421508Z 2025-08-30 09:55:10 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.2421628Z 2025-08-30 09:55:10 INFO Using strategy list of 2 strategies
2025-08-30T09:58:47.2421772Z 2025-08-30 09:55:10 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.2421886Z 2025-08-30 09:55:10 INFO Parameter --breakdown detected ...
2025-08-30T09:58:47.2421997Z 2025-08-30 09:55:10 INFO Parameter --cache=day detected ...
2025-08-30T09:58:47.2422139Z 2025-08-30 09:55:10 INFO Filter trades by timerange: 1510694220-1510700340
2025-08-30T09:58:47.2422229Z 2025-08-30 09:55:10 INFO Checking exchange...
2025-08-30T09:58:47.2422460Z 2025-08-30 09:55:10 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.2422575Z 2025-08-30 09:55:10 INFO Using pairlist from configuration.
2025-08-30T09:58:47.2422678Z 2025-08-30 09:55:10 INFO Validating configuration ...
2025-08-30T09:58:47.2422804Z 2025-08-30 09:55:10 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.2422914Z 2025-08-30 09:55:10 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2423038Z 2025-08-30 09:55:10 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2423116Z 2025-08-30 09:55:10 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2423213Z 2025-08-30 09:55:10 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2423334Z 2025-08-30 09:55:10 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2423670Z 2025-08-30 09:55:10 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2424000Z 2025-08-30 09:55:10 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2424503Z 2025-08-30 09:55:10 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2425122Z 2025-08-30 09:55:10 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2425229Z 2025-08-30 09:55:10 INFO Found no parameter file.
2025-08-30T09:58:47.2425520Z 2025-08-30 09:55:10 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2425697Z 2025-08-30 09:55:10 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2425875Z 2025-08-30 09:55:10 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2426106Z 2025-08-30 09:55:10 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2426406Z 2025-08-30 09:55:10 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2426772Z 2025-08-30 09:55:10 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2426980Z 2025-08-30 09:55:10 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.2427182Z 2025-08-30 09:55:10 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.2427413Z 2025-08-30 09:55:10 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.2427613Z 2025-08-30 09:55:10 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.2427800Z 2025-08-30 09:55:10 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2427993Z 2025-08-30 09:55:10 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2428104Z 2025-08-30 09:55:10 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2428209Z 2025-08-30 09:55:10 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2428325Z 2025-08-30 09:55:10 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2428482Z 2025-08-30 09:55:10 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2428637Z 2025-08-30 09:55:10 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2428765Z 2025-08-30 09:55:10 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2428907Z 2025-08-30 09:55:10 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2429208Z 2025-08-30 09:55:10 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2429408Z 2025-08-30 09:55:10 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2429524Z 2025-08-30 09:55:10 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2429636Z 2025-08-30 09:55:10 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2429761Z 2025-08-30 09:55:10 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2430038Z 2025-08-30 09:55:10 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2430160Z 2025-08-30 09:55:10 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2430279Z 2025-08-30 09:55:10 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2430421Z 2025-08-30 09:55:10 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2430541Z 2025-08-30 09:55:10 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2430678Z 2025-08-30 09:55:10 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2430828Z 2025-08-30 09:55:10 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2430973Z 2025-08-30 09:55:10 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2431116Z 2025-08-30 09:55:10 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2431227Z 2025-08-30 09:55:10 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2431421Z 2025-08-30 09:55:10 INFO Validating configuration ...
2025-08-30T09:58:47.2431741Z 2025-08-30 09:55:10 DEBUG Searching for IStrategy StrategyTestV2 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2432156Z 2025-08-30 09:55:10 INFO Using resolved strategy StrategyTestV2 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v2.py'...
2025-08-30T09:58:47.2432254Z 2025-08-30 09:55:10 INFO Found no parameter file.
2025-08-30T09:58:47.2432447Z 2025-08-30 09:55:10 WARNING DEPRECATED: Using 'use_sell_signal' moved to 'use_exit_signal'.
2025-08-30T09:58:47.2432729Z 2025-08-30 09:55:10 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2432982Z 2025-08-30 09:55:10 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2433162Z 2025-08-30 09:55:10 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2433552Z 2025-08-30 09:55:10 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2433775Z 2025-08-30 09:55:10 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2434137Z 2025-08-30 09:55:10 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2434335Z 2025-08-30 09:55:10 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.2434534Z 2025-08-30 09:55:10 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.2434768Z 2025-08-30 09:55:10 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.2434972Z 2025-08-30 09:55:10 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.2435158Z 2025-08-30 09:55:10 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2435358Z 2025-08-30 09:55:10 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2435460Z 2025-08-30 09:55:10 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2435564Z 2025-08-30 09:55:10 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2435684Z 2025-08-30 09:55:10 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2435831Z 2025-08-30 09:55:10 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2435985Z 2025-08-30 09:55:10 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2436117Z 2025-08-30 09:55:10 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2436252Z 2025-08-30 09:55:10 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2436558Z 2025-08-30 09:55:10 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2436749Z 2025-08-30 09:55:10 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2436865Z 2025-08-30 09:55:10 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2436973Z 2025-08-30 09:55:10 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2437099Z 2025-08-30 09:55:10 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2437371Z 2025-08-30 09:55:10 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2437486Z 2025-08-30 09:55:10 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2437604Z 2025-08-30 09:55:10 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2437746Z 2025-08-30 09:55:10 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2437865Z 2025-08-30 09:55:10 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2438001Z 2025-08-30 09:55:10 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2438156Z 2025-08-30 09:55:10 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2438431Z 2025-08-30 09:55:10 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2438570Z 2025-08-30 09:55:10 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2438682Z 2025-08-30 09:55:10 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2438786Z 2025-08-30 09:55:10 INFO Validating configuration ...
2025-08-30T09:58:47.2439131Z 2025-08-30 09:55:10 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2439415Z 2025-08-30 09:55:10 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2439956Z 2025-08-30 09:55:10 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2440100Z 2025-08-30 09:55:10 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.2440302Z 2025-08-30 09:55:10 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2440476Z 2025-08-30 09:55:10 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2440601Z 2025-08-30 09:55:10 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.2440815Z 2025-08-30 09:55:10 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 118 - after: 123 - 4.24%
2025-08-30T09:58:47.2440987Z ______________ test_backtest_pricecontours[protections7-lower-0] _______________
2025-08-30T09:58:47.2440992Z 
2025-08-30T09:58:47.2441152Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2441217Z key = 'date'
2025-08-30T09:58:47.2441221Z 
2025-08-30T09:58:47.2441298Z     def get_loc(self, key):
2025-08-30T09:58:47.2441355Z         """
2025-08-30T09:58:47.2441506Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2441570Z     
2025-08-30T09:58:47.2441633Z         Parameters
2025-08-30T09:58:47.2441694Z         ----------
2025-08-30T09:58:47.2441758Z         key : label
2025-08-30T09:58:47.2441812Z     
2025-08-30T09:58:47.2441870Z         Returns
2025-08-30T09:58:47.2441929Z         -------
2025-08-30T09:58:47.2442054Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2442108Z     
2025-08-30T09:58:47.2442166Z         Examples
2025-08-30T09:58:47.2442228Z         --------
2025-08-30T09:58:47.2442317Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2442395Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2442451Z         1
2025-08-30T09:58:47.2442510Z     
2025-08-30T09:58:47.2442604Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2442686Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2442760Z         slice(1, 3, None)
2025-08-30T09:58:47.2442814Z     
2025-08-30T09:58:47.2442916Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2443000Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2443085Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2443141Z         """
2025-08-30T09:58:47.2443230Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2443290Z         try:
2025-08-30T09:58:47.2443489Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2443563Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2443568Z 
2025-08-30T09:58:47.2443746Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2443850Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2444017Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2444084Z     ???
2025-08-30T09:58:47.2444242Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2444297Z     ???
2025-08-30T09:58:47.2444681Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2444789Z     ???
2025-08-30T09:58:47.2444977Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2444986Z 
2025-08-30T09:58:47.2445086Z >   ???
2025-08-30T09:58:47.2445213Z E   KeyError: 'date'
2025-08-30T09:58:47.2445220Z 
2025-08-30T09:58:47.2445411Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2445417Z 
2025-08-30T09:58:47.2445579Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2445584Z 
2025-08-30T09:58:47.2446257Z default_conf = {'_strategy_protections': [{'method': 'CooldownPeriod', 'stop_duration': 3}], 'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.2446419Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f659401bad0>
2025-08-30T09:58:47.2446619Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2446770Z protections = [{'method': 'CooldownPeriod', 'stop_duration': 3}]
2025-08-30T09:58:47.2446847Z contour = 'lower', expected = 0
2025-08-30T09:58:47.2446852Z 
2025-08-30T09:58:47.2446934Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.2447027Z         "protections,contour,expected",
2025-08-30T09:58:47.2447083Z         [
2025-08-30T09:58:47.2447155Z             (None, "sine", 35),
2025-08-30T09:58:47.2447224Z             (None, "raise", 19),
2025-08-30T09:58:47.2447296Z             (None, "lower", 0),
2025-08-30T09:58:47.2447360Z             (None, "sine", 35),
2025-08-30T09:58:47.2447426Z             (None, "raise", 19),
2025-08-30T09:58:47.2447566Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2447708Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2447842Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.2447976Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2448105Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2448161Z         ],
2025-08-30T09:58:47.2448217Z     )
2025-08-30T09:58:47.2448382Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.2448663Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.2448777Z     ) -> None:
2025-08-30T09:58:47.2448876Z         if protections:
2025-08-30T09:58:47.2448998Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.2449094Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.2449153Z     
2025-08-30T09:58:47.2449232Z         patch_exchange(mocker)
2025-08-30T09:58:47.2449396Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2449567Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2449710Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.2449828Z         # over and over again should not cause different results
2025-08-30T09:58:47.2449883Z     
2025-08-30T09:58:47.2449970Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.2450061Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2450192Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2450250Z     
2025-08-30T09:58:47.2450342Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.2450488Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2450565Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2450574Z 
2025-08-30T09:58:47.2450671Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.2450770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2451044Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2451137Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2451272Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2451377Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2451452Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2451638Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2451720Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2451788Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2451887Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2451892Z 
2025-08-30T09:58:47.2452128Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2452191Z key = 'date'
2025-08-30T09:58:47.2452200Z 
2025-08-30T09:58:47.2452272Z     def get_loc(self, key):
2025-08-30T09:58:47.2452334Z         """
2025-08-30T09:58:47.2452484Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2452543Z     
2025-08-30T09:58:47.2452604Z         Parameters
2025-08-30T09:58:47.2452665Z         ----------
2025-08-30T09:58:47.2452730Z         key : label
2025-08-30T09:58:47.2452785Z     
2025-08-30T09:58:47.2452842Z         Returns
2025-08-30T09:58:47.2452900Z         -------
2025-08-30T09:58:47.2453025Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2453079Z     
2025-08-30T09:58:47.2453137Z         Examples
2025-08-30T09:58:47.2453199Z         --------
2025-08-30T09:58:47.2453288Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2453477Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2453541Z         1
2025-08-30T09:58:47.2453599Z     
2025-08-30T09:58:47.2453692Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2453770Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2453844Z         slice(1, 3, None)
2025-08-30T09:58:47.2453898Z     
2025-08-30T09:58:47.2453997Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2454080Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2454164Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2454220Z         """
2025-08-30T09:58:47.2454311Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2454372Z         try:
2025-08-30T09:58:47.2454460Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2454532Z         except KeyError as err:
2025-08-30T09:58:47.2454619Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2454710Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2454823Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2454880Z             ):
2025-08-30T09:58:47.2454968Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2455047Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2455117Z E           KeyError: 'date'
2025-08-30T09:58:47.2455122Z 
2025-08-30T09:58:47.2455311Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2455452Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2455563Z 2025-08-30 09:55:11 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2455690Z 2025-08-30 09:55:11 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2455767Z 2025-08-30 09:55:11 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2455859Z 2025-08-30 09:55:11 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2455980Z 2025-08-30 09:55:11 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2456104Z 2025-08-30 09:55:11 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2456432Z 2025-08-30 09:55:11 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2457052Z 2025-08-30 09:55:11 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2457472Z 2025-08-30 09:55:11 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2457567Z 2025-08-30 09:55:11 INFO Found no parameter file.
2025-08-30T09:58:47.2457850Z 2025-08-30 09:55:11 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2458031Z 2025-08-30 09:55:11 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2458321Z 2025-08-30 09:55:11 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2458519Z 2025-08-30 09:55:11 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2458716Z 2025-08-30 09:55:11 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2458981Z 2025-08-30 09:55:11 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2459175Z 2025-08-30 09:55:11 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2459372Z 2025-08-30 09:55:11 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2459476Z 2025-08-30 09:55:11 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2459581Z 2025-08-30 09:55:11 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2459700Z 2025-08-30 09:55:11 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2459849Z 2025-08-30 09:55:11 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2460004Z 2025-08-30 09:55:11 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2460135Z 2025-08-30 09:55:11 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2460277Z 2025-08-30 09:55:11 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2460578Z 2025-08-30 09:55:11 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2460767Z 2025-08-30 09:55:11 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2460884Z 2025-08-30 09:55:11 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2460992Z 2025-08-30 09:55:11 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2461115Z 2025-08-30 09:55:11 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2461286Z 2025-08-30 09:55:11 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2461406Z 2025-08-30 09:55:11 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2461525Z 2025-08-30 09:55:11 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2461673Z 2025-08-30 09:55:11 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2461791Z 2025-08-30 09:55:11 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2461929Z 2025-08-30 09:55:11 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2462083Z 2025-08-30 09:55:11 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2462225Z 2025-08-30 09:55:11 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2462364Z 2025-08-30 09:55:11 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2462476Z 2025-08-30 09:55:11 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2462579Z 2025-08-30 09:55:11 INFO Validating configuration ...
2025-08-30T09:58:47.2462933Z 2025-08-30 09:55:11 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2463216Z 2025-08-30 09:55:11 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2463986Z 2025-08-30 09:55:11 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2464190Z 2025-08-30 09:55:11 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2464365Z 2025-08-30 09:55:11 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2464508Z 2025-08-30 09:55:11 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2464617Z 2025-08-30 09:55:11 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2464842Z 2025-08-30 09:55:11 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2465082Z 2025-08-30 09:55:11 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2465242Z 2025-08-30 09:55:11 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2465429Z 2025-08-30 09:55:11 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2465597Z 2025-08-30 09:55:11 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2465690Z 2025-08-30 09:55:11 DEBUG Dropping last candle
2025-08-30T09:58:47.2465902Z 2025-08-30 09:55:11 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.2466052Z _______________________ test_backtesting_initialization ________________________
2025-08-30T09:58:47.2466057Z 
2025-08-30T09:58:47.2466220Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc5b7690>
2025-08-30T09:58:47.2466660Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2466884Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_backtesting_initializatio0')
2025-08-30T09:58:47.2466888Z 
2025-08-30T09:58:47.2467071Z     def test_backtesting_initialization(mocker, default_conf, tmp_path) -> None:
2025-08-30T09:58:47.2467134Z         """
2025-08-30T09:58:47.2467251Z         Test that Backtesting class initializes correctly.
2025-08-30T09:58:47.2467385Z         This test would have caught the missing migrate_data import.
2025-08-30T09:58:47.2467441Z         """
2025-08-30T09:58:47.2467515Z         patch_exchange(mocker)
2025-08-30T09:58:47.2467783Z         mocker.patch('freqtrade.optimize.backtesting.history.get_timerange', return_value=(None, None))
2025-08-30T09:58:47.2467992Z         mocker.patch('freqtrade.optimize.backtesting.history.validate_backtest_data')
2025-08-30T09:58:47.2468198Z         mocker.patch('freqtrade.util.migrations.migrate_data')  # This is what was missing
2025-08-30T09:58:47.2468260Z     
2025-08-30T09:58:47.2468347Z         default_conf['datadir'] = tmp_path
2025-08-30T09:58:47.2468452Z         default_conf['strategy'] = CURRENT_TEST_STRATEGY
2025-08-30T09:58:47.2468537Z         default_conf['timeframe'] = '5m'
2025-08-30T09:58:47.2468641Z         default_conf['timerange'] = '20180101-20180102'
2025-08-30T09:58:47.2468791Z         default_conf['exchange']['pair_whitelist'] = ['BTC/USDT', 'ETH/USDT']
2025-08-30T09:58:47.2468849Z     
2025-08-30T09:58:47.2468978Z         # This should not raise any errors, especially not NameError
2025-08-30T09:58:47.2469070Z >       backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2469139Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2469144Z 
2025-08-30T09:58:47.2469239Z tests/optimize/test_backtesting.py:161: 
2025-08-30T09:58:47.2469336Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2469341Z 
2025-08-30T09:58:47.2469533Z self = <freqtrade.optimize.backtesting.Backtesting object at 0x7f65941da250>
2025-08-30T09:58:47.2469960Z config = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2470255Z exchange = <freqtrade.exchange.binance.Binance object at 0x7f65848dc350>
2025-08-30T09:58:47.2470260Z 
2025-08-30T09:58:47.2470425Z     def __init__(self, config: Config, exchange: Exchange | None = None) -> None:
2025-08-30T09:58:47.2470512Z         LoggingMixin.show_output = False
2025-08-30T09:58:47.2470586Z         self.config = config
2025-08-30T09:58:47.2470754Z         self.results: BacktestResultType = get_BacktestResultType_default()
2025-08-30T09:58:47.2470839Z         self.trade_id_counter: int = 0
2025-08-30T09:58:47.2470915Z         self.order_id_counter: int = 0
2025-08-30T09:58:47.2470972Z     
2025-08-30T09:58:47.2471049Z         self.config["dry_run"] = True
2025-08-30T09:58:47.2471154Z         self.price_pair_prec: dict[str, Series] = {}
2025-08-30T09:58:47.2471331Z         self.run_ids: dict[str, str] = {}
2025-08-30T09:58:47.2471493Z         self.strategylist: list[IStrategy] = []
2025-08-30T09:58:47.2471720Z         self.all_bt_content: dict[str, BacktestContentType] = {}
2025-08-30T09:58:47.2472325Z         self.analysis_results: dict[str, dict[str, DataFrame]] = {
2025-08-30T09:58:47.2472806Z             "signals": {},
2025-08-30T09:58:47.2473114Z             "rejected": {},
2025-08-30T09:58:47.2473561Z             "exited": {},
2025-08-30T09:58:47.2473849Z         }
2025-08-30T09:58:47.2474131Z         self.rejected_dict: dict[str, list] = {}
2025-08-30T09:58:47.2474530Z     
2025-08-30T09:58:47.2474888Z         self._exchange_name = self.config["exchange"]["name"]
2025-08-30T09:58:47.2475607Z         self.__initial_backtest = exchange is None
2025-08-30T09:58:47.2476051Z         if not exchange:
2025-08-30T09:58:47.2476646Z             exchange = ExchangeResolver.load_exchange(self.config, load_leverage_tiers=True)
2025-08-30T09:58:47.2477498Z         self.exchange = exchange
2025-08-30T09:58:47.2477929Z     
2025-08-30T09:58:47.2478344Z         self.dataprovider = DataProvider(self.config, self.exchange)
2025-08-30T09:58:47.2478852Z     
2025-08-30T09:58:47.2479178Z         if self.config.get("strategy_list"):
2025-08-30T09:58:47.2479685Z             if self.config.get("freqai", {}).get("enabled", False):
2025-08-30T09:58:47.2480161Z                 logger.warning(
2025-08-30T09:58:47.2480609Z                     "Using --strategy-list with FreqAI REQUIRES all strategies "
2025-08-30T09:58:47.2480965Z                     "to have identical feature_engineering_* functions."
2025-08-30T09:58:47.2481226Z                 )
2025-08-30T09:58:47.2481431Z             for strat in list(self.config["strategy_list"]):
2025-08-30T09:58:47.2481714Z                 stratconf = deepcopy(self.config)
2025-08-30T09:58:47.2481965Z                 stratconf["strategy"] = strat
2025-08-30T09:58:47.2482311Z                 self.strategylist.append(StrategyResolver.load_strategy(stratconf))
2025-08-30T09:58:47.2482676Z                 validate_config_consistency(stratconf)
2025-08-30T09:58:47.2482908Z     
2025-08-30T09:58:47.2483049Z         else:
2025-08-30T09:58:47.2483241Z             # No strategy list specified, only one strategy
2025-08-30T09:58:47.2483859Z             self.strategylist.append(StrategyResolver.load_strategy(self.config))
2025-08-30T09:58:47.2484225Z             validate_config_consistency(self.config)
2025-08-30T09:58:47.2484462Z     
2025-08-30T09:58:47.2484623Z         if "timeframe" not in self.config:
2025-08-30T09:58:47.2484865Z             raise OperationalException(
2025-08-30T09:58:47.2485118Z                 "Timeframe needs to be set in either "
2025-08-30T09:58:47.2485421Z                 "configuration or as cli argument `--timeframe 5m`"
2025-08-30T09:58:47.2485682Z             )
2025-08-30T09:58:47.2485884Z         self.timeframe = str(self.config.get("timeframe"))
2025-08-30T09:58:47.2486217Z         self.timeframe_secs = timeframe_to_seconds(self.timeframe)
2025-08-30T09:58:47.2486540Z         self.timeframe_min = self.timeframe_secs // 60
2025-08-30T09:58:47.2486856Z         self.timeframe_td = timedelta(seconds=self.timeframe_secs)
2025-08-30T09:58:47.2487319Z         self.init_backtest_detail()
2025-08-30T09:58:47.2487670Z         self.pairlists = PairListManager(self.exchange, self.config, self.dataprovider)
2025-08-30T09:58:47.2488063Z         self._validate_pairlists_for_backtesting()
2025-08-30T09:58:47.2488293Z     
2025-08-30T09:58:47.2488505Z         self.dataprovider.add_pairlisthandler(self.pairlists)
2025-08-30T09:58:47.2488803Z         self.pairlists.refresh_pairlist()
2025-08-30T09:58:47.2489024Z     
2025-08-30T09:58:47.2489190Z         if len(self.pairlists.whitelist) == 0:
2025-08-30T09:58:47.2489485Z >           raise OperationalException("No pair in whitelist.")
2025-08-30T09:58:47.2489861Z E           freqtrade.exceptions.OperationalException: No pair in whitelist.
2025-08-30T09:58:47.2490130Z 
2025-08-30T09:58:47.2490391Z freqtrade/optimize/backtesting.py:182: OperationalException
2025-08-30T09:58:47.2490766Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2491101Z 2025-08-30 09:55:11 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2491426Z 2025-08-30 09:55:11 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2491714Z 2025-08-30 09:55:11 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2491959Z 2025-08-30 09:55:11 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2492259Z 2025-08-30 09:55:11 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2492583Z 2025-08-30 09:55:11 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2493114Z 2025-08-30 09:55:11 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2494433Z 2025-08-30 09:55:11 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2495491Z 2025-08-30 09:55:11 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2496090Z 2025-08-30 09:55:11 INFO Found no parameter file.
2025-08-30T09:58:47.2496551Z 2025-08-30 09:55:11 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2497139Z 2025-08-30 09:55:11 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2497586Z 2025-08-30 09:55:11 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2498045Z 2025-08-30 09:55:11 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2498519Z 2025-08-30 09:55:11 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2499064Z 2025-08-30 09:55:11 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2499605Z 2025-08-30 09:55:11 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2500087Z 2025-08-30 09:55:11 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2500502Z 2025-08-30 09:55:11 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2500821Z 2025-08-30 09:55:11 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2501119Z 2025-08-30 09:55:11 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2501472Z 2025-08-30 09:55:11 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2501864Z 2025-08-30 09:55:11 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2502237Z 2025-08-30 09:55:11 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2502588Z 2025-08-30 09:55:11 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2503116Z 2025-08-30 09:55:11 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2503801Z 2025-08-30 09:55:11 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2504342Z 2025-08-30 09:55:11 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2504651Z 2025-08-30 09:55:11 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2504968Z 2025-08-30 09:55:11 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2505346Z 2025-08-30 09:55:11 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2505720Z 2025-08-30 09:55:11 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2506034Z 2025-08-30 09:55:11 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2506382Z 2025-08-30 09:55:11 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2506727Z 2025-08-30 09:55:11 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2507199Z 2025-08-30 09:55:11 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2507584Z 2025-08-30 09:55:11 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2507966Z 2025-08-30 09:55:11 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2508345Z 2025-08-30 09:55:11 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2508687Z 2025-08-30 09:55:11 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2508988Z 2025-08-30 09:55:11 INFO Validating configuration ...
2025-08-30T09:58:47.2509520Z 2025-08-30 09:55:11 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2510228Z 2025-08-30 09:55:11 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2511029Z 2025-08-30 09:55:11 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2511807Z 2025-08-30 09:55:11 DEBUG Pair BTC/USDT is not compatible with your stake currency BTC. Removing it from whitelist..
2025-08-30T09:58:47.2512418Z 2025-08-30 09:55:11 WARNING Pair BTC/USDT is not compatible with your stake currency BTC. Removing it from whitelist..
2025-08-30T09:58:47.2513027Z 2025-08-30 09:55:11 DEBUG Pair ETH/USDT is not compatible with your stake currency BTC. Removing it from whitelist..
2025-08-30T09:58:47.2513731Z 2025-08-30 09:55:11 WARNING Pair ETH/USDT is not compatible with your stake currency BTC. Removing it from whitelist..
2025-08-30T09:58:47.2514183Z 2025-08-30 09:55:11 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.2514539Z ________ test_backtest_start_multi_strat_caching[month-start_delta0-2] _________
2025-08-30T09:58:47.2514804Z 
2025-08-30T09:58:47.2515387Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2516215Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e439dad0>
2025-08-30T09:58:47.2516620Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65def020d0>
2025-08-30T09:58:47.2517172Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2517758Z run_id = '2', start_delta = {'days': 0}, cache = 'month'
2025-08-30T09:58:47.2517954Z 
2025-08-30T09:58:47.2518073Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2518394Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2518811Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2519276Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2519609Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2519951Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2520263Z     ):
2025-08-30T09:58:47.2520425Z         default_conf.update(
2025-08-30T09:58:47.2520614Z             {
2025-08-30T09:58:47.2520786Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2521170Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2521400Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2521643Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2521867Z             }
2025-08-30T09:58:47.2522014Z         )
2025-08-30T09:58:47.2522171Z         patch_exchange(mocker)
2025-08-30T09:58:47.2522383Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2522595Z             return_value={
2025-08-30T09:58:47.2522827Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2523101Z                 "config": default_conf,
2025-08-30T09:58:47.2523317Z                 "locks": [],
2025-08-30T09:58:47.2523734Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2524092Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2524340Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2524572Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2524816Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2525047Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2525278Z                 "final_balance": 1000,
2025-08-30T09:58:47.2525485Z             }
2025-08-30T09:58:47.2525628Z         )
2025-08-30T09:58:47.2525779Z         mocker.patch(
2025-08-30T09:58:47.2526109Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2526488Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2526726Z         )
2025-08-30T09:58:47.2527043Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2527573Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2527933Z     
2025-08-30T09:58:47.2528119Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2528610Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2528920Z         if cache == "none":
2025-08-30T09:58:47.2529136Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2529395Z         elif cache == "day":
2025-08-30T09:58:47.2529617Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2529880Z         elif cache == "week":
2025-08-30T09:58:47.2530118Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2530372Z         elif cache == "month":
2025-08-30T09:58:47.2530596Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2530859Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2531088Z             return_value={
2025-08-30T09:58:47.2531368Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2531816Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2532148Z             }
2025-08-30T09:58:47.2532295Z         )
2025-08-30T09:58:47.2532463Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2532684Z             side_effect=[
2025-08-30T09:58:47.2532861Z                 {
2025-08-30T09:58:47.2533069Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2533451Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2533740Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2533999Z                 },
2025-08-30T09:58:47.2534151Z                 {
2025-08-30T09:58:47.2534351Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2534630Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2534908Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2535167Z                 },
2025-08-30T09:58:47.2535314Z             ]
2025-08-30T09:58:47.2535460Z         )
2025-08-30T09:58:47.2535609Z         mocker.patch(
2025-08-30T09:58:47.2535939Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2536146Z             return_value=[
2025-08-30T09:58:47.2536474Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2536824Z             ],
2025-08-30T09:58:47.2536969Z         )
2025-08-30T09:58:47.2537131Z         mocker.patch.multiple(
2025-08-30T09:58:47.2537367Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2537656Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2537931Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2538161Z         )
2025-08-30T09:58:47.2538491Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2538840Z 
2025-08-30T09:58:47.2539064Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2539341Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2539716Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2540058Z     return self._start_patch(
2025-08-30T09:58:47.2540374Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2540723Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2540922Z                        ^^^^^^^^^
2025-08-30T09:58:47.2541263Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2541648Z     result = self.__enter__()
2025-08-30T09:58:47.2541842Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2542320Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2542927Z     original, local = self.get_original()
2025-08-30T09:58:47.2543171Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2543525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2543717Z 
2025-08-30T09:58:47.2543845Z self = <unittest.mock._patch object at 0x7f65def51610>
2025-08-30T09:58:47.2544048Z 
2025-08-30T09:58:47.2544123Z     def get_original(self):
2025-08-30T09:58:47.2544322Z         target = self.getter()
2025-08-30T09:58:47.2544527Z         name = self.attribute
2025-08-30T09:58:47.2544708Z     
2025-08-30T09:58:47.2544858Z         original = DEFAULT
2025-08-30T09:58:47.2545043Z         local = False
2025-08-30T09:58:47.2545201Z     
2025-08-30T09:58:47.2545339Z         try:
2025-08-30T09:58:47.2545506Z             original = target.__dict__[name]
2025-08-30T09:58:47.2545773Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2546028Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2546264Z         else:
2025-08-30T09:58:47.2546419Z             local = True
2025-08-30T09:58:47.2546598Z     
2025-08-30T09:58:47.2546798Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2547077Z             self.create = True
2025-08-30T09:58:47.2547267Z     
2025-08-30T09:58:47.2547435Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2547690Z >           raise AttributeError(
2025-08-30T09:58:47.2547943Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2548201Z             )
2025-08-30T09:58:47.2548889Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2549571Z 
2025-08-30T09:58:47.2549811Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2550311Z _________ test_backtest_start_multi_strat_caching[none-start_delta2-2] _________
2025-08-30T09:58:47.2550569Z 
2025-08-30T09:58:47.2551151Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2552130Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c832cc50>
2025-08-30T09:58:47.2552541Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594615e90>
2025-08-30T09:58:47.2552981Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2553554Z run_id = '2', start_delta = {'weeks': 1}, cache = 'none'
2025-08-30T09:58:47.2553761Z 
2025-08-30T09:58:47.2553883Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2554199Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2554609Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2555190Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2555582Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2555921Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2556233Z     ):
2025-08-30T09:58:47.2556388Z         default_conf.update(
2025-08-30T09:58:47.2556579Z             {
2025-08-30T09:58:47.2556743Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2556976Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2557229Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2557474Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2557702Z             }
2025-08-30T09:58:47.2557845Z         )
2025-08-30T09:58:47.2558004Z         patch_exchange(mocker)
2025-08-30T09:58:47.2558212Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2558424Z             return_value={
2025-08-30T09:58:47.2558649Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2558927Z                 "config": default_conf,
2025-08-30T09:58:47.2559144Z                 "locks": [],
2025-08-30T09:58:47.2559343Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2559577Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2559811Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2560044Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2560273Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2560508Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2560733Z                 "final_balance": 1000,
2025-08-30T09:58:47.2560941Z             }
2025-08-30T09:58:47.2561086Z         )
2025-08-30T09:58:47.2561239Z         mocker.patch(
2025-08-30T09:58:47.2561531Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2561903Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2562141Z         )
2025-08-30T09:58:47.2562454Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2562991Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2563505Z     
2025-08-30T09:58:47.2563754Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2564078Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2564375Z         if cache == "none":
2025-08-30T09:58:47.2564600Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2564845Z         elif cache == "day":
2025-08-30T09:58:47.2565139Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2565575Z         elif cache == "week":
2025-08-30T09:58:47.2565815Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2566060Z         elif cache == "month":
2025-08-30T09:58:47.2566287Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2566558Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2566787Z             return_value={
2025-08-30T09:58:47.2567078Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2567656Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2567994Z             }
2025-08-30T09:58:47.2568142Z         )
2025-08-30T09:58:47.2568308Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2568530Z             side_effect=[
2025-08-30T09:58:47.2568705Z                 {
2025-08-30T09:58:47.2568912Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2569190Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2569478Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2569731Z                 },
2025-08-30T09:58:47.2569889Z                 {
2025-08-30T09:58:47.2570195Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2570478Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2570758Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2571025Z                 },
2025-08-30T09:58:47.2571178Z             ]
2025-08-30T09:58:47.2571322Z         )
2025-08-30T09:58:47.2571477Z         mocker.patch(
2025-08-30T09:58:47.2571664Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2571879Z             return_value=[
2025-08-30T09:58:47.2572217Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2572565Z             ],
2025-08-30T09:58:47.2572711Z         )
2025-08-30T09:58:47.2572875Z         mocker.patch.multiple(
2025-08-30T09:58:47.2573117Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2573520Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2573807Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2574035Z         )
2025-08-30T09:58:47.2574377Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2574727Z 
2025-08-30T09:58:47.2574816Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2575090Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2575464Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2575802Z     return self._start_patch(
2025-08-30T09:58:47.2576122Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2576466Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2576673Z                        ^^^^^^^^^
2025-08-30T09:58:47.2577013Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2577388Z     result = self.__enter__()
2025-08-30T09:58:47.2577585Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2577931Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2578325Z     original, local = self.get_original()
2025-08-30T09:58:47.2578551Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2578798Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2578983Z 
2025-08-30T09:58:47.2579098Z self = <unittest.mock._patch object at 0x7f65c89d9e90>
2025-08-30T09:58:47.2579301Z 
2025-08-30T09:58:47.2579377Z     def get_original(self):
2025-08-30T09:58:47.2579579Z         target = self.getter()
2025-08-30T09:58:47.2579779Z         name = self.attribute
2025-08-30T09:58:47.2579962Z     
2025-08-30T09:58:47.2580105Z         original = DEFAULT
2025-08-30T09:58:47.2580292Z         local = False
2025-08-30T09:58:47.2580453Z     
2025-08-30T09:58:47.2580594Z         try:
2025-08-30T09:58:47.2580762Z             original = target.__dict__[name]
2025-08-30T09:58:47.2581015Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2581265Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2581498Z         else:
2025-08-30T09:58:47.2581831Z             local = True
2025-08-30T09:58:47.2581999Z     
2025-08-30T09:58:47.2582201Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2582472Z             self.create = True
2025-08-30T09:58:47.2582657Z     
2025-08-30T09:58:47.2582826Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2583081Z >           raise AttributeError(
2025-08-30T09:58:47.2583330Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2583683Z             )
2025-08-30T09:58:47.2584371Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2585037Z 
2025-08-30T09:58:47.2585398Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2585910Z ________ test_backtest_start_multi_strat_caching[month-start_delta2-2] _________
2025-08-30T09:58:47.2586178Z 
2025-08-30T09:58:47.2586755Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2587563Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584557e50>
2025-08-30T09:58:47.2587971Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e4183350>
2025-08-30T09:58:47.2588408Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2588799Z run_id = '2', start_delta = {'weeks': 1}, cache = 'month'
2025-08-30T09:58:47.2588991Z 
2025-08-30T09:58:47.2589107Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2589426Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2590076Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2590618Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2590958Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2591297Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2591608Z     ):
2025-08-30T09:58:47.2591761Z         default_conf.update(
2025-08-30T09:58:47.2591953Z             {
2025-08-30T09:58:47.2592123Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2592351Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2592585Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2592825Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2593053Z             }
2025-08-30T09:58:47.2593198Z         )
2025-08-30T09:58:47.2593463Z         patch_exchange(mocker)
2025-08-30T09:58:47.2593680Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2593898Z             return_value={
2025-08-30T09:58:47.2594125Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2594406Z                 "config": default_conf,
2025-08-30T09:58:47.2594624Z                 "locks": [],
2025-08-30T09:58:47.2594818Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2595048Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2595279Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2595512Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2595743Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2595975Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2596199Z                 "final_balance": 1000,
2025-08-30T09:58:47.2596406Z             }
2025-08-30T09:58:47.2596556Z         )
2025-08-30T09:58:47.2596702Z         mocker.patch(
2025-08-30T09:58:47.2597005Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2597373Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2597613Z         )
2025-08-30T09:58:47.2598087Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2598630Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2598994Z     
2025-08-30T09:58:47.2599175Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2599502Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2599794Z         if cache == "none":
2025-08-30T09:58:47.2600015Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2600261Z         elif cache == "day":
2025-08-30T09:58:47.2600486Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2600729Z         elif cache == "week":
2025-08-30T09:58:47.2601068Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2601323Z         elif cache == "month":
2025-08-30T09:58:47.2601546Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2601816Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2602038Z             return_value={
2025-08-30T09:58:47.2602327Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2602760Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2603094Z             }
2025-08-30T09:58:47.2603241Z         )
2025-08-30T09:58:47.2603612Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2603857Z             side_effect=[
2025-08-30T09:58:47.2604030Z                 {
2025-08-30T09:58:47.2613037Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2613809Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2614162Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2614436Z                 },
2025-08-30T09:58:47.2614602Z                 {
2025-08-30T09:58:47.2614821Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2615102Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2615383Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2615635Z                 },
2025-08-30T09:58:47.2615789Z             ]
2025-08-30T09:58:47.2615935Z         )
2025-08-30T09:58:47.2616092Z         mocker.patch(
2025-08-30T09:58:47.2616286Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2616499Z             return_value=[
2025-08-30T09:58:47.2616824Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2617171Z             ],
2025-08-30T09:58:47.2617316Z         )
2025-08-30T09:58:47.2617487Z         mocker.patch.multiple(
2025-08-30T09:58:47.2617733Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2618028Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2618312Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2618538Z         )
2025-08-30T09:58:47.2618882Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2619229Z 
2025-08-30T09:58:47.2619323Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2619601Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2619980Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2620320Z     return self._start_patch(
2025-08-30T09:58:47.2620650Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2620995Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2621247Z                        ^^^^^^^^^
2025-08-30T09:58:47.2621592Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2621980Z     result = self.__enter__()
2025-08-30T09:58:47.2622422Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2622770Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2623188Z     original, local = self.get_original()
2025-08-30T09:58:47.2623620Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2623875Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2624066Z 
2025-08-30T09:58:47.2624186Z self = <unittest.mock._patch object at 0x7f65e4613990>
2025-08-30T09:58:47.2624389Z 
2025-08-30T09:58:47.2624464Z     def get_original(self):
2025-08-30T09:58:47.2624668Z         target = self.getter()
2025-08-30T09:58:47.2624865Z         name = self.attribute
2025-08-30T09:58:47.2625054Z     
2025-08-30T09:58:47.2625197Z         original = DEFAULT
2025-08-30T09:58:47.2625507Z         local = False
2025-08-30T09:58:47.2625672Z     
2025-08-30T09:58:47.2625811Z         try:
2025-08-30T09:58:47.2625978Z             original = target.__dict__[name]
2025-08-30T09:58:47.2626275Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2626525Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2626758Z         else:
2025-08-30T09:58:47.2626923Z             local = True
2025-08-30T09:58:47.2627089Z     
2025-08-30T09:58:47.2627293Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2627570Z             self.create = True
2025-08-30T09:58:47.2627755Z     
2025-08-30T09:58:47.2627921Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2628173Z >           raise AttributeError(
2025-08-30T09:58:47.2628420Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2628671Z             )
2025-08-30T09:58:47.2629375Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2630068Z 
2025-08-30T09:58:47.2630316Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2630816Z _________ test_backtest_start_multi_strat_caching[none-start_delta1-2] _________
2025-08-30T09:58:47.2631069Z 
2025-08-30T09:58:47.2631643Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2632457Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4116e90>
2025-08-30T09:58:47.2632858Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8486850>
2025-08-30T09:58:47.2633293Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2633802Z run_id = '2', start_delta = {'days': 1}, cache = 'none'
2025-08-30T09:58:47.2633986Z 
2025-08-30T09:58:47.2634104Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2634419Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2634831Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2635279Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2635614Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2635948Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2636256Z     ):
2025-08-30T09:58:47.2636412Z         default_conf.update(
2025-08-30T09:58:47.2636603Z             {
2025-08-30T09:58:47.2636773Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2637002Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2637313Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2637747Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2638028Z             }
2025-08-30T09:58:47.2638175Z         )
2025-08-30T09:58:47.2638482Z         patch_exchange(mocker)
2025-08-30T09:58:47.2638700Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2638918Z             return_value={
2025-08-30T09:58:47.2639146Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2639423Z                 "config": default_conf,
2025-08-30T09:58:47.2639642Z                 "locks": [],
2025-08-30T09:58:47.2639836Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2640065Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2640295Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2640381Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2640461Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2640538Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2640726Z                 "final_balance": 1000,
2025-08-30T09:58:47.2640793Z             }
2025-08-30T09:58:47.2640850Z         )
2025-08-30T09:58:47.2640921Z         mocker.patch(
2025-08-30T09:58:47.2641122Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2641231Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2641289Z         )
2025-08-30T09:58:47.2641532Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2641746Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2641804Z     
2025-08-30T09:58:47.2641908Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2642059Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2642138Z         if cache == "none":
2025-08-30T09:58:47.2642234Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2642314Z         elif cache == "day":
2025-08-30T09:58:47.2642409Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2642479Z         elif cache == "week":
2025-08-30T09:58:47.2642585Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2642657Z         elif cache == "month":
2025-08-30T09:58:47.2642753Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2642841Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2642914Z             return_value={
2025-08-30T09:58:47.2643084Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2643270Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2643334Z             }
2025-08-30T09:58:47.2643603Z         )
2025-08-30T09:58:47.2643710Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2643787Z             side_effect=[
2025-08-30T09:58:47.2643850Z                 {
2025-08-30T09:58:47.2643961Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2644048Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2644177Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2644236Z                 },
2025-08-30T09:58:47.2644292Z                 {
2025-08-30T09:58:47.2644398Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2644481Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2644593Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2644650Z                 },
2025-08-30T09:58:47.2644711Z             ]
2025-08-30T09:58:47.2644766Z         )
2025-08-30T09:58:47.2644833Z         mocker.patch(
2025-08-30T09:58:47.2644918Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2644986Z             return_value=[
2025-08-30T09:58:47.2645195Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2645258Z             ],
2025-08-30T09:58:47.2645314Z         )
2025-08-30T09:58:47.2645527Z         mocker.patch.multiple(
2025-08-30T09:58:47.2645630Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2645740Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2645833Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2645889Z         )
2025-08-30T09:58:47.2646149Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2646155Z 
2025-08-30T09:58:47.2646247Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2646351Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2646539Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2646720Z     return self._start_patch(
2025-08-30T09:58:47.2646910Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2646986Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2647060Z                        ^^^^^^^^^
2025-08-30T09:58:47.2647274Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2647344Z     result = self.__enter__()
2025-08-30T09:58:47.2647411Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2647635Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2647718Z     original, local = self.get_original()
2025-08-30T09:58:47.2647790Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2647892Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2647897Z 
2025-08-30T09:58:47.2648012Z self = <unittest.mock._patch object at 0x7f6594327cd0>
2025-08-30T09:58:47.2648017Z 
2025-08-30T09:58:47.2648097Z     def get_original(self):
2025-08-30T09:58:47.2648169Z         target = self.getter()
2025-08-30T09:58:47.2648241Z         name = self.attribute
2025-08-30T09:58:47.2648296Z     
2025-08-30T09:58:47.2648374Z         original = DEFAULT
2025-08-30T09:58:47.2648437Z         local = False
2025-08-30T09:58:47.2648492Z     
2025-08-30T09:58:47.2648554Z         try:
2025-08-30T09:58:47.2648637Z             original = target.__dict__[name]
2025-08-30T09:58:47.2648722Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2648814Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2648877Z         else:
2025-08-30T09:58:47.2648944Z             local = True
2025-08-30T09:58:47.2648998Z     
2025-08-30T09:58:47.2649127Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2649196Z             self.create = True
2025-08-30T09:58:47.2649251Z     
2025-08-30T09:58:47.2649346Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2649431Z >           raise AttributeError(
2025-08-30T09:58:47.2649542Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2649599Z             )
2025-08-30T09:58:47.2650212Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2650217Z 
2025-08-30T09:58:47.2650455Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2650597Z _______________________ test_backtest_one_detail[False] ________________________
2025-08-30T09:58:47.2650602Z 
2025-08-30T09:58:47.2650767Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2650827Z key = 'date'
2025-08-30T09:58:47.2650831Z 
2025-08-30T09:58:47.2650908Z     def get_loc(self, key):
2025-08-30T09:58:47.2650969Z         """
2025-08-30T09:58:47.2651124Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2651179Z     
2025-08-30T09:58:47.2651246Z         Parameters
2025-08-30T09:58:47.2651309Z         ----------
2025-08-30T09:58:47.2651482Z         key : label
2025-08-30T09:58:47.2651537Z     
2025-08-30T09:58:47.2651599Z         Returns
2025-08-30T09:58:47.2651658Z         -------
2025-08-30T09:58:47.2651780Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2651838Z     
2025-08-30T09:58:47.2651898Z         Examples
2025-08-30T09:58:47.2651958Z         --------
2025-08-30T09:58:47.2652049Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2652138Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2652195Z         1
2025-08-30T09:58:47.2652252Z     
2025-08-30T09:58:47.2652352Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2652432Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2652499Z         slice(1, 3, None)
2025-08-30T09:58:47.2652655Z     
2025-08-30T09:58:47.2652766Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2652851Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2652940Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2653001Z         """
2025-08-30T09:58:47.2653095Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2653153Z         try:
2025-08-30T09:58:47.2653242Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2653316Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2653321Z 
2025-08-30T09:58:47.2653737Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2653851Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2654028Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2654087Z     ???
2025-08-30T09:58:47.2654254Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2654315Z     ???
2025-08-30T09:58:47.2654575Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2654636Z     ???
2025-08-30T09:58:47.2654740Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2654744Z 
2025-08-30T09:58:47.2654798Z >   ???
2025-08-30T09:58:47.2654866Z E   KeyError: 'date'
2025-08-30T09:58:47.2654871Z 
2025-08-30T09:58:47.2654995Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2655000Z 
2025-08-30T09:58:47.2655155Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2655160Z 
2025-08-30T09:58:47.2655609Z default_conf_usdt = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2655771Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4931250>
2025-08-30T09:58:47.2655973Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2656038Z use_detail = False
2025-08-30T09:58:47.2656045Z 
2025-08-30T09:58:47.2656174Z     @pytest.mark.parametrize("use_detail", [True, False])
2025-08-30T09:58:47.2656394Z     def test_backtest_one_detail(default_conf_usdt, mocker, testdatadir, use_detail) -> None:
2025-08-30T09:58:47.2656496Z         default_conf_usdt["use_exit_signal"] = False
2025-08-30T09:58:47.2656577Z         patch_exchange(mocker)
2025-08-30T09:58:47.2656740Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2656916Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2657002Z         if use_detail:
2025-08-30T09:58:47.2657119Z             default_conf_usdt["timeframe_detail"] = "1m"
2025-08-30T09:58:47.2657171Z     
2025-08-30T09:58:47.2657255Z         def advise_entry(df, *args, **kwargs):
2025-08-30T09:58:47.2657350Z             # Mock function to force several entries
2025-08-30T09:58:47.2657438Z             df.loc[(df["rsi"] < 40), "enter_long"] = 1
2025-08-30T09:58:47.2657500Z             return df
2025-08-30T09:58:47.2657695Z     
2025-08-30T09:58:47.2657803Z         def custom_entry_price(proposed_rate, **kwargs):
2025-08-30T09:58:47.2657883Z             return proposed_rate * 0.997
2025-08-30T09:58:47.2657941Z     
2025-08-30T09:58:47.2658033Z         default_conf_usdt["max_open_trades"] = 10
2025-08-30T09:58:47.2658089Z     
2025-08-30T09:58:47.2658185Z         backtesting = Backtesting(default_conf_usdt)
2025-08-30T09:58:47.2658321Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2658460Z         backtesting.strategy.populate_entry_trend = advise_entry
2025-08-30T09:58:47.2658607Z         backtesting.strategy.ignore_buying_expired_candle_after = 59
2025-08-30T09:58:47.2658768Z         backtesting.strategy.custom_entry_price = custom_entry_price
2025-08-30T09:58:47.2658950Z         pair = "XRP/ETH"
2025-08-30T09:58:47.2659124Z         # Pick a timerange adapted to the pair we use to test
2025-08-30T09:58:47.2659368Z         timerange = TimeRange.parse_timerange("20191010-20191013")
2025-08-30T09:58:47.2659741Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=[pair], timerange=timerange)
2025-08-30T09:58:47.2659808Z         if use_detail:
2025-08-30T09:58:47.2659889Z             data_1m = history.load_data(
2025-08-30T09:58:47.2660070Z                 datadir=testdatadir, timeframe="1m", pairs=[pair], timerange=timerange
2025-08-30T09:58:47.2660127Z             )
2025-08-30T09:58:47.2660216Z             backtesting.detail_data = data_1m
2025-08-30T09:58:47.2660363Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2660439Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2660443Z 
2025-08-30T09:58:47.2660532Z tests/optimize/test_backtesting.py:943: 
2025-08-30T09:58:47.2660645Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2660800Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2660894Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2661033Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2661140Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2661210Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2661398Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2661486Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2661550Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2661647Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2661651Z 
2025-08-30T09:58:47.2661814Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2661879Z key = 'date'
2025-08-30T09:58:47.2661883Z 
2025-08-30T09:58:47.2661968Z     def get_loc(self, key):
2025-08-30T09:58:47.2662050Z         """
2025-08-30T09:58:47.2662202Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2662260Z     
2025-08-30T09:58:47.2662323Z         Parameters
2025-08-30T09:58:47.2662389Z         ----------
2025-08-30T09:58:47.2662449Z         key : label
2025-08-30T09:58:47.2662506Z     
2025-08-30T09:58:47.2662566Z         Returns
2025-08-30T09:58:47.2662624Z         -------
2025-08-30T09:58:47.2662746Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2662800Z     
2025-08-30T09:58:47.2662862Z         Examples
2025-08-30T09:58:47.2662921Z         --------
2025-08-30T09:58:47.2663009Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2663091Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2663147Z         1
2025-08-30T09:58:47.2663201Z     
2025-08-30T09:58:47.2663303Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2663522Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2663591Z         slice(1, 3, None)
2025-08-30T09:58:47.2663786Z     
2025-08-30T09:58:47.2663891Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2663974Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2664055Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2664113Z         """
2025-08-30T09:58:47.2664204Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2664260Z         try:
2025-08-30T09:58:47.2664349Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2664428Z         except KeyError as err:
2025-08-30T09:58:47.2664515Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2664603Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2664717Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2664884Z             ):
2025-08-30T09:58:47.2664972Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2665049Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2665129Z E           KeyError: 'date'
2025-08-30T09:58:47.2665134Z 
2025-08-30T09:58:47.2665329Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2665469Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2665584Z 2025-08-30 09:55:13 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2665711Z 2025-08-30 09:55:13 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2665789Z 2025-08-30 09:55:13 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2665883Z 2025-08-30 09:55:13 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2666004Z 2025-08-30 09:55:13 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2666126Z 2025-08-30 09:55:13 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2666463Z 2025-08-30 09:55:13 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2666957Z 2025-08-30 09:55:13 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2667379Z 2025-08-30 09:55:13 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2667476Z 2025-08-30 09:55:13 INFO Found no parameter file.
2025-08-30T09:58:47.2667764Z 2025-08-30 09:55:13 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2667940Z 2025-08-30 09:55:13 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2668121Z 2025-08-30 09:55:13 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2668321Z 2025-08-30 09:55:13 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.2668510Z 2025-08-30 09:55:13 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.2668779Z 2025-08-30 09:55:13 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2668979Z 2025-08-30 09:55:13 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2669166Z 2025-08-30 09:55:13 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2669365Z 2025-08-30 09:55:13 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2669468Z 2025-08-30 09:55:13 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2669572Z 2025-08-30 09:55:13 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2669688Z 2025-08-30 09:55:13 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2669842Z 2025-08-30 09:55:13 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2669994Z 2025-08-30 09:55:13 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2670121Z 2025-08-30 09:55:13 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2670353Z 2025-08-30 09:55:13 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2670657Z 2025-08-30 09:55:13 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2670846Z 2025-08-30 09:55:13 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2670960Z 2025-08-30 09:55:13 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.2671068Z 2025-08-30 09:55:13 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.2671190Z 2025-08-30 09:55:13 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2671357Z 2025-08-30 09:55:13 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2671572Z 2025-08-30 09:55:13 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2671694Z 2025-08-30 09:55:13 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2671843Z 2025-08-30 09:55:13 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2671963Z 2025-08-30 09:55:13 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2672103Z 2025-08-30 09:55:13 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2672252Z 2025-08-30 09:55:13 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2672398Z 2025-08-30 09:55:13 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2672540Z 2025-08-30 09:55:13 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2672650Z 2025-08-30 09:55:13 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2672755Z 2025-08-30 09:55:13 INFO Validating configuration ...
2025-08-30T09:58:47.2673117Z 2025-08-30 09:55:13 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2673504Z 2025-08-30 09:55:13 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2673953Z 2025-08-30 09:55:13 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2674121Z 2025-08-30 09:55:13 DEBUG Ignoring LTC/USDT from whitelist. Market is not active.
2025-08-30T09:58:47.2674280Z 2025-08-30 09:55:13 INFO Ignoring LTC/USDT from whitelist. Market is not active.
2025-08-30T09:58:47.2674489Z 2025-08-30 09:55:13 DEBUG Whitelist with 4 pairs: ['ETH/USDT', 'XRP/USDT', 'NEO/USDT', 'TKN/USDT']
2025-08-30T09:58:47.2674664Z 2025-08-30 09:55:13 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2674802Z 2025-08-30 09:55:13 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2674923Z 2025-08-30 09:55:13 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2675157Z 2025-08-30 09:55:13 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2675272Z 2025-08-30 09:55:13 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2675430Z 2025-08-30 09:55:13 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2675616Z 2025-08-30 09:55:13 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2675775Z 2025-08-30 09:55:13 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2675933Z 2025-08-30 09:55:13 WARNING XRP/ETH, spot, 5m, data starts at 2019-10-11 00:00:00
2025-08-30T09:58:47.2676388Z 2025-08-30 09:55:13 DEBUG Missing data fillup for XRP/ETH, 5m: before: 574 - after: 577 - 0.52%
2025-08-30T09:58:47.2676556Z _______________ test_backtest_pricecontours[protections8-sine-9] _______________
2025-08-30T09:58:47.2676561Z 
2025-08-30T09:58:47.2676725Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2676786Z key = 'date'
2025-08-30T09:58:47.2676791Z 
2025-08-30T09:58:47.2676862Z     def get_loc(self, key):
2025-08-30T09:58:47.2677048Z         """
2025-08-30T09:58:47.2677201Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2677256Z     
2025-08-30T09:58:47.2677318Z         Parameters
2025-08-30T09:58:47.2677380Z         ----------
2025-08-30T09:58:47.2677441Z         key : label
2025-08-30T09:58:47.2677495Z     
2025-08-30T09:58:47.2677552Z         Returns
2025-08-30T09:58:47.2677615Z         -------
2025-08-30T09:58:47.2677738Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2677793Z     
2025-08-30T09:58:47.2677856Z         Examples
2025-08-30T09:58:47.2677915Z         --------
2025-08-30T09:58:47.2678004Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2678082Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2678255Z         1
2025-08-30T09:58:47.2678312Z     
2025-08-30T09:58:47.2678407Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2678488Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2678561Z         slice(1, 3, None)
2025-08-30T09:58:47.2678615Z     
2025-08-30T09:58:47.2678713Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2678798Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2678878Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2678934Z         """
2025-08-30T09:58:47.2679028Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2679085Z         try:
2025-08-30T09:58:47.2679173Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2679245Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2679250Z 
2025-08-30T09:58:47.2679422Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2679526Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2679691Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2679756Z     ???
2025-08-30T09:58:47.2679910Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2679965Z     ???
2025-08-30T09:58:47.2680227Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2680281Z     ???
2025-08-30T09:58:47.2680378Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2680383Z 
2025-08-30T09:58:47.2680440Z >   ???
2025-08-30T09:58:47.2680510Z E   KeyError: 'date'
2025-08-30T09:58:47.2680514Z 
2025-08-30T09:58:47.2680631Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2680636Z 
2025-08-30T09:58:47.2680795Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2680799Z 
2025-08-30T09:58:47.2681335Z default_conf = {'_strategy_protections': [{'method': 'CooldownPeriod', 'stop_duration': 3}], 'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.2681494Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8376a50>
2025-08-30T09:58:47.2681694Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2681836Z protections = [{'method': 'CooldownPeriod', 'stop_duration': 3}]
2025-08-30T09:58:47.2681912Z contour = 'sine', expected = 9
2025-08-30T09:58:47.2681917Z 
2025-08-30T09:58:47.2682001Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.2682092Z         "protections,contour,expected",
2025-08-30T09:58:47.2682147Z         [
2025-08-30T09:58:47.2682218Z             (None, "sine", 35),
2025-08-30T09:58:47.2682293Z             (None, "raise", 19),
2025-08-30T09:58:47.2682359Z             (None, "lower", 0),
2025-08-30T09:58:47.2682428Z             (None, "sine", 35),
2025-08-30T09:58:47.2682498Z             (None, "raise", 19),
2025-08-30T09:58:47.2682636Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2682863Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2683001Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.2683127Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2683261Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2683317Z         ],
2025-08-30T09:58:47.2683558Z     )
2025-08-30T09:58:47.2683709Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.2683975Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.2684086Z     ) -> None:
2025-08-30T09:58:47.2684209Z         if protections:
2025-08-30T09:58:47.2684517Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.2684631Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.2684687Z     
2025-08-30T09:58:47.2684762Z         patch_exchange(mocker)
2025-08-30T09:58:47.2684933Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2685106Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2685240Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.2685357Z         # over and over again should not cause different results
2025-08-30T09:58:47.2685416Z     
2025-08-30T09:58:47.2685497Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.2685589Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2685726Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2685780Z     
2025-08-30T09:58:47.2685872Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.2686025Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2686106Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2686115Z 
2025-08-30T09:58:47.2686207Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.2686308Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2686461Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2686550Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2686684Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2686793Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2686865Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2687054Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2687137Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2687215Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2687312Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2687316Z 
2025-08-30T09:58:47.2687474Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2687543Z key = 'date'
2025-08-30T09:58:47.2687547Z 
2025-08-30T09:58:47.2687619Z     def get_loc(self, key):
2025-08-30T09:58:47.2687675Z         """
2025-08-30T09:58:47.2687829Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2687884Z     
2025-08-30T09:58:47.2687948Z         Parameters
2025-08-30T09:58:47.2688013Z         ----------
2025-08-30T09:58:47.2688074Z         key : label
2025-08-30T09:58:47.2688128Z     
2025-08-30T09:58:47.2688185Z         Returns
2025-08-30T09:58:47.2688246Z         -------
2025-08-30T09:58:47.2688371Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2688434Z     
2025-08-30T09:58:47.2688502Z         Examples
2025-08-30T09:58:47.2688570Z         --------
2025-08-30T09:58:47.2688659Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2688737Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2688916Z         1
2025-08-30T09:58:47.2688971Z     
2025-08-30T09:58:47.2689063Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2689144Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2689210Z         slice(1, 3, None)
2025-08-30T09:58:47.2689263Z     
2025-08-30T09:58:47.2689363Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2689448Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2689529Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2689587Z         """
2025-08-30T09:58:47.2689679Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2689735Z         try:
2025-08-30T09:58:47.2689822Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2689976Z         except KeyError as err:
2025-08-30T09:58:47.2690068Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2690156Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2690270Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2690330Z             ):
2025-08-30T09:58:47.2690414Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2690489Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2690563Z E           KeyError: 'date'
2025-08-30T09:58:47.2690568Z 
2025-08-30T09:58:47.2690757Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2690895Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2691009Z 2025-08-30 09:55:15 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2691139Z 2025-08-30 09:55:15 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2691216Z 2025-08-30 09:55:15 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2691312Z 2025-08-30 09:55:15 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2691437Z 2025-08-30 09:55:15 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2691552Z 2025-08-30 09:55:15 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2691881Z 2025-08-30 09:55:15 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2692378Z 2025-08-30 09:55:15 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2692797Z 2025-08-30 09:55:15 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2692889Z 2025-08-30 09:55:15 INFO Found no parameter file.
2025-08-30T09:58:47.2693178Z 2025-08-30 09:55:15 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2693540Z 2025-08-30 09:55:15 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2693772Z 2025-08-30 09:55:15 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2693982Z 2025-08-30 09:55:15 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2694173Z 2025-08-30 09:55:15 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2694435Z 2025-08-30 09:55:15 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2694626Z 2025-08-30 09:55:15 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2694817Z 2025-08-30 09:55:15 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2694922Z 2025-08-30 09:55:15 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2695033Z 2025-08-30 09:55:15 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2695150Z 2025-08-30 09:55:15 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2695297Z 2025-08-30 09:55:15 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2695591Z 2025-08-30 09:55:15 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2695727Z 2025-08-30 09:55:15 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2695864Z 2025-08-30 09:55:15 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2696165Z 2025-08-30 09:55:15 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2696358Z 2025-08-30 09:55:15 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2696470Z 2025-08-30 09:55:15 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2696578Z 2025-08-30 09:55:15 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2696832Z 2025-08-30 09:55:15 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2697003Z 2025-08-30 09:55:15 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2697119Z 2025-08-30 09:55:15 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2697247Z 2025-08-30 09:55:15 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2697389Z 2025-08-30 09:55:15 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2697506Z 2025-08-30 09:55:15 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2697650Z 2025-08-30 09:55:15 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2697800Z 2025-08-30 09:55:15 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2697943Z 2025-08-30 09:55:15 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2698083Z 2025-08-30 09:55:15 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2698198Z 2025-08-30 09:55:15 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2698300Z 2025-08-30 09:55:15 INFO Validating configuration ...
2025-08-30T09:58:47.2698649Z 2025-08-30 09:55:15 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2698938Z 2025-08-30 09:55:15 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2699376Z 2025-08-30 09:55:15 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2699569Z 2025-08-30 09:55:15 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2699743Z 2025-08-30 09:55:15 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2699882Z 2025-08-30 09:55:15 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2699991Z 2025-08-30 09:55:15 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2700230Z 2025-08-30 09:55:15 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2700340Z 2025-08-30 09:55:15 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2700495Z 2025-08-30 09:55:15 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2700680Z 2025-08-30 09:55:15 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2700841Z 2025-08-30 09:55:15 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2700935Z 2025-08-30 09:55:15 DEBUG Dropping last candle
2025-08-30T09:58:47.2701148Z 2025-08-30 09:55:15 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.2701326Z ______ test_backtest_start_multi_strat_caching[week-start_delta0-changed] ______
2025-08-30T09:58:47.2701332Z 
2025-08-30T09:58:47.2701916Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2702081Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8377650>
2025-08-30T09:58:47.2702327Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584b29350>
2025-08-30T09:58:47.2702520Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2702641Z run_id = 'changed', start_delta = {'days': 0}, cache = 'week'
2025-08-30T09:58:47.2702646Z 
2025-08-30T09:58:47.2702763Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2702876Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2703092Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2703247Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2703446Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2703723Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2703789Z     ):
2025-08-30T09:58:47.2703863Z         default_conf.update(
2025-08-30T09:58:47.2703927Z             {
2025-08-30T09:58:47.2704007Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2704086Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2704162Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2704248Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2704308Z             }
2025-08-30T09:58:47.2704363Z         )
2025-08-30T09:58:47.2704438Z         patch_exchange(mocker)
2025-08-30T09:58:47.2704518Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2704585Z             return_value={
2025-08-30T09:58:47.2704698Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2704780Z                 "config": default_conf,
2025-08-30T09:58:47.2704846Z                 "locks": [],
2025-08-30T09:58:47.2704924Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2705003Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2705081Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2705165Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2705241Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2705319Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2705393Z                 "final_balance": 1000,
2025-08-30T09:58:47.2705448Z             }
2025-08-30T09:58:47.2705504Z         )
2025-08-30T09:58:47.2705575Z         mocker.patch(
2025-08-30T09:58:47.2705759Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2705859Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2705919Z         )
2025-08-30T09:58:47.2706150Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2706364Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2706429Z     
2025-08-30T09:58:47.2706528Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2706673Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2706742Z         if cache == "none":
2025-08-30T09:58:47.2706844Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2706912Z         elif cache == "day":
2025-08-30T09:58:47.2707006Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2707079Z         elif cache == "week":
2025-08-30T09:58:47.2707176Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2707249Z         elif cache == "month":
2025-08-30T09:58:47.2707347Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2707429Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2707495Z             return_value={
2025-08-30T09:58:47.2707770Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2708126Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2708379Z             }
2025-08-30T09:58:47.2708437Z         )
2025-08-30T09:58:47.2708530Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2708598Z             side_effect=[
2025-08-30T09:58:47.2708657Z                 {
2025-08-30T09:58:47.2708768Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2708862Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2708978Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2709035Z                 },
2025-08-30T09:58:47.2709096Z                 {
2025-08-30T09:58:47.2709199Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2709367Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2709492Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2709550Z                 },
2025-08-30T09:58:47.2709605Z             ]
2025-08-30T09:58:47.2709667Z         )
2025-08-30T09:58:47.2709741Z         mocker.patch(
2025-08-30T09:58:47.2709824Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2709892Z             return_value=[
2025-08-30T09:58:47.2710101Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2710157Z             ],
2025-08-30T09:58:47.2710216Z         )
2025-08-30T09:58:47.2710295Z         mocker.patch.multiple(
2025-08-30T09:58:47.2710401Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2710507Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2710598Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2710658Z         )
2025-08-30T09:58:47.2710918Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2710924Z 
2025-08-30T09:58:47.2711016Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2711128Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2711309Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2711385Z     return self._start_patch(
2025-08-30T09:58:47.2711574Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2711652Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2711716Z                        ^^^^^^^^^
2025-08-30T09:58:47.2711929Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2712004Z     result = self.__enter__()
2025-08-30T09:58:47.2712066Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2712292Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2712380Z     original, local = self.get_original()
2025-08-30T09:58:47.2712446Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2712545Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2712554Z 
2025-08-30T09:58:47.2712673Z self = <unittest.mock._patch object at 0x7f65c88ebd90>
2025-08-30T09:58:47.2712678Z 
2025-08-30T09:58:47.2712750Z     def get_original(self):
2025-08-30T09:58:47.2712822Z         target = self.getter()
2025-08-30T09:58:47.2712897Z         name = self.attribute
2025-08-30T09:58:47.2712952Z     
2025-08-30T09:58:47.2713019Z         original = DEFAULT
2025-08-30T09:58:47.2713082Z         local = False
2025-08-30T09:58:47.2713140Z     
2025-08-30T09:58:47.2713196Z         try:
2025-08-30T09:58:47.2713279Z             original = target.__dict__[name]
2025-08-30T09:58:47.2713484Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2713585Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2713643Z         else:
2025-08-30T09:58:47.2713709Z             local = True
2025-08-30T09:58:47.2713766Z     
2025-08-30T09:58:47.2713891Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2714107Z             self.create = True
2025-08-30T09:58:47.2714166Z     
2025-08-30T09:58:47.2714261Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2714338Z >           raise AttributeError(
2025-08-30T09:58:47.2714448Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2714508Z             )
2025-08-30T09:58:47.2715109Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2715114Z 
2025-08-30T09:58:47.2715352Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2715606Z ______________________ test_backtest_start_nomock_futures ______________________
2025-08-30T09:58:47.2715612Z 
2025-08-30T09:58:47.2715773Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2715838Z key = 'date'
2025-08-30T09:58:47.2715847Z 
2025-08-30T09:58:47.2715918Z     def get_loc(self, key):
2025-08-30T09:58:47.2715973Z         """
2025-08-30T09:58:47.2716126Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2716184Z     
2025-08-30T09:58:47.2716246Z         Parameters
2025-08-30T09:58:47.2716307Z         ----------
2025-08-30T09:58:47.2716372Z         key : label
2025-08-30T09:58:47.2716426Z     
2025-08-30T09:58:47.2716484Z         Returns
2025-08-30T09:58:47.2716542Z         -------
2025-08-30T09:58:47.2716670Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2716724Z     
2025-08-30T09:58:47.2716783Z         Examples
2025-08-30T09:58:47.2716845Z         --------
2025-08-30T09:58:47.2716938Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2717015Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2717071Z         1
2025-08-30T09:58:47.2717136Z     
2025-08-30T09:58:47.2717228Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2717306Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2717377Z         slice(1, 3, None)
2025-08-30T09:58:47.2717431Z     
2025-08-30T09:58:47.2717529Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2717612Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2717697Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2717753Z         """
2025-08-30T09:58:47.2717843Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2717904Z         try:
2025-08-30T09:58:47.2717992Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2718060Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2718068Z 
2025-08-30T09:58:47.2718241Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2718339Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2718505Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2718561Z     ???
2025-08-30T09:58:47.2718717Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2718770Z     ???
2025-08-30T09:58:47.2719028Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2719088Z     ???
2025-08-30T09:58:47.2719184Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2719189Z 
2025-08-30T09:58:47.2719244Z >   ???
2025-08-30T09:58:47.2719315Z E   KeyError: 'date'
2025-08-30T09:58:47.2719320Z 
2025-08-30T09:58:47.2719436Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2719445Z 
2025-08-30T09:58:47.2719601Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2719606Z 
2025-08-30T09:58:47.2720199Z default_conf_usdt = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2720470Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65848df510>
2025-08-30T09:58:47.2720626Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8a64a50>
2025-08-30T09:58:47.2720824Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2720978Z capsys = <_pytest.capture.CaptureFixture object at 0x7f65c8a66f90>
2025-08-30T09:58:47.2720983Z 
2025-08-30T09:58:47.2721095Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2721333Z     def test_backtest_start_nomock_futures(default_conf_usdt, mocker, caplog, testdatadir, capsys):
2025-08-30T09:58:47.2721493Z         # Tests detail-data loading
2025-08-30T09:58:47.2721574Z         default_conf_usdt.update(
2025-08-30T09:58:47.2721631Z             {
2025-08-30T09:58:47.2721719Z                 "trading_mode": "futures",
2025-08-30T09:58:47.2721795Z                 "margin_mode": "isolated",
2025-08-30T09:58:47.2721869Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2721948Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2722023Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2722108Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2722197Z                 "strategy": CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.2722253Z             }
2025-08-30T09:58:47.2722308Z         )
2025-08-30T09:58:47.2722382Z         patch_exchange(mocker)
2025-08-30T09:58:47.2722461Z         result1 = pd.DataFrame(
2025-08-30T09:58:47.2722516Z             {
2025-08-30T09:58:47.2722612Z                 "pair": ["XRP/USDT:USDT", "XRP/USDT:USDT"],
2025-08-30T09:58:47.2722699Z                 "profit_ratio": [0.0, 0.0],
2025-08-30T09:58:47.2722772Z                 "profit_abs": [0.0, 0.0],
2025-08-30T09:58:47.2722853Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.2722917Z                     [
2025-08-30T09:58:47.2722995Z                         "2021-11-18 18:00:00",
2025-08-30T09:58:47.2723064Z                         "2021-11-18 03:00:00",
2025-08-30T09:58:47.2723125Z                     ],
2025-08-30T09:58:47.2723195Z                     utc=True,
2025-08-30T09:58:47.2723251Z                 ),
2025-08-30T09:58:47.2723333Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.2723591Z                     [
2025-08-30T09:58:47.2723681Z                         "2021-11-18 20:00:00",
2025-08-30T09:58:47.2723750Z                         "2021-11-18 05:00:00",
2025-08-30T09:58:47.2723811Z                     ],
2025-08-30T09:58:47.2723882Z                     utc=True,
2025-08-30T09:58:47.2723939Z                 ),
2025-08-30T09:58:47.2724025Z                 "trade_duration": [235, 40],
2025-08-30T09:58:47.2724106Z                 "is_open": [False, False],
2025-08-30T09:58:47.2724182Z                 "is_short": [False, False],
2025-08-30T09:58:47.2724265Z                 "stake_amount": [0.01, 0.01],
2025-08-30T09:58:47.2724341Z                 "open_rate": [0.104445, 0.10302485],
2025-08-30T09:58:47.2724420Z                 "close_rate": [0.104969, 0.103541],
2025-08-30T09:58:47.2724526Z                 "exit_reason": [ExitType.ROI, ExitType.ROI],
2025-08-30T09:58:47.2724582Z             }
2025-08-30T09:58:47.2724640Z         )
2025-08-30T09:58:47.2724714Z         result2 = pd.DataFrame(
2025-08-30T09:58:47.2724768Z             {
2025-08-30T09:58:47.2724897Z                 "pair": ["XRP/USDT:USDT", "XRP/USDT:USDT", "XRP/USDT:USDT"],
2025-08-30T09:58:47.2724981Z                 "profit_ratio": [0.03, 0.01, 0.1],
2025-08-30T09:58:47.2725057Z                 "profit_abs": [0.01, 0.02, 0.2],
2025-08-30T09:58:47.2725139Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.2725281Z                     ["2021-11-19 18:00:00", "2021-11-19 03:00:00", "2021-11-19 05:00:00"], utc=True
2025-08-30T09:58:47.2725470Z                 ),
2025-08-30T09:58:47.2725550Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.2725683Z                     ["2021-11-19 20:00:00", "2021-11-19 05:00:00", "2021-11-19 08:00:00"], utc=True
2025-08-30T09:58:47.2725740Z                 ),
2025-08-30T09:58:47.2725819Z                 "trade_duration": [47, 40, 20],
2025-08-30T09:58:47.2725906Z                 "is_open": [False, False, False],
2025-08-30T09:58:47.2725987Z                 "is_short": [False, False, False],
2025-08-30T09:58:47.2726063Z                 "stake_amount": [0.01, 0.01, 0.01],
2025-08-30T09:58:47.2726197Z                 "open_rate": [0.104445, 0.10302485, 0.122541],
2025-08-30T09:58:47.2726289Z                 "close_rate": [0.104969, 0.103541, 0.123541],
2025-08-30T09:58:47.2726548Z                 "exit_reason": [ExitType.ROI, ExitType.ROI, ExitType.STOP_LOSS],
2025-08-30T09:58:47.2726608Z             }
2025-08-30T09:58:47.2726669Z         )
2025-08-30T09:58:47.2726745Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2726819Z             side_effect=[
2025-08-30T09:58:47.2726875Z                 {
2025-08-30T09:58:47.2726954Z                     "results": result1,
2025-08-30T09:58:47.2727034Z                     "config": default_conf_usdt,
2025-08-30T09:58:47.2727102Z                     "locks": [],
2025-08-30T09:58:47.2727183Z                     "rejected_signals": 20,
2025-08-30T09:58:47.2727264Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.2727342Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.2727425Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.2727502Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.2727580Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.2727661Z                     "final_balance": 1000,
2025-08-30T09:58:47.2727724Z                 },
2025-08-30T09:58:47.2727780Z                 {
2025-08-30T09:58:47.2727851Z                     "results": result2,
2025-08-30T09:58:47.2727938Z                     "config": default_conf_usdt,
2025-08-30T09:58:47.2728008Z                     "locks": [],
2025-08-30T09:58:47.2728083Z                     "rejected_signals": 20,
2025-08-30T09:58:47.2728160Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.2728241Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.2728318Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.2728395Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.2728479Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.2728553Z                     "final_balance": 1000,
2025-08-30T09:58:47.2728610Z                 },
2025-08-30T09:58:47.2728670Z             ]
2025-08-30T09:58:47.2728725Z         )
2025-08-30T09:58:47.2728799Z         mocker.patch(
2025-08-30T09:58:47.2728984Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2729097Z             PropertyMock(return_value=["XRP/USDT:USDT"]),
2025-08-30T09:58:47.2729160Z         )
2025-08-30T09:58:47.2729395Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2729454Z     
2025-08-30T09:58:47.2729611Z         patched_configuration_load_config_file(mocker, default_conf_usdt)
2025-08-30T09:58:47.2729666Z     
2025-08-30T09:58:47.2729725Z         args = [
2025-08-30T09:58:47.2729801Z             "backtesting",
2025-08-30T09:58:47.2729865Z             "--config",
2025-08-30T09:58:47.2729932Z             "config.json",
2025-08-30T09:58:47.2730000Z             "--datadir",
2025-08-30T09:58:47.2730069Z             str(testdatadir),
2025-08-30T09:58:47.2730143Z             "--strategy-path",
2025-08-30T09:58:47.2730260Z             str(Path(__file__).parents[1] / "strategy/strats"),
2025-08-30T09:58:47.2730329Z             "--timeframe",
2025-08-30T09:58:47.2730387Z             "1h",
2025-08-30T09:58:47.2730445Z         ]
2025-08-30T09:58:47.2730516Z         args = get_args(args)
2025-08-30T09:58:47.2730682Z >       start_backtesting(args)
2025-08-30T09:58:47.2730686Z 
2025-08-30T09:58:47.2730777Z tests/optimize/test_backtesting.py:2407: 
2025-08-30T09:58:47.2730884Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2731043Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.2731115Z     backtesting.start()
2025-08-30T09:58:47.2731219Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.2731301Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.2731366Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2731485Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.2731595Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.2731744Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2731891Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.2731959Z     timeranges = [
2025-08-30T09:58:47.2732097Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.2732250Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.2732311Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.2732497Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2732579Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2732643Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2732742Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2732747Z 
2025-08-30T09:58:47.2732904Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2732964Z key = 'date'
2025-08-30T09:58:47.2732969Z 
2025-08-30T09:58:47.2733050Z     def get_loc(self, key):
2025-08-30T09:58:47.2733107Z         """
2025-08-30T09:58:47.2733257Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2733320Z     
2025-08-30T09:58:47.2733563Z         Parameters
2025-08-30T09:58:47.2733658Z         ----------
2025-08-30T09:58:47.2733722Z         key : label
2025-08-30T09:58:47.2733783Z     
2025-08-30T09:58:47.2733841Z         Returns
2025-08-30T09:58:47.2733899Z         -------
2025-08-30T09:58:47.2734031Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2734086Z     
2025-08-30T09:58:47.2734145Z         Examples
2025-08-30T09:58:47.2734204Z         --------
2025-08-30T09:58:47.2734293Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2734371Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2734427Z         1
2025-08-30T09:58:47.2734487Z     
2025-08-30T09:58:47.2734577Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2734664Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2734731Z         slice(1, 3, None)
2025-08-30T09:58:47.2734788Z     
2025-08-30T09:58:47.2734887Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2734973Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2735056Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2735113Z         """
2025-08-30T09:58:47.2735202Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2735259Z         try:
2025-08-30T09:58:47.2735351Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2735423Z         except KeyError as err:
2025-08-30T09:58:47.2735509Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2735599Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2735708Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2735764Z             ):
2025-08-30T09:58:47.2735854Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2735931Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2736000Z E           KeyError: 'date'
2025-08-30T09:58:47.2736005Z 
2025-08-30T09:58:47.2736328Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2736471Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2736575Z 2025-08-30 09:55:16 INFO Using config: config.json ...
2025-08-30T09:58:47.2736674Z 2025-08-30 09:55:16 INFO Enabling colorized output.
2025-08-30T09:58:47.2736760Z 2025-08-30 09:55:16 INFO Logfile configured
2025-08-30T09:58:47.2736838Z 2025-08-30 09:55:16 INFO Verbosity set to 3
2025-08-30T09:58:47.2737151Z 2025-08-30 09:55:16 INFO Using additional Strategy lookup path: /home/runner/work/freqtrade/freqtrade/tests/strategy/strats
2025-08-30T09:58:47.2737338Z 2025-08-30 09:55:16 INFO Parameter -i/--timeframe detected ... Using timeframe: 1h ...
2025-08-30T09:58:47.2737546Z 2025-08-30 09:55:16 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.2737869Z 2025-08-30 09:55:16 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_start_nomock_fut0/user_data ...
2025-08-30T09:58:47.2738113Z 2025-08-30 09:55:16 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.2738256Z 2025-08-30 09:55:16 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.2738372Z 2025-08-30 09:55:16 INFO Parameter --cache=day detected ...
2025-08-30T09:58:47.2738464Z 2025-08-30 09:55:16 INFO Checking exchange...
2025-08-30T09:58:47.2738689Z 2025-08-30 09:55:16 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.2738803Z 2025-08-30 09:55:16 INFO Using pairlist from configuration.
2025-08-30T09:58:47.2738905Z 2025-08-30 09:55:16 INFO Validating configuration ...
2025-08-30T09:58:47.2739033Z 2025-08-30 09:55:16 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.2739143Z 2025-08-30 09:55:16 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2739268Z 2025-08-30 09:55:16 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2739353Z 2025-08-30 09:55:16 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2739449Z 2025-08-30 09:55:16 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2739567Z 2025-08-30 09:55:16 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2739687Z 2025-08-30 09:55:16 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2740004Z 2025-08-30 09:55:16 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2740493Z 2025-08-30 09:55:16 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2740913Z 2025-08-30 09:55:16 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2741010Z 2025-08-30 09:55:16 INFO Found no parameter file.
2025-08-30T09:58:47.2741295Z 2025-08-30 09:55:16 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2741476Z 2025-08-30 09:55:16 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.2741654Z 2025-08-30 09:55:16 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2741849Z 2025-08-30 09:55:16 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.2742040Z 2025-08-30 09:55:16 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.2742397Z 2025-08-30 09:55:16 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2742592Z 2025-08-30 09:55:16 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.2742802Z 2025-08-30 09:55:16 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.2743036Z 2025-08-30 09:55:16 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.2743451Z 2025-08-30 09:55:16 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.2743652Z 2025-08-30 09:55:16 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2743846Z 2025-08-30 09:55:16 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2743947Z 2025-08-30 09:55:16 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.2744051Z 2025-08-30 09:55:16 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2744171Z 2025-08-30 09:55:16 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2744319Z 2025-08-30 09:55:16 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2744589Z 2025-08-30 09:55:16 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2744725Z 2025-08-30 09:55:16 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2744873Z 2025-08-30 09:55:16 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2745174Z 2025-08-30 09:55:16 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2745369Z 2025-08-30 09:55:16 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2745482Z 2025-08-30 09:55:16 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.2745592Z 2025-08-30 09:55:16 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.2745718Z 2025-08-30 09:55:16 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2745989Z 2025-08-30 09:55:16 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2746108Z 2025-08-30 09:55:16 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2746231Z 2025-08-30 09:55:16 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2746376Z 2025-08-30 09:55:16 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2746496Z 2025-08-30 09:55:16 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2746635Z 2025-08-30 09:55:16 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2746790Z 2025-08-30 09:55:16 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2746932Z 2025-08-30 09:55:16 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2747073Z 2025-08-30 09:55:16 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2747185Z 2025-08-30 09:55:16 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2747286Z 2025-08-30 09:55:16 INFO Validating configuration ...
2025-08-30T09:58:47.2747637Z 2025-08-30 09:55:16 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2747919Z 2025-08-30 09:55:16 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2748356Z 2025-08-30 09:55:16 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2748571Z 2025-08-30 09:55:16 DEBUG Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2748791Z 2025-08-30 09:55:16 WARNING Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2748995Z 2025-08-30 09:55:16 DEBUG Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2749205Z 2025-08-30 09:55:16 WARNING Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2749416Z 2025-08-30 09:55:16 DEBUG Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2749625Z 2025-08-30 09:55:16 WARNING Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2749826Z 2025-08-30 09:55:16 DEBUG Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2750299Z 2025-08-30 09:55:16 WARNING Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2750669Z 2025-08-30 09:55:16 DEBUG Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2750893Z 2025-08-30 09:55:16 WARNING Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.2750999Z 2025-08-30 09:55:16 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.2751174Z 2025-08-30 09:55:16 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2751301Z 2025-08-30 09:55:16 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.2751573Z _________ test_backtest_start_multi_strat_caching[none-start_delta3-2] _________
2025-08-30T09:58:47.2751580Z 
2025-08-30T09:58:47.2752165Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2752332Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65948230d0>
2025-08-30T09:58:47.2752500Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594458790>
2025-08-30T09:58:47.2752696Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2752804Z run_id = '2', start_delta = {'weeks': 4}, cache = 'none'
2025-08-30T09:58:47.2752809Z 
2025-08-30T09:58:47.2752929Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2753042Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2753263Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2753523Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2753626Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2753794Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2753852Z     ):
2025-08-30T09:58:47.2753932Z         default_conf.update(
2025-08-30T09:58:47.2753989Z             {
2025-08-30T09:58:47.2754064Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2754145Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2754221Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2754307Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2754364Z             }
2025-08-30T09:58:47.2754426Z         )
2025-08-30T09:58:47.2754504Z         patch_exchange(mocker)
2025-08-30T09:58:47.2754583Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2754657Z             return_value={
2025-08-30T09:58:47.2754776Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2754851Z                 "config": default_conf,
2025-08-30T09:58:47.2754918Z                 "locks": [],
2025-08-30T09:58:47.2755000Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2755080Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2755157Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2755241Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2755319Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2755396Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2755474Z                 "final_balance": 1000,
2025-08-30T09:58:47.2755530Z             }
2025-08-30T09:58:47.2755585Z         )
2025-08-30T09:58:47.2755653Z         mocker.patch(
2025-08-30T09:58:47.2755842Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2755944Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2756005Z         )
2025-08-30T09:58:47.2756242Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2756651Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2756708Z     
2025-08-30T09:58:47.2756807Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2756953Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2757021Z         if cache == "none":
2025-08-30T09:58:47.2757117Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2757195Z         elif cache == "day":
2025-08-30T09:58:47.2757287Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2757356Z         elif cache == "week":
2025-08-30T09:58:47.2757460Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2757530Z         elif cache == "month":
2025-08-30T09:58:47.2757730Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2757817Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2757888Z             return_value={
2025-08-30T09:58:47.2758060Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2758247Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2758308Z             }
2025-08-30T09:58:47.2758364Z         )
2025-08-30T09:58:47.2758445Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2758516Z             side_effect=[
2025-08-30T09:58:47.2758574Z                 {
2025-08-30T09:58:47.2758680Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2758768Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2758890Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2758947Z                 },
2025-08-30T09:58:47.2759009Z                 {
2025-08-30T09:58:47.2759116Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2759200Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2759315Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2759378Z                 },
2025-08-30T09:58:47.2759433Z             ]
2025-08-30T09:58:47.2759488Z         )
2025-08-30T09:58:47.2759554Z         mocker.patch(
2025-08-30T09:58:47.2759638Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2759705Z             return_value=[
2025-08-30T09:58:47.2759911Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2759972Z             ],
2025-08-30T09:58:47.2760028Z         )
2025-08-30T09:58:47.2760107Z         mocker.patch.multiple(
2025-08-30T09:58:47.2760209Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2760322Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2760414Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2760469Z         )
2025-08-30T09:58:47.2760733Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2760738Z 
2025-08-30T09:58:47.2760828Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2760931Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2761116Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2761192Z     return self._start_patch(
2025-08-30T09:58:47.2761376Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2761457Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2761521Z                        ^^^^^^^^^
2025-08-30T09:58:47.2761734Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2761808Z     result = self.__enter__()
2025-08-30T09:58:47.2761875Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2762100Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2762272Z     original, local = self.get_original()
2025-08-30T09:58:47.2762342Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2762442Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2762447Z 
2025-08-30T09:58:47.2762563Z self = <unittest.mock._patch object at 0x7f65dc34f510>
2025-08-30T09:58:47.2762568Z 
2025-08-30T09:58:47.2762643Z     def get_original(self):
2025-08-30T09:58:47.2762715Z         target = self.getter()
2025-08-30T09:58:47.2762783Z         name = self.attribute
2025-08-30T09:58:47.2762839Z     
2025-08-30T09:58:47.2762911Z         original = DEFAULT
2025-08-30T09:58:47.2762973Z         local = False
2025-08-30T09:58:47.2763029Z     
2025-08-30T09:58:47.2763090Z         try:
2025-08-30T09:58:47.2763267Z             original = target.__dict__[name]
2025-08-30T09:58:47.2763452Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2763549Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2763616Z         else:
2025-08-30T09:58:47.2763682Z             local = True
2025-08-30T09:58:47.2763737Z     
2025-08-30T09:58:47.2763867Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2763936Z             self.create = True
2025-08-30T09:58:47.2763991Z     
2025-08-30T09:58:47.2764090Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2764165Z >           raise AttributeError(
2025-08-30T09:58:47.2764274Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2764329Z             )
2025-08-30T09:58:47.2764939Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2764945Z 
2025-08-30T09:58:47.2765183Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2765364Z ______ test_backtest_start_multi_strat_caching[day-start_delta2-changed] _______
2025-08-30T09:58:47.2765374Z 
2025-08-30T09:58:47.2765949Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2766114Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584e99c50>
2025-08-30T09:58:47.2766275Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e44fb450>
2025-08-30T09:58:47.2766472Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2766594Z run_id = 'changed', start_delta = {'weeks': 1}, cache = 'day'
2025-08-30T09:58:47.2766599Z 
2025-08-30T09:58:47.2766714Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2766833Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2767052Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2767206Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2767306Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2767467Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2767524Z     ):
2025-08-30T09:58:47.2767603Z         default_conf.update(
2025-08-30T09:58:47.2767660Z             {
2025-08-30T09:58:47.2767738Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2767816Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2767896Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2767983Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2768040Z             }
2025-08-30T09:58:47.2768105Z         )
2025-08-30T09:58:47.2768178Z         patch_exchange(mocker)
2025-08-30T09:58:47.2768254Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2768444Z             return_value={
2025-08-30T09:58:47.2768560Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2768636Z                 "config": default_conf,
2025-08-30T09:58:47.2768703Z                 "locks": [],
2025-08-30T09:58:47.2768782Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2768861Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2768937Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2769019Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2769095Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2769171Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2769246Z                 "final_balance": 1000,
2025-08-30T09:58:47.2769306Z             }
2025-08-30T09:58:47.2769361Z         )
2025-08-30T09:58:47.2769539Z         mocker.patch(
2025-08-30T09:58:47.2769729Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2769831Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2769894Z         )
2025-08-30T09:58:47.2770128Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2770338Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2770394Z     
2025-08-30T09:58:47.2770492Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2770636Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2770704Z         if cache == "none":
2025-08-30T09:58:47.2770798Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2770869Z         elif cache == "day":
2025-08-30T09:58:47.2770961Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2771035Z         elif cache == "week":
2025-08-30T09:58:47.2771134Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2771204Z         elif cache == "month":
2025-08-30T09:58:47.2771301Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2771385Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2771455Z             return_value={
2025-08-30T09:58:47.2771619Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2771805Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2771866Z             }
2025-08-30T09:58:47.2771922Z         )
2025-08-30T09:58:47.2772003Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2772069Z             side_effect=[
2025-08-30T09:58:47.2772130Z                 {
2025-08-30T09:58:47.2772237Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2772327Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2772446Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2772509Z                 },
2025-08-30T09:58:47.2772566Z                 {
2025-08-30T09:58:47.2772671Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2772755Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2772866Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2772923Z                 },
2025-08-30T09:58:47.2772982Z             ]
2025-08-30T09:58:47.2773037Z         )
2025-08-30T09:58:47.2773103Z         mocker.patch(
2025-08-30T09:58:47.2773184Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2773250Z             return_value=[
2025-08-30T09:58:47.2773648Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2773719Z             ],
2025-08-30T09:58:47.2773776Z         )
2025-08-30T09:58:47.2773857Z         mocker.patch.multiple(
2025-08-30T09:58:47.2773964Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2774226Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2774319Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2774375Z         )
2025-08-30T09:58:47.2774677Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2774688Z 
2025-08-30T09:58:47.2774858Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2775043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2775318Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2775397Z     return self._start_patch(
2025-08-30T09:58:47.2775581Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2775840Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2775959Z                        ^^^^^^^^^
2025-08-30T09:58:47.2776174Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2776250Z     result = self.__enter__()
2025-08-30T09:58:47.2776318Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2776543Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2776627Z     original, local = self.get_original()
2025-08-30T09:58:47.2776697Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2776797Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2776802Z 
2025-08-30T09:58:47.2776917Z self = <unittest.mock._patch object at 0x7f6584ed2050>
2025-08-30T09:58:47.2776921Z 
2025-08-30T09:58:47.2776997Z     def get_original(self):
2025-08-30T09:58:47.2777070Z         target = self.getter()
2025-08-30T09:58:47.2777144Z         name = self.attribute
2025-08-30T09:58:47.2777201Z     
2025-08-30T09:58:47.2777273Z         original = DEFAULT
2025-08-30T09:58:47.2777337Z         local = False
2025-08-30T09:58:47.2777391Z     
2025-08-30T09:58:47.2777457Z         try:
2025-08-30T09:58:47.2777539Z             original = target.__dict__[name]
2025-08-30T09:58:47.2777625Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2777716Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2777779Z         else:
2025-08-30T09:58:47.2777845Z             local = True
2025-08-30T09:58:47.2777902Z     
2025-08-30T09:58:47.2778034Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2778104Z             self.create = True
2025-08-30T09:58:47.2778159Z     
2025-08-30T09:58:47.2778253Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2778336Z >           raise AttributeError(
2025-08-30T09:58:47.2778445Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2778507Z             )
2025-08-30T09:58:47.2779107Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2779117Z 
2025-08-30T09:58:47.2779357Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2779496Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2779647Z 2025-08-30 09:55:17 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.2779801Z ________________ test_backtest_start_multi_strat_nomock_detail _________________
2025-08-30T09:58:47.2779806Z 
2025-08-30T09:58:47.2779965Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2780030Z key = 'date'
2025-08-30T09:58:47.2780035Z 
2025-08-30T09:58:47.2780107Z     def get_loc(self, key):
2025-08-30T09:58:47.2780169Z         """
2025-08-30T09:58:47.2780325Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2780380Z     
2025-08-30T09:58:47.2780530Z         Parameters
2025-08-30T09:58:47.2780591Z         ----------
2025-08-30T09:58:47.2780657Z         key : label
2025-08-30T09:58:47.2780711Z     
2025-08-30T09:58:47.2780770Z         Returns
2025-08-30T09:58:47.2780834Z         -------
2025-08-30T09:58:47.2780958Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2781013Z     
2025-08-30T09:58:47.2781073Z         Examples
2025-08-30T09:58:47.2781136Z         --------
2025-08-30T09:58:47.2781225Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2781303Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2781364Z         1
2025-08-30T09:58:47.2781418Z     
2025-08-30T09:58:47.2781509Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2781588Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2781739Z         slice(1, 3, None)
2025-08-30T09:58:47.2781799Z     
2025-08-30T09:58:47.2781900Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2781992Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2782073Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2782129Z         """
2025-08-30T09:58:47.2782222Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2782280Z         try:
2025-08-30T09:58:47.2782368Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2782440Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2782445Z 
2025-08-30T09:58:47.2782619Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2782718Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2782882Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2782943Z     ???
2025-08-30T09:58:47.2783104Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2783160Z     ???
2025-08-30T09:58:47.2783543Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2783605Z     ???
2025-08-30T09:58:47.2783704Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2783708Z 
2025-08-30T09:58:47.2783766Z >   ???
2025-08-30T09:58:47.2783836Z E   KeyError: 'date'
2025-08-30T09:58:47.2783841Z 
2025-08-30T09:58:47.2783957Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2783962Z 
2025-08-30T09:58:47.2784116Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2784128Z 
2025-08-30T09:58:47.2784708Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2784862Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65847a5f50>
2025-08-30T09:58:47.2785022Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65944620d0>
2025-08-30T09:58:47.2785221Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2785374Z capsys = <_pytest.capture.CaptureFixture object at 0x7f6594461c10>
2025-08-30T09:58:47.2785379Z 
2025-08-30T09:58:47.2785490Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2785601Z     def test_backtest_start_multi_strat_nomock_detail(
2025-08-30T09:58:47.2785713Z         default_conf, mocker, caplog, testdatadir, capsys
2025-08-30T09:58:47.2785770Z     ):
2025-08-30T09:58:47.2785852Z         # Tests detail-data loading
2025-08-30T09:58:47.2785926Z         default_conf.update(
2025-08-30T09:58:47.2785983Z             {
2025-08-30T09:58:47.2786064Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2786145Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2786222Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2786306Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2786491Z             }
2025-08-30T09:58:47.2786550Z         )
2025-08-30T09:58:47.2786624Z         patch_exchange(mocker)
2025-08-30T09:58:47.2786701Z         result1 = pd.DataFrame(
2025-08-30T09:58:47.2786757Z             {
2025-08-30T09:58:47.2786839Z                 "pair": ["XRP/BTC", "LTC/BTC"],
2025-08-30T09:58:47.2786914Z                 "profit_ratio": [0.0, 0.0],
2025-08-30T09:58:47.2786991Z                 "profit_abs": [0.0, 0.0],
2025-08-30T09:58:47.2787072Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.2787132Z                     [
2025-08-30T09:58:47.2787210Z                         "2018-01-29 18:40:00",
2025-08-30T09:58:47.2787280Z                         "2018-01-30 03:30:00",
2025-08-30T09:58:47.2787341Z                     ],
2025-08-30T09:58:47.2787407Z                     utc=True,
2025-08-30T09:58:47.2787597Z                 ),
2025-08-30T09:58:47.2787682Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.2787741Z                     [
2025-08-30T09:58:47.2787820Z                         "2018-01-29 20:45:00",
2025-08-30T09:58:47.2787887Z                         "2018-01-30 05:35:00",
2025-08-30T09:58:47.2787947Z                     ],
2025-08-30T09:58:47.2788017Z                     utc=True,
2025-08-30T09:58:47.2788073Z                 ),
2025-08-30T09:58:47.2788151Z                 "trade_duration": [235, 40],
2025-08-30T09:58:47.2788227Z                 "is_open": [False, False],
2025-08-30T09:58:47.2788307Z                 "is_short": [False, False],
2025-08-30T09:58:47.2788382Z                 "stake_amount": [0.01, 0.01],
2025-08-30T09:58:47.2788460Z                 "open_rate": [0.104445, 0.10302485],
2025-08-30T09:58:47.2788540Z                 "close_rate": [0.104969, 0.103541],
2025-08-30T09:58:47.2788649Z                 "exit_reason": [ExitType.ROI, ExitType.ROI],
2025-08-30T09:58:47.2788705Z             }
2025-08-30T09:58:47.2788761Z         )
2025-08-30T09:58:47.2788838Z         result2 = pd.DataFrame(
2025-08-30T09:58:47.2788894Z             {
2025-08-30T09:58:47.2788990Z                 "pair": ["XRP/BTC", "LTC/BTC", "ETH/BTC"],
2025-08-30T09:58:47.2789075Z                 "profit_ratio": [0.03, 0.01, 0.1],
2025-08-30T09:58:47.2789151Z                 "profit_abs": [0.01, 0.02, 0.2],
2025-08-30T09:58:47.2789230Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.2789374Z                     ["2018-01-29 18:40:00", "2018-01-30 03:30:00", "2018-01-30 05:30:00"], utc=True
2025-08-30T09:58:47.2789434Z                 ),
2025-08-30T09:58:47.2789512Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.2789641Z                     ["2018-01-29 20:45:00", "2018-01-30 05:35:00", "2018-01-30 08:30:00"], utc=True
2025-08-30T09:58:47.2789703Z                 ),
2025-08-30T09:58:47.2789782Z                 "trade_duration": [47, 40, 20],
2025-08-30T09:58:47.2789872Z                 "is_open": [False, False, False],
2025-08-30T09:58:47.2789962Z                 "is_short": [False, False, False],
2025-08-30T09:58:47.2790039Z                 "stake_amount": [0.01, 0.01, 0.01],
2025-08-30T09:58:47.2790134Z                 "open_rate": [0.104445, 0.10302485, 0.122541],
2025-08-30T09:58:47.2790225Z                 "close_rate": [0.104969, 0.103541, 0.123541],
2025-08-30T09:58:47.2790379Z                 "exit_reason": [ExitType.ROI, ExitType.ROI, ExitType.STOP_LOSS],
2025-08-30T09:58:47.2790437Z             }
2025-08-30T09:58:47.2790492Z         )
2025-08-30T09:58:47.2790575Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2790641Z             side_effect=[
2025-08-30T09:58:47.2790700Z                 {
2025-08-30T09:58:47.2790779Z                     "results": result1,
2025-08-30T09:58:47.2790854Z                     "config": default_conf,
2025-08-30T09:58:47.2790921Z                     "locks": [],
2025-08-30T09:58:47.2791005Z                     "rejected_signals": 20,
2025-08-30T09:58:47.2791086Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.2791165Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.2791345Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.2791427Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.2791503Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.2791579Z                     "final_balance": 1000,
2025-08-30T09:58:47.2791641Z                 },
2025-08-30T09:58:47.2791700Z                 {
2025-08-30T09:58:47.2791771Z                     "results": result2,
2025-08-30T09:58:47.2791845Z                     "config": default_conf,
2025-08-30T09:58:47.2791915Z                     "locks": [],
2025-08-30T09:58:47.2791989Z                     "rejected_signals": 20,
2025-08-30T09:58:47.2792066Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.2792148Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.2792305Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.2792384Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.2792465Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.2792544Z                     "final_balance": 1000,
2025-08-30T09:58:47.2792600Z                 },
2025-08-30T09:58:47.2792655Z             ]
2025-08-30T09:58:47.2792715Z         )
2025-08-30T09:58:47.2792782Z         mocker.patch(
2025-08-30T09:58:47.2792966Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2793061Z             PropertyMock(return_value=["XRP/ETH"]),
2025-08-30T09:58:47.2793116Z         )
2025-08-30T09:58:47.2793454Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2793511Z     
2025-08-30T09:58:47.2793664Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.2793719Z     
2025-08-30T09:58:47.2793782Z         args = [
2025-08-30T09:58:47.2793857Z             "backtesting",
2025-08-30T09:58:47.2793921Z             "--config",
2025-08-30T09:58:47.2793990Z             "config.json",
2025-08-30T09:58:47.2794060Z             "--datadir",
2025-08-30T09:58:47.2794132Z             str(testdatadir),
2025-08-30T09:58:47.2794205Z             "--strategy-path",
2025-08-30T09:58:47.2794315Z             str(Path(__file__).parents[1] / "strategy/strats"),
2025-08-30T09:58:47.2794385Z             "--timeframe",
2025-08-30T09:58:47.2794443Z             "5m",
2025-08-30T09:58:47.2794517Z             "--timeframe-detail",
2025-08-30T09:58:47.2794580Z             "1m",
2025-08-30T09:58:47.2794650Z             "--strategy-list",
2025-08-30T09:58:47.2794723Z             CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.2794778Z         ]
2025-08-30T09:58:47.2794852Z         args = get_args(args)
2025-08-30T09:58:47.2794923Z >       start_backtesting(args)
2025-08-30T09:58:47.2794927Z 
2025-08-30T09:58:47.2795021Z tests/optimize/test_backtesting.py:2543: 
2025-08-30T09:58:47.2795129Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2795289Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.2795365Z     backtesting.start()
2025-08-30T09:58:47.2795481Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.2795563Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.2795630Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2795751Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.2795858Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.2795929Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2796070Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.2796137Z     timeranges = [
2025-08-30T09:58:47.2796268Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.2796426Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.2796490Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.2796676Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2796882Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2796947Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2797051Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2797055Z 
2025-08-30T09:58:47.2797217Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2797277Z key = 'date'
2025-08-30T09:58:47.2797282Z 
2025-08-30T09:58:47.2797357Z     def get_loc(self, key):
2025-08-30T09:58:47.2797414Z         """
2025-08-30T09:58:47.2797563Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2797623Z     
2025-08-30T09:58:47.2797685Z         Parameters
2025-08-30T09:58:47.2797748Z         ----------
2025-08-30T09:58:47.2797918Z         key : label
2025-08-30T09:58:47.2797981Z     
2025-08-30T09:58:47.2798041Z         Returns
2025-08-30T09:58:47.2798101Z         -------
2025-08-30T09:58:47.2798229Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2798290Z     
2025-08-30T09:58:47.2798349Z         Examples
2025-08-30T09:58:47.2798410Z         --------
2025-08-30T09:58:47.2798506Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2798583Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2798641Z         1
2025-08-30T09:58:47.2798704Z     
2025-08-30T09:58:47.2798796Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2798875Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2798943Z         slice(1, 3, None)
2025-08-30T09:58:47.2799003Z     
2025-08-30T09:58:47.2806509Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2806619Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2806712Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2806774Z         """
2025-08-30T09:58:47.2806874Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2806931Z         try:
2025-08-30T09:58:47.2807032Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2807114Z         except KeyError as err:
2025-08-30T09:58:47.2807203Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2807297Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2807420Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2807479Z             ):
2025-08-30T09:58:47.2807565Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2807648Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2807723Z E           KeyError: 'date'
2025-08-30T09:58:47.2807728Z 
2025-08-30T09:58:47.2807931Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2808084Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2808195Z 2025-08-30 09:55:17 INFO Using config: config.json ...
2025-08-30T09:58:47.2808294Z 2025-08-30 09:55:17 INFO Enabling colorized output.
2025-08-30T09:58:47.2808381Z 2025-08-30 09:55:17 INFO Logfile configured
2025-08-30T09:58:47.2808466Z 2025-08-30 09:55:17 INFO Verbosity set to 3
2025-08-30T09:58:47.2808781Z 2025-08-30 09:55:17 INFO Using additional Strategy lookup path: /home/runner/work/freqtrade/freqtrade/tests/strategy/strats
2025-08-30T09:58:47.2808968Z 2025-08-30 09:55:17 INFO Parameter -i/--timeframe detected ... Using timeframe: 5m ...
2025-08-30T09:58:47.2809076Z 2025-08-30 09:55:17 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.2809323Z 2025-08-30 09:55:17 INFO Parameter --timeframe-detail detected, using 1m for intra-candle backtesting ...
2025-08-30T09:58:47.2809650Z 2025-08-30 09:55:17 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_start_multi_stra19/user_data ...
2025-08-30T09:58:47.2809893Z 2025-08-30 09:55:17 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.2810011Z 2025-08-30 09:55:17 INFO Using strategy list of 1 strategies
2025-08-30T09:58:47.2810331Z 2025-08-30 09:55:17 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.2810453Z 2025-08-30 09:55:17 INFO Parameter --cache=day detected ...
2025-08-30T09:58:47.2810544Z 2025-08-30 09:55:17 INFO Checking exchange...
2025-08-30T09:58:47.2810775Z 2025-08-30 09:55:17 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.2810896Z 2025-08-30 09:55:17 INFO Using pairlist from configuration.
2025-08-30T09:58:47.2811003Z 2025-08-30 09:55:17 INFO Validating configuration ...
2025-08-30T09:58:47.2811126Z 2025-08-30 09:55:17 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.2811231Z 2025-08-30 09:55:17 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2811466Z 2025-08-30 09:55:17 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2811549Z 2025-08-30 09:55:17 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2811644Z 2025-08-30 09:55:17 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2811777Z 2025-08-30 09:55:17 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2811915Z 2025-08-30 09:55:17 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2812249Z 2025-08-30 09:55:17 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2812748Z 2025-08-30 09:55:17 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2813163Z 2025-08-30 09:55:17 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2813259Z 2025-08-30 09:55:17 INFO Found no parameter file.
2025-08-30T09:58:47.2813766Z 2025-08-30 09:55:17 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2813956Z 2025-08-30 09:55:17 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2814142Z 2025-08-30 09:55:17 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2814343Z 2025-08-30 09:55:17 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2814535Z 2025-08-30 09:55:17 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2814893Z 2025-08-30 09:55:17 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.2815099Z 2025-08-30 09:55:17 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.2815309Z 2025-08-30 09:55:17 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.2815541Z 2025-08-30 09:55:17 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.2815746Z 2025-08-30 09:55:17 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.2815942Z 2025-08-30 09:55:17 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2816136Z 2025-08-30 09:55:17 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2816248Z 2025-08-30 09:55:17 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2816354Z 2025-08-30 09:55:17 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2816472Z 2025-08-30 09:55:17 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2816623Z 2025-08-30 09:55:17 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2816785Z 2025-08-30 09:55:17 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2816918Z 2025-08-30 09:55:17 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2817059Z 2025-08-30 09:55:17 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2817364Z 2025-08-30 09:55:17 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2817773Z 2025-08-30 09:55:17 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2817908Z 2025-08-30 09:55:17 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2818124Z 2025-08-30 09:55:17 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2818358Z 2025-08-30 09:55:17 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2818751Z 2025-08-30 09:55:17 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.2818881Z 2025-08-30 09:55:17 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2819137Z 2025-08-30 09:55:17 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2819289Z 2025-08-30 09:55:17 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2819419Z 2025-08-30 09:55:17 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2819565Z 2025-08-30 09:55:17 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2819718Z 2025-08-30 09:55:17 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2819859Z 2025-08-30 09:55:17 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2820008Z 2025-08-30 09:55:17 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2820118Z 2025-08-30 09:55:17 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2820222Z 2025-08-30 09:55:17 INFO Validating configuration ...
2025-08-30T09:58:47.2820578Z 2025-08-30 09:55:17 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2820868Z 2025-08-30 09:55:17 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2821305Z 2025-08-30 09:55:17 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2821508Z 2025-08-30 09:55:17 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2821682Z 2025-08-30 09:55:17 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2821809Z 2025-08-30 09:55:17 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.2822014Z 2025-08-30 09:55:17 DEBUG Missing data fillup for XRP/ETH, 5m: before: 706 - after: 712 - 0.85%
2025-08-30T09:58:47.2822199Z ______ test_backtest_start_multi_strat_caching[none-start_delta2-changed] ______
2025-08-30T09:58:47.2822204Z 
2025-08-30T09:58:47.2822786Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2822955Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6594870450>
2025-08-30T09:58:47.2823120Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594441cd0>
2025-08-30T09:58:47.2823319Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2823561Z run_id = 'changed', start_delta = {'weeks': 1}, cache = 'none'
2025-08-30T09:58:47.2823568Z 
2025-08-30T09:58:47.2823686Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2823806Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2824026Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2824176Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2824273Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2824446Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2824504Z     ):
2025-08-30T09:58:47.2824581Z         default_conf.update(
2025-08-30T09:58:47.2824762Z             {
2025-08-30T09:58:47.2824850Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2824928Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2825003Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2825097Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2825154Z             }
2025-08-30T09:58:47.2825214Z         )
2025-08-30T09:58:47.2825289Z         patch_exchange(mocker)
2025-08-30T09:58:47.2825371Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2825439Z             return_value={
2025-08-30T09:58:47.2825552Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2825631Z                 "config": default_conf,
2025-08-30T09:58:47.2825698Z                 "locks": [],
2025-08-30T09:58:47.2825877Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2825962Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2826043Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2826157Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2826236Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2826317Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2826392Z                 "final_balance": 1000,
2025-08-30T09:58:47.2826451Z             }
2025-08-30T09:58:47.2826512Z         )
2025-08-30T09:58:47.2826581Z         mocker.patch(
2025-08-30T09:58:47.2826771Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2826878Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2826940Z         )
2025-08-30T09:58:47.2827175Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2827392Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2827452Z     
2025-08-30T09:58:47.2827552Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2827701Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2827778Z         if cache == "none":
2025-08-30T09:58:47.2827875Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2827947Z         elif cache == "day":
2025-08-30T09:58:47.2828039Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2828118Z         elif cache == "week":
2025-08-30T09:58:47.2828218Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2828292Z         elif cache == "month":
2025-08-30T09:58:47.2828390Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2828474Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2828542Z             return_value={
2025-08-30T09:58:47.2828720Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2828913Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2828976Z             }
2025-08-30T09:58:47.2829033Z         )
2025-08-30T09:58:47.2829121Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2829191Z             side_effect=[
2025-08-30T09:58:47.2829250Z                 {
2025-08-30T09:58:47.2829364Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2829454Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2829574Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2829632Z                 },
2025-08-30T09:58:47.2829693Z                 {
2025-08-30T09:58:47.2829797Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2829881Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2830001Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2830057Z                 },
2025-08-30T09:58:47.2830112Z             ]
2025-08-30T09:58:47.2830262Z         )
2025-08-30T09:58:47.2830329Z         mocker.patch(
2025-08-30T09:58:47.2830410Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2830477Z             return_value=[
2025-08-30T09:58:47.2830688Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2830746Z             ],
2025-08-30T09:58:47.2830800Z         )
2025-08-30T09:58:47.2830887Z         mocker.patch.multiple(
2025-08-30T09:58:47.2830990Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2831095Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2831189Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2831251Z         )
2025-08-30T09:58:47.2831589Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2831595Z 
2025-08-30T09:58:47.2831689Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2831806Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2831990Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2832066Z     return self._start_patch(
2025-08-30T09:58:47.2832257Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2832335Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2832398Z                        ^^^^^^^^^
2025-08-30T09:58:47.2832617Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2832687Z     result = self.__enter__()
2025-08-30T09:58:47.2832750Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2832976Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2833065Z     original, local = self.get_original()
2025-08-30T09:58:47.2833131Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2833232Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2833241Z 
2025-08-30T09:58:47.2833460Z self = <unittest.mock._patch object at 0x7f65c8befb10>
2025-08-30T09:58:47.2833465Z 
2025-08-30T09:58:47.2833540Z     def get_original(self):
2025-08-30T09:58:47.2833612Z         target = self.getter()
2025-08-30T09:58:47.2833687Z         name = self.attribute
2025-08-30T09:58:47.2833747Z     
2025-08-30T09:58:47.2833815Z         original = DEFAULT
2025-08-30T09:58:47.2833879Z         local = False
2025-08-30T09:58:47.2833943Z     
2025-08-30T09:58:47.2834001Z         try:
2025-08-30T09:58:47.2834086Z             original = target.__dict__[name]
2025-08-30T09:58:47.2834177Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2834271Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2834334Z         else:
2025-08-30T09:58:47.2834405Z             local = True
2025-08-30T09:58:47.2834461Z     
2025-08-30T09:58:47.2834588Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2834662Z             self.create = True
2025-08-30T09:58:47.2834721Z     
2025-08-30T09:58:47.2834816Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2834893Z >           raise AttributeError(
2025-08-30T09:58:47.2835008Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2835066Z             )
2025-08-30T09:58:47.2835668Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2835674Z 
2025-08-30T09:58:47.2835915Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2836064Z _______________________ test_backtest_trim_no_data_left ________________________
2025-08-30T09:58:47.2836070Z 
2025-08-30T09:58:47.2836236Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2836420Z key = 'date'
2025-08-30T09:58:47.2836425Z 
2025-08-30T09:58:47.2836499Z     def get_loc(self, key):
2025-08-30T09:58:47.2836560Z         """
2025-08-30T09:58:47.2836712Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2836768Z     
2025-08-30T09:58:47.2836831Z         Parameters
2025-08-30T09:58:47.2836897Z         ----------
2025-08-30T09:58:47.2836957Z         key : label
2025-08-30T09:58:47.2837012Z     
2025-08-30T09:58:47.2837074Z         Returns
2025-08-30T09:58:47.2837134Z         -------
2025-08-30T09:58:47.2837262Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2837317Z     
2025-08-30T09:58:47.2837381Z         Examples
2025-08-30T09:58:47.2837439Z         --------
2025-08-30T09:58:47.2837661Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2837750Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2837809Z         1
2025-08-30T09:58:47.2837870Z     
2025-08-30T09:58:47.2837967Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2838050Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2838118Z         slice(1, 3, None)
2025-08-30T09:58:47.2838173Z     
2025-08-30T09:58:47.2838278Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2838360Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2838442Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2838502Z         """
2025-08-30T09:58:47.2838595Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2838652Z         try:
2025-08-30T09:58:47.2838740Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2838814Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2838823Z 
2025-08-30T09:58:47.2839002Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2839105Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2839289Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2839347Z     ???
2025-08-30T09:58:47.2839507Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2839567Z     ???
2025-08-30T09:58:47.2839829Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2839885Z     ???
2025-08-30T09:58:47.2839982Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2839989Z 
2025-08-30T09:58:47.2840044Z >   ???
2025-08-30T09:58:47.2840113Z E   KeyError: 'date'
2025-08-30T09:58:47.2840117Z 
2025-08-30T09:58:47.2840237Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2840242Z 
2025-08-30T09:58:47.2840406Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2840410Z 
2025-08-30T09:58:47.2840847Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2840929Z fee = <MagicMock id='140073997487632'>
2025-08-30T09:58:47.2841089Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584182b50>
2025-08-30T09:58:47.2841290Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2841295Z 
2025-08-30T09:58:47.2841500Z     def test_backtest_trim_no_data_left(default_conf, fee, mocker, testdatadir) -> None:
2025-08-30T09:58:47.2841598Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.2841686Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.2841741Z     
2025-08-30T09:58:47.2841830Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2841997Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2842244Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2842549Z         patch_exchange(mocker)
2025-08-30T09:58:47.2842718Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2842874Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2842982Z         timerange = TimeRange("date", None, 1517227800, 0)
2025-08-30T09:58:47.2843078Z         backtesting.required_startup = 100
2025-08-30T09:58:47.2843163Z         backtesting.timerange = timerange
2025-08-30T09:58:47.2843242Z         data = history.load_data(
2025-08-30T09:58:47.2843548Z             datadir=testdatadir, timeframe="5m", pairs=["UNITTEST/BTC"], timerange=timerange
2025-08-30T09:58:47.2843607Z         )
2025-08-30T09:58:47.2843680Z         df = data["UNITTEST/BTC"]
2025-08-30T09:58:47.2843937Z >       df["date"] = df.loc[:, "date"] - timedelta(days=1)
2025-08-30T09:58:47.2844011Z                      ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2844016Z 
2025-08-30T09:58:47.2844112Z tests/optimize/test_backtesting.py:1282: 
2025-08-30T09:58:47.2844226Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2844433Z .venv/lib/python3.11/site-packages/pandas/core/indexing.py:1184: in __getitem__
2025-08-30T09:58:47.2844517Z     return self._getitem_tuple(key)
2025-08-30T09:58:47.2844581Z            ^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2844801Z .venv/lib/python3.11/site-packages/pandas/core/indexing.py:1368: in _getitem_tuple
2025-08-30T09:58:47.2844887Z     return self._getitem_lowerdim(tup)
2025-08-30T09:58:47.2844952Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2845171Z .venv/lib/python3.11/site-packages/pandas/core/indexing.py:1065: in _getitem_lowerdim
2025-08-30T09:58:47.2845260Z     section = self._getitem_axis(key, axis=i)
2025-08-30T09:58:47.2845334Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2845536Z .venv/lib/python3.11/site-packages/pandas/core/indexing.py:1431: in _getitem_axis
2025-08-30T09:58:47.2845621Z     return self._get_label(key, axis=axis)
2025-08-30T09:58:47.2845691Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2845882Z .venv/lib/python3.11/site-packages/pandas/core/indexing.py:1381: in _get_label
2025-08-30T09:58:47.2845970Z     return self.obj.xs(label, axis=axis)
2025-08-30T09:58:47.2846035Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2846198Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:4306: in xs
2025-08-30T09:58:47.2846270Z     return self[key]
2025-08-30T09:58:47.2846330Z            ^^^^^^^^^
2025-08-30T09:58:47.2846509Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2846598Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2846662Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2846768Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2846772Z 
2025-08-30T09:58:47.2846934Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2846999Z key = 'date'
2025-08-30T09:58:47.2847004Z 
2025-08-30T09:58:47.2847077Z     def get_loc(self, key):
2025-08-30T09:58:47.2847134Z         """
2025-08-30T09:58:47.2847293Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2847348Z     
2025-08-30T09:58:47.2847411Z         Parameters
2025-08-30T09:58:47.2847476Z         ----------
2025-08-30T09:58:47.2847538Z         key : label
2025-08-30T09:58:47.2847592Z     
2025-08-30T09:58:47.2847650Z         Returns
2025-08-30T09:58:47.2847713Z         -------
2025-08-30T09:58:47.2847842Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2847897Z     
2025-08-30T09:58:47.2847961Z         Examples
2025-08-30T09:58:47.2848021Z         --------
2025-08-30T09:58:47.2848116Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2848194Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2848255Z         1
2025-08-30T09:58:47.2848428Z     
2025-08-30T09:58:47.2848525Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2848608Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2848684Z         slice(1, 3, None)
2025-08-30T09:58:47.2848739Z     
2025-08-30T09:58:47.2848845Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2848929Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2849010Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2849070Z         """
2025-08-30T09:58:47.2849163Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2849220Z         try:
2025-08-30T09:58:47.2849311Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2849390Z         except KeyError as err:
2025-08-30T09:58:47.2849557Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2849651Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2849765Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2849829Z             ):
2025-08-30T09:58:47.2849914Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2849995Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2850067Z E           KeyError: 'date'
2025-08-30T09:58:47.2850071Z 
2025-08-30T09:58:47.2850262Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2850403Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2850521Z 2025-08-30 09:55:18 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2850648Z 2025-08-30 09:55:18 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2850726Z 2025-08-30 09:55:18 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2850826Z 2025-08-30 09:55:18 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2850952Z 2025-08-30 09:55:18 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2851069Z 2025-08-30 09:55:18 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2851408Z 2025-08-30 09:55:18 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2851902Z 2025-08-30 09:55:18 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2852323Z 2025-08-30 09:55:18 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2852420Z 2025-08-30 09:55:18 INFO Found no parameter file.
2025-08-30T09:58:47.2852705Z 2025-08-30 09:55:18 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2852885Z 2025-08-30 09:55:18 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2853070Z 2025-08-30 09:55:18 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2853270Z 2025-08-30 09:55:18 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2853676Z 2025-08-30 09:55:18 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2853971Z 2025-08-30 09:55:18 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2854174Z 2025-08-30 09:55:18 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2854360Z 2025-08-30 09:55:18 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.2854558Z 2025-08-30 09:55:18 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2854663Z 2025-08-30 09:55:18 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2854777Z 2025-08-30 09:55:18 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2854894Z 2025-08-30 09:55:18 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2855184Z 2025-08-30 09:55:18 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2855340Z 2025-08-30 09:55:18 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2855469Z 2025-08-30 09:55:18 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2855612Z 2025-08-30 09:55:18 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2855915Z 2025-08-30 09:55:18 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2856104Z 2025-08-30 09:55:18 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2856222Z 2025-08-30 09:55:18 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2856434Z 2025-08-30 09:55:18 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2856565Z 2025-08-30 09:55:18 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2856734Z 2025-08-30 09:55:18 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2856857Z 2025-08-30 09:55:18 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2856977Z 2025-08-30 09:55:18 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2857124Z 2025-08-30 09:55:18 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2857244Z 2025-08-30 09:55:18 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2857384Z 2025-08-30 09:55:18 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2857539Z 2025-08-30 09:55:18 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2857688Z 2025-08-30 09:55:18 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2857830Z 2025-08-30 09:55:18 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2857943Z 2025-08-30 09:55:18 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.2858053Z 2025-08-30 09:55:18 INFO Validating configuration ...
2025-08-30T09:58:47.2858410Z 2025-08-30 09:55:18 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2858694Z 2025-08-30 09:55:18 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2859134Z 2025-08-30 09:55:18 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2859331Z 2025-08-30 09:55:18 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2859504Z 2025-08-30 09:55:18 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2859646Z 2025-08-30 09:55:18 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2859761Z 2025-08-30 09:55:18 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2859992Z 2025-08-30 09:55:18 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2860110Z 2025-08-30 09:55:18 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2860264Z 2025-08-30 09:55:18 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2860448Z 2025-08-30 09:55:18 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2860614Z 2025-08-30 09:55:18 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2860792Z ________ test_backtest_start_multi_strat_caching[month-start_delta3-2] _________
2025-08-30T09:58:47.2860797Z 
2025-08-30T09:58:47.2861378Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2861549Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e443a690>
2025-08-30T09:58:47.2861712Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8d25f50>
2025-08-30T09:58:47.2861997Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2862106Z run_id = '2', start_delta = {'weeks': 4}, cache = 'month'
2025-08-30T09:58:47.2862111Z 
2025-08-30T09:58:47.2862228Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2862343Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2862564Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2862716Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2862813Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2862974Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2863034Z     ):
2025-08-30T09:58:47.2863208Z         default_conf.update(
2025-08-30T09:58:47.2863268Z             {
2025-08-30T09:58:47.2863467Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2863570Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2863718Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2863876Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2863982Z             }
2025-08-30T09:58:47.2864089Z         )
2025-08-30T09:58:47.2864188Z         patch_exchange(mocker)
2025-08-30T09:58:47.2864274Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2864344Z             return_value={
2025-08-30T09:58:47.2864461Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2864539Z                 "config": default_conf,
2025-08-30T09:58:47.2864606Z                 "locks": [],
2025-08-30T09:58:47.2864679Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2864758Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2864845Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2864925Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2865000Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2865085Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2865159Z                 "final_balance": 1000,
2025-08-30T09:58:47.2865214Z             }
2025-08-30T09:58:47.2865270Z         )
2025-08-30T09:58:47.2865342Z         mocker.patch(
2025-08-30T09:58:47.2865527Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2865632Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2865692Z         )
2025-08-30T09:58:47.2865927Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2866140Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2866198Z     
2025-08-30T09:58:47.2866304Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2866451Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2866519Z         if cache == "none":
2025-08-30T09:58:47.2866624Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2866694Z         elif cache == "day":
2025-08-30T09:58:47.2866790Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2866862Z         elif cache == "week":
2025-08-30T09:58:47.2866958Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2867028Z         elif cache == "month":
2025-08-30T09:58:47.2867124Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2867209Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2867276Z             return_value={
2025-08-30T09:58:47.2867443Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2867639Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2867696Z             }
2025-08-30T09:58:47.2867751Z         )
2025-08-30T09:58:47.2867979Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2868046Z             side_effect=[
2025-08-30T09:58:47.2868103Z                 {
2025-08-30T09:58:47.2868218Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2868309Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2868425Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2868484Z                 },
2025-08-30T09:58:47.2868544Z                 {
2025-08-30T09:58:47.2868648Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2868732Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2868847Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2869011Z                 },
2025-08-30T09:58:47.2869072Z             ]
2025-08-30T09:58:47.2869127Z         )
2025-08-30T09:58:47.2869198Z         mocker.patch(
2025-08-30T09:58:47.2869277Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2869349Z             return_value=[
2025-08-30T09:58:47.2869560Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2869617Z             ],
2025-08-30T09:58:47.2869672Z         )
2025-08-30T09:58:47.2869754Z         mocker.patch.multiple(
2025-08-30T09:58:47.2869857Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2869961Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2870053Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2870112Z         )
2025-08-30T09:58:47.2870368Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2870373Z 
2025-08-30T09:58:47.2870468Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2870575Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2870756Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2870837Z     return self._start_patch(
2025-08-30T09:58:47.2871025Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2871103Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2871166Z                        ^^^^^^^^^
2025-08-30T09:58:47.2871381Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2871455Z     result = self.__enter__()
2025-08-30T09:58:47.2871516Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2871744Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2871832Z     original, local = self.get_original()
2025-08-30T09:58:47.2871902Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2872003Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2872009Z 
2025-08-30T09:58:47.2872131Z self = <unittest.mock._patch object at 0x7f65ddd4ac10>
2025-08-30T09:58:47.2872139Z 
2025-08-30T09:58:47.2872211Z     def get_original(self):
2025-08-30T09:58:47.2872284Z         target = self.getter()
2025-08-30T09:58:47.2872357Z         name = self.attribute
2025-08-30T09:58:47.2872412Z     
2025-08-30T09:58:47.2872481Z         original = DEFAULT
2025-08-30T09:58:47.2872548Z         local = False
2025-08-30T09:58:47.2872606Z     
2025-08-30T09:58:47.2872664Z         try:
2025-08-30T09:58:47.2872747Z             original = target.__dict__[name]
2025-08-30T09:58:47.2872836Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2872929Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2872986Z         else:
2025-08-30T09:58:47.2873051Z             local = True
2025-08-30T09:58:47.2873111Z     
2025-08-30T09:58:47.2873242Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2873311Z             self.create = True
2025-08-30T09:58:47.2873481Z     
2025-08-30T09:58:47.2873708Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2873785Z >           raise AttributeError(
2025-08-30T09:58:47.2873895Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2873955Z             )
2025-08-30T09:58:47.2874564Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2874570Z 
2025-08-30T09:58:47.2874812Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2874971Z _________________ test_backtest_pricecontours[None-sine-35_0] __________________
2025-08-30T09:58:47.2874976Z 
2025-08-30T09:58:47.2875243Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2875307Z key = 'date'
2025-08-30T09:58:47.2875316Z 
2025-08-30T09:58:47.2875387Z     def get_loc(self, key):
2025-08-30T09:58:47.2875448Z         """
2025-08-30T09:58:47.2875604Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2875662Z     
2025-08-30T09:58:47.2875723Z         Parameters
2025-08-30T09:58:47.2875784Z         ----------
2025-08-30T09:58:47.2875845Z         key : label
2025-08-30T09:58:47.2875902Z     
2025-08-30T09:58:47.2875960Z         Returns
2025-08-30T09:58:47.2876019Z         -------
2025-08-30T09:58:47.2876148Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2876205Z     
2025-08-30T09:58:47.2876265Z         Examples
2025-08-30T09:58:47.2876329Z         --------
2025-08-30T09:58:47.2876421Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2876500Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2876560Z         1
2025-08-30T09:58:47.2876620Z     
2025-08-30T09:58:47.2876713Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2876792Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2876867Z         slice(1, 3, None)
2025-08-30T09:58:47.2876922Z     
2025-08-30T09:58:47.2877021Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2877104Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2877189Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2877246Z         """
2025-08-30T09:58:47.2877337Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2877400Z         try:
2025-08-30T09:58:47.2877489Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2877559Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2877564Z 
2025-08-30T09:58:47.2877735Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2877839Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2878007Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2878069Z     ???
2025-08-30T09:58:47.2878232Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2878289Z     ???
2025-08-30T09:58:47.2878548Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2878608Z     ???
2025-08-30T09:58:47.2878706Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2878710Z 
2025-08-30T09:58:47.2878765Z >   ???
2025-08-30T09:58:47.2878834Z E   KeyError: 'date'
2025-08-30T09:58:47.2878838Z 
2025-08-30T09:58:47.2878956Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2878961Z 
2025-08-30T09:58:47.2879117Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2879122Z 
2025-08-30T09:58:47.2879570Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2879820Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc867a10>
2025-08-30T09:58:47.2880017Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2880128Z protections = None, contour = 'sine', expected = 35
2025-08-30T09:58:47.2880133Z 
2025-08-30T09:58:47.2880214Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.2880304Z         "protections,contour,expected",
2025-08-30T09:58:47.2880364Z         [
2025-08-30T09:58:47.2880435Z             (None, "sine", 35),
2025-08-30T09:58:47.2880504Z             (None, "raise", 19),
2025-08-30T09:58:47.2880571Z             (None, "lower", 0),
2025-08-30T09:58:47.2880640Z             (None, "sine", 35),
2025-08-30T09:58:47.2880707Z             (None, "raise", 19),
2025-08-30T09:58:47.2880923Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2881069Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2881209Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.2881337Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2881473Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2881531Z         ],
2025-08-30T09:58:47.2881588Z     )
2025-08-30T09:58:47.2881670Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.2881826Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.2881887Z     ) -> None:
2025-08-30T09:58:47.2881956Z         if protections:
2025-08-30T09:58:47.2882076Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.2882172Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.2882233Z     
2025-08-30T09:58:47.2882308Z         patch_exchange(mocker)
2025-08-30T09:58:47.2882471Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2882654Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2882789Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.2882914Z         # over and over again should not cause different results
2025-08-30T09:58:47.2882969Z     
2025-08-30T09:58:47.2883050Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.2883148Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2883282Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2883476Z     
2025-08-30T09:58:47.2883636Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.2883791Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2883878Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2883883Z 
2025-08-30T09:58:47.2883975Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.2884082Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2884234Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2884323Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2884458Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2884562Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2884634Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2884822Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2884904Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2884968Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2885069Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2885080Z 
2025-08-30T09:58:47.2885240Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2885300Z key = 'date'
2025-08-30T09:58:47.2885433Z 
2025-08-30T09:58:47.2885508Z     def get_loc(self, key):
2025-08-30T09:58:47.2885569Z         """
2025-08-30T09:58:47.2885719Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2885773Z     
2025-08-30T09:58:47.2885838Z         Parameters
2025-08-30T09:58:47.2885899Z         ----------
2025-08-30T09:58:47.2885960Z         key : label
2025-08-30T09:58:47.2886014Z     
2025-08-30T09:58:47.2886074Z         Returns
2025-08-30T09:58:47.2886133Z         -------
2025-08-30T09:58:47.2886253Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2886311Z     
2025-08-30T09:58:47.2886370Z         Examples
2025-08-30T09:58:47.2886431Z         --------
2025-08-30T09:58:47.2886649Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2886734Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2886790Z         1
2025-08-30T09:58:47.2886844Z     
2025-08-30T09:58:47.2886940Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2887024Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2887089Z         slice(1, 3, None)
2025-08-30T09:58:47.2887143Z     
2025-08-30T09:58:47.2887246Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2887328Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2887409Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2887469Z         """
2025-08-30T09:58:47.2887560Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2887616Z         try:
2025-08-30T09:58:47.2887708Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2887782Z         except KeyError as err:
2025-08-30T09:58:47.2887868Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2888001Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2888211Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2888315Z             ):
2025-08-30T09:58:47.2888473Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2888601Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2888675Z E           KeyError: 'date'
2025-08-30T09:58:47.2888681Z 
2025-08-30T09:58:47.2888873Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2889014Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2889125Z 2025-08-30 09:55:19 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2889252Z 2025-08-30 09:55:19 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2889329Z 2025-08-30 09:55:19 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2889425Z 2025-08-30 09:55:19 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2889554Z 2025-08-30 09:55:19 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2889671Z 2025-08-30 09:55:19 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2890005Z 2025-08-30 09:55:19 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2890523Z 2025-08-30 09:55:19 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2890942Z 2025-08-30 09:55:19 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2891039Z 2025-08-30 09:55:19 INFO Found no parameter file.
2025-08-30T09:58:47.2891325Z 2025-08-30 09:55:19 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2891507Z 2025-08-30 09:55:19 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2891688Z 2025-08-30 09:55:19 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2891881Z 2025-08-30 09:55:19 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2892170Z 2025-08-30 09:55:19 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2892438Z 2025-08-30 09:55:19 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2892626Z 2025-08-30 09:55:19 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2892819Z 2025-08-30 09:55:19 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2892925Z 2025-08-30 09:55:19 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2893031Z 2025-08-30 09:55:19 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2893148Z 2025-08-30 09:55:19 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2893594Z 2025-08-30 09:55:19 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2893810Z 2025-08-30 09:55:19 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2893955Z 2025-08-30 09:55:19 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2894099Z 2025-08-30 09:55:19 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2894408Z 2025-08-30 09:55:19 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2894599Z 2025-08-30 09:55:19 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2894713Z 2025-08-30 09:55:19 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2894826Z 2025-08-30 09:55:19 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2894951Z 2025-08-30 09:55:19 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2895125Z 2025-08-30 09:55:19 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2895247Z 2025-08-30 09:55:19 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2895370Z 2025-08-30 09:55:19 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2895517Z 2025-08-30 09:55:19 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2895641Z 2025-08-30 09:55:19 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2895779Z 2025-08-30 09:55:19 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2895930Z 2025-08-30 09:55:19 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2896078Z 2025-08-30 09:55:19 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2896221Z 2025-08-30 09:55:19 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2896333Z 2025-08-30 09:55:19 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2896439Z 2025-08-30 09:55:19 INFO Validating configuration ...
2025-08-30T09:58:47.2896797Z 2025-08-30 09:55:19 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2897078Z 2025-08-30 09:55:19 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2897520Z 2025-08-30 09:55:19 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2897723Z 2025-08-30 09:55:19 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2897899Z 2025-08-30 09:55:19 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2898038Z 2025-08-30 09:55:19 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2898152Z 2025-08-30 09:55:19 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2898385Z 2025-08-30 09:55:19 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2898495Z 2025-08-30 09:55:19 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2898653Z 2025-08-30 09:55:19 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2898958Z 2025-08-30 09:55:19 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2899125Z 2025-08-30 09:55:19 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2899226Z 2025-08-30 09:55:19 DEBUG Dropping last candle
2025-08-30T09:58:47.2899439Z 2025-08-30 09:55:19 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.2899612Z _________ test_backtest_start_multi_strat_caching[week-start_delta2-2] _________
2025-08-30T09:58:47.2899617Z 
2025-08-30T09:58:47.2900314Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2900481Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8417390>
2025-08-30T09:58:47.2900642Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594273c90>
2025-08-30T09:58:47.2900850Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2900956Z run_id = '2', start_delta = {'weeks': 1}, cache = 'week'
2025-08-30T09:58:47.2900961Z 
2025-08-30T09:58:47.2901077Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2901199Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2901417Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2901571Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2901669Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2901833Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2901895Z     ):
2025-08-30T09:58:47.2901970Z         default_conf.update(
2025-08-30T09:58:47.2902030Z             {
2025-08-30T09:58:47.2902107Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2902191Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2902271Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2902358Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2902416Z             }
2025-08-30T09:58:47.2902472Z         )
2025-08-30T09:58:47.2902553Z         patch_exchange(mocker)
2025-08-30T09:58:47.2902631Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2902700Z             return_value={
2025-08-30T09:58:47.2902816Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2902891Z                 "config": default_conf,
2025-08-30T09:58:47.2902958Z                 "locks": [],
2025-08-30T09:58:47.2903033Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2903122Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2903200Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2903280Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2903472Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2903552Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2903627Z                 "final_balance": 1000,
2025-08-30T09:58:47.2903687Z             }
2025-08-30T09:58:47.2903743Z         )
2025-08-30T09:58:47.2903810Z         mocker.patch(
2025-08-30T09:58:47.2903995Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2904104Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2904159Z         )
2025-08-30T09:58:47.2904393Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2904613Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2904669Z     
2025-08-30T09:58:47.2904774Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2904921Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2905118Z         if cache == "none":
2025-08-30T09:58:47.2905215Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2905285Z         elif cache == "day":
2025-08-30T09:58:47.2905382Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2905452Z         elif cache == "week":
2025-08-30T09:58:47.2905551Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2905624Z         elif cache == "month":
2025-08-30T09:58:47.2905719Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2905801Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2905869Z             return_value={
2025-08-30T09:58:47.2906038Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2906338Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2906399Z             }
2025-08-30T09:58:47.2906458Z         )
2025-08-30T09:58:47.2906544Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2906612Z             side_effect=[
2025-08-30T09:58:47.2906672Z                 {
2025-08-30T09:58:47.2906781Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2906867Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2906983Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2907044Z                 },
2025-08-30T09:58:47.2907100Z                 {
2025-08-30T09:58:47.2907205Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2907293Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2907405Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2907468Z                 },
2025-08-30T09:58:47.2907532Z             ]
2025-08-30T09:58:47.2907587Z         )
2025-08-30T09:58:47.2907655Z         mocker.patch(
2025-08-30T09:58:47.2907738Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2907814Z             return_value=[
2025-08-30T09:58:47.2908022Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2908079Z             ],
2025-08-30T09:58:47.2908138Z         )
2025-08-30T09:58:47.2908217Z         mocker.patch.multiple(
2025-08-30T09:58:47.2908321Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2908430Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2908524Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2908580Z         )
2025-08-30T09:58:47.2908837Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2908841Z 
2025-08-30T09:58:47.2908940Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2909043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2909228Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2909307Z     return self._start_patch(
2025-08-30T09:58:47.2909492Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2909569Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2909639Z                        ^^^^^^^^^
2025-08-30T09:58:47.2909854Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2909926Z     result = self.__enter__()
2025-08-30T09:58:47.2909988Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2910219Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2910302Z     original, local = self.get_original()
2025-08-30T09:58:47.2910373Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2910477Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2910481Z 
2025-08-30T09:58:47.2910709Z self = <unittest.mock._patch object at 0x7f658458bb10>
2025-08-30T09:58:47.2910714Z 
2025-08-30T09:58:47.2910786Z     def get_original(self):
2025-08-30T09:58:47.2910862Z         target = self.getter()
2025-08-30T09:58:47.2910931Z         name = self.attribute
2025-08-30T09:58:47.2910984Z     
2025-08-30T09:58:47.2911052Z         original = DEFAULT
2025-08-30T09:58:47.2911119Z         local = False
2025-08-30T09:58:47.2911173Z     
2025-08-30T09:58:47.2911230Z         try:
2025-08-30T09:58:47.2911317Z             original = target.__dict__[name]
2025-08-30T09:58:47.2911402Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2911495Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2911555Z         else:
2025-08-30T09:58:47.2911621Z             local = True
2025-08-30T09:58:47.2911756Z     
2025-08-30T09:58:47.2911886Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2911961Z             self.create = True
2025-08-30T09:58:47.2912019Z     
2025-08-30T09:58:47.2912112Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2912189Z >           raise AttributeError(
2025-08-30T09:58:47.2912297Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2912353Z             )
2025-08-30T09:58:47.2913199Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2913216Z 
2025-08-30T09:58:47.2913602Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2913749Z _________________________ test_backtest_1min_timeframe _________________________
2025-08-30T09:58:47.2913755Z 
2025-08-30T09:58:47.2913926Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2913987Z key = 'date'
2025-08-30T09:58:47.2913992Z 
2025-08-30T09:58:47.2914071Z     def get_loc(self, key):
2025-08-30T09:58:47.2914128Z         """
2025-08-30T09:58:47.2914283Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2914338Z     
2025-08-30T09:58:47.2914401Z         Parameters
2025-08-30T09:58:47.2914468Z         ----------
2025-08-30T09:58:47.2914529Z         key : label
2025-08-30T09:58:47.2914585Z     
2025-08-30T09:58:47.2914644Z         Returns
2025-08-30T09:58:47.2914708Z         -------
2025-08-30T09:58:47.2914833Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2914887Z     
2025-08-30T09:58:47.2914950Z         Examples
2025-08-30T09:58:47.2915009Z         --------
2025-08-30T09:58:47.2915097Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2915179Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2915240Z         1
2025-08-30T09:58:47.2915293Z     
2025-08-30T09:58:47.2915386Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2915486Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2915556Z         slice(1, 3, None)
2025-08-30T09:58:47.2915626Z     
2025-08-30T09:58:47.2915727Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2915809Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2915894Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2915950Z         """
2025-08-30T09:58:47.2916047Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2916104Z         try:
2025-08-30T09:58:47.2916193Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2916266Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2916270Z 
2025-08-30T09:58:47.2916440Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2916543Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2916715Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2916925Z     ???
2025-08-30T09:58:47.2917087Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2917144Z     ???
2025-08-30T09:58:47.2917409Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2917465Z     ???
2025-08-30T09:58:47.2917564Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2917569Z 
2025-08-30T09:58:47.2917627Z >   ???
2025-08-30T09:58:47.2917694Z E   KeyError: 'date'
2025-08-30T09:58:47.2917698Z 
2025-08-30T09:58:47.2917815Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2917820Z 
2025-08-30T09:58:47.2917978Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2918088Z 
2025-08-30T09:58:47.2918527Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2918613Z fee = <MagicMock id='140074260302736'>
2025-08-30T09:58:47.2918773Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c88d78d0>
2025-08-30T09:58:47.2918970Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2918975Z 
2025-08-30T09:58:47.2919171Z     def test_backtest_1min_timeframe(default_conf, fee, mocker, testdatadir) -> None:
2025-08-30T09:58:47.2919263Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.2919347Z         default_conf["max_open_trades"] = 1
2025-08-30T09:58:47.2919433Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.2919598Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2919770Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2919845Z         patch_exchange(mocker)
2025-08-30T09:58:47.2919934Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2920075Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2920131Z     
2025-08-30T09:58:47.2920234Z         # Run a backtesting for an exiting 1min timeframe
2025-08-30T09:58:47.2920377Z         timerange = TimeRange.parse_timerange("1510688220-1510700340")
2025-08-30T09:58:47.2920452Z         data = history.load_data(
2025-08-30T09:58:47.2920651Z             datadir=testdatadir, timeframe="1m", pairs=["UNITTEST/BTC"], timerange=timerange
2025-08-30T09:58:47.2920712Z         )
2025-08-30T09:58:47.2920859Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2920934Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2920939Z 
2025-08-30T09:58:47.2921039Z tests/optimize/test_backtesting.py:1254: 
2025-08-30T09:58:47.2921139Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2921289Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2921384Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2921523Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2921628Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2921699Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2921896Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2921983Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2922048Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2922149Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2922154Z 
2025-08-30T09:58:47.2922315Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2922375Z key = 'date'
2025-08-30T09:58:47.2922380Z 
2025-08-30T09:58:47.2922457Z     def get_loc(self, key):
2025-08-30T09:58:47.2922514Z         """
2025-08-30T09:58:47.2922755Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2922812Z     
2025-08-30T09:58:47.2922878Z         Parameters
2025-08-30T09:58:47.2922939Z         ----------
2025-08-30T09:58:47.2923000Z         key : label
2025-08-30T09:58:47.2923061Z     
2025-08-30T09:58:47.2923119Z         Returns
2025-08-30T09:58:47.2923177Z         -------
2025-08-30T09:58:47.2923300Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2923515Z     
2025-08-30T09:58:47.2923600Z         Examples
2025-08-30T09:58:47.2923662Z         --------
2025-08-30T09:58:47.2923757Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2923837Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2923894Z         1
2025-08-30T09:58:47.2923951Z     
2025-08-30T09:58:47.2924169Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2924254Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2924321Z         slice(1, 3, None)
2025-08-30T09:58:47.2924387Z     
2025-08-30T09:58:47.2924488Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2924572Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2924653Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2924713Z         """
2025-08-30T09:58:47.2924803Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2924861Z         try:
2025-08-30T09:58:47.2924955Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2925030Z         except KeyError as err:
2025-08-30T09:58:47.2925120Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2925214Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2925334Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2925391Z             ):
2025-08-30T09:58:47.2925476Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2925557Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2925630Z E           KeyError: 'date'
2025-08-30T09:58:47.2925635Z 
2025-08-30T09:58:47.2925824Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2925965Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2926076Z 2025-08-30 09:55:20 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2926237Z 2025-08-30 09:55:20 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2926320Z 2025-08-30 09:55:20 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2926414Z 2025-08-30 09:55:20 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2926535Z 2025-08-30 09:55:20 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2926651Z 2025-08-30 09:55:20 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2926987Z 2025-08-30 09:55:20 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2927479Z 2025-08-30 09:55:20 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2927900Z 2025-08-30 09:55:20 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2928003Z 2025-08-30 09:55:20 INFO Found no parameter file.
2025-08-30T09:58:47.2928288Z 2025-08-30 09:55:20 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2928464Z 2025-08-30 09:55:20 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.2928647Z 2025-08-30 09:55:20 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2928846Z 2025-08-30 09:55:20 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2929041Z 2025-08-30 09:55:20 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2929428Z 2025-08-30 09:55:20 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2929627Z 2025-08-30 09:55:20 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.2929815Z 2025-08-30 09:55:20 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2930013Z 2025-08-30 09:55:20 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2930118Z 2025-08-30 09:55:20 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.2930224Z 2025-08-30 09:55:20 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2930346Z 2025-08-30 09:55:20 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2930575Z 2025-08-30 09:55:20 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2930735Z 2025-08-30 09:55:20 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2930872Z 2025-08-30 09:55:20 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2931010Z 2025-08-30 09:55:20 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2931314Z 2025-08-30 09:55:20 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2931507Z 2025-08-30 09:55:20 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2931622Z 2025-08-30 09:55:20 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2931730Z 2025-08-30 09:55:20 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2931856Z 2025-08-30 09:55:20 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2932029Z 2025-08-30 09:55:20 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2932150Z 2025-08-30 09:55:20 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.2932271Z 2025-08-30 09:55:20 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2932423Z 2025-08-30 09:55:20 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2932542Z 2025-08-30 09:55:20 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2932680Z 2025-08-30 09:55:20 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2932835Z 2025-08-30 09:55:20 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2932979Z 2025-08-30 09:55:20 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2933119Z 2025-08-30 09:55:20 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2933232Z 2025-08-30 09:55:20 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2933335Z 2025-08-30 09:55:20 INFO Validating configuration ...
2025-08-30T09:58:47.2933892Z 2025-08-30 09:55:20 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2934182Z 2025-08-30 09:55:20 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2934852Z 2025-08-30 09:55:20 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2935085Z 2025-08-30 09:55:20 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2935266Z 2025-08-30 09:55:20 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2935405Z 2025-08-30 09:55:20 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2935515Z 2025-08-30 09:55:20 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2935744Z 2025-08-30 09:55:20 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2935864Z 2025-08-30 09:55:20 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2936019Z 2025-08-30 09:55:20 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2936366Z 2025-08-30 09:55:20 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2936532Z 2025-08-30 09:55:20 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2936746Z 2025-08-30 09:55:20 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 195 - after: 203 - 4.10%
2025-08-30T09:58:47.2936926Z _____ test_backtest_start_multi_strat_caching[month-start_delta2-changed] ______
2025-08-30T09:58:47.2936931Z 
2025-08-30T09:58:47.2937519Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2937785Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584f41410>
2025-08-30T09:58:47.2937946Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65e421ae10>
2025-08-30T09:58:47.2938144Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2938273Z run_id = 'changed', start_delta = {'weeks': 1}, cache = 'month'
2025-08-30T09:58:47.2938278Z 
2025-08-30T09:58:47.2938391Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2938510Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2938724Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2938874Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2938974Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2939135Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2939192Z     ):
2025-08-30T09:58:47.2939269Z         default_conf.update(
2025-08-30T09:58:47.2939338Z             {
2025-08-30T09:58:47.2939416Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2939496Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2939581Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2939668Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2939725Z             }
2025-08-30T09:58:47.2939785Z         )
2025-08-30T09:58:47.2939861Z         patch_exchange(mocker)
2025-08-30T09:58:47.2939939Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2940007Z             return_value={
2025-08-30T09:58:47.2940126Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2940203Z                 "config": default_conf,
2025-08-30T09:58:47.2940270Z                 "locks": [],
2025-08-30T09:58:47.2940346Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2940427Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2940502Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2940588Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2940668Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2940756Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2940853Z                 "final_balance": 1000,
2025-08-30T09:58:47.2940913Z             }
2025-08-30T09:58:47.2940969Z         )
2025-08-30T09:58:47.2941035Z         mocker.patch(
2025-08-30T09:58:47.2941223Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2941327Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2941381Z         )
2025-08-30T09:58:47.2941615Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2941830Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2941885Z     
2025-08-30T09:58:47.2941983Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2942132Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2942202Z         if cache == "none":
2025-08-30T09:58:47.2942296Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2942464Z         elif cache == "day":
2025-08-30T09:58:47.2942557Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2942628Z         elif cache == "week":
2025-08-30T09:58:47.2942724Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2942797Z         elif cache == "month":
2025-08-30T09:58:47.2942890Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2942972Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2943044Z             return_value={
2025-08-30T09:58:47.2943210Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2943628Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2943698Z             }
2025-08-30T09:58:47.2943754Z         )
2025-08-30T09:58:47.2943839Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2943911Z             side_effect=[
2025-08-30T09:58:47.2943972Z                 {
2025-08-30T09:58:47.2944081Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2944169Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2944287Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2944346Z                 },
2025-08-30T09:58:47.2944403Z                 {
2025-08-30T09:58:47.2944506Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2944593Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2944703Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2944760Z                 },
2025-08-30T09:58:47.2944819Z             ]
2025-08-30T09:58:47.2944878Z         )
2025-08-30T09:58:47.2944946Z         mocker.patch(
2025-08-30T09:58:47.2945024Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2945094Z             return_value=[
2025-08-30T09:58:47.2945310Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2945367Z             ],
2025-08-30T09:58:47.2945427Z         )
2025-08-30T09:58:47.2945506Z         mocker.patch.multiple(
2025-08-30T09:58:47.2945609Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2945719Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2945810Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2945866Z         )
2025-08-30T09:58:47.2946122Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2946131Z 
2025-08-30T09:58:47.2946228Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2946338Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2946525Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2946609Z     return self._start_patch(
2025-08-30T09:58:47.2946795Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2946873Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2946945Z                        ^^^^^^^^^
2025-08-30T09:58:47.2947161Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2947237Z     result = self.__enter__()
2025-08-30T09:58:47.2947302Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2947526Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2947612Z     original, local = self.get_original()
2025-08-30T09:58:47.2947678Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2947790Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2947794Z 
2025-08-30T09:58:47.2947910Z self = <unittest.mock._patch object at 0x7f6584fa4990>
2025-08-30T09:58:47.2948032Z 
2025-08-30T09:58:47.2948107Z     def get_original(self):
2025-08-30T09:58:47.2948184Z         target = self.getter()
2025-08-30T09:58:47.2948254Z         name = self.attribute
2025-08-30T09:58:47.2948310Z     
2025-08-30T09:58:47.2948381Z         original = DEFAULT
2025-08-30T09:58:47.2948445Z         local = False
2025-08-30T09:58:47.2948500Z     
2025-08-30T09:58:47.2948558Z         try:
2025-08-30T09:58:47.2948647Z             original = target.__dict__[name]
2025-08-30T09:58:47.2948731Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2948824Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2948885Z         else:
2025-08-30T09:58:47.2948950Z             local = True
2025-08-30T09:58:47.2949004Z     
2025-08-30T09:58:47.2949213Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2949291Z             self.create = True
2025-08-30T09:58:47.2949346Z     
2025-08-30T09:58:47.2949442Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2949527Z >           raise AttributeError(
2025-08-30T09:58:47.2949637Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2949693Z             )
2025-08-30T09:58:47.2950295Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2950300Z 
2025-08-30T09:58:47.2950538Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2950698Z _________________ test_backtest_pricecontours[None-raise-19_0] _________________
2025-08-30T09:58:47.2950702Z 
2025-08-30T09:58:47.2950872Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2950931Z key = 'date'
2025-08-30T09:58:47.2950936Z 
2025-08-30T09:58:47.2951008Z     def get_loc(self, key):
2025-08-30T09:58:47.2951070Z         """
2025-08-30T09:58:47.2951226Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2951281Z     
2025-08-30T09:58:47.2951343Z         Parameters
2025-08-30T09:58:47.2951408Z         ----------
2025-08-30T09:58:47.2951469Z         key : label
2025-08-30T09:58:47.2951523Z     
2025-08-30T09:58:47.2951588Z         Returns
2025-08-30T09:58:47.2951648Z         -------
2025-08-30T09:58:47.2951772Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2951826Z     
2025-08-30T09:58:47.2951888Z         Examples
2025-08-30T09:58:47.2951948Z         --------
2025-08-30T09:58:47.2952037Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2952121Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2952178Z         1
2025-08-30T09:58:47.2952238Z     
2025-08-30T09:58:47.2952332Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2952417Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2952483Z         slice(1, 3, None)
2025-08-30T09:58:47.2952543Z     
2025-08-30T09:58:47.2952647Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2952730Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2952810Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2952869Z         """
2025-08-30T09:58:47.2952966Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2953024Z         try:
2025-08-30T09:58:47.2953112Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2953185Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2953190Z 
2025-08-30T09:58:47.2953463Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.2953575Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2953750Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2953807Z     ???
2025-08-30T09:58:47.2953964Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.2954147Z     ???
2025-08-30T09:58:47.2954429Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.2954486Z     ???
2025-08-30T09:58:47.2954584Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2954589Z 
2025-08-30T09:58:47.2954655Z >   ???
2025-08-30T09:58:47.2954720Z E   KeyError: 'date'
2025-08-30T09:58:47.2954724Z 
2025-08-30T09:58:47.2954840Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.2954845Z 
2025-08-30T09:58:47.2955004Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.2955008Z 
2025-08-30T09:58:47.2955571Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.2955730Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f659447dfd0>
2025-08-30T09:58:47.2955936Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2956050Z protections = None, contour = 'raise', expected = 19
2025-08-30T09:58:47.2956054Z 
2025-08-30T09:58:47.2956135Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.2956229Z         "protections,contour,expected",
2025-08-30T09:58:47.2956288Z         [
2025-08-30T09:58:47.2956359Z             (None, "sine", 35),
2025-08-30T09:58:47.2956435Z             (None, "raise", 19),
2025-08-30T09:58:47.2956502Z             (None, "lower", 0),
2025-08-30T09:58:47.2956567Z             (None, "sine", 35),
2025-08-30T09:58:47.2956633Z             (None, "raise", 19),
2025-08-30T09:58:47.2956778Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2956918Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2957051Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.2957188Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.2957320Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.2957377Z         ],
2025-08-30T09:58:47.2957435Z     )
2025-08-30T09:58:47.2957519Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.2957670Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.2957735Z     ) -> None:
2025-08-30T09:58:47.2957808Z         if protections:
2025-08-30T09:58:47.2957924Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.2958018Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.2958078Z     
2025-08-30T09:58:47.2958155Z         patch_exchange(mocker)
2025-08-30T09:58:47.2958318Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.2958492Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.2958629Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.2958746Z         # over and over again should not cause different results
2025-08-30T09:58:47.2958802Z     
2025-08-30T09:58:47.2958887Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.2958979Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.2959199Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.2959311Z     
2025-08-30T09:58:47.2959476Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.2959738Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.2959824Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2959837Z 
2025-08-30T09:58:47.2959932Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.2960031Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2960304Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.2960397Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.2960530Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.2960634Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.2960708Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2960916Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.2961008Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.2961084Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2961184Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2961189Z 
2025-08-30T09:58:47.2961430Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.2961498Z key = 'date'
2025-08-30T09:58:47.2961503Z 
2025-08-30T09:58:47.2961580Z     def get_loc(self, key):
2025-08-30T09:58:47.2961637Z         """
2025-08-30T09:58:47.2961792Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.2961854Z     
2025-08-30T09:58:47.2961916Z         Parameters
2025-08-30T09:58:47.2961977Z         ----------
2025-08-30T09:58:47.2962042Z         key : label
2025-08-30T09:58:47.2962097Z     
2025-08-30T09:58:47.2962154Z         Returns
2025-08-30T09:58:47.2962211Z         -------
2025-08-30T09:58:47.2962336Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.2962391Z     
2025-08-30T09:58:47.2962450Z         Examples
2025-08-30T09:58:47.2962513Z         --------
2025-08-30T09:58:47.2962601Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.2962691Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.2962748Z         1
2025-08-30T09:58:47.2962806Z     
2025-08-30T09:58:47.2962900Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.2962986Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.2963056Z         slice(1, 3, None)
2025-08-30T09:58:47.2963112Z     
2025-08-30T09:58:47.2963215Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.2963301Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.2963574Z         array([False,  True, False,  True])
2025-08-30T09:58:47.2963655Z         """
2025-08-30T09:58:47.2963751Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.2963813Z         try:
2025-08-30T09:58:47.2963905Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.2963983Z         except KeyError as err:
2025-08-30T09:58:47.2964076Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.2964167Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.2964286Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.2964344Z             ):
2025-08-30T09:58:47.2964435Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.2964518Z >           raise KeyError(key) from err
2025-08-30T09:58:47.2964590Z E           KeyError: 'date'
2025-08-30T09:58:47.2964594Z 
2025-08-30T09:58:47.2964791Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.2964930Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.2965041Z 2025-08-30 09:55:20 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.2965172Z 2025-08-30 09:55:20 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.2965249Z 2025-08-30 09:55:20 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.2965341Z 2025-08-30 09:55:20 INFO Using Exchange "Binance"
2025-08-30T09:58:47.2965468Z 2025-08-30 09:55:20 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.2965594Z 2025-08-30 09:55:20 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.2965922Z 2025-08-30 09:55:20 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.2966561Z 2025-08-30 09:55:20 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.2966985Z 2025-08-30 09:55:20 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.2967079Z 2025-08-30 09:55:20 INFO Found no parameter file.
2025-08-30T09:58:47.2967367Z 2025-08-30 09:55:20 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.2967549Z 2025-08-30 09:55:20 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.2967890Z 2025-08-30 09:55:20 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.2968089Z 2025-08-30 09:55:20 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.2968296Z 2025-08-30 09:55:20 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.2968561Z 2025-08-30 09:55:20 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.2968749Z 2025-08-30 09:55:20 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.2968949Z 2025-08-30 09:55:20 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.2969059Z 2025-08-30 09:55:20 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.2969165Z 2025-08-30 09:55:20 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.2969288Z 2025-08-30 09:55:20 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.2969440Z 2025-08-30 09:55:20 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.2969598Z 2025-08-30 09:55:20 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.2969732Z 2025-08-30 09:55:20 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.2969877Z 2025-08-30 09:55:20 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.2970182Z 2025-08-30 09:55:20 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.2970379Z 2025-08-30 09:55:20 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.2970493Z 2025-08-30 09:55:20 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.2970604Z 2025-08-30 09:55:20 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.2970729Z 2025-08-30 09:55:20 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.2970902Z 2025-08-30 09:55:20 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.2971023Z 2025-08-30 09:55:20 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.2971145Z 2025-08-30 09:55:20 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.2971299Z 2025-08-30 09:55:20 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.2971418Z 2025-08-30 09:55:20 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.2971560Z 2025-08-30 09:55:20 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.2971716Z 2025-08-30 09:55:20 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.2971860Z 2025-08-30 09:55:20 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.2972002Z 2025-08-30 09:55:20 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.2972117Z 2025-08-30 09:55:20 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.2972223Z 2025-08-30 09:55:20 INFO Validating configuration ...
2025-08-30T09:58:47.2972575Z 2025-08-30 09:55:20 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.2972861Z 2025-08-30 09:55:20 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.2973603Z 2025-08-30 09:55:20 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.2973821Z 2025-08-30 09:55:20 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.2974002Z 2025-08-30 09:55:20 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.2974143Z 2025-08-30 09:55:20 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.2974255Z 2025-08-30 09:55:20 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.2974485Z 2025-08-30 09:55:20 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.2974728Z 2025-08-30 09:55:20 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.2974889Z 2025-08-30 09:55:20 INFO No params for protection found, using default values.
2025-08-30T09:58:47.2975100Z 2025-08-30 09:55:20 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.2975271Z 2025-08-30 09:55:20 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.2975365Z 2025-08-30 09:55:20 DEBUG Dropping last candle
2025-08-30T09:58:47.2975577Z 2025-08-30 09:55:20 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.2975765Z _____ test_backtest_start_multi_strat_caching[month-start_delta3-changed] ______
2025-08-30T09:58:47.2975769Z 
2025-08-30T09:58:47.2976355Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2976520Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8c94fd0>
2025-08-30T09:58:47.2976690Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65dc300a10>
2025-08-30T09:58:47.2976886Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2977016Z run_id = 'changed', start_delta = {'weeks': 4}, cache = 'month'
2025-08-30T09:58:47.2977020Z 
2025-08-30T09:58:47.2977146Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2977264Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2977484Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2977642Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2977739Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2977901Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2977965Z     ):
2025-08-30T09:58:47.2978046Z         default_conf.update(
2025-08-30T09:58:47.2978104Z             {
2025-08-30T09:58:47.2978182Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2978268Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2978352Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2978443Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2978504Z             }
2025-08-30T09:58:47.2978561Z         )
2025-08-30T09:58:47.2978636Z         patch_exchange(mocker)
2025-08-30T09:58:47.2978714Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2978786Z             return_value={
2025-08-30T09:58:47.2978900Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2978976Z                 "config": default_conf,
2025-08-30T09:58:47.2979047Z                 "locks": [],
2025-08-30T09:58:47.2979121Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2979202Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2979286Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2979367Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2979443Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2979639Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2979718Z                 "final_balance": 1000,
2025-08-30T09:58:47.2979774Z             }
2025-08-30T09:58:47.2979830Z         )
2025-08-30T09:58:47.2979901Z         mocker.patch(
2025-08-30T09:58:47.2980088Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2980189Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2980245Z         )
2025-08-30T09:58:47.2980485Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2980697Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2980753Z     
2025-08-30T09:58:47.2980956Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2981102Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2981175Z         if cache == "none":
2025-08-30T09:58:47.2981281Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2981351Z         elif cache == "day":
2025-08-30T09:58:47.2981444Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2981743Z         elif cache == "week":
2025-08-30T09:58:47.2981936Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2982056Z         elif cache == "month":
2025-08-30T09:58:47.2982227Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2982378Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2982507Z             return_value={
2025-08-30T09:58:47.2982687Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2982886Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2982945Z             }
2025-08-30T09:58:47.2983000Z         )
2025-08-30T09:58:47.2983081Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2983159Z             side_effect=[
2025-08-30T09:58:47.2983216Z                 {
2025-08-30T09:58:47.2983326Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2983517Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2983637Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2983695Z                 },
2025-08-30T09:58:47.2983755Z                 {
2025-08-30T09:58:47.2983859Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2983943Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2984054Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2984115Z                 },
2025-08-30T09:58:47.2984177Z             ]
2025-08-30T09:58:47.2984233Z         )
2025-08-30T09:58:47.2984305Z         mocker.patch(
2025-08-30T09:58:47.2984384Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2984455Z             return_value=[
2025-08-30T09:58:47.2984664Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2984725Z             ],
2025-08-30T09:58:47.2984780Z         )
2025-08-30T09:58:47.2984930Z         mocker.patch.multiple(
2025-08-30T09:58:47.2985119Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2985313Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2985432Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2985495Z         )
2025-08-30T09:58:47.2985756Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2985761Z 
2025-08-30T09:58:47.2985860Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.2985970Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2986155Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.2986376Z     return self._start_patch(
2025-08-30T09:58:47.2986564Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.2986650Z     mocked: MockType = p.start()
2025-08-30T09:58:47.2986713Z                        ^^^^^^^^^
2025-08-30T09:58:47.2986930Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.2987007Z     result = self.__enter__()
2025-08-30T09:58:47.2987069Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2987294Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.2987383Z     original, local = self.get_original()
2025-08-30T09:58:47.2987449Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.2987658Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.2987663Z 
2025-08-30T09:58:47.2987787Z self = <unittest.mock._patch object at 0x7f65e48bf2d0>
2025-08-30T09:58:47.2987796Z 
2025-08-30T09:58:47.2987870Z     def get_original(self):
2025-08-30T09:58:47.2987943Z         target = self.getter()
2025-08-30T09:58:47.2988013Z         name = self.attribute
2025-08-30T09:58:47.2988071Z     
2025-08-30T09:58:47.2988140Z         original = DEFAULT
2025-08-30T09:58:47.2988206Z         local = False
2025-08-30T09:58:47.2988266Z     
2025-08-30T09:58:47.2988323Z         try:
2025-08-30T09:58:47.2988405Z             original = target.__dict__[name]
2025-08-30T09:58:47.2988491Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.2988588Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.2988649Z         else:
2025-08-30T09:58:47.2988716Z             local = True
2025-08-30T09:58:47.2988774Z     
2025-08-30T09:58:47.2988903Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.2988974Z             self.create = True
2025-08-30T09:58:47.2989028Z     
2025-08-30T09:58:47.2989126Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.2989207Z >           raise AttributeError(
2025-08-30T09:58:47.2989319Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.2989380Z             )
2025-08-30T09:58:47.2989986Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.2989991Z 
2025-08-30T09:58:47.2990231Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.2990414Z ______ test_backtest_start_multi_strat_caching[week-start_delta2-changed] ______
2025-08-30T09:58:47.2990419Z 
2025-08-30T09:58:47.2991002Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.2991164Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c85efa10>
2025-08-30T09:58:47.2991330Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65848c5a10>
2025-08-30T09:58:47.2991525Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.2991651Z run_id = 'changed', start_delta = {'weeks': 1}, cache = 'week'
2025-08-30T09:58:47.2991656Z 
2025-08-30T09:58:47.2991777Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.2991893Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.2992114Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.2992270Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.2992371Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.2992534Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.2992689Z     ):
2025-08-30T09:58:47.2992765Z         default_conf.update(
2025-08-30T09:58:47.2992822Z             {
2025-08-30T09:58:47.2992898Z                 "use_exit_signal": True,
2025-08-30T09:58:47.2992983Z                 "exit_profit_only": False,
2025-08-30T09:58:47.2993060Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.2993145Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.2993205Z             }
2025-08-30T09:58:47.2993261Z         )
2025-08-30T09:58:47.2993337Z         patch_exchange(mocker)
2025-08-30T09:58:47.2993527Z         backtestmock = MagicMock(
2025-08-30T09:58:47.2993599Z             return_value={
2025-08-30T09:58:47.2993714Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.2993789Z                 "config": default_conf,
2025-08-30T09:58:47.2993975Z                 "locks": [],
2025-08-30T09:58:47.2994060Z                 "rejected_signals": 20,
2025-08-30T09:58:47.2994142Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.2994232Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.2994312Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.2994389Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.2994467Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.2994549Z                 "final_balance": 1000,
2025-08-30T09:58:47.2994607Z             }
2025-08-30T09:58:47.2994664Z         )
2025-08-30T09:58:47.2994736Z         mocker.patch(
2025-08-30T09:58:47.2994923Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.2995025Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.2995081Z         )
2025-08-30T09:58:47.2995323Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.2995535Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.2995592Z     
2025-08-30T09:58:47.2995702Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.2995844Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.2995912Z         if cache == "none":
2025-08-30T09:58:47.2996011Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.2996082Z         elif cache == "day":
2025-08-30T09:58:47.2996177Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.2996246Z         elif cache == "week":
2025-08-30T09:58:47.2996348Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.2996418Z         elif cache == "month":
2025-08-30T09:58:47.2996511Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.2996598Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.2996669Z             return_value={
2025-08-30T09:58:47.2996837Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.2997029Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.2997090Z             }
2025-08-30T09:58:47.2997146Z         )
2025-08-30T09:58:47.2997225Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.2997297Z             side_effect=[
2025-08-30T09:58:47.2997355Z                 {
2025-08-30T09:58:47.2997461Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.2997552Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.2997670Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.2997728Z                 },
2025-08-30T09:58:47.2997785Z                 {
2025-08-30T09:58:47.2997898Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.2997986Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.2998099Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.2998280Z                 },
2025-08-30T09:58:47.2998340Z             ]
2025-08-30T09:58:47.2998396Z         )
2025-08-30T09:58:47.2998468Z         mocker.patch(
2025-08-30T09:58:47.2998547Z             "pathlib.Path.glob",
2025-08-30T09:58:47.2998615Z             return_value=[
2025-08-30T09:58:47.2998820Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.2998883Z             ],
2025-08-30T09:58:47.2998939Z         )
2025-08-30T09:58:47.2999018Z         mocker.patch.multiple(
2025-08-30T09:58:47.2999124Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.2999230Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.2999321Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.2999459Z         )
2025-08-30T09:58:47.2999723Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.2999728Z 
2025-08-30T09:58:47.2999825Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3007084Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3007316Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3007400Z     return self._start_patch(
2025-08-30T09:58:47.3007606Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3007689Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3007752Z                        ^^^^^^^^^
2025-08-30T09:58:47.3007976Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3008046Z     result = self.__enter__()
2025-08-30T09:58:47.3008107Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3008344Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3008433Z     original, local = self.get_original()
2025-08-30T09:58:47.3008499Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3008608Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3008614Z 
2025-08-30T09:58:47.3008737Z self = <unittest.mock._patch object at 0x7f65dc239350>
2025-08-30T09:58:47.3008742Z 
2025-08-30T09:58:47.3008816Z     def get_original(self):
2025-08-30T09:58:47.3008890Z         target = self.getter()
2025-08-30T09:58:47.3008965Z         name = self.attribute
2025-08-30T09:58:47.3009022Z     
2025-08-30T09:58:47.3009090Z         original = DEFAULT
2025-08-30T09:58:47.3009158Z         local = False
2025-08-30T09:58:47.3009214Z     
2025-08-30T09:58:47.3009272Z         try:
2025-08-30T09:58:47.3009358Z             original = target.__dict__[name]
2025-08-30T09:58:47.3009449Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3009550Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3009611Z         else:
2025-08-30T09:58:47.3009680Z             local = True
2025-08-30T09:58:47.3009743Z     
2025-08-30T09:58:47.3009872Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3009945Z             self.create = True
2025-08-30T09:58:47.3010005Z     
2025-08-30T09:58:47.3010100Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3010179Z >           raise AttributeError(
2025-08-30T09:58:47.3010297Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3010356Z             )
2025-08-30T09:58:47.3010957Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3010964Z 
2025-08-30T09:58:47.3011214Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3011387Z ______________ test_backtest_pricecontours[protections9-raise-10] ______________
2025-08-30T09:58:47.3011391Z 
2025-08-30T09:58:47.3011749Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3011817Z key = 'date'
2025-08-30T09:58:47.3011821Z 
2025-08-30T09:58:47.3011896Z     def get_loc(self, key):
2025-08-30T09:58:47.3011954Z         """
2025-08-30T09:58:47.3012104Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3012167Z     
2025-08-30T09:58:47.3012231Z         Parameters
2025-08-30T09:58:47.3012295Z         ----------
2025-08-30T09:58:47.3012362Z         key : label
2025-08-30T09:58:47.3012419Z     
2025-08-30T09:58:47.3012477Z         Returns
2025-08-30T09:58:47.3012536Z         -------
2025-08-30T09:58:47.3012666Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3012723Z     
2025-08-30T09:58:47.3012892Z         Examples
2025-08-30T09:58:47.3012963Z         --------
2025-08-30T09:58:47.3013055Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3013134Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3013203Z         1
2025-08-30T09:58:47.3013257Z     
2025-08-30T09:58:47.3013538Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3013688Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3013766Z         slice(1, 3, None)
2025-08-30T09:58:47.3013824Z     
2025-08-30T09:58:47.3013927Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3014018Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3014100Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3014157Z         """
2025-08-30T09:58:47.3014249Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3014310Z         try:
2025-08-30T09:58:47.3014400Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3014479Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3014485Z 
2025-08-30T09:58:47.3014661Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3014770Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3014937Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3015001Z     ???
2025-08-30T09:58:47.3015163Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3015219Z     ???
2025-08-30T09:58:47.3015482Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3015544Z     ???
2025-08-30T09:58:47.3015642Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3015647Z 
2025-08-30T09:58:47.3015703Z >   ???
2025-08-30T09:58:47.3015779Z E   KeyError: 'date'
2025-08-30T09:58:47.3015783Z 
2025-08-30T09:58:47.3015905Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3015910Z 
2025-08-30T09:58:47.3016065Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3016073Z 
2025-08-30T09:58:47.3016610Z default_conf = {'_strategy_protections': [{'method': 'CooldownPeriod', 'stop_duration': 3}], 'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.3016764Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65b4f13190>
2025-08-30T09:58:47.3016962Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3017105Z protections = [{'method': 'CooldownPeriod', 'stop_duration': 3}]
2025-08-30T09:58:47.3017184Z contour = 'raise', expected = 10
2025-08-30T09:58:47.3017189Z 
2025-08-30T09:58:47.3017270Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.3017367Z         "protections,contour,expected",
2025-08-30T09:58:47.3017430Z         [
2025-08-30T09:58:47.3017506Z             (None, "sine", 35),
2025-08-30T09:58:47.3017582Z             (None, "raise", 19),
2025-08-30T09:58:47.3017650Z             (None, "lower", 0),
2025-08-30T09:58:47.3017849Z             (None, "sine", 35),
2025-08-30T09:58:47.3017919Z             (None, "raise", 19),
2025-08-30T09:58:47.3018064Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.3018203Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.3018334Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.3018469Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.3018603Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.3018662Z         ],
2025-08-30T09:58:47.3018724Z     )
2025-08-30T09:58:47.3018806Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.3019061Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.3019126Z     ) -> None:
2025-08-30T09:58:47.3019202Z         if protections:
2025-08-30T09:58:47.3019319Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.3019422Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.3019488Z     
2025-08-30T09:58:47.3019564Z         patch_exchange(mocker)
2025-08-30T09:58:47.3019721Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.3019892Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.3020030Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.3020148Z         # over and over again should not cause different results
2025-08-30T09:58:47.3020203Z     
2025-08-30T09:58:47.3020289Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.3020380Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.3020520Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3020579Z     
2025-08-30T09:58:47.3020674Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.3020826Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3020904Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3020915Z 
2025-08-30T09:58:47.3021006Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.3021107Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3021259Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3021354Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3021490Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3021594Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3021671Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3021868Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3021952Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3022024Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3022131Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3022136Z 
2025-08-30T09:58:47.3022295Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3022360Z key = 'date'
2025-08-30T09:58:47.3022365Z 
2025-08-30T09:58:47.3022439Z     def get_loc(self, key):
2025-08-30T09:58:47.3022498Z         """
2025-08-30T09:58:47.3022648Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3022708Z     
2025-08-30T09:58:47.3022771Z         Parameters
2025-08-30T09:58:47.3022833Z         ----------
2025-08-30T09:58:47.3022899Z         key : label
2025-08-30T09:58:47.3022955Z     
2025-08-30T09:58:47.3023015Z         Returns
2025-08-30T09:58:47.3023077Z         -------
2025-08-30T09:58:47.3023205Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3023261Z     
2025-08-30T09:58:47.3023320Z         Examples
2025-08-30T09:58:47.3023618Z         --------
2025-08-30T09:58:47.3023710Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3023791Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3023848Z         1
2025-08-30T09:58:47.3023908Z     
2025-08-30T09:58:47.3024005Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3024086Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3024160Z         slice(1, 3, None)
2025-08-30T09:58:47.3024214Z     
2025-08-30T09:58:47.3024317Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3024400Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3024487Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3024545Z         """
2025-08-30T09:58:47.3024810Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3024878Z         try:
2025-08-30T09:58:47.3024969Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3025044Z         except KeyError as err:
2025-08-30T09:58:47.3025144Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3025233Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3025344Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3025403Z             ):
2025-08-30T09:58:47.3025493Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3025572Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3025644Z E           KeyError: 'date'
2025-08-30T09:58:47.3025649Z 
2025-08-30T09:58:47.3025845Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3025988Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3026108Z 2025-08-30 09:55:21 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3026277Z 2025-08-30 09:55:21 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3026357Z 2025-08-30 09:55:21 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3026455Z 2025-08-30 09:55:21 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3026581Z 2025-08-30 09:55:21 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3026706Z 2025-08-30 09:55:21 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3027041Z 2025-08-30 09:55:21 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3027547Z 2025-08-30 09:55:21 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3027976Z 2025-08-30 09:55:21 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3028075Z 2025-08-30 09:55:21 INFO Found no parameter file.
2025-08-30T09:58:47.3028554Z 2025-08-30 09:55:21 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3028899Z 2025-08-30 09:55:21 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.3029091Z 2025-08-30 09:55:21 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3029289Z 2025-08-30 09:55:21 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3029483Z 2025-08-30 09:55:21 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3029749Z 2025-08-30 09:55:21 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3029939Z 2025-08-30 09:55:21 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3030149Z 2025-08-30 09:55:21 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3030254Z 2025-08-30 09:55:21 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.3030360Z 2025-08-30 09:55:21 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3030631Z 2025-08-30 09:55:21 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3030784Z 2025-08-30 09:55:21 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3030946Z 2025-08-30 09:55:21 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3031081Z 2025-08-30 09:55:21 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3031220Z 2025-08-30 09:55:21 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3031523Z 2025-08-30 09:55:21 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3031722Z 2025-08-30 09:55:21 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3031917Z 2025-08-30 09:55:21 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3032032Z 2025-08-30 09:55:21 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3032162Z 2025-08-30 09:55:21 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3032332Z 2025-08-30 09:55:21 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3032449Z 2025-08-30 09:55:21 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3032569Z 2025-08-30 09:55:21 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3032719Z 2025-08-30 09:55:21 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3032837Z 2025-08-30 09:55:21 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3032981Z 2025-08-30 09:55:21 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3033137Z 2025-08-30 09:55:21 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3033285Z 2025-08-30 09:55:21 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3033546Z 2025-08-30 09:55:21 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3033666Z 2025-08-30 09:55:21 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3033776Z 2025-08-30 09:55:21 INFO Validating configuration ...
2025-08-30T09:58:47.3034128Z 2025-08-30 09:55:21 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3034416Z 2025-08-30 09:55:21 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3034855Z 2025-08-30 09:55:21 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3035050Z 2025-08-30 09:55:21 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3035232Z 2025-08-30 09:55:21 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3035370Z 2025-08-30 09:55:21 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3035481Z 2025-08-30 09:55:21 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3035713Z 2025-08-30 09:55:21 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3035828Z 2025-08-30 09:55:21 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3035983Z 2025-08-30 09:55:21 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3036170Z 2025-08-30 09:55:21 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3036330Z 2025-08-30 09:55:21 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3036421Z 2025-08-30 09:55:21 DEBUG Dropping last candle
2025-08-30T09:58:47.3036638Z 2025-08-30 09:55:21 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.3036811Z _________ test_backtest_start_multi_strat_caching[none-start_delta0-2] _________
2025-08-30T09:58:47.3036816Z 
2025-08-30T09:58:47.3037398Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3037711Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65845e4cd0>
2025-08-30T09:58:47.3037871Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f659440d390>
2025-08-30T09:58:47.3038064Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3038170Z run_id = '2', start_delta = {'days': 0}, cache = 'none'
2025-08-30T09:58:47.3038175Z 
2025-08-30T09:58:47.3038291Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3038407Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3038736Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3038900Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3038996Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3039163Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3039227Z     ):
2025-08-30T09:58:47.3039303Z         default_conf.update(
2025-08-30T09:58:47.3039360Z             {
2025-08-30T09:58:47.3039442Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3039521Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3039597Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3039689Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3039745Z             }
2025-08-30T09:58:47.3039801Z         )
2025-08-30T09:58:47.3039875Z         patch_exchange(mocker)
2025-08-30T09:58:47.3039957Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3040025Z             return_value={
2025-08-30T09:58:47.3040143Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3040222Z                 "config": default_conf,
2025-08-30T09:58:47.3040288Z                 "locks": [],
2025-08-30T09:58:47.3040367Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3040446Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3040526Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3040605Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3040681Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3040761Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3040836Z                 "final_balance": 1000,
2025-08-30T09:58:47.3040892Z             }
2025-08-30T09:58:47.3040949Z         )
2025-08-30T09:58:47.3041024Z         mocker.patch(
2025-08-30T09:58:47.3041209Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3041312Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3041376Z         )
2025-08-30T09:58:47.3041611Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3041822Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3041886Z     
2025-08-30T09:58:47.3041985Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3042128Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3042198Z         if cache == "none":
2025-08-30T09:58:47.3042300Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3042368Z         elif cache == "day":
2025-08-30T09:58:47.3042462Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3042536Z         elif cache == "week":
2025-08-30T09:58:47.3042633Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3042700Z         elif cache == "month":
2025-08-30T09:58:47.3042800Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3042880Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3042947Z             return_value={
2025-08-30T09:58:47.3043203Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3043581Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3043662Z             }
2025-08-30T09:58:47.3043719Z         )
2025-08-30T09:58:47.3043809Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3043878Z             side_effect=[
2025-08-30T09:58:47.3043934Z                 {
2025-08-30T09:58:47.3044048Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3044137Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3044254Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3044311Z                 },
2025-08-30T09:58:47.3044498Z                 {
2025-08-30T09:58:47.3044607Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3044694Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3044819Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3044877Z                 },
2025-08-30T09:58:47.3044933Z             ]
2025-08-30T09:58:47.3044992Z         )
2025-08-30T09:58:47.3045060Z         mocker.patch(
2025-08-30T09:58:47.3045140Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3045207Z             return_value=[
2025-08-30T09:58:47.3045419Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3045477Z             ],
2025-08-30T09:58:47.3045533Z         )
2025-08-30T09:58:47.3045615Z         mocker.patch.multiple(
2025-08-30T09:58:47.3045717Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3045828Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3045919Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3045978Z         )
2025-08-30T09:58:47.3046234Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3046244Z 
2025-08-30T09:58:47.3046335Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3046443Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3046626Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3046700Z     return self._start_patch(
2025-08-30T09:58:47.3046888Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3046968Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3047032Z                        ^^^^^^^^^
2025-08-30T09:58:47.3047252Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3047325Z     result = self.__enter__()
2025-08-30T09:58:47.3047388Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3047622Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3047736Z     original, local = self.get_original()
2025-08-30T09:58:47.3047802Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3047901Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3047906Z 
2025-08-30T09:58:47.3048023Z self = <unittest.mock._patch object at 0x7f65c837da10>
2025-08-30T09:58:47.3048028Z 
2025-08-30T09:58:47.3048099Z     def get_original(self):
2025-08-30T09:58:47.3048171Z         target = self.getter()
2025-08-30T09:58:47.3048246Z         name = self.attribute
2025-08-30T09:58:47.3048301Z     
2025-08-30T09:58:47.3048368Z         original = DEFAULT
2025-08-30T09:58:47.3048430Z         local = False
2025-08-30T09:58:47.3048489Z     
2025-08-30T09:58:47.3048546Z         try:
2025-08-30T09:58:47.3048633Z             original = target.__dict__[name]
2025-08-30T09:58:47.3048722Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3048815Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3048992Z         else:
2025-08-30T09:58:47.3049068Z             local = True
2025-08-30T09:58:47.3049124Z     
2025-08-30T09:58:47.3049247Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3049322Z             self.create = True
2025-08-30T09:58:47.3049377Z     
2025-08-30T09:58:47.3049470Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3049549Z >           raise AttributeError(
2025-08-30T09:58:47.3049662Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3049719Z             )
2025-08-30T09:58:47.3050597Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3050609Z 
2025-08-30T09:58:47.3050933Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3051114Z ________ test_backtest_start_multi_strat_caching[month-start_delta1-2] _________
2025-08-30T09:58:47.3051119Z 
2025-08-30T09:58:47.3051698Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3051861Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c87f9d50>
2025-08-30T09:58:47.3052021Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8347290>
2025-08-30T09:58:47.3052213Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3052322Z run_id = '2', start_delta = {'days': 1}, cache = 'month'
2025-08-30T09:58:47.3052327Z 
2025-08-30T09:58:47.3052445Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3052559Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3052780Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3052936Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3053031Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3053194Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3053250Z     ):
2025-08-30T09:58:47.3053324Z         default_conf.update(
2025-08-30T09:58:47.3053573Z             {
2025-08-30T09:58:47.3053672Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3053756Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3053831Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3053924Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3053983Z             }
2025-08-30T09:58:47.3054044Z         )
2025-08-30T09:58:47.3054125Z         patch_exchange(mocker)
2025-08-30T09:58:47.3054202Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3054269Z             return_value={
2025-08-30T09:58:47.3054387Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3054466Z                 "config": default_conf,
2025-08-30T09:58:47.3054535Z                 "locks": [],
2025-08-30T09:58:47.3054608Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3054693Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3054770Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3054849Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3054946Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3055098Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3055234Z                 "final_balance": 1000,
2025-08-30T09:58:47.3055336Z             }
2025-08-30T09:58:47.3055442Z         )
2025-08-30T09:58:47.3055562Z         mocker.patch(
2025-08-30T09:58:47.3055754Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3055861Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3056059Z         )
2025-08-30T09:58:47.3056294Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3056503Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3056562Z     
2025-08-30T09:58:47.3056660Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3056802Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3056873Z         if cache == "none":
2025-08-30T09:58:47.3056966Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3057035Z         elif cache == "day":
2025-08-30T09:58:47.3057130Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3057326Z         elif cache == "week":
2025-08-30T09:58:47.3057430Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3057499Z         elif cache == "month":
2025-08-30T09:58:47.3057600Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3057681Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3057748Z             return_value={
2025-08-30T09:58:47.3057915Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3058103Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3058159Z             }
2025-08-30T09:58:47.3058217Z         )
2025-08-30T09:58:47.3058296Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3058367Z             side_effect=[
2025-08-30T09:58:47.3058424Z                 {
2025-08-30T09:58:47.3058534Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3058624Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3058739Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3058805Z                 },
2025-08-30T09:58:47.3058863Z                 {
2025-08-30T09:58:47.3058966Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3059055Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3059166Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3059224Z                 },
2025-08-30T09:58:47.3059279Z             ]
2025-08-30T09:58:47.3059337Z         )
2025-08-30T09:58:47.3059404Z         mocker.patch(
2025-08-30T09:58:47.3059482Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3059550Z             return_value=[
2025-08-30T09:58:47.3059753Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3059809Z             ],
2025-08-30T09:58:47.3059867Z         )
2025-08-30T09:58:47.3059950Z         mocker.patch.multiple(
2025-08-30T09:58:47.3060050Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3060160Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3060254Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3060310Z         )
2025-08-30T09:58:47.3060566Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3060572Z 
2025-08-30T09:58:47.3060664Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3060765Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3060945Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3061019Z     return self._start_patch(
2025-08-30T09:58:47.3061205Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3061285Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3061349Z                        ^^^^^^^^^
2025-08-30T09:58:47.3061565Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3061727Z     result = self.__enter__()
2025-08-30T09:58:47.3061789Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3062015Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3062098Z     original, local = self.get_original()
2025-08-30T09:58:47.3062162Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3062264Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3062268Z 
2025-08-30T09:58:47.3062381Z self = <unittest.mock._patch object at 0x7f65844d5cd0>
2025-08-30T09:58:47.3062386Z 
2025-08-30T09:58:47.3062457Z     def get_original(self):
2025-08-30T09:58:47.3062530Z         target = self.getter()
2025-08-30T09:58:47.3062603Z         name = self.attribute
2025-08-30T09:58:47.3062734Z     
2025-08-30T09:58:47.3062804Z         original = DEFAULT
2025-08-30T09:58:47.3062869Z         local = False
2025-08-30T09:58:47.3062922Z     
2025-08-30T09:58:47.3062985Z         try:
2025-08-30T09:58:47.3063066Z             original = target.__dict__[name]
2025-08-30T09:58:47.3063154Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3063246Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3063302Z         else:
2025-08-30T09:58:47.3063485Z             local = True
2025-08-30T09:58:47.3063542Z     
2025-08-30T09:58:47.3063667Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3063742Z             self.create = True
2025-08-30T09:58:47.3063797Z     
2025-08-30T09:58:47.3063892Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3063965Z >           raise AttributeError(
2025-08-30T09:58:47.3064079Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3064140Z             )
2025-08-30T09:58:47.3064740Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3064749Z 
2025-08-30T09:58:47.3065002Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3065174Z _________ test_backtest_start_multi_strat_caching[day-start_delta3-2] __________
2025-08-30T09:58:47.3065179Z 
2025-08-30T09:58:47.3065759Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3065923Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc91c290>
2025-08-30T09:58:47.3066083Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c89b1a90>
2025-08-30T09:58:47.3066281Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3066388Z run_id = '2', start_delta = {'weeks': 4}, cache = 'day'
2025-08-30T09:58:47.3066393Z 
2025-08-30T09:58:47.3066513Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3066629Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3066851Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3067004Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3067102Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3067265Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3067321Z     ):
2025-08-30T09:58:47.3067395Z         default_conf.update(
2025-08-30T09:58:47.3067451Z             {
2025-08-30T09:58:47.3067532Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3067613Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3067691Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3067780Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3067964Z             }
2025-08-30T09:58:47.3068020Z         )
2025-08-30T09:58:47.3068094Z         patch_exchange(mocker)
2025-08-30T09:58:47.3068175Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3068241Z             return_value={
2025-08-30T09:58:47.3068353Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3068434Z                 "config": default_conf,
2025-08-30T09:58:47.3068502Z                 "locks": [],
2025-08-30T09:58:47.3068575Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3068658Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3068734Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3068813Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3068889Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3069078Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3069155Z                 "final_balance": 1000,
2025-08-30T09:58:47.3069211Z             }
2025-08-30T09:58:47.3069276Z         )
2025-08-30T09:58:47.3069342Z         mocker.patch(
2025-08-30T09:58:47.3069527Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3069628Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3069688Z         )
2025-08-30T09:58:47.3069919Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3070127Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3070187Z     
2025-08-30T09:58:47.3070286Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3070429Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3070500Z         if cache == "none":
2025-08-30T09:58:47.3070597Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3070667Z         elif cache == "day":
2025-08-30T09:58:47.3070758Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3070836Z         elif cache == "week":
2025-08-30T09:58:47.3070931Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3071000Z         elif cache == "month":
2025-08-30T09:58:47.3071097Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3071178Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3071246Z             return_value={
2025-08-30T09:58:47.3071417Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3071605Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3071662Z             }
2025-08-30T09:58:47.3071718Z         )
2025-08-30T09:58:47.3071810Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3071877Z             side_effect=[
2025-08-30T09:58:47.3071933Z                 {
2025-08-30T09:58:47.3072046Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3072136Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3072253Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3072314Z                 },
2025-08-30T09:58:47.3072370Z                 {
2025-08-30T09:58:47.3072471Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3072555Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3072670Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3072728Z                 },
2025-08-30T09:58:47.3072783Z             ]
2025-08-30T09:58:47.3072842Z         )
2025-08-30T09:58:47.3072912Z         mocker.patch(
2025-08-30T09:58:47.3072991Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3073061Z             return_value=[
2025-08-30T09:58:47.3073266Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3073526Z             ],
2025-08-30T09:58:47.3073583Z         )
2025-08-30T09:58:47.3073668Z         mocker.patch.multiple(
2025-08-30T09:58:47.3073768Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3073873Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3073967Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3074021Z         )
2025-08-30T09:58:47.3074276Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3074282Z 
2025-08-30T09:58:47.3074373Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3074475Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3074765Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3074842Z     return self._start_patch(
2025-08-30T09:58:47.3075027Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3075109Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3075172Z                        ^^^^^^^^^
2025-08-30T09:58:47.3075386Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3075456Z     result = self.__enter__()
2025-08-30T09:58:47.3075517Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3075743Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3075825Z     original, local = self.get_original()
2025-08-30T09:58:47.3075892Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3075990Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3075994Z 
2025-08-30T09:58:47.3076115Z self = <unittest.mock._patch object at 0x7f659448d590>
2025-08-30T09:58:47.3076120Z 
2025-08-30T09:58:47.3076191Z     def get_original(self):
2025-08-30T09:58:47.3076262Z         target = self.getter()
2025-08-30T09:58:47.3076341Z         name = self.attribute
2025-08-30T09:58:47.3076395Z     
2025-08-30T09:58:47.3076463Z         original = DEFAULT
2025-08-30T09:58:47.3076528Z         local = False
2025-08-30T09:58:47.3076584Z     
2025-08-30T09:58:47.3076640Z         try:
2025-08-30T09:58:47.3076720Z             original = target.__dict__[name]
2025-08-30T09:58:47.3076808Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3076898Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3076955Z         else:
2025-08-30T09:58:47.3077023Z             local = True
2025-08-30T09:58:47.3077077Z     
2025-08-30T09:58:47.3077202Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3077273Z             self.create = True
2025-08-30T09:58:47.3077331Z     
2025-08-30T09:58:47.3077432Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3077509Z >           raise AttributeError(
2025-08-30T09:58:47.3077627Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3077688Z             )
2025-08-30T09:58:47.3078282Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3078288Z 
2025-08-30T09:58:47.3078527Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3078706Z ______ test_backtest_start_multi_strat_caching[day-start_delta0-changed] _______
2025-08-30T09:58:47.3078710Z 
2025-08-30T09:58:47.3079283Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3079446Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8c70f50>
2025-08-30T09:58:47.3079607Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65def51ad0>
2025-08-30T09:58:47.3079924Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3080047Z run_id = 'changed', start_delta = {'days': 0}, cache = 'day'
2025-08-30T09:58:47.3080051Z 
2025-08-30T09:58:47.3080166Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3080282Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3080502Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3080655Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3080750Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3080916Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3081067Z     ):
2025-08-30T09:58:47.3081142Z         default_conf.update(
2025-08-30T09:58:47.3081197Z             {
2025-08-30T09:58:47.3081278Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3081360Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3081437Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3081526Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3081585Z             }
2025-08-30T09:58:47.3081639Z         )
2025-08-30T09:58:47.3081712Z         patch_exchange(mocker)
2025-08-30T09:58:47.3081794Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3081861Z             return_value={
2025-08-30T09:58:47.3081972Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3082050Z                 "config": default_conf,
2025-08-30T09:58:47.3082114Z                 "locks": [],
2025-08-30T09:58:47.3082185Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3082266Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3082345Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3082423Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3082498Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3082581Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3082655Z                 "final_balance": 1000,
2025-08-30T09:58:47.3082710Z             }
2025-08-30T09:58:47.3082769Z         )
2025-08-30T09:58:47.3082835Z         mocker.patch(
2025-08-30T09:58:47.3083020Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3083122Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3083180Z         )
2025-08-30T09:58:47.3083511Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3083725Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3083786Z     
2025-08-30T09:58:47.3083887Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3084031Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3084105Z         if cache == "none":
2025-08-30T09:58:47.3084200Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3084267Z         elif cache == "day":
2025-08-30T09:58:47.3084359Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3084433Z         elif cache == "week":
2025-08-30T09:58:47.3084528Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3084596Z         elif cache == "month":
2025-08-30T09:58:47.3084690Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3084769Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3084834Z             return_value={
2025-08-30T09:58:47.3085000Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3085191Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3085246Z             }
2025-08-30T09:58:47.3085300Z         )
2025-08-30T09:58:47.3085505Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3085572Z             side_effect=[
2025-08-30T09:58:47.3085628Z                 {
2025-08-30T09:58:47.3085738Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3085826Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3085942Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3086000Z                 },
2025-08-30T09:58:47.3086063Z                 {
2025-08-30T09:58:47.3086165Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3086249Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3086363Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3086636Z                 },
2025-08-30T09:58:47.3086694Z             ]
2025-08-30T09:58:47.3086752Z         )
2025-08-30T09:58:47.3086819Z         mocker.patch(
2025-08-30T09:58:47.3086905Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3086972Z             return_value=[
2025-08-30T09:58:47.3087184Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3087241Z             ],
2025-08-30T09:58:47.3087295Z         )
2025-08-30T09:58:47.3087379Z         mocker.patch.multiple(
2025-08-30T09:58:47.3087483Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3087587Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3087678Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3087738Z         )
2025-08-30T09:58:47.3087994Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3087999Z 
2025-08-30T09:58:47.3088096Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3088203Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3088391Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3088466Z     return self._start_patch(
2025-08-30T09:58:47.3088654Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3088730Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3088794Z                        ^^^^^^^^^
2025-08-30T09:58:47.3089011Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3089080Z     result = self.__enter__()
2025-08-30T09:58:47.3089140Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3089363Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3089449Z     original, local = self.get_original()
2025-08-30T09:58:47.3089519Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3089620Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3089624Z 
2025-08-30T09:58:47.3089745Z self = <unittest.mock._patch object at 0x7f65848dc8d0>
2025-08-30T09:58:47.3089750Z 
2025-08-30T09:58:47.3089821Z     def get_original(self):
2025-08-30T09:58:47.3089892Z         target = self.getter()
2025-08-30T09:58:47.3089965Z         name = self.attribute
2025-08-30T09:58:47.3090020Z     
2025-08-30T09:58:47.3090087Z         original = DEFAULT
2025-08-30T09:58:47.3090149Z         local = False
2025-08-30T09:58:47.3090207Z     
2025-08-30T09:58:47.3090263Z         try:
2025-08-30T09:58:47.3090345Z             original = target.__dict__[name]
2025-08-30T09:58:47.3090436Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3090526Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3090583Z         else:
2025-08-30T09:58:47.3090652Z             local = True
2025-08-30T09:58:47.3090712Z     
2025-08-30T09:58:47.3090835Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3090905Z             self.create = True
2025-08-30T09:58:47.3091057Z     
2025-08-30T09:58:47.3091151Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3091225Z >           raise AttributeError(
2025-08-30T09:58:47.3091337Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3091393Z             )
2025-08-30T09:58:47.3091990Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3091995Z 
2025-08-30T09:58:47.3092235Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3092411Z ______ test_backtest_start_multi_strat_caching[none-start_delta1-changed] ______
2025-08-30T09:58:47.3092415Z 
2025-08-30T09:58:47.3093071Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3093240Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c86e04d0>
2025-08-30T09:58:47.3093591Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6594991650>
2025-08-30T09:58:47.3093820Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3093946Z run_id = 'changed', start_delta = {'days': 1}, cache = 'none'
2025-08-30T09:58:47.3093952Z 
2025-08-30T09:58:47.3094070Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3094187Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3094412Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3094570Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3094667Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3094828Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3094896Z     ):
2025-08-30T09:58:47.3094970Z         default_conf.update(
2025-08-30T09:58:47.3095027Z             {
2025-08-30T09:58:47.3095109Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3095189Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3095265Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3095356Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3095411Z             }
2025-08-30T09:58:47.3095467Z         )
2025-08-30T09:58:47.3095540Z         patch_exchange(mocker)
2025-08-30T09:58:47.3095620Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3095687Z             return_value={
2025-08-30T09:58:47.3095796Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3095881Z                 "config": default_conf,
2025-08-30T09:58:47.3095948Z                 "locks": [],
2025-08-30T09:58:47.3096021Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3096104Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3096183Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3096262Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3096339Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3096419Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3096492Z                 "final_balance": 1000,
2025-08-30T09:58:47.3096549Z             }
2025-08-30T09:58:47.3096605Z         )
2025-08-30T09:58:47.3096675Z         mocker.patch(
2025-08-30T09:58:47.3096859Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3096961Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3097021Z         )
2025-08-30T09:58:47.3097258Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3097473Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3097666Z     
2025-08-30T09:58:47.3097769Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3097912Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3097980Z         if cache == "none":
2025-08-30T09:58:47.3098079Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3098149Z         elif cache == "day":
2025-08-30T09:58:47.3098243Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3098326Z         elif cache == "week":
2025-08-30T09:58:47.3098510Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3098640Z         elif cache == "month":
2025-08-30T09:58:47.3098818Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3099105Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3099185Z             return_value={
2025-08-30T09:58:47.3099362Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3099564Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3099622Z             }
2025-08-30T09:58:47.3099677Z         )
2025-08-30T09:58:47.3099762Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3099829Z             side_effect=[
2025-08-30T09:58:47.3099886Z                 {
2025-08-30T09:58:47.3099999Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3100087Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3100203Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3100260Z                 },
2025-08-30T09:58:47.3100320Z                 {
2025-08-30T09:58:47.3100427Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3100512Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3100627Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3100687Z                 },
2025-08-30T09:58:47.3100745Z             ]
2025-08-30T09:58:47.3100800Z         )
2025-08-30T09:58:47.3100873Z         mocker.patch(
2025-08-30T09:58:47.3100953Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3101019Z             return_value=[
2025-08-30T09:58:47.3101228Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3101285Z             ],
2025-08-30T09:58:47.3101340Z         )
2025-08-30T09:58:47.3101427Z         mocker.patch.multiple(
2025-08-30T09:58:47.3101529Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3101633Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3101728Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3101788Z         )
2025-08-30T09:58:47.3102046Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3102055Z 
2025-08-30T09:58:47.3102145Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3102248Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3102429Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3102504Z     return self._start_patch(
2025-08-30T09:58:47.3102691Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3102770Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3102833Z                        ^^^^^^^^^
2025-08-30T09:58:47.3103048Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3103120Z     result = self.__enter__()
2025-08-30T09:58:47.3103184Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3103522Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3103614Z     original, local = self.get_original()
2025-08-30T09:58:47.3103820Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3103921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3103926Z 
2025-08-30T09:58:47.3104043Z self = <unittest.mock._patch object at 0x7f6584554750>
2025-08-30T09:58:47.3104048Z 
2025-08-30T09:58:47.3104119Z     def get_original(self):
2025-08-30T09:58:47.3104190Z         target = self.getter()
2025-08-30T09:58:47.3104264Z         name = self.attribute
2025-08-30T09:58:47.3104318Z     
2025-08-30T09:58:47.3104385Z         original = DEFAULT
2025-08-30T09:58:47.3104447Z         local = False
2025-08-30T09:58:47.3104505Z     
2025-08-30T09:58:47.3104562Z         try:
2025-08-30T09:58:47.3104643Z             original = target.__dict__[name]
2025-08-30T09:58:47.3104837Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3104931Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3104989Z         else:
2025-08-30T09:58:47.3105060Z             local = True
2025-08-30T09:58:47.3105118Z     
2025-08-30T09:58:47.3105241Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3105310Z             self.create = True
2025-08-30T09:58:47.3105368Z     
2025-08-30T09:58:47.3105461Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3105536Z >           raise AttributeError(
2025-08-30T09:58:47.3105649Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3105705Z             )
2025-08-30T09:58:47.3106300Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3106305Z 
2025-08-30T09:58:47.3106550Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3106681Z ____________________________ test_backtesting_start ____________________________
2025-08-30T09:58:47.3106690Z 
2025-08-30T09:58:47.3107130Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.3107292Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e593aa50>
2025-08-30T09:58:47.3107449Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584577250>
2025-08-30T09:58:47.3107453Z 
2025-08-30T09:58:47.3107600Z     def test_backtesting_start(default_conf, mocker, caplog) -> None:
2025-08-30T09:58:47.3107679Z         def get_timerange(input1):
2025-08-30T09:58:47.3107802Z             return dt_utc(2017, 11, 14, 21, 17), dt_utc(2017, 11, 14, 22, 59)
2025-08-30T09:58:47.3107857Z     
2025-08-30T09:58:47.3108029Z         mocker.patch("freqtrade.data.history.get_timerange", get_timerange)
2025-08-30T09:58:47.3108110Z         patch_exchange(mocker)
2025-08-30T09:58:47.3108292Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest")
2025-08-30T09:58:47.3108482Z         mocker.patch("freqtrade.optimize.backtesting.generate_backtest_stats")
2025-08-30T09:58:47.3108663Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results")
2025-08-30T09:58:47.3108851Z         sbs = mocker.patch("freqtrade.optimize.backtesting.store_backtest_results")
2025-08-30T09:58:47.3108918Z         mocker.patch(
2025-08-30T09:58:47.3109105Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3109207Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3109264Z         )
2025-08-30T09:58:47.3109318Z     
2025-08-30T09:58:47.3109405Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.3109487Z         default_conf["export"] = "signals"
2025-08-30T09:58:47.3109592Z         default_conf["exportfilename"] = "export.txt"
2025-08-30T09:58:47.3109682Z         default_conf["timerange"] = "-1510694220"
2025-08-30T09:58:47.3109773Z         default_conf["runmode"] = RunMode.BACKTEST
2025-08-30T09:58:47.3109916Z     
2025-08-30T09:58:47.3110009Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.3110142Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3110258Z         backtesting.strategy.bot_loop_start = MagicMock()
2025-08-30T09:58:47.3110358Z         backtesting.strategy.bot_start = MagicMock()
2025-08-30T09:58:47.3110435Z >       backtesting.start()
2025-08-30T09:58:47.3110440Z 
2025-08-30T09:58:47.3110530Z tests/optimize/test_backtesting.py:448: 
2025-08-30T09:58:47.3110631Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3110737Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.3110819Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.3110967Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3111099Z freqtrade/optimize/backtesting.py:347: in load_bt_data
2025-08-30T09:58:47.3111244Z     self.price_pair_prec[pair] = get_tick_size_over_time(data[pair])
2025-08-30T09:58:47.3111327Z                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3111531Z freqtrade/data/btanalysis/historic_precision.py:20: in get_tick_size_over_time
2025-08-30T09:58:47.3111635Z     candles1 = candles.set_index("date", drop=True)
2025-08-30T09:58:47.3111705Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3111800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3111805Z 
2025-08-30T09:58:47.3111921Z self =                           index      open  ...  close_count  max_count
2025-08-30T09:58:47.3112036Z 0     2017-11-04 23:02:00+00:00   0.00162  ... ...        15         15
2025-08-30T09:58:47.3112159Z 14295 2017-11-14 21:17:00+00:00  0.002576  ...           15         15
2025-08-30T09:58:47.3112164Z 
2025-08-30T09:58:47.3112237Z [14296 rows x 11 columns]
2025-08-30T09:58:47.3112298Z keys = ['date']
2025-08-30T09:58:47.3112302Z 
2025-08-30T09:58:47.3112369Z     def set_index(
2025-08-30T09:58:47.3112432Z         self,
2025-08-30T09:58:47.3112489Z         keys,
2025-08-30T09:58:47.3112544Z         *,
2025-08-30T09:58:47.3112615Z         drop: bool = True,
2025-08-30T09:58:47.3112691Z         append: bool = False,
2025-08-30T09:58:47.3112761Z         inplace: bool = False,
2025-08-30T09:58:47.3112841Z         verify_integrity: bool = False,
2025-08-30T09:58:47.3112917Z     ) -> DataFrame | None:
2025-08-30T09:58:47.3112973Z         """
2025-08-30T09:58:47.3113080Z         Set the DataFrame index using existing columns.
2025-08-30T09:58:47.3113138Z     
2025-08-30T09:58:47.3113277Z         Set the DataFrame index (row labels) using one or more existing
2025-08-30T09:58:47.3113529Z         columns or arrays (of the correct length). The index can replace the
2025-08-30T09:58:47.3113618Z         existing index or expand on it.
2025-08-30T09:58:47.3113678Z     
2025-08-30T09:58:47.3113739Z         Parameters
2025-08-30T09:58:47.3113800Z         ----------
2025-08-30T09:58:47.3113919Z         keys : label or array-like or list of labels/arrays
2025-08-30T09:58:47.3114077Z             This parameter can be either a single column key, a single array of
2025-08-30T09:58:47.3114221Z             the same length as the calling DataFrame, or a list containing an
2025-08-30T09:58:47.3114369Z             arbitrary combination of column keys and arrays. Here, "array"
2025-08-30T09:58:47.3114522Z             encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
2025-08-30T09:58:47.3114639Z             instances of :class:`~collections.abc.Iterator`.
2025-08-30T09:58:47.3114713Z         drop : bool, default True
2025-08-30T09:58:47.3114812Z             Delete columns to be used as the new index.
2025-08-30T09:58:47.3114890Z         append : bool, default False
2025-08-30T09:58:47.3114994Z             Whether to append columns to existing index.
2025-08-30T09:58:47.3115076Z         inplace : bool, default False
2025-08-30T09:58:47.3115222Z             Whether to modify the DataFrame rather than creating a new one.
2025-08-30T09:58:47.3115434Z         verify_integrity : bool, default False
2025-08-30T09:58:47.3115589Z             Check the new index for duplicates. Otherwise defer the check until
2025-08-30T09:58:47.3115739Z             necessary. Setting to False will improve the performance of this
2025-08-30T09:58:47.3115798Z             method.
2025-08-30T09:58:47.3115853Z     
2025-08-30T09:58:47.3115916Z         Returns
2025-08-30T09:58:47.3115977Z         -------
2025-08-30T09:58:47.3116049Z         DataFrame or None
2025-08-30T09:58:47.3116158Z             Changed row labels or None if ``inplace=True``.
2025-08-30T09:58:47.3116213Z     
2025-08-30T09:58:47.3116270Z         See Also
2025-08-30T09:58:47.3116329Z         --------
2025-08-30T09:58:47.3116546Z         DataFrame.reset_index : Opposite of set_index.
2025-08-30T09:58:47.3116691Z         DataFrame.reindex : Change to new indices or expand indices.
2025-08-30T09:58:47.3116847Z         DataFrame.reindex_like : Change to same indices as other DataFrame.
2025-08-30T09:58:47.3116912Z     
2025-08-30T09:58:47.3116972Z         Examples
2025-08-30T09:58:47.3117031Z         --------
2025-08-30T09:58:47.3117118Z         >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
2025-08-30T09:58:47.3117207Z         ...                    'year': [2012, 2014, 2013, 2014],
2025-08-30T09:58:47.3117286Z         ...                    'sale': [55, 40, 84, 31]})
2025-08-30T09:58:47.3117345Z         >>> df
2025-08-30T09:58:47.3117418Z            month  year  sale
2025-08-30T09:58:47.3117480Z         0      1  2012    55
2025-08-30T09:58:47.3117543Z         1      4  2014    40
2025-08-30T09:58:47.3117608Z         2      7  2013    84
2025-08-30T09:58:47.3117668Z         3     10  2014    31
2025-08-30T09:58:47.3117721Z     
2025-08-30T09:58:47.3117817Z         Set the index to become the 'month' column:
2025-08-30T09:58:47.3117877Z     
2025-08-30T09:58:47.3117949Z         >>> df.set_index('month')
2025-08-30T09:58:47.3118012Z                year  sale
2025-08-30T09:58:47.3118078Z         month
2025-08-30T09:58:47.3118143Z         1      2012    55
2025-08-30T09:58:47.3118203Z         4      2014    40
2025-08-30T09:58:47.3118262Z         7      2013    84
2025-08-30T09:58:47.3118328Z         10     2014    31
2025-08-30T09:58:47.3118382Z     
2025-08-30T09:58:47.3118500Z         Create a MultiIndex using columns 'year' and 'month':
2025-08-30T09:58:47.3118561Z     
2025-08-30T09:58:47.3118641Z         >>> df.set_index(['year', 'month'])
2025-08-30T09:58:47.3118703Z                     sale
2025-08-30T09:58:47.3118764Z         year  month
2025-08-30T09:58:47.3118829Z         2012  1     55
2025-08-30T09:58:47.3118887Z         2014  4     40
2025-08-30T09:58:47.3118946Z         2013  7     84
2025-08-30T09:58:47.3119009Z         2014  10    31
2025-08-30T09:58:47.3119067Z     
2025-08-30T09:58:47.3119174Z         Create a MultiIndex using an Index and a column:
2025-08-30T09:58:47.3119228Z     
2025-08-30T09:58:47.3119325Z         >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
2025-08-30T09:58:47.3119394Z                  month  sale
2025-08-30T09:58:47.3119453Z            year
2025-08-30T09:58:47.3119518Z         1  2012  1      55
2025-08-30T09:58:47.3119578Z         2  2014  4      40
2025-08-30T09:58:47.3119638Z         3  2013  7      84
2025-08-30T09:58:47.3119697Z         4  2014  10     31
2025-08-30T09:58:47.3119755Z     
2025-08-30T09:58:47.3119841Z         Create a MultiIndex using two Series:
2025-08-30T09:58:47.3119896Z     
2025-08-30T09:58:47.3119973Z         >>> s = pd.Series([1, 2, 3, 4])
2025-08-30T09:58:47.3120047Z         >>> df.set_index([s, s**2])
2025-08-30T09:58:47.3120115Z               month  year  sale
2025-08-30T09:58:47.3120176Z         1 1       1  2012    55
2025-08-30T09:58:47.3120240Z         2 4       4  2014    40
2025-08-30T09:58:47.3120305Z         3 9       7  2013    84
2025-08-30T09:58:47.3120365Z         4 16     10  2014    31
2025-08-30T09:58:47.3120424Z         """
2025-08-30T09:58:47.3120625Z         inplace = validate_bool_kwarg(inplace, "inplace")
2025-08-30T09:58:47.3120751Z         self._check_inplace_and_allows_duplicate_labels(inplace)
2025-08-30T09:58:47.3120834Z         if not isinstance(keys, list):
2025-08-30T09:58:47.3120899Z             keys = [keys]
2025-08-30T09:58:47.3120953Z     
2025-08-30T09:58:47.3121014Z         err_msg = (
2025-08-30T09:58:47.3121159Z             'The parameter "keys" may be a column key, one-dimensional '
2025-08-30T09:58:47.3121282Z             "array, or a list containing only valid column keys and "
2025-08-30T09:58:47.3121399Z             "one-dimensional arrays."
2025-08-30T09:58:47.3121516Z         )
2025-08-30T09:58:47.3121619Z     
2025-08-30T09:58:47.3121754Z         missing: list[Hashable] = []
2025-08-30T09:58:47.3121870Z         for col in keys:
2025-08-30T09:58:47.3122163Z             if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):
2025-08-30T09:58:47.3122286Z                 # arrays are fine as long as they are one-dimensional
2025-08-30T09:58:47.3122387Z                 # iterators get converted to list below
2025-08-30T09:58:47.3122473Z                 if getattr(col, "ndim", 1) != 1:
2025-08-30T09:58:47.3122553Z                     raise ValueError(err_msg)
2025-08-30T09:58:47.3122613Z             else:
2025-08-30T09:58:47.3122728Z                 # everything else gets tried as a key; see GH 24969
2025-08-30T09:58:47.3122789Z                 try:
2025-08-30T09:58:47.3122869Z                     found = col in self.columns
2025-08-30T09:58:47.3122947Z                 except TypeError as err:
2025-08-30T09:58:47.3123023Z                     raise TypeError(
2025-08-30T09:58:47.3123134Z                         f"{err_msg}. Received column of type {type(col)}"
2025-08-30T09:58:47.3123198Z                     ) from err
2025-08-30T09:58:47.3123264Z                 else:
2025-08-30T09:58:47.3123331Z                     if not found:
2025-08-30T09:58:47.3123647Z                         missing.append(col)
2025-08-30T09:58:47.3123722Z     
2025-08-30T09:58:47.3123790Z         if missing:
2025-08-30T09:58:47.3123915Z >           raise KeyError(f"None of {missing} are in the columns")
2025-08-30T09:58:47.3124021Z E           KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.3124026Z 
2025-08-30T09:58:47.3124202Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6129: KeyError
2025-08-30T09:58:47.3124343Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3124451Z 2025-08-30 09:55:24 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3124582Z 2025-08-30 09:55:24 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3124660Z 2025-08-30 09:55:24 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3124752Z 2025-08-30 09:55:24 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3124880Z 2025-08-30 09:55:24 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3124997Z 2025-08-30 09:55:24 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3125325Z 2025-08-30 09:55:24 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3125818Z 2025-08-30 09:55:24 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3126262Z 2025-08-30 09:55:24 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3126358Z 2025-08-30 09:55:24 INFO Found no parameter file.
2025-08-30T09:58:47.3126648Z 2025-08-30 09:55:24 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3126832Z 2025-08-30 09:55:24 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.3127012Z 2025-08-30 09:55:24 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3127215Z 2025-08-30 09:55:24 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3127561Z 2025-08-30 09:55:24 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3127824Z 2025-08-30 09:55:24 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3128011Z 2025-08-30 09:55:24 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3128209Z 2025-08-30 09:55:24 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3128312Z 2025-08-30 09:55:24 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.3128419Z 2025-08-30 09:55:24 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3128645Z 2025-08-30 09:55:24 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3128798Z 2025-08-30 09:55:24 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3128952Z 2025-08-30 09:55:24 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3129091Z 2025-08-30 09:55:24 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3129228Z 2025-08-30 09:55:24 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3129529Z 2025-08-30 09:55:24 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3129723Z 2025-08-30 09:55:24 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3129835Z 2025-08-30 09:55:24 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3129944Z 2025-08-30 09:55:24 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3130071Z 2025-08-30 09:55:24 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3130241Z 2025-08-30 09:55:24 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3130357Z 2025-08-30 09:55:24 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3130481Z 2025-08-30 09:55:24 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3130628Z 2025-08-30 09:55:24 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3130745Z 2025-08-30 09:55:24 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3130884Z 2025-08-30 09:55:24 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3131040Z 2025-08-30 09:55:24 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3131180Z 2025-08-30 09:55:24 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3131319Z 2025-08-30 09:55:24 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3131431Z 2025-08-30 09:55:24 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3131537Z 2025-08-30 09:55:24 INFO Validating configuration ...
2025-08-30T09:58:47.3131885Z 2025-08-30 09:55:24 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3132175Z 2025-08-30 09:55:24 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3132610Z 2025-08-30 09:55:24 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3132804Z 2025-08-30 09:55:24 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3132980Z 2025-08-30 09:55:24 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3133117Z 2025-08-30 09:55:24 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3133227Z 2025-08-30 09:55:24 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3133657Z 2025-08-30 09:55:24 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3133777Z 2025-08-30 09:55:24 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3133932Z 2025-08-30 09:55:24 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3134248Z 2025-08-30 09:55:24 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3134418Z 2025-08-30 09:55:24 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3134545Z 2025-08-30 09:55:24 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.3134765Z 2025-08-30 09:55:24 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13582 - after: 14296 - 5.26%
2025-08-30T09:58:47.3134957Z 2025-08-30 09:55:24 INFO Loading data from 2017-11-14 21:17:00 up to 2017-11-14 22:59:00 (0 days).
2025-08-30T09:58:47.3135145Z 2025-08-30 09:55:24 WARNING Moving start-date by 20 candles to account for startup time.
2025-08-30T09:58:47.3135429Z ______ test_backtest_start_multi_strat_caching[week-start_delta1-changed] ______
2025-08-30T09:58:47.3135436Z 
2025-08-30T09:58:47.3136024Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3136192Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc614450>
2025-08-30T09:58:47.3136351Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584573a90>
2025-08-30T09:58:47.3136549Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3136671Z run_id = 'changed', start_delta = {'days': 1}, cache = 'week'
2025-08-30T09:58:47.3136676Z 
2025-08-30T09:58:47.3136793Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3136916Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3137133Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3137287Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3137387Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3137553Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3137610Z     ):
2025-08-30T09:58:47.3137688Z         default_conf.update(
2025-08-30T09:58:47.3137746Z             {
2025-08-30T09:58:47.3137822Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3137902Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3137982Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3138067Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3138122Z             }
2025-08-30T09:58:47.3138181Z         )
2025-08-30T09:58:47.3138255Z         patch_exchange(mocker)
2025-08-30T09:58:47.3138329Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3138397Z             return_value={
2025-08-30T09:58:47.3138518Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3138592Z                 "config": default_conf,
2025-08-30T09:58:47.3138658Z                 "locks": [],
2025-08-30T09:58:47.3138739Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3138819Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3138894Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3138981Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3139064Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3139142Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3139217Z                 "final_balance": 1000,
2025-08-30T09:58:47.3139279Z             }
2025-08-30T09:58:47.3139334Z         )
2025-08-30T09:58:47.3139402Z         mocker.patch(
2025-08-30T09:58:47.3139590Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3139694Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3139753Z         )
2025-08-30T09:58:47.3139988Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3140205Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3140352Z     
2025-08-30T09:58:47.3140453Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3140599Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3140668Z         if cache == "none":
2025-08-30T09:58:47.3140764Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3140838Z         elif cache == "day":
2025-08-30T09:58:47.3140931Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3141001Z         elif cache == "week":
2025-08-30T09:58:47.3141097Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3141178Z         elif cache == "month":
2025-08-30T09:58:47.3141365Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3141455Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3141530Z             return_value={
2025-08-30T09:58:47.3141699Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3141894Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3141957Z             }
2025-08-30T09:58:47.3142015Z         )
2025-08-30T09:58:47.3142099Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3142168Z             side_effect=[
2025-08-30T09:58:47.3142231Z                 {
2025-08-30T09:58:47.3142341Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3142433Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3142556Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3142615Z                 },
2025-08-30T09:58:47.3142677Z                 {
2025-08-30T09:58:47.3142780Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3142872Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3142988Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3143046Z                 },
2025-08-30T09:58:47.3143109Z             ]
2025-08-30T09:58:47.3143165Z         )
2025-08-30T09:58:47.3143232Z         mocker.patch(
2025-08-30T09:58:47.3143315Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3143505Z             return_value=[
2025-08-30T09:58:47.3143717Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3143774Z             ],
2025-08-30T09:58:47.3143835Z         )
2025-08-30T09:58:47.3143914Z         mocker.patch.multiple(
2025-08-30T09:58:47.3144017Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3144134Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3144228Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3144284Z         )
2025-08-30T09:58:47.3144549Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3144559Z 
2025-08-30T09:58:47.3144652Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3144755Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3144937Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3145018Z     return self._start_patch(
2025-08-30T09:58:47.3145245Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3145391Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3145514Z                        ^^^^^^^^^
2025-08-30T09:58:47.3145850Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3145930Z     result = self.__enter__()
2025-08-30T09:58:47.3145997Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3146224Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3146448Z     original, local = self.get_original()
2025-08-30T09:58:47.3146515Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3146623Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3146628Z 
2025-08-30T09:58:47.3146742Z self = <unittest.mock._patch object at 0x7f65c87d3050>
2025-08-30T09:58:47.3146747Z 
2025-08-30T09:58:47.3146820Z     def get_original(self):
2025-08-30T09:58:47.3146898Z         target = self.getter()
2025-08-30T09:58:47.3146968Z         name = self.attribute
2025-08-30T09:58:47.3147024Z     
2025-08-30T09:58:47.3147095Z         original = DEFAULT
2025-08-30T09:58:47.3147160Z         local = False
2025-08-30T09:58:47.3147216Z     
2025-08-30T09:58:47.3147274Z         try:
2025-08-30T09:58:47.3147509Z             original = target.__dict__[name]
2025-08-30T09:58:47.3147599Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3147693Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3147759Z         else:
2025-08-30T09:58:47.3147825Z             local = True
2025-08-30T09:58:47.3147879Z     
2025-08-30T09:58:47.3148008Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3148079Z             self.create = True
2025-08-30T09:58:47.3148134Z     
2025-08-30T09:58:47.3148228Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3148310Z >           raise AttributeError(
2025-08-30T09:58:47.3148420Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3148481Z             )
2025-08-30T09:58:47.3149077Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3149088Z 
2025-08-30T09:58:47.3149327Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3149465Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3149619Z 2025-08-30 09:55:24 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.3149756Z 2025-08-30 09:55:24 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.3149892Z 2025-08-30 09:55:24 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.3150073Z _____ test_backtest_start_multi_strat_caching[month-start_delta0-changed] ______
2025-08-30T09:58:47.3150078Z 
2025-08-30T09:58:47.3150656Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3150816Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584c3d090>
2025-08-30T09:58:47.3150979Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65944a7190>
2025-08-30T09:58:47.3151174Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3151301Z run_id = 'changed', start_delta = {'days': 0}, cache = 'month'
2025-08-30T09:58:47.3151306Z 
2025-08-30T09:58:47.3151426Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3151542Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3151760Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3151916Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3152012Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3152174Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3152233Z     ):
2025-08-30T09:58:47.3152313Z         default_conf.update(
2025-08-30T09:58:47.3152375Z             {
2025-08-30T09:58:47.3152453Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3152535Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3152700Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3152787Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3152843Z             }
2025-08-30T09:58:47.3152903Z         )
2025-08-30T09:58:47.3152979Z         patch_exchange(mocker)
2025-08-30T09:58:47.3153056Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3153131Z             return_value={
2025-08-30T09:58:47.3153244Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3153320Z                 "config": default_conf,
2025-08-30T09:58:47.3153502Z                 "locks": [],
2025-08-30T09:58:47.3153578Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3153658Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3153849Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3153938Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3154016Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3154098Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3154176Z                 "final_balance": 1000,
2025-08-30T09:58:47.3154233Z             }
2025-08-30T09:58:47.3154289Z         )
2025-08-30T09:58:47.3154357Z         mocker.patch(
2025-08-30T09:58:47.3154547Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3154649Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3154706Z         )
2025-08-30T09:58:47.3154944Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3155154Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3155210Z     
2025-08-30T09:58:47.3155312Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3155458Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3155531Z         if cache == "none":
2025-08-30T09:58:47.3155629Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3155707Z         elif cache == "day":
2025-08-30T09:58:47.3155799Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3155869Z         elif cache == "week":
2025-08-30T09:58:47.3155969Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3156038Z         elif cache == "month":
2025-08-30T09:58:47.3156132Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3156219Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3156286Z             return_value={
2025-08-30T09:58:47.3156451Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3156643Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3156703Z             }
2025-08-30T09:58:47.3156760Z         )
2025-08-30T09:58:47.3156841Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3156920Z             side_effect=[
2025-08-30T09:58:47.3156979Z                 {
2025-08-30T09:58:47.3157085Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3157172Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3157291Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3157350Z                 },
2025-08-30T09:58:47.3157411Z                 {
2025-08-30T09:58:47.3157519Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3157604Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3157716Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3157778Z                 },
2025-08-30T09:58:47.3157840Z             ]
2025-08-30T09:58:47.3157895Z         )
2025-08-30T09:58:47.3157962Z         mocker.patch(
2025-08-30T09:58:47.3158044Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3158230Z             return_value=[
2025-08-30T09:58:47.3158437Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3158499Z             ],
2025-08-30T09:58:47.3158555Z         )
2025-08-30T09:58:47.3158633Z         mocker.patch.multiple(
2025-08-30T09:58:47.3158736Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3158846Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3158936Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3158992Z         )
2025-08-30T09:58:47.3159254Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3159259Z 
2025-08-30T09:58:47.3159349Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3159532Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3159721Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3159801Z     return self._start_patch(
2025-08-30T09:58:47.3159985Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3160065Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3160132Z                        ^^^^^^^^^
2025-08-30T09:58:47.3160343Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3160413Z     result = self.__enter__()
2025-08-30T09:58:47.3160479Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3160720Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3160804Z     original, local = self.get_original()
2025-08-30T09:58:47.3160876Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3160981Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3160987Z 
2025-08-30T09:58:47.3161101Z self = <unittest.mock._patch object at 0x7f65dee32650>
2025-08-30T09:58:47.3161111Z 
2025-08-30T09:58:47.3161188Z     def get_original(self):
2025-08-30T09:58:47.3161261Z         target = self.getter()
2025-08-30T09:58:47.3161331Z         name = self.attribute
2025-08-30T09:58:47.3161391Z     
2025-08-30T09:58:47.3161460Z         original = DEFAULT
2025-08-30T09:58:47.3161524Z         local = False
2025-08-30T09:58:47.3161579Z     
2025-08-30T09:58:47.3161643Z         try:
2025-08-30T09:58:47.3161727Z             original = target.__dict__[name]
2025-08-30T09:58:47.3161812Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3161910Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3161968Z         else:
2025-08-30T09:58:47.3162034Z             local = True
2025-08-30T09:58:47.3162089Z     
2025-08-30T09:58:47.3162226Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3162297Z             self.create = True
2025-08-30T09:58:47.3162352Z     
2025-08-30T09:58:47.3162450Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3162530Z >           raise AttributeError(
2025-08-30T09:58:47.3162637Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3162693Z             )
2025-08-30T09:58:47.3163298Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3163303Z 
2025-08-30T09:58:47.3163639Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3163803Z __________________ test_backtest_pricecontours[None-lower-0] ___________________
2025-08-30T09:58:47.3163807Z 
2025-08-30T09:58:47.3163972Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3164032Z key = 'date'
2025-08-30T09:58:47.3164038Z 
2025-08-30T09:58:47.3164113Z     def get_loc(self, key):
2025-08-30T09:58:47.3164293Z         """
2025-08-30T09:58:47.3164446Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3164501Z     
2025-08-30T09:58:47.3164568Z         Parameters
2025-08-30T09:58:47.3164630Z         ----------
2025-08-30T09:58:47.3164690Z         key : label
2025-08-30T09:58:47.3164750Z     
2025-08-30T09:58:47.3164809Z         Returns
2025-08-30T09:58:47.3164868Z         -------
2025-08-30T09:58:47.3164992Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3165052Z     
2025-08-30T09:58:47.3165113Z         Examples
2025-08-30T09:58:47.3165172Z         --------
2025-08-30T09:58:47.3165265Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3165343Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3165400Z         1
2025-08-30T09:58:47.3165564Z     
2025-08-30T09:58:47.3165663Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3165743Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3165814Z         slice(1, 3, None)
2025-08-30T09:58:47.3165874Z     
2025-08-30T09:58:47.3165972Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3166054Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3166135Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3166197Z         """
2025-08-30T09:58:47.3166290Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3166348Z         try:
2025-08-30T09:58:47.3166441Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3166510Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3166514Z 
2025-08-30T09:58:47.3166682Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3166788Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3166951Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3167010Z     ???
2025-08-30T09:58:47.3167173Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3167233Z     ???
2025-08-30T09:58:47.3167491Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3167548Z     ???
2025-08-30T09:58:47.3167649Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3167653Z 
2025-08-30T09:58:47.3167708Z >   ???
2025-08-30T09:58:47.3167774Z E   KeyError: 'date'
2025-08-30T09:58:47.3167779Z 
2025-08-30T09:58:47.3167899Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3167903Z 
2025-08-30T09:58:47.3168057Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3168061Z 
2025-08-30T09:58:47.3168715Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.3168959Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65ddac3e10>
2025-08-30T09:58:47.3169171Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3169280Z protections = None, contour = 'lower', expected = 0
2025-08-30T09:58:47.3169285Z 
2025-08-30T09:58:47.3169372Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.3169463Z         "protections,contour,expected",
2025-08-30T09:58:47.3169521Z         [
2025-08-30T09:58:47.3169597Z             (None, "sine", 35),
2025-08-30T09:58:47.3169668Z             (None, "raise", 19),
2025-08-30T09:58:47.3169736Z             (None, "lower", 0),
2025-08-30T09:58:47.3169803Z             (None, "sine", 35),
2025-08-30T09:58:47.3169878Z             (None, "raise", 19),
2025-08-30T09:58:47.3170020Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.3170159Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.3170297Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.3170524Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.3170658Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.3170720Z         ],
2025-08-30T09:58:47.3170777Z     )
2025-08-30T09:58:47.3170860Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.3171012Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.3171078Z     ) -> None:
2025-08-30T09:58:47.3171146Z         if protections:
2025-08-30T09:58:47.3171263Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.3171363Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.3171419Z     
2025-08-30T09:58:47.3171592Z         patch_exchange(mocker)
2025-08-30T09:58:47.3171757Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.3171932Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.3172069Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.3172187Z         # over and over again should not cause different results
2025-08-30T09:58:47.3172247Z     
2025-08-30T09:58:47.3172328Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.3172420Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.3172556Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3172617Z     
2025-08-30T09:58:47.3172709Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.3172855Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3172941Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3172945Z 
2025-08-30T09:58:47.3173044Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.3173143Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3173301Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3173584Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3173737Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3173846Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3173920Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3174106Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3174194Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3174260Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3174356Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3174361Z 
2025-08-30T09:58:47.3174528Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3174592Z key = 'date'
2025-08-30T09:58:47.3174596Z 
2025-08-30T09:58:47.3174674Z     def get_loc(self, key):
2025-08-30T09:58:47.3174731Z         """
2025-08-30T09:58:47.3174886Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3174941Z     
2025-08-30T09:58:47.3175003Z         Parameters
2025-08-30T09:58:47.3175070Z         ----------
2025-08-30T09:58:47.3175129Z         key : label
2025-08-30T09:58:47.3175184Z     
2025-08-30T09:58:47.3175241Z         Returns
2025-08-30T09:58:47.3175307Z         -------
2025-08-30T09:58:47.3175429Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3175483Z     
2025-08-30T09:58:47.3175547Z         Examples
2025-08-30T09:58:47.3175606Z         --------
2025-08-30T09:58:47.3175695Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3175778Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3175839Z         1
2025-08-30T09:58:47.3175893Z     
2025-08-30T09:58:47.3175987Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3176208Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3176275Z         slice(1, 3, None)
2025-08-30T09:58:47.3176330Z     
2025-08-30T09:58:47.3176429Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3176514Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3176596Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3176654Z         """
2025-08-30T09:58:47.3176750Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3176808Z         try:
2025-08-30T09:58:47.3176895Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3176969Z         except KeyError as err:
2025-08-30T09:58:47.3177061Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3177259Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3177373Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3177434Z             ):
2025-08-30T09:58:47.3177517Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3177596Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3177670Z E           KeyError: 'date'
2025-08-30T09:58:47.3177674Z 
2025-08-30T09:58:47.3177862Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3178002Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3178122Z 2025-08-30 09:55:26 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3178250Z 2025-08-30 09:55:26 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3178328Z 2025-08-30 09:55:26 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3178423Z 2025-08-30 09:55:26 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3178552Z 2025-08-30 09:55:26 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3178673Z 2025-08-30 09:55:26 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3179000Z 2025-08-30 09:55:26 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3179498Z 2025-08-30 09:55:26 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3179912Z 2025-08-30 09:55:26 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3180008Z 2025-08-30 09:55:26 INFO Found no parameter file.
2025-08-30T09:58:47.3180297Z 2025-08-30 09:55:26 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3180473Z 2025-08-30 09:55:26 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.3180653Z 2025-08-30 09:55:26 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3180852Z 2025-08-30 09:55:26 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3181044Z 2025-08-30 09:55:26 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3181308Z 2025-08-30 09:55:26 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3181500Z 2025-08-30 09:55:26 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3181694Z 2025-08-30 09:55:26 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3181796Z 2025-08-30 09:55:26 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.3181908Z 2025-08-30 09:55:26 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3182023Z 2025-08-30 09:55:26 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3182174Z 2025-08-30 09:55:26 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3182335Z 2025-08-30 09:55:26 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3182465Z 2025-08-30 09:55:26 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3182694Z 2025-08-30 09:55:26 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3182997Z 2025-08-30 09:55:26 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3183193Z 2025-08-30 09:55:26 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3183306Z 2025-08-30 09:55:26 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3183519Z 2025-08-30 09:55:26 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3183649Z 2025-08-30 09:55:26 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3183822Z 2025-08-30 09:55:26 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3184057Z 2025-08-30 09:55:26 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3184192Z 2025-08-30 09:55:26 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3184339Z 2025-08-30 09:55:26 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3184457Z 2025-08-30 09:55:26 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3184600Z 2025-08-30 09:55:26 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3184754Z 2025-08-30 09:55:26 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3184897Z 2025-08-30 09:55:26 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3185042Z 2025-08-30 09:55:26 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3185153Z 2025-08-30 09:55:26 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3185257Z 2025-08-30 09:55:26 INFO Validating configuration ...
2025-08-30T09:58:47.3185608Z 2025-08-30 09:55:26 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3185894Z 2025-08-30 09:55:26 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3186331Z 2025-08-30 09:55:26 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3186524Z 2025-08-30 09:55:26 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3186709Z 2025-08-30 09:55:26 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3186848Z 2025-08-30 09:55:26 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3186961Z 2025-08-30 09:55:26 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3187193Z 2025-08-30 09:55:26 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3187307Z 2025-08-30 09:55:26 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3187461Z 2025-08-30 09:55:26 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3187658Z 2025-08-30 09:55:26 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3187821Z 2025-08-30 09:55:26 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3187914Z 2025-08-30 09:55:26 DEBUG Dropping last candle
2025-08-30T09:58:47.3188127Z 2025-08-30 09:55:26 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.3188307Z _____ test_backtest_start_multi_strat_caching[month-start_delta1-changed] ______
2025-08-30T09:58:47.3188312Z 
2025-08-30T09:58:47.3188892Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3189060Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8415ad0>
2025-08-30T09:58:47.3189224Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65dc797350>
2025-08-30T09:58:47.3189419Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3189668Z run_id = 'changed', start_delta = {'days': 1}, cache = 'month'
2025-08-30T09:58:47.3189672Z 
2025-08-30T09:58:47.3189788Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3189904Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3190124Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3190276Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3190370Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3190532Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3190593Z     ):
2025-08-30T09:58:47.3190746Z         default_conf.update(
2025-08-30T09:58:47.3190808Z             {
2025-08-30T09:58:47.3190890Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3191040Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3191194Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3198965Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3199127Z             }
2025-08-30T09:58:47.3199239Z         )
2025-08-30T09:58:47.3199350Z         patch_exchange(mocker)
2025-08-30T09:58:47.3199440Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3199515Z             return_value={
2025-08-30T09:58:47.3199642Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3199729Z                 "config": default_conf,
2025-08-30T09:58:47.3199800Z                 "locks": [],
2025-08-30T09:58:47.3199874Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3199955Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3200051Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3200134Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3200211Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3200295Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3200370Z                 "final_balance": 1000,
2025-08-30T09:58:47.3200427Z             }
2025-08-30T09:58:47.3200488Z         )
2025-08-30T09:58:47.3200557Z         mocker.patch(
2025-08-30T09:58:47.3200751Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3200864Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3200926Z         )
2025-08-30T09:58:47.3201165Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3201377Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3201437Z     
2025-08-30T09:58:47.3201544Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3201694Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3201768Z         if cache == "none":
2025-08-30T09:58:47.3201872Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3201942Z         elif cache == "day":
2025-08-30T09:58:47.3202038Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3202112Z         elif cache == "week":
2025-08-30T09:58:47.3202213Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3202284Z         elif cache == "month":
2025-08-30T09:58:47.3202382Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3202467Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3202535Z             return_value={
2025-08-30T09:58:47.3202706Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3202903Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3202964Z             }
2025-08-30T09:58:47.3203020Z         )
2025-08-30T09:58:47.3203108Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3203597Z             side_effect=[
2025-08-30T09:58:47.3203676Z                 {
2025-08-30T09:58:47.3203797Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3203888Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3204005Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3204063Z                 },
2025-08-30T09:58:47.3204127Z                 {
2025-08-30T09:58:47.3204229Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3204314Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3204428Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3204485Z                 },
2025-08-30T09:58:47.3204668Z             ]
2025-08-30T09:58:47.3204735Z         )
2025-08-30T09:58:47.3204806Z         mocker.patch(
2025-08-30T09:58:47.3204888Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3204962Z             return_value=[
2025-08-30T09:58:47.3205172Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3205231Z             ],
2025-08-30T09:58:47.3205287Z         )
2025-08-30T09:58:47.3205373Z         mocker.patch.multiple(
2025-08-30T09:58:47.3205480Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3205586Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3205678Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3205738Z         )
2025-08-30T09:58:47.3205995Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3206002Z 
2025-08-30T09:58:47.3206099Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3206209Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3206394Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3206472Z     return self._start_patch(
2025-08-30T09:58:47.3206662Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3206740Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3206804Z                        ^^^^^^^^^
2025-08-30T09:58:47.3207024Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3207095Z     result = self.__enter__()
2025-08-30T09:58:47.3207156Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3207378Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3207467Z     original, local = self.get_original()
2025-08-30T09:58:47.3207532Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3207635Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3207641Z 
2025-08-30T09:58:47.3207762Z self = <unittest.mock._patch object at 0x7f659414e990>
2025-08-30T09:58:47.3207770Z 
2025-08-30T09:58:47.3207843Z     def get_original(self):
2025-08-30T09:58:47.3207917Z         target = self.getter()
2025-08-30T09:58:47.3207991Z         name = self.attribute
2025-08-30T09:58:47.3208046Z     
2025-08-30T09:58:47.3208115Z         original = DEFAULT
2025-08-30T09:58:47.3208180Z         local = False
2025-08-30T09:58:47.3208239Z     
2025-08-30T09:58:47.3208297Z         try:
2025-08-30T09:58:47.3208382Z             original = target.__dict__[name]
2025-08-30T09:58:47.3208472Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3208564Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3208621Z         else:
2025-08-30T09:58:47.3208687Z             local = True
2025-08-30T09:58:47.3208746Z     
2025-08-30T09:58:47.3208873Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3208944Z             self.create = True
2025-08-30T09:58:47.3209005Z     
2025-08-30T09:58:47.3209223Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3209302Z >           raise AttributeError(
2025-08-30T09:58:47.3209418Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3209474Z             )
2025-08-30T09:58:47.3210079Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3210084Z 
2025-08-30T09:58:47.3210330Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3210489Z ____________ test_backtest_one_detail_futures[True--0.018054162-10] ____________
2025-08-30T09:58:47.3210493Z 
2025-08-30T09:58:47.3211038Z default_conf_usdt = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.3211207Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e474c850>
2025-08-30T09:58:47.3211406Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3211551Z use_detail = True, exp_funding_fee = -0.018054162, exp_ff_updates = 10
2025-08-30T09:58:47.3211556Z 
2025-08-30T09:58:47.3211642Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.3211744Z         "use_detail,exp_funding_fee, exp_ff_updates",
2025-08-30T09:58:47.3211801Z         [
2025-08-30T09:58:47.3211873Z             (True, -0.018054162, 10),
2025-08-30T09:58:47.3211948Z             (False, -0.01780296, 6),
2025-08-30T09:58:47.3212005Z         ],
2025-08-30T09:58:47.3212060Z     )
2025-08-30T09:58:47.3212147Z     def test_backtest_one_detail_futures(
2025-08-30T09:58:47.3212353Z         default_conf_usdt, mocker, testdatadir, use_detail, exp_funding_fee, exp_ff_updates
2025-08-30T09:58:47.3212413Z     ) -> None:
2025-08-30T09:58:47.3212510Z         default_conf_usdt["use_exit_signal"] = False
2025-08-30T09:58:47.3212611Z         default_conf_usdt["trading_mode"] = "futures"
2025-08-30T09:58:47.3212701Z         default_conf_usdt["margin_mode"] = "isolated"
2025-08-30T09:58:47.3212834Z         default_conf_usdt["candle_type_def"] = CandleType.FUTURES
2025-08-30T09:58:47.3212894Z     
2025-08-30T09:58:47.3212969Z         patch_exchange(mocker)
2025-08-30T09:58:47.3213128Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.3213299Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.3213512Z         mocker.patch(
2025-08-30T09:58:47.3213755Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3213863Z             PropertyMock(return_value=["XRP/USDT:USDT"]),
2025-08-30T09:58:47.3213933Z         )
2025-08-30T09:58:47.3214115Z         mocker.patch(f"{EXMS}.get_maintenance_ratio_and_amt", return_value=(0.01, 0.01))
2025-08-30T09:58:47.3214202Z         default_conf_usdt["timeframe"] = "1h"
2025-08-30T09:58:47.3214276Z         if use_detail:
2025-08-30T09:58:47.3214376Z             default_conf_usdt["timeframe_detail"] = "5m"
2025-08-30T09:58:47.3214432Z     
2025-08-30T09:58:47.3214520Z         def advise_entry(df, *args, **kwargs):
2025-08-30T09:58:47.3214610Z             # Mock function to force several entries
2025-08-30T09:58:47.3214699Z             df.loc[(df["rsi"] < 40), "enter_long"] = 1
2025-08-30T09:58:47.3214762Z             return df
2025-08-30T09:58:47.3214822Z     
2025-08-30T09:58:47.3214927Z         def custom_entry_price(proposed_rate, **kwargs):
2025-08-30T09:58:47.3215007Z             return proposed_rate * 0.997
2025-08-30T09:58:47.3215067Z     
2025-08-30T09:58:47.3215161Z         default_conf_usdt["max_open_trades"] = 10
2025-08-30T09:58:47.3215217Z     
2025-08-30T09:58:47.3215319Z         backtesting = Backtesting(default_conf_usdt)
2025-08-30T09:58:47.3215481Z         ff_spy = mocker.spy(backtesting.exchange, "calculate_funding_fees")
2025-08-30T09:58:47.3215686Z     
2025-08-30T09:58:47.3215819Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3215962Z         backtesting.strategy.populate_entry_trend = advise_entry
2025-08-30T09:58:47.3216110Z         backtesting.strategy.custom_entry_price = custom_entry_price
2025-08-30T09:58:47.3216181Z         pair = "XRP/USDT:USDT"
2025-08-30T09:58:47.3216299Z         # Pick a timerange adapted to the pair we use to test
2025-08-30T09:58:47.3216428Z         timerange = TimeRange.parse_timerange("20211117-20211119")
2025-08-30T09:58:47.3216504Z         data = history.load_data(
2025-08-30T09:58:47.3216585Z             datadir=Path(testdatadir),
2025-08-30T09:58:47.3216658Z             timeframe="1h",
2025-08-30T09:58:47.3216728Z             pairs=[pair],
2025-08-30T09:58:47.3216977Z             timerange=timerange,
2025-08-30T09:58:47.3217082Z             candle_type=CandleType.FUTURES,
2025-08-30T09:58:47.3217139Z         )
2025-08-30T09:58:47.3217221Z >       backtesting._load_bt_data_detail()
2025-08-30T09:58:47.3217231Z 
2025-08-30T09:58:47.3217326Z tests/optimize/test_backtesting.py:1053: 
2025-08-30T09:58:47.3217430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3217578Z freqtrade/optimize/backtesting.py:403: in _load_bt_data_detail
2025-08-30T09:58:47.3217730Z     self.futures_data[pair] = self.exchange.combine_funding_and_mark(
2025-08-30T09:58:47.3217884Z freqtrade/exchange/exchange.py:3649: in combine_funding_and_mark
2025-08-30T09:58:47.3217957Z     return mark_rates.merge(
2025-08-30T09:58:47.3218127Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:10839: in merge
2025-08-30T09:58:47.3218193Z     return merge(
2025-08-30T09:58:47.3218380Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:170: in merge
2025-08-30T09:58:47.3218457Z     op = _MergeOperation(
2025-08-30T09:58:47.3218656Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:794: in __init__
2025-08-30T09:58:47.3218734Z     ) = self._get_merge_keys()
2025-08-30T09:58:47.3218798Z         ^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3219021Z .venv/lib/python3.11/site-packages/pandas/core/reshape/merge.py:1298: in _get_merge_keys
2025-08-30T09:58:47.3219154Z     right_keys.append(right._get_label_or_level_values(rk))
2025-08-30T09:58:47.3219235Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3219339Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3219343Z 
2025-08-30T09:58:47.3219459Z self =                        index    open  high  low  close  volume
2025-08-30T09:58:47.3219611Z 0  2021-11-18 00:00:00+00:00  0.0001   0.0  0.0    0.0 ... 0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.3219717Z 90 2021-12-18 00:00:00+00:00  0.0001   0.0  0.0    0.0     0.0
2025-08-30T09:58:47.3219722Z 
2025-08-30T09:58:47.3219792Z [91 rows x 6 columns]
2025-08-30T09:58:47.3219858Z key = 'date', axis = 0
2025-08-30T09:58:47.3219863Z 
2025-08-30T09:58:47.3219926Z     @final
2025-08-30T09:58:47.3220116Z     def _get_label_or_level_values(self, key: Level, axis: AxisInt = 0) -> ArrayLike:
2025-08-30T09:58:47.3220173Z         """
2025-08-30T09:58:47.3220325Z         Return a 1-D array of values associated with `key`, a label or level
2025-08-30T09:58:47.3220400Z         from the given `axis`.
2025-08-30T09:58:47.3220494Z     
2025-08-30T09:58:47.3220624Z         Retrieval logic:
2025-08-30T09:58:47.3220885Z           - (axis=0): Return column values if `key` matches a column label.
2025-08-30T09:58:47.3221150Z             Otherwise return index level values if `key` matches an index
2025-08-30T09:58:47.3221212Z             level.
2025-08-30T09:58:47.3221342Z           - (axis=1): Return row values if `key` matches an index label.
2025-08-30T09:58:47.3221497Z             Otherwise return column level values if 'key' matches a column
2025-08-30T09:58:47.3221556Z             level
2025-08-30T09:58:47.3221610Z     
2025-08-30T09:58:47.3221677Z         Parameters
2025-08-30T09:58:47.3221842Z         ----------
2025-08-30T09:58:47.3221909Z         key : Hashable
2025-08-30T09:58:47.3221982Z             Label or level name.
2025-08-30T09:58:47.3222058Z         axis : int, default 0
2025-08-30T09:58:47.3222212Z             Axis that levels are associated with (0 for index, 1 for columns)
2025-08-30T09:58:47.3222267Z     
2025-08-30T09:58:47.3222325Z         Returns
2025-08-30T09:58:47.3222387Z         -------
2025-08-30T09:58:47.3222467Z         np.ndarray or ExtensionArray
2025-08-30T09:58:47.3222521Z     
2025-08-30T09:58:47.3222579Z         Raises
2025-08-30T09:58:47.3222642Z         ------
2025-08-30T09:58:47.3222700Z         KeyError
2025-08-30T09:58:47.3222800Z             if `key` matches neither a label nor a level
2025-08-30T09:58:47.3222863Z         ValueError
2025-08-30T09:58:47.3223028Z             if `key` matches multiple labels
2025-08-30T09:58:47.3223088Z         """
2025-08-30T09:58:47.3223169Z         axis = self._get_axis_number(axis)
2025-08-30T09:58:47.3223315Z         other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]
2025-08-30T09:58:47.3223484Z     
2025-08-30T09:58:47.3223584Z         if self._is_label_reference(key, axis=axis):
2025-08-30T09:58:47.3223705Z             self._check_label_or_level_ambiguity(key, axis=axis)
2025-08-30T09:58:47.3223812Z             values = self.xs(key, axis=other_axes[0])._values
2025-08-30T09:58:47.3223912Z         elif self._is_level_reference(key, axis=axis):
2025-08-30T09:58:47.3224253Z             values = self.axes[axis].get_level_values(key)._values
2025-08-30T09:58:47.3224311Z         else:
2025-08-30T09:58:47.3224384Z >           raise KeyError(key)
2025-08-30T09:58:47.3224455Z E           KeyError: 'date'
2025-08-30T09:58:47.3224460Z 
2025-08-30T09:58:47.3224643Z .venv/lib/python3.11/site-packages/pandas/core/generic.py:1911: KeyError
2025-08-30T09:58:47.3224784Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3224895Z 2025-08-30 09:55:30 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3225030Z 2025-08-30 09:55:30 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3225107Z 2025-08-30 09:55:30 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3225200Z 2025-08-30 09:55:30 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3225326Z 2025-08-30 09:55:30 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3225443Z 2025-08-30 09:55:30 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3225774Z 2025-08-30 09:55:30 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3226314Z 2025-08-30 09:55:30 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3226742Z 2025-08-30 09:55:30 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3226842Z 2025-08-30 09:55:30 INFO Found no parameter file.
2025-08-30T09:58:47.3227136Z 2025-08-30 09:55:30 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3227315Z 2025-08-30 09:55:30 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.3227495Z 2025-08-30 09:55:30 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3227693Z 2025-08-30 09:55:30 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.3227884Z 2025-08-30 09:55:30 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.3228148Z 2025-08-30 09:55:30 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3228351Z 2025-08-30 09:55:30 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.3228547Z 2025-08-30 09:55:30 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.3228889Z 2025-08-30 09:55:30 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3228994Z 2025-08-30 09:55:30 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.3229104Z 2025-08-30 09:55:30 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3229221Z 2025-08-30 09:55:30 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3229371Z 2025-08-30 09:55:30 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3229531Z 2025-08-30 09:55:30 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3229659Z 2025-08-30 09:55:30 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3229899Z 2025-08-30 09:55:30 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3230208Z 2025-08-30 09:55:30 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3230401Z 2025-08-30 09:55:30 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3230514Z 2025-08-30 09:55:30 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.3230672Z 2025-08-30 09:55:30 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.3230896Z 2025-08-30 09:55:30 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3231189Z 2025-08-30 09:55:30 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3231400Z 2025-08-30 09:55:30 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.3231608Z 2025-08-30 09:55:30 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3231858Z 2025-08-30 09:55:30 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3231992Z 2025-08-30 09:55:30 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3232141Z 2025-08-30 09:55:30 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3232305Z 2025-08-30 09:55:30 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3232460Z 2025-08-30 09:55:30 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3232608Z 2025-08-30 09:55:30 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3232721Z 2025-08-30 09:55:30 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.3232832Z 2025-08-30 09:55:30 INFO Validating configuration ...
2025-08-30T09:58:47.3233195Z 2025-08-30 09:55:30 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3233594Z 2025-08-30 09:55:30 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3234045Z 2025-08-30 09:55:30 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3234271Z 2025-08-30 09:55:30 DEBUG Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3234496Z 2025-08-30 09:55:30 WARNING Pair ETH/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3234707Z 2025-08-30 09:55:30 DEBUG Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3234930Z 2025-08-30 09:55:30 WARNING Pair LTC/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3235136Z 2025-08-30 09:55:30 DEBUG Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3235348Z 2025-08-30 09:55:30 WARNING Pair XRP/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3235556Z 2025-08-30 09:55:30 DEBUG Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3235773Z 2025-08-30 09:55:30 WARNING Pair NEO/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3235978Z 2025-08-30 09:55:30 DEBUG Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3236341Z 2025-08-30 09:55:30 WARNING Pair TKN/USDT is not tradable with Freqtrade. Removing it from whitelist..
2025-08-30T09:58:47.3236446Z 2025-08-30 09:55:30 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.3236625Z 2025-08-30 09:55:30 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3236765Z 2025-08-30 09:55:30 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3236881Z 2025-08-30 09:55:30 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3237109Z 2025-08-30 09:55:30 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3237221Z 2025-08-30 09:55:30 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3237482Z 2025-08-30 09:55:30 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3237674Z 2025-08-30 09:55:30 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3237841Z 2025-08-30 09:55:30 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3237993Z _____________________ test_backtest_multi_pair[0-LTC/BTC] ______________________
2025-08-30T09:58:47.3237998Z 
2025-08-30T09:58:47.3238183Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3238246Z key = 'date'
2025-08-30T09:58:47.3238251Z 
2025-08-30T09:58:47.3238328Z     def get_loc(self, key):
2025-08-30T09:58:47.3238386Z         """
2025-08-30T09:58:47.3238540Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3238598Z     
2025-08-30T09:58:47.3238662Z         Parameters
2025-08-30T09:58:47.3238723Z         ----------
2025-08-30T09:58:47.3238784Z         key : label
2025-08-30T09:58:47.3238846Z     
2025-08-30T09:58:47.3238903Z         Returns
2025-08-30T09:58:47.3238963Z         -------
2025-08-30T09:58:47.3239089Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3239148Z     
2025-08-30T09:58:47.3239209Z         Examples
2025-08-30T09:58:47.3239268Z         --------
2025-08-30T09:58:47.3239361Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3239439Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3239497Z         1
2025-08-30T09:58:47.3239558Z     
2025-08-30T09:58:47.3239657Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3239735Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3239806Z         slice(1, 3, None)
2025-08-30T09:58:47.3239859Z     
2025-08-30T09:58:47.3239961Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3240048Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3240130Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3240189Z         """
2025-08-30T09:58:47.3240282Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3240343Z         try:
2025-08-30T09:58:47.3240435Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3240505Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3240509Z 
2025-08-30T09:58:47.3240686Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3240789Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3240954Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3241014Z     ???
2025-08-30T09:58:47.3241169Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3241225Z     ???
2025-08-30T09:58:47.3241481Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3241541Z     ???
2025-08-30T09:58:47.3241642Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3241647Z 
2025-08-30T09:58:47.3241701Z >   ???
2025-08-30T09:58:47.3241774Z E   KeyError: 'date'
2025-08-30T09:58:47.3241865Z 
2025-08-30T09:58:47.3241986Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3241991Z 
2025-08-30T09:58:47.3242222Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3242229Z 
2025-08-30T09:58:47.3243018Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.3243151Z fee = <MagicMock id='140075130578576'>
2025-08-30T09:58:47.3243445Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65ddd29d10>, tres = 0
2025-08-30T09:58:47.3243516Z pair = 'LTC/BTC'
2025-08-30T09:58:47.3243716Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3243865Z 
2025-08-30T09:58:47.3244001Z     @pytest.mark.parametrize("pair", ["ADA/BTC", "LTC/BTC"])
2025-08-30T09:58:47.3244105Z     @pytest.mark.parametrize("tres", [0, 20, 30])
2025-08-30T09:58:47.3244303Z     def test_backtest_multi_pair(default_conf, fee, mocker, tres, pair, testdatadir):
2025-08-30T09:58:47.3244432Z         def _trend_alternate_hold(dataframe=None, metadata=None):
2025-08-30T09:58:47.3244492Z             """
2025-08-30T09:58:47.3244657Z             Buy every xth candle - sell every other xth -2 (hold on to pairs a bit)
2025-08-30T09:58:47.3244714Z             """
2025-08-30T09:58:47.3244812Z             if metadata["pair"] in ("ETH/BTC", "LTC/BTC"):
2025-08-30T09:58:47.3244882Z                 multi = 20
2025-08-30T09:58:47.3244940Z             else:
2025-08-30T09:58:47.3245003Z                 multi = 18
2025-08-30T09:58:47.3245167Z             dataframe["enter_long"] = np.where(dataframe.index % multi == 0, 1, 0)
2025-08-30T09:58:47.3245359Z             dataframe["exit_long"] = np.where((dataframe.index + multi - 2) % multi == 0, 1, 0)
2025-08-30T09:58:47.3245438Z             dataframe["enter_short"] = 0
2025-08-30T09:58:47.3245520Z             dataframe["exit_short"] = 0
2025-08-30T09:58:47.3245594Z             return dataframe
2025-08-30T09:58:47.3245648Z     
2025-08-30T09:58:47.3245730Z         default_conf["runmode"] = "backtest"
2025-08-30T09:58:47.3245897Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.3246063Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.3246146Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.3246222Z         patch_exchange(mocker)
2025-08-30T09:58:47.3246276Z     
2025-08-30T09:58:47.3246403Z         pairs = ["ADA/BTC", "DASH/BTC", "ETH/BTC", "LTC/BTC", "NXT/BTC"]
2025-08-30T09:58:47.3246583Z         data = history.load_data(datadir=testdatadir, timeframe="5m", pairs=pairs)
2025-08-30T09:58:47.3246679Z         # Only use 500 lines to increase performance
2025-08-30T09:58:47.3246760Z         data = trim_dictlist(data, -500)
2025-08-30T09:58:47.3246813Z     
2025-08-30T09:58:47.3246938Z         # Remove data for one pair from the beginning of the data
2025-08-30T09:58:47.3247004Z         if tres > 0:
2025-08-30T09:58:47.3247101Z             data[pair] = data[pair][tres:].reset_index()
2025-08-30T09:58:47.3247181Z         default_conf["timeframe"] = "5m"
2025-08-30T09:58:47.3247313Z         default_conf["max_open_trades"] = 3
2025-08-30T09:58:47.3247416Z     
2025-08-30T09:58:47.3247587Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.3247778Z         vr_spy = mocker.spy(backtesting, "validate_row")
2025-08-30T09:58:47.3247969Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3248090Z         backtesting.strategy.bot_loop_start = MagicMock()
2025-08-30T09:58:47.3248267Z         backtesting.strategy.advise_entry = _trend_alternate_hold  # Override
2025-08-30T09:58:47.3248438Z         backtesting.strategy.advise_exit = _trend_alternate_hold  # Override
2025-08-30T09:58:47.3248492Z     
2025-08-30T09:58:47.3248647Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3248857Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3248863Z 
2025-08-30T09:58:47.3248955Z tests/optimize/test_backtesting.py:1556: 
2025-08-30T09:58:47.3249058Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3249207Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3249295Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3249426Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3249534Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3249604Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3249887Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3249982Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3250046Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3250144Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3250153Z 
2025-08-30T09:58:47.3250344Z self = Index(['level_0', 'index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3250404Z key = 'date'
2025-08-30T09:58:47.3250409Z 
2025-08-30T09:58:47.3250479Z     def get_loc(self, key):
2025-08-30T09:58:47.3250538Z         """
2025-08-30T09:58:47.3250690Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3250745Z     
2025-08-30T09:58:47.3250808Z         Parameters
2025-08-30T09:58:47.3250874Z         ----------
2025-08-30T09:58:47.3250934Z         key : label
2025-08-30T09:58:47.3250988Z     
2025-08-30T09:58:47.3251048Z         Returns
2025-08-30T09:58:47.3251107Z         -------
2025-08-30T09:58:47.3251233Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3251287Z     
2025-08-30T09:58:47.3251349Z         Examples
2025-08-30T09:58:47.3251408Z         --------
2025-08-30T09:58:47.3251499Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3251580Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3251637Z         1
2025-08-30T09:58:47.3251690Z     
2025-08-30T09:58:47.3251781Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3251862Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3251928Z         slice(1, 3, None)
2025-08-30T09:58:47.3251982Z     
2025-08-30T09:58:47.3252083Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3252164Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3252245Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3252301Z         """
2025-08-30T09:58:47.3252395Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3252457Z         try:
2025-08-30T09:58:47.3252548Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3252626Z         except KeyError as err:
2025-08-30T09:58:47.3252713Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3252805Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3252917Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3252974Z             ):
2025-08-30T09:58:47.3253056Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3253132Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3253208Z E           KeyError: 'date'
2025-08-30T09:58:47.3253213Z 
2025-08-30T09:58:47.3253606Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3253834Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3254169Z 2025-08-30 09:55:30 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5720 - after: 5760 - 0.70%
2025-08-30T09:58:47.3254494Z 2025-08-30 09:55:30 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.3254610Z 2025-08-30 09:55:30 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3254888Z 2025-08-30 09:55:30 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3254967Z 2025-08-30 09:55:30 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3255061Z 2025-08-30 09:55:30 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3255186Z 2025-08-30 09:55:30 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3255303Z 2025-08-30 09:55:30 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3255626Z 2025-08-30 09:55:30 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3256122Z 2025-08-30 09:55:30 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3256646Z 2025-08-30 09:55:30 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3256744Z 2025-08-30 09:55:30 INFO Found no parameter file.
2025-08-30T09:58:47.3257035Z 2025-08-30 09:55:30 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3257211Z 2025-08-30 09:55:30 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3257389Z 2025-08-30 09:55:30 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3257585Z 2025-08-30 09:55:30 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3257775Z 2025-08-30 09:55:30 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3258038Z 2025-08-30 09:55:30 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3258229Z 2025-08-30 09:55:30 INFO Override strategy 'max_open_trades' with value in config file: 3.
2025-08-30T09:58:47.3258427Z 2025-08-30 09:55:30 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3258535Z 2025-08-30 09:55:30 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3258640Z 2025-08-30 09:55:30 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3258760Z 2025-08-30 09:55:30 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3258908Z 2025-08-30 09:55:30 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3259064Z 2025-08-30 09:55:30 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3259196Z 2025-08-30 09:55:30 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3259335Z 2025-08-30 09:55:30 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3259642Z 2025-08-30 09:55:30 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3259835Z 2025-08-30 09:55:30 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3259952Z 2025-08-30 09:55:30 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3260059Z 2025-08-30 09:55:30 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3260186Z 2025-08-30 09:55:30 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3260351Z 2025-08-30 09:55:30 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3260467Z 2025-08-30 09:55:30 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3260589Z 2025-08-30 09:55:30 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3260735Z 2025-08-30 09:55:30 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3260852Z 2025-08-30 09:55:30 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3260994Z 2025-08-30 09:55:30 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3261149Z 2025-08-30 09:55:30 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3261290Z 2025-08-30 09:55:30 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3261519Z 2025-08-30 09:55:30 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3261631Z 2025-08-30 09:55:30 INFO Strategy using max_open_trades: 3
2025-08-30T09:58:47.3261733Z 2025-08-30 09:55:30 INFO Validating configuration ...
2025-08-30T09:58:47.3262082Z 2025-08-30 09:55:30 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3262369Z 2025-08-30 09:55:30 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3262802Z 2025-08-30 09:55:30 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3263071Z 2025-08-30 09:55:30 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3263252Z 2025-08-30 09:55:30 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3263571Z 2025-08-30 09:55:30 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3263707Z 2025-08-30 09:55:30 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3263943Z 2025-08-30 09:55:30 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3264054Z 2025-08-30 09:55:30 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3264208Z 2025-08-30 09:55:30 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3264390Z 2025-08-30 09:55:30 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3264554Z 2025-08-30 09:55:30 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3264738Z ______ test_backtest_start_multi_strat_caching[none-start_delta3-changed] ______
2025-08-30T09:58:47.3264743Z 
2025-08-30T09:58:47.3265328Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3265494Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6594451410>
2025-08-30T09:58:47.3265654Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f659485b850>
2025-08-30T09:58:47.3265847Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3265973Z run_id = 'changed', start_delta = {'weeks': 4}, cache = 'none'
2025-08-30T09:58:47.3265979Z 
2025-08-30T09:58:47.3266092Z     @pytest.mark.filterwarnings("ignore:deprecated")
2025-08-30T09:58:47.3266208Z     @pytest.mark.parametrize("run_id", ["2", "changed"])
2025-08-30T09:58:47.3266434Z     @pytest.mark.parametrize("start_delta", [{"days": 0}, {"days": 1}, {"weeks": 1}, {"weeks": 4}])
2025-08-30T09:58:47.3266587Z     @pytest.mark.parametrize("cache", constants.BACKTEST_CACHE_AGE)
2025-08-30T09:58:47.3266682Z     def test_backtest_start_multi_strat_caching(
2025-08-30T09:58:47.3266849Z         default_conf, mocker, caplog, testdatadir, run_id, start_delta, cache
2025-08-30T09:58:47.3266906Z     ):
2025-08-30T09:58:47.3266982Z         default_conf.update(
2025-08-30T09:58:47.3267042Z             {
2025-08-30T09:58:47.3267122Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3267199Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3267273Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3267361Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3267417Z             }
2025-08-30T09:58:47.3267473Z         )
2025-08-30T09:58:47.3267551Z         patch_exchange(mocker)
2025-08-30T09:58:47.3267628Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3267695Z             return_value={
2025-08-30T09:58:47.3267809Z                 "results": pd.DataFrame(columns=BT_DATA_COLUMNS),
2025-08-30T09:58:47.3267888Z                 "config": default_conf,
2025-08-30T09:58:47.3267952Z                 "locks": [],
2025-08-30T09:58:47.3268154Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3268237Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3268311Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3268391Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3268468Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3268547Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3268620Z                 "final_balance": 1000,
2025-08-30T09:58:47.3268676Z             }
2025-08-30T09:58:47.3268734Z         )
2025-08-30T09:58:47.3268801Z         mocker.patch(
2025-08-30T09:58:47.3268984Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3269089Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3269249Z         )
2025-08-30T09:58:47.3269484Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3269695Z         mocker.patch("freqtrade.optimize.backtesting.show_backtest_results", MagicMock())
2025-08-30T09:58:47.3269756Z     
2025-08-30T09:58:47.3269856Z         now = min_backtest_date = datetime.now(tz=UTC)
2025-08-30T09:58:47.3269998Z         start_time = now - timedelta(**start_delta) + timedelta(hours=1)
2025-08-30T09:58:47.3270068Z         if cache == "none":
2025-08-30T09:58:47.3270163Z             min_backtest_date = now + timedelta(days=1)
2025-08-30T09:58:47.3270231Z         elif cache == "day":
2025-08-30T09:58:47.3270324Z             min_backtest_date = now - timedelta(days=1)
2025-08-30T09:58:47.3270394Z         elif cache == "week":
2025-08-30T09:58:47.3270493Z             min_backtest_date = now - timedelta(weeks=1)
2025-08-30T09:58:47.3270560Z         elif cache == "month":
2025-08-30T09:58:47.3270659Z             min_backtest_date = now - timedelta(weeks=4)
2025-08-30T09:58:47.3270745Z         load_backtest_metadata = MagicMock(
2025-08-30T09:58:47.3270813Z             return_value={
2025-08-30T09:58:47.3270992Z                 "StrategyTestV2": {"run_id": "1", "backtest_start_time": now.timestamp()},
2025-08-30T09:58:47.3271179Z                 "StrategyTestV3": {"run_id": run_id, "backtest_start_time": start_time.timestamp()},
2025-08-30T09:58:47.3271234Z             }
2025-08-30T09:58:47.3271292Z         )
2025-08-30T09:58:47.3271372Z         load_backtest_stats = MagicMock(
2025-08-30T09:58:47.3271439Z             side_effect=[
2025-08-30T09:58:47.3271495Z                 {
2025-08-30T09:58:47.3271604Z                     "metadata": {"StrategyTestV2": {"run_id": "1"}},
2025-08-30T09:58:47.3271690Z                     "strategy": {"StrategyTestV2": {}},
2025-08-30T09:58:47.3271804Z                     "strategy_comparison": [{"key": "StrategyTestV2"}],
2025-08-30T09:58:47.3271865Z                 },
2025-08-30T09:58:47.3271923Z                 {
2025-08-30T09:58:47.3272034Z                     "metadata": {"StrategyTestV3": {"run_id": "2"}},
2025-08-30T09:58:47.3272193Z                     "strategy": {"StrategyTestV3": {}},
2025-08-30T09:58:47.3272414Z                     "strategy_comparison": [{"key": "StrategyTestV3"}],
2025-08-30T09:58:47.3272514Z                 },
2025-08-30T09:58:47.3272615Z             ]
2025-08-30T09:58:47.3272719Z         )
2025-08-30T09:58:47.3272791Z         mocker.patch(
2025-08-30T09:58:47.3272871Z             "pathlib.Path.glob",
2025-08-30T09:58:47.3272941Z             return_value=[
2025-08-30T09:58:47.3273150Z                 Path(datetime.strftime(datetime.now(), "backtest-result-%Y-%m-%d_%H-%M-%S.json"))
2025-08-30T09:58:47.3273207Z             ],
2025-08-30T09:58:47.3273260Z         )
2025-08-30T09:58:47.3273450Z         mocker.patch.multiple(
2025-08-30T09:58:47.3273557Z             "freqtrade.data.btanalysis.bt_fileutils",
2025-08-30T09:58:47.3273668Z             load_backtest_metadata=load_backtest_metadata,
2025-08-30T09:58:47.3273762Z             load_backtest_stats=load_backtest_stats,
2025-08-30T09:58:47.3273817Z         )
2025-08-30T09:58:47.3274072Z >       mocker.patch("freqtrade.optimize.backtesting.get_strategy_run_id", side_effect=["1", "2", "2"])
2025-08-30T09:58:47.3274211Z 
2025-08-30T09:58:47.3274310Z tests/optimize/test_backtesting.py:2642: 
2025-08-30T09:58:47.3274413Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3274597Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:439: in __call__
2025-08-30T09:58:47.3274672Z     return self._start_patch(
2025-08-30T09:58:47.3274859Z .venv/lib/python3.11/site-packages/pytest_mock/plugin.py:257: in _start_patch
2025-08-30T09:58:47.3274934Z     mocked: MockType = p.start()
2025-08-30T09:58:47.3274996Z                        ^^^^^^^^^
2025-08-30T09:58:47.3275212Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1594: in start
2025-08-30T09:58:47.3275411Z     result = self.__enter__()
2025-08-30T09:58:47.3275477Z              ^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3275708Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3275797Z     original, local = self.get_original()
2025-08-30T09:58:47.3275862Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3275961Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3275970Z 
2025-08-30T09:58:47.3276086Z self = <unittest.mock._patch object at 0x7f65dc58b810>
2025-08-30T09:58:47.3276091Z 
2025-08-30T09:58:47.3276163Z     def get_original(self):
2025-08-30T09:58:47.3276235Z         target = self.getter()
2025-08-30T09:58:47.3276307Z         name = self.attribute
2025-08-30T09:58:47.3276363Z     
2025-08-30T09:58:47.3276429Z         original = DEFAULT
2025-08-30T09:58:47.3276496Z         local = False
2025-08-30T09:58:47.3276549Z     
2025-08-30T09:58:47.3276606Z         try:
2025-08-30T09:58:47.3276691Z             original = target.__dict__[name]
2025-08-30T09:58:47.3276778Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3276870Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3276929Z         else:
2025-08-30T09:58:47.3276997Z             local = True
2025-08-30T09:58:47.3277051Z     
2025-08-30T09:58:47.3277175Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3277250Z             self.create = True
2025-08-30T09:58:47.3277303Z     
2025-08-30T09:58:47.3277397Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3277471Z >           raise AttributeError(
2025-08-30T09:58:47.3277584Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3277641Z             )
2025-08-30T09:58:47.3278244Z E           AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.3278250Z 
2025-08-30T09:58:47.3278494Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3278662Z _______________ test_backtest_pricecontours[protections5-sine-9] _______________
2025-08-30T09:58:47.3278667Z 
2025-08-30T09:58:47.3278827Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3278889Z key = 'date'
2025-08-30T09:58:47.3278894Z 
2025-08-30T09:58:47.3278964Z     def get_loc(self, key):
2025-08-30T09:58:47.3279021Z         """
2025-08-30T09:58:47.3279175Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3279229Z     
2025-08-30T09:58:47.3279290Z         Parameters
2025-08-30T09:58:47.3279351Z         ----------
2025-08-30T09:58:47.3279415Z         key : label
2025-08-30T09:58:47.3279470Z     
2025-08-30T09:58:47.3279527Z         Returns
2025-08-30T09:58:47.3279589Z         -------
2025-08-30T09:58:47.3279712Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3279767Z     
2025-08-30T09:58:47.3279825Z         Examples
2025-08-30T09:58:47.3279886Z         --------
2025-08-30T09:58:47.3280092Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3280169Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3280226Z         1
2025-08-30T09:58:47.3280279Z     
2025-08-30T09:58:47.3280370Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3280448Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3280519Z         slice(1, 3, None)
2025-08-30T09:58:47.3280573Z     
2025-08-30T09:58:47.3280672Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3280755Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3280834Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3280889Z         """
2025-08-30T09:58:47.3280983Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3281117Z         try:
2025-08-30T09:58:47.3281216Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3281289Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3281305Z 
2025-08-30T09:58:47.3281481Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3281579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3281745Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3281806Z     ???
2025-08-30T09:58:47.3281963Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3282017Z     ???
2025-08-30T09:58:47.3282279Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3282333Z     ???
2025-08-30T09:58:47.3282429Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3282433Z 
2025-08-30T09:58:47.3282490Z >   ???
2025-08-30T09:58:47.3282559Z E   KeyError: 'date'
2025-08-30T09:58:47.3282564Z 
2025-08-30T09:58:47.3282682Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3282690Z 
2025-08-30T09:58:47.3282841Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3282849Z 
2025-08-30T09:58:47.3283564Z default_conf = {'_strategy_protections': [{'method': 'CooldownPeriod', 'stop_duration': 3}], 'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.3283765Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584783590>
2025-08-30T09:58:47.3283971Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3284111Z protections = [{'method': 'CooldownPeriod', 'stop_duration': 3}]
2025-08-30T09:58:47.3284185Z contour = 'sine', expected = 9
2025-08-30T09:58:47.3284190Z 
2025-08-30T09:58:47.3284270Z     @pytest.mark.parametrize(
2025-08-30T09:58:47.3284371Z         "protections,contour,expected",
2025-08-30T09:58:47.3284427Z         [
2025-08-30T09:58:47.3284497Z             (None, "sine", 35),
2025-08-30T09:58:47.3284574Z             (None, "raise", 19),
2025-08-30T09:58:47.3284640Z             (None, "lower", 0),
2025-08-30T09:58:47.3284704Z             (None, "sine", 35),
2025-08-30T09:58:47.3284771Z             (None, "raise", 19),
2025-08-30T09:58:47.3284912Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.3285050Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.3285182Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "lower", 0),
2025-08-30T09:58:47.3285311Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "sine", 9),
2025-08-30T09:58:47.3285442Z             ([{"method": "CooldownPeriod", "stop_duration": 3}], "raise", 10),
2025-08-30T09:58:47.3285500Z         ],
2025-08-30T09:58:47.3285559Z     )
2025-08-30T09:58:47.3285643Z     def test_backtest_pricecontours(
2025-08-30T09:58:47.3285797Z         default_conf, mocker, testdatadir, protections, contour, expected
2025-08-30T09:58:47.3285993Z     ) -> None:
2025-08-30T09:58:47.3286061Z         if protections:
2025-08-30T09:58:47.3286177Z             default_conf["_strategy_protections"] = protections
2025-08-30T09:58:47.3286272Z             default_conf["enable_protections"] = True
2025-08-30T09:58:47.3286329Z     
2025-08-30T09:58:47.3286400Z         patch_exchange(mocker)
2025-08-30T09:58:47.3286560Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.3286728Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.3286861Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.3286975Z         # over and over again should not cause different results
2025-08-30T09:58:47.3287030Z     
2025-08-30T09:58:47.3287228Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.3287323Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.3287456Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3287519Z     
2025-08-30T09:58:47.3287610Z         data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.3287756Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3287837Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3287842Z 
2025-08-30T09:58:47.3287932Z tests/optimize/test_backtesting.py:1435: 
2025-08-30T09:58:47.3288031Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3288183Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3288271Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3288407Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3288513Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3288589Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3288775Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3288861Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3288931Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3289027Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3289031Z 
2025-08-30T09:58:47.3289189Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3289253Z key = 'date'
2025-08-30T09:58:47.3289258Z 
2025-08-30T09:58:47.3289330Z     def get_loc(self, key):
2025-08-30T09:58:47.3289386Z         """
2025-08-30T09:58:47.3289540Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3289596Z     
2025-08-30T09:58:47.3289658Z         Parameters
2025-08-30T09:58:47.3289718Z         ----------
2025-08-30T09:58:47.3289785Z         key : label
2025-08-30T09:58:47.3289839Z     
2025-08-30T09:58:47.3289896Z         Returns
2025-08-30T09:58:47.3289959Z         -------
2025-08-30T09:58:47.3290078Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3290138Z     
2025-08-30T09:58:47.3290197Z         Examples
2025-08-30T09:58:47.3290259Z         --------
2025-08-30T09:58:47.3290345Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3290424Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3290483Z         1
2025-08-30T09:58:47.3290537Z     
2025-08-30T09:58:47.3290630Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3290706Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3290777Z         slice(1, 3, None)
2025-08-30T09:58:47.3290832Z     
2025-08-30T09:58:47.3290931Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3291016Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3291098Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3291154Z         """
2025-08-30T09:58:47.3291243Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3291303Z         try:
2025-08-30T09:58:47.3291480Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3291554Z         except KeyError as err:
2025-08-30T09:58:47.3291643Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3291731Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3291840Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3291902Z             ):
2025-08-30T09:58:47.3291984Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3292061Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3292131Z E           KeyError: 'date'
2025-08-30T09:58:47.3292136Z 
2025-08-30T09:58:47.3292325Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3292541Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3292656Z 2025-08-30 09:55:31 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3292786Z 2025-08-30 09:55:31 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3292866Z 2025-08-30 09:55:31 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3292976Z 2025-08-30 09:55:31 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3293208Z 2025-08-30 09:55:31 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3293546Z 2025-08-30 09:55:31 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3293953Z 2025-08-30 09:55:31 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3294464Z 2025-08-30 09:55:31 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3294888Z 2025-08-30 09:55:31 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3294987Z 2025-08-30 09:55:31 INFO Found no parameter file.
2025-08-30T09:58:47.3295280Z 2025-08-30 09:55:31 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3295457Z 2025-08-30 09:55:31 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.3295634Z 2025-08-30 09:55:31 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3295832Z 2025-08-30 09:55:31 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3296020Z 2025-08-30 09:55:31 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3296281Z 2025-08-30 09:55:31 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3296471Z 2025-08-30 09:55:31 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3296667Z 2025-08-30 09:55:31 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3296775Z 2025-08-30 09:55:31 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.3296880Z 2025-08-30 09:55:31 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3296999Z 2025-08-30 09:55:31 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3297148Z 2025-08-30 09:55:31 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3297301Z 2025-08-30 09:55:31 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3297433Z 2025-08-30 09:55:31 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3297569Z 2025-08-30 09:55:31 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3297871Z 2025-08-30 09:55:31 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3298068Z 2025-08-30 09:55:31 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3298183Z 2025-08-30 09:55:31 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3298448Z 2025-08-30 09:55:31 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3298576Z 2025-08-30 09:55:31 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3298743Z 2025-08-30 09:55:31 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3298859Z 2025-08-30 09:55:31 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3298981Z 2025-08-30 09:55:31 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3299127Z 2025-08-30 09:55:31 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3299246Z 2025-08-30 09:55:31 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3299384Z 2025-08-30 09:55:31 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3299642Z 2025-08-30 09:55:31 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3299787Z 2025-08-30 09:55:31 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3299931Z 2025-08-30 09:55:31 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3300043Z 2025-08-30 09:55:31 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3300146Z 2025-08-30 09:55:31 INFO Validating configuration ...
2025-08-30T09:58:47.3300499Z 2025-08-30 09:55:31 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3300787Z 2025-08-30 09:55:31 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3301221Z 2025-08-30 09:55:31 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3301418Z 2025-08-30 09:55:31 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3301597Z 2025-08-30 09:55:31 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3301735Z 2025-08-30 09:55:31 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3301848Z 2025-08-30 09:55:31 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3302078Z 2025-08-30 09:55:31 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3302187Z 2025-08-30 09:55:31 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3302338Z 2025-08-30 09:55:31 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3302522Z 2025-08-30 09:55:31 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3302686Z 2025-08-30 09:55:31 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3302780Z 2025-08-30 09:55:31 DEBUG Dropping last candle
2025-08-30T09:58:47.3302993Z 2025-08-30 09:55:31 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.3303151Z ___________________ test_backtest_pricecontours_protections ____________________
2025-08-30T09:58:47.3303159Z 
2025-08-30T09:58:47.3303318Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3303569Z key = 'date'
2025-08-30T09:58:47.3303579Z 
2025-08-30T09:58:47.3303677Z     def get_loc(self, key):
2025-08-30T09:58:47.3303736Z         """
2025-08-30T09:58:47.3303891Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3303950Z     
2025-08-30T09:58:47.3304012Z         Parameters
2025-08-30T09:58:47.3304072Z         ----------
2025-08-30T09:58:47.3304132Z         key : label
2025-08-30T09:58:47.3304190Z     
2025-08-30T09:58:47.3304247Z         Returns
2025-08-30T09:58:47.3304305Z         -------
2025-08-30T09:58:47.3304431Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3304486Z     
2025-08-30T09:58:47.3304551Z         Examples
2025-08-30T09:58:47.3304611Z         --------
2025-08-30T09:58:47.3304704Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3304916Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3304988Z         1
2025-08-30T09:58:47.3305053Z     
2025-08-30T09:58:47.3305148Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3305226Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3305295Z         slice(1, 3, None)
2025-08-30T09:58:47.3305354Z     
2025-08-30T09:58:47.3305455Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3305537Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3305625Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3305681Z         """
2025-08-30T09:58:47.3305772Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3305833Z         try:
2025-08-30T09:58:47.3305921Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3306096Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3306102Z 
2025-08-30T09:58:47.3306274Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3306382Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3306545Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3306602Z     ???
2025-08-30T09:58:47.3306761Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3306817Z     ???
2025-08-30T09:58:47.3307076Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3307135Z     ???
2025-08-30T09:58:47.3307230Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3307235Z 
2025-08-30T09:58:47.3307289Z >   ???
2025-08-30T09:58:47.3307358Z E   KeyError: 'date'
2025-08-30T09:58:47.3307363Z 
2025-08-30T09:58:47.3307482Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3307487Z 
2025-08-30T09:58:47.3307642Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3307650Z 
2025-08-30T09:58:47.3308190Z default_conf = {'_strategy_protections': [{'method': 'CooldownPeriod', 'stop_duration': 3}], 'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.3308269Z fee = <MagicMock id='140075599659344'>
2025-08-30T09:58:47.3308424Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc11fd10>
2025-08-30T09:58:47.3308624Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3308629Z 
2025-08-30T09:58:47.3308864Z     def test_backtest_pricecontours_protections(default_conf, fee, mocker, testdatadir) -> None:
2025-08-30T09:58:47.3309043Z         # While this test IS a copy of test_backtest_pricecontours, it's needed to ensure
2025-08-30T09:58:47.3309244Z         # results do not carry-over to the next run, which is not given by using parametrize.
2025-08-30T09:58:47.3309320Z         patch_exchange(mocker)
2025-08-30T09:58:47.3309417Z         default_conf["_strategy_protections"] = [
2025-08-30T09:58:47.3309488Z             {
2025-08-30T09:58:47.3309593Z                 "method": "CooldownPeriod",
2025-08-30T09:58:47.3309668Z                 "stop_duration": 3,
2025-08-30T09:58:47.3309725Z             }
2025-08-30T09:58:47.3309785Z         ]
2025-08-30T09:58:47.3309839Z     
2025-08-30T09:58:47.3309929Z         default_conf["enable_protections"] = True
2025-08-30T09:58:47.3310008Z         default_conf["timeframe"] = "1m"
2025-08-30T09:58:47.3310093Z         default_conf["max_open_trades"] = 1
2025-08-30T09:58:47.3310179Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.3310337Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.3310513Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.3310573Z         tests = [
2025-08-30T09:58:47.3310638Z             ["sine", 9],
2025-08-30T09:58:47.3310708Z             ["raise", 10],
2025-08-30T09:58:47.3310866Z             ["lower", 0],
2025-08-30T09:58:47.3310928Z             ["sine", 9],
2025-08-30T09:58:47.3310990Z             ["raise", 10],
2025-08-30T09:58:47.3311048Z         ]
2025-08-30T09:58:47.3311139Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.3311271Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.3311329Z     
2025-08-30T09:58:47.3311459Z         # While entry-signals are unrealistic, running backtesting
2025-08-30T09:58:47.3311577Z         # over and over again should not cause different results
2025-08-30T09:58:47.3311654Z         for [contour, numres] in tests:
2025-08-30T09:58:47.3311747Z             # Debug output for random test failure
2025-08-30T09:58:47.3311903Z             print(f"{contour}, {numres}")
2025-08-30T09:58:47.3312005Z             data = load_data_test(contour, testdatadir)
2025-08-30T09:58:47.3312159Z >           processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3312241Z                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3312246Z 
2025-08-30T09:58:47.3312337Z tests/optimize/test_backtesting.py:1391: 
2025-08-30T09:58:47.3312440Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3312587Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3312678Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3312814Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3312919Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3312990Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3313174Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3313264Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3313330Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3313525Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3313535Z 
2025-08-30T09:58:47.3313698Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3313758Z key = 'date'
2025-08-30T09:58:47.3313763Z 
2025-08-30T09:58:47.3313835Z     def get_loc(self, key):
2025-08-30T09:58:47.3313897Z         """
2025-08-30T09:58:47.3314045Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3314100Z     
2025-08-30T09:58:47.3314166Z         Parameters
2025-08-30T09:58:47.3314228Z         ----------
2025-08-30T09:58:47.3314289Z         key : label
2025-08-30T09:58:47.3314343Z     
2025-08-30T09:58:47.3314404Z         Returns
2025-08-30T09:58:47.3314464Z         -------
2025-08-30T09:58:47.3314586Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3314645Z     
2025-08-30T09:58:47.3314704Z         Examples
2025-08-30T09:58:47.3314763Z         --------
2025-08-30T09:58:47.3314849Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3314934Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3314989Z         1
2025-08-30T09:58:47.3315043Z     
2025-08-30T09:58:47.3315139Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3315216Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3315283Z         slice(1, 3, None)
2025-08-30T09:58:47.3315339Z     
2025-08-30T09:58:47.3315442Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3315523Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3315603Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3315663Z         """
2025-08-30T09:58:47.3315753Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3315811Z         try:
2025-08-30T09:58:47.3315900Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3315978Z         except KeyError as err:
2025-08-30T09:58:47.3316062Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3316275Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3316386Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3316443Z             ):
2025-08-30T09:58:47.3316525Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3316606Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3316675Z E           KeyError: 'date'
2025-08-30T09:58:47.3316680Z 
2025-08-30T09:58:47.3316865Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3317002Z ----------------------------- Captured stdout call -----------------------------
2025-08-30T09:58:47.3317065Z sine, 9
2025-08-30T09:58:47.3317288Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3317652Z 2025-08-30 09:55:35 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3317839Z 2025-08-30 09:55:35 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3317926Z 2025-08-30 09:55:35 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3318022Z 2025-08-30 09:55:35 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3318149Z 2025-08-30 09:55:35 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3318266Z 2025-08-30 09:55:35 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3318595Z 2025-08-30 09:55:35 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3319092Z 2025-08-30 09:55:35 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3319514Z 2025-08-30 09:55:35 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3319608Z 2025-08-30 09:55:35 INFO Found no parameter file.
2025-08-30T09:58:47.3319892Z 2025-08-30 09:55:35 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3320087Z 2025-08-30 09:55:35 INFO Override strategy 'timeframe' with value in config file: 1m.
2025-08-30T09:58:47.3320271Z 2025-08-30 09:55:35 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3320469Z 2025-08-30 09:55:35 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3320658Z 2025-08-30 09:55:35 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3320917Z 2025-08-30 09:55:35 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3321105Z 2025-08-30 09:55:35 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3321303Z 2025-08-30 09:55:35 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3321408Z 2025-08-30 09:55:35 INFO Strategy using timeframe: 1m
2025-08-30T09:58:47.3321516Z 2025-08-30 09:55:35 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3321637Z 2025-08-30 09:55:35 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3321783Z 2025-08-30 09:55:35 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3321938Z 2025-08-30 09:55:35 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3322069Z 2025-08-30 09:55:35 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3322209Z 2025-08-30 09:55:35 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3322511Z 2025-08-30 09:55:35 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3322708Z 2025-08-30 09:55:35 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3322821Z 2025-08-30 09:55:35 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3322930Z 2025-08-30 09:55:35 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3323166Z 2025-08-30 09:55:35 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3323332Z 2025-08-30 09:55:35 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3323563Z 2025-08-30 09:55:35 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3323684Z 2025-08-30 09:55:35 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3323828Z 2025-08-30 09:55:35 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3323945Z 2025-08-30 09:55:35 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3324083Z 2025-08-30 09:55:35 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3324240Z 2025-08-30 09:55:35 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3324498Z 2025-08-30 09:55:35 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3324643Z 2025-08-30 09:55:35 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3324760Z 2025-08-30 09:55:35 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3324862Z 2025-08-30 09:55:35 INFO Validating configuration ...
2025-08-30T09:58:47.3325207Z 2025-08-30 09:55:35 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3325495Z 2025-08-30 09:55:35 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3325931Z 2025-08-30 09:55:35 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3326123Z 2025-08-30 09:55:35 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3326334Z 2025-08-30 09:55:35 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3326472Z 2025-08-30 09:55:35 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.3326581Z 2025-08-30 09:55:35 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.3326811Z 2025-08-30 09:55:35 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.3326920Z 2025-08-30 09:55:35 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.3327072Z 2025-08-30 09:55:35 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3327253Z 2025-08-30 09:55:35 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.3327416Z 2025-08-30 09:55:35 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.3327509Z 2025-08-30 09:55:35 DEBUG Dropping last candle
2025-08-30T09:58:47.3327721Z 2025-08-30 09:55:35 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 99 - after: 102 - 3.03%
2025-08-30T09:58:47.3327871Z ____________________ test_get_tick_size_over_time_real_data ____________________
2025-08-30T09:58:47.3327877Z 
2025-08-30T09:58:47.3328072Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3328080Z 
2025-08-30T09:58:47.3328201Z     def test_get_tick_size_over_time_real_data(testdatadir):
2025-08-30T09:58:47.3328265Z         """
2025-08-30T09:58:47.3328434Z         Test the get_tick_size_over_time function with real data from the testdatadir
2025-08-30T09:58:47.3328491Z         """
2025-08-30T09:58:47.3328614Z         from freqtrade.data.history import load_pair_history
2025-08-30T09:58:47.3328672Z     
2025-08-30T09:58:47.3328773Z         # Load some test data from the testdata directory
2025-08-30T09:58:47.3328851Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.3328921Z         timeframe = "1m"
2025-08-30T09:58:47.3328975Z     
2025-08-30T09:58:47.3329053Z         candles = load_pair_history(
2025-08-30T09:58:47.3329133Z             datadir=testdatadir,
2025-08-30T09:58:47.3329198Z             pair=pair,
2025-08-30T09:58:47.3329268Z             timeframe=timeframe,
2025-08-30T09:58:47.3329328Z         )
2025-08-30T09:58:47.3329521Z     
2025-08-30T09:58:47.3329602Z         # Make sure we have test data
2025-08-30T09:58:47.3329752Z         assert not candles.empty, "No test data found, cannot run test"
2025-08-30T09:58:47.3329813Z     
2025-08-30T09:58:47.3329892Z         # Calculate significant digits
2025-08-30T09:58:47.3329983Z >       result = get_tick_size_over_time(candles)
2025-08-30T09:58:47.3330055Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3330060Z 
2025-08-30T09:58:47.3330154Z tests/data/test_historic_precision.py:83: 
2025-08-30T09:58:47.3330259Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3330466Z freqtrade/data/btanalysis/historic_precision.py:20: in get_tick_size_over_time
2025-08-30T09:58:47.3330651Z     candles1 = candles.set_index("date", drop=True)
2025-08-30T09:58:47.3330726Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3330822Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3330835Z 
2025-08-30T09:58:47.3330948Z self =                           index      open  ...  close_count  max_count
2025-08-30T09:58:47.3331065Z 0     2017-11-04 23:02:00+00:00   0.00162  ... ...        15         15
2025-08-30T09:58:47.3331187Z 14397 2017-11-14 22:59:00+00:00    0.0027  ...           15         15
2025-08-30T09:58:47.3331196Z 
2025-08-30T09:58:47.3331265Z [14398 rows x 11 columns]
2025-08-30T09:58:47.3331326Z keys = ['date']
2025-08-30T09:58:47.3331330Z 
2025-08-30T09:58:47.3331392Z     def set_index(
2025-08-30T09:58:47.3331453Z         self,
2025-08-30T09:58:47.3331509Z         keys,
2025-08-30T09:58:47.3331566Z         *,
2025-08-30T09:58:47.3331639Z         drop: bool = True,
2025-08-30T09:58:47.3331712Z         append: bool = False,
2025-08-30T09:58:47.3331787Z         inplace: bool = False,
2025-08-30T09:58:47.3331867Z         verify_integrity: bool = False,
2025-08-30T09:58:47.3331940Z     ) -> DataFrame | None:
2025-08-30T09:58:47.3332000Z         """
2025-08-30T09:58:47.3332106Z         Set the DataFrame index using existing columns.
2025-08-30T09:58:47.3332169Z     
2025-08-30T09:58:47.3332310Z         Set the DataFrame index (row labels) using one or more existing
2025-08-30T09:58:47.3332460Z         columns or arrays (of the correct length). The index can replace the
2025-08-30T09:58:47.3332540Z         existing index or expand on it.
2025-08-30T09:58:47.3332601Z     
2025-08-30T09:58:47.3332662Z         Parameters
2025-08-30T09:58:47.3332722Z         ----------
2025-08-30T09:58:47.3332839Z         keys : label or array-like or list of labels/arrays
2025-08-30T09:58:47.3332995Z             This parameter can be either a single column key, a single array of
2025-08-30T09:58:47.3333143Z             the same length as the calling DataFrame, or a list containing an
2025-08-30T09:58:47.3333295Z             arbitrary combination of column keys and arrays. Here, "array"
2025-08-30T09:58:47.3333548Z             encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
2025-08-30T09:58:47.3333670Z             instances of :class:`~collections.abc.Iterator`.
2025-08-30T09:58:47.3333745Z         drop : bool, default True
2025-08-30T09:58:47.3333844Z             Delete columns to be used as the new index.
2025-08-30T09:58:47.3333921Z         append : bool, default False
2025-08-30T09:58:47.3334023Z             Whether to append columns to existing index.
2025-08-30T09:58:47.3334105Z         inplace : bool, default False
2025-08-30T09:58:47.3334249Z             Whether to modify the DataFrame rather than creating a new one.
2025-08-30T09:58:47.3334336Z         verify_integrity : bool, default False
2025-08-30T09:58:47.3334488Z             Check the new index for duplicates. Otherwise defer the check until
2025-08-30T09:58:47.3334640Z             necessary. Setting to False will improve the performance of this
2025-08-30T09:58:47.3334699Z             method.
2025-08-30T09:58:47.3334753Z     
2025-08-30T09:58:47.3334815Z         Returns
2025-08-30T09:58:47.3334995Z         -------
2025-08-30T09:58:47.3335064Z         DataFrame or None
2025-08-30T09:58:47.3335172Z             Changed row labels or None if ``inplace=True``.
2025-08-30T09:58:47.3335228Z     
2025-08-30T09:58:47.3335287Z         See Also
2025-08-30T09:58:47.3335345Z         --------
2025-08-30T09:58:47.3335463Z         DataFrame.reset_index : Opposite of set_index.
2025-08-30T09:58:47.3335607Z         DataFrame.reindex : Change to new indices or expand indices.
2025-08-30T09:58:47.3335764Z         DataFrame.reindex_like : Change to same indices as other DataFrame.
2025-08-30T09:58:47.3335826Z     
2025-08-30T09:58:47.3335886Z         Examples
2025-08-30T09:58:47.3335944Z         --------
2025-08-30T09:58:47.3336035Z         >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
2025-08-30T09:58:47.3336247Z         ...                    'year': [2012, 2014, 2013, 2014],
2025-08-30T09:58:47.3336333Z         ...                    'sale': [55, 40, 84, 31]})
2025-08-30T09:58:47.3336391Z         >>> df
2025-08-30T09:58:47.3336472Z            month  year  sale
2025-08-30T09:58:47.3336534Z         0      1  2012    55
2025-08-30T09:58:47.3336597Z         1      4  2014    40
2025-08-30T09:58:47.3336661Z         2      7  2013    84
2025-08-30T09:58:47.3336721Z         3     10  2014    31
2025-08-30T09:58:47.3336777Z     
2025-08-30T09:58:47.3336869Z         Set the index to become the 'month' column:
2025-08-30T09:58:47.3336931Z     
2025-08-30T09:58:47.3337003Z         >>> df.set_index('month')
2025-08-30T09:58:47.3337067Z                year  sale
2025-08-30T09:58:47.3337128Z         month
2025-08-30T09:58:47.3337189Z         1      2012    55
2025-08-30T09:58:47.3337249Z         4      2014    40
2025-08-30T09:58:47.3337308Z         7      2013    84
2025-08-30T09:58:47.3337372Z         10     2014    31
2025-08-30T09:58:47.3337430Z     
2025-08-30T09:58:47.3337549Z         Create a MultiIndex using columns 'year' and 'month':
2025-08-30T09:58:47.3337608Z     
2025-08-30T09:58:47.3337688Z         >>> df.set_index(['year', 'month'])
2025-08-30T09:58:47.3337754Z                     sale
2025-08-30T09:58:47.3337815Z         year  month
2025-08-30T09:58:47.3337878Z         2012  1     55
2025-08-30T09:58:47.3337936Z         2014  4     40
2025-08-30T09:58:47.3337995Z         2013  7     84
2025-08-30T09:58:47.3338057Z         2014  10    31
2025-08-30T09:58:47.3338113Z     
2025-08-30T09:58:47.3338220Z         Create a MultiIndex using an Index and a column:
2025-08-30T09:58:47.3338279Z     
2025-08-30T09:58:47.3338376Z         >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
2025-08-30T09:58:47.3338444Z                  month  sale
2025-08-30T09:58:47.3338501Z            year
2025-08-30T09:58:47.3338570Z         1  2012  1      55
2025-08-30T09:58:47.3338631Z         2  2014  4      40
2025-08-30T09:58:47.3338694Z         3  2013  7      84
2025-08-30T09:58:47.3338759Z         4  2014  10     31
2025-08-30T09:58:47.3338813Z     
2025-08-30T09:58:47.3338896Z         Create a MultiIndex using two Series:
2025-08-30T09:58:47.3338954Z     
2025-08-30T09:58:47.3339030Z         >>> s = pd.Series([1, 2, 3, 4])
2025-08-30T09:58:47.3339103Z         >>> df.set_index([s, s**2])
2025-08-30T09:58:47.3339172Z               month  year  sale
2025-08-30T09:58:47.3339236Z         1 1       1  2012    55
2025-08-30T09:58:47.3339296Z         2 4       4  2014    40
2025-08-30T09:58:47.3339356Z         3 9       7  2013    84
2025-08-30T09:58:47.3339416Z         4 16     10  2014    31
2025-08-30T09:58:47.3339476Z         """
2025-08-30T09:58:47.3339590Z         inplace = validate_bool_kwarg(inplace, "inplace")
2025-08-30T09:58:47.3339715Z         self._check_inplace_and_allows_duplicate_labels(inplace)
2025-08-30T09:58:47.3339798Z         if not isinstance(keys, list):
2025-08-30T09:58:47.3339864Z             keys = [keys]
2025-08-30T09:58:47.3339922Z     
2025-08-30T09:58:47.3339982Z         err_msg = (
2025-08-30T09:58:47.3340125Z             'The parameter "keys" may be a column key, one-dimensional '
2025-08-30T09:58:47.3340249Z             "array, or a list containing only valid column keys and "
2025-08-30T09:58:47.3340436Z             "one-dimensional arrays."
2025-08-30T09:58:47.3340548Z         )
2025-08-30T09:58:47.3340650Z     
2025-08-30T09:58:47.3340787Z         missing: list[Hashable] = []
2025-08-30T09:58:47.3340911Z         for col in keys:
2025-08-30T09:58:47.3341134Z             if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):
2025-08-30T09:58:47.3341253Z                 # arrays are fine as long as they are one-dimensional
2025-08-30T09:58:47.3341346Z                 # iterators get converted to list below
2025-08-30T09:58:47.3341459Z                 if getattr(col, "ndim", 1) != 1:
2025-08-30T09:58:47.3341606Z                     raise ValueError(err_msg)
2025-08-30T09:58:47.3341708Z             else:
2025-08-30T09:58:47.3342040Z                 # everything else gets tried as a key; see GH 24969
2025-08-30T09:58:47.3342110Z                 try:
2025-08-30T09:58:47.3342196Z                     found = col in self.columns
2025-08-30T09:58:47.3342285Z                 except TypeError as err:
2025-08-30T09:58:47.3342362Z                     raise TypeError(
2025-08-30T09:58:47.3342475Z                         f"{err_msg}. Received column of type {type(col)}"
2025-08-30T09:58:47.3342540Z                     ) from err
2025-08-30T09:58:47.3342605Z                 else:
2025-08-30T09:58:47.3342673Z                     if not found:
2025-08-30T09:58:47.3342754Z                         missing.append(col)
2025-08-30T09:58:47.3342812Z     
2025-08-30T09:58:47.3342873Z         if missing:
2025-08-30T09:58:47.3342996Z >           raise KeyError(f"None of {missing} are in the columns")
2025-08-30T09:58:47.3343101Z E           KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.3343111Z 
2025-08-30T09:58:47.3343287Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6129: KeyError
2025-08-30T09:58:47.3343637Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3343878Z 2025-08-30 09:55:38 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.3344027Z _______________________ test_advise_all_indicators_copy ________________________
2025-08-30T09:58:47.3344033Z 
2025-08-30T09:58:47.3344196Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3344256Z key = 'date'
2025-08-30T09:58:47.3344260Z 
2025-08-30T09:58:47.3344336Z     def get_loc(self, key):
2025-08-30T09:58:47.3344393Z         """
2025-08-30T09:58:47.3344543Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3344600Z     
2025-08-30T09:58:47.3344663Z         Parameters
2025-08-30T09:58:47.3344723Z         ----------
2025-08-30T09:58:47.3344783Z         key : label
2025-08-30T09:58:47.3344847Z     
2025-08-30T09:58:47.3344904Z         Returns
2025-08-30T09:58:47.3344962Z         -------
2025-08-30T09:58:47.3345088Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3345145Z     
2025-08-30T09:58:47.3345206Z         Examples
2025-08-30T09:58:47.3345265Z         --------
2025-08-30T09:58:47.3345357Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3345437Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3345493Z         1
2025-08-30T09:58:47.3345551Z     
2025-08-30T09:58:47.3345645Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3345723Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3345793Z         slice(1, 3, None)
2025-08-30T09:58:47.3345847Z     
2025-08-30T09:58:47.3345947Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3346029Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3346116Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3346173Z         """
2025-08-30T09:58:47.3346264Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3346326Z         try:
2025-08-30T09:58:47.3346552Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3346622Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3346626Z 
2025-08-30T09:58:47.3346793Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3346897Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3347062Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3347119Z     ???
2025-08-30T09:58:47.3347281Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3347337Z     ???
2025-08-30T09:58:47.3347597Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3347657Z     ???
2025-08-30T09:58:47.3347859Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3347864Z 
2025-08-30T09:58:47.3347921Z >   ???
2025-08-30T09:58:47.3347999Z E   KeyError: 'date'
2025-08-30T09:58:47.3348004Z 
2025-08-30T09:58:47.3348133Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3348138Z 
2025-08-30T09:58:47.3348299Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3348303Z 
2025-08-30T09:58:47.3348467Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8997a50>
2025-08-30T09:58:47.3349055Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3349250Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3349255Z 
2025-08-30T09:58:47.3349451Z     def test_advise_all_indicators_copy(mocker, default_conf, testdatadir) -> None:
2025-08-30T09:58:47.3349594Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.3349815Z         aimock = mocker.patch("freqtrade.strategy.interface.IStrategy.advise_indicators")
2025-08-30T09:58:47.3349960Z         timerange = TimeRange.parse_timerange("1510694220-1510700340")
2025-08-30T09:58:47.3350181Z         data = load_data(testdatadir, "1m", ["UNITTEST/BTC"], timerange=timerange, fill_up_missing=True)
2025-08-30T09:58:47.3350269Z >       strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3350273Z 
2025-08-30T09:58:47.3350362Z tests/strategy/test_interface.py:306: 
2025-08-30T09:58:47.3350461Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3350611Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3350702Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3350840Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3350946Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3351016Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3351209Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3351291Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3351356Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3351457Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3351462Z 
2025-08-30T09:58:47.3351623Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3351683Z key = 'date'
2025-08-30T09:58:47.3351688Z 
2025-08-30T09:58:47.3351763Z     def get_loc(self, key):
2025-08-30T09:58:47.3351819Z         """
2025-08-30T09:58:47.3351969Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3352025Z     
2025-08-30T09:58:47.3352091Z         Parameters
2025-08-30T09:58:47.3352156Z         ----------
2025-08-30T09:58:47.3352216Z         key : label
2025-08-30T09:58:47.3352275Z     
2025-08-30T09:58:47.3352332Z         Returns
2025-08-30T09:58:47.3352482Z         -------
2025-08-30T09:58:47.3352604Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3352661Z     
2025-08-30T09:58:47.3352720Z         Examples
2025-08-30T09:58:47.3352779Z         --------
2025-08-30T09:58:47.3352869Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3352947Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3353002Z         1
2025-08-30T09:58:47.3353055Z     
2025-08-30T09:58:47.3353154Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3353231Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3353296Z         slice(1, 3, None)
2025-08-30T09:58:47.3353461Z     
2025-08-30T09:58:47.3353563Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3353759Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3353845Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3353908Z         """
2025-08-30T09:58:47.3353998Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3354060Z         try:
2025-08-30T09:58:47.3354152Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3354227Z         except KeyError as err:
2025-08-30T09:58:47.3354314Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3354409Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3354521Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3354578Z             ):
2025-08-30T09:58:47.3354663Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3354745Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3354816Z E           KeyError: 'date'
2025-08-30T09:58:47.3354821Z 
2025-08-30T09:58:47.3355014Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3355156Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3355485Z 2025-08-30 09:55:40 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3355981Z 2025-08-30 09:55:40 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3356402Z 2025-08-30 09:55:40 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3356497Z 2025-08-30 09:55:40 INFO Found no parameter file.
2025-08-30T09:58:47.3356788Z 2025-08-30 09:55:40 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3356969Z 2025-08-30 09:55:40 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3357150Z 2025-08-30 09:55:40 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3357346Z 2025-08-30 09:55:40 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3357543Z 2025-08-30 09:55:40 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3357805Z 2025-08-30 09:55:40 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3357992Z 2025-08-30 09:55:40 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3358192Z 2025-08-30 09:55:40 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3358295Z 2025-08-30 09:55:40 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3358401Z 2025-08-30 09:55:40 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3358521Z 2025-08-30 09:55:40 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3358672Z 2025-08-30 09:55:40 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3358829Z 2025-08-30 09:55:40 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3359124Z 2025-08-30 09:55:40 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3359266Z 2025-08-30 09:55:40 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3359573Z 2025-08-30 09:55:40 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3359764Z 2025-08-30 09:55:40 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3359880Z 2025-08-30 09:55:40 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3359988Z 2025-08-30 09:55:40 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3360112Z 2025-08-30 09:55:40 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3360356Z 2025-08-30 09:55:40 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3360475Z 2025-08-30 09:55:40 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3360596Z 2025-08-30 09:55:40 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3360746Z 2025-08-30 09:55:40 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3360863Z 2025-08-30 09:55:40 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3361002Z 2025-08-30 09:55:40 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3361152Z 2025-08-30 09:55:40 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3361299Z 2025-08-30 09:55:40 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3361440Z 2025-08-30 09:55:40 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3361549Z 2025-08-30 09:55:40 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3361769Z 2025-08-30 09:55:40 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 100 - after: 103 - 3.00%
2025-08-30T09:58:47.3361907Z __________________________ test_advise_all_indicators __________________________
2025-08-30T09:58:47.3361912Z 
2025-08-30T09:58:47.3362073Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3362137Z key = 'date'
2025-08-30T09:58:47.3362142Z 
2025-08-30T09:58:47.3362215Z     def get_loc(self, key):
2025-08-30T09:58:47.3362271Z         """
2025-08-30T09:58:47.3362426Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3362481Z     
2025-08-30T09:58:47.3362543Z         Parameters
2025-08-30T09:58:47.3362602Z         ----------
2025-08-30T09:58:47.3362670Z         key : label
2025-08-30T09:58:47.3362724Z     
2025-08-30T09:58:47.3362780Z         Returns
2025-08-30T09:58:47.3362844Z         -------
2025-08-30T09:58:47.3362964Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3363018Z     
2025-08-30T09:58:47.3363077Z         Examples
2025-08-30T09:58:47.3363142Z         --------
2025-08-30T09:58:47.3363231Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3363309Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3363547Z         1
2025-08-30T09:58:47.3363641Z     
2025-08-30T09:58:47.3363754Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3363838Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3363905Z         slice(1, 3, None)
2025-08-30T09:58:47.3363959Z     
2025-08-30T09:58:47.3364062Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3364149Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3364230Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3364286Z         """
2025-08-30T09:58:47.3364381Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3364437Z         try:
2025-08-30T09:58:47.3364526Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3364603Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3364608Z 
2025-08-30T09:58:47.3364784Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3365018Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3365184Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3365245Z     ???
2025-08-30T09:58:47.3365400Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3365456Z     ???
2025-08-30T09:58:47.3365719Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3365774Z     ???
2025-08-30T09:58:47.3365870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3365875Z 
2025-08-30T09:58:47.3365933Z >   ???
2025-08-30T09:58:47.3365998Z E   KeyError: 'date'
2025-08-30T09:58:47.3366004Z 
2025-08-30T09:58:47.3366242Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3366247Z 
2025-08-30T09:58:47.3366414Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3366423Z 
2025-08-30T09:58:47.3367005Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3367198Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3367203Z 
2025-08-30T09:58:47.3367358Z     def test_advise_all_indicators(default_conf, testdatadir) -> None:
2025-08-30T09:58:47.3367486Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.3367542Z     
2025-08-30T09:58:47.3367676Z         timerange = TimeRange.parse_timerange("1510694220-1510700340")
2025-08-30T09:58:47.3367903Z         data = load_data(testdatadir, "1m", ["UNITTEST/BTC"], timerange=timerange, fill_up_missing=True)
2025-08-30T09:58:47.3368014Z >       processed = strategy.advise_all_indicators(data)
2025-08-30T09:58:47.3368086Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3368094Z 
2025-08-30T09:58:47.3368185Z tests/strategy/test_interface.py:290: 
2025-08-30T09:58:47.3368283Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3368432Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.3368526Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.3368659Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.3368764Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.3368838Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3369021Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3369105Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3369172Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3369272Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3369276Z 
2025-08-30T09:58:47.3369433Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3369499Z key = 'date'
2025-08-30T09:58:47.3369508Z 
2025-08-30T09:58:47.3369580Z     def get_loc(self, key):
2025-08-30T09:58:47.3369637Z         """
2025-08-30T09:58:47.3369785Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3369844Z     
2025-08-30T09:58:47.3369906Z         Parameters
2025-08-30T09:58:47.3369965Z         ----------
2025-08-30T09:58:47.3370031Z         key : label
2025-08-30T09:58:47.3370086Z     
2025-08-30T09:58:47.3370144Z         Returns
2025-08-30T09:58:47.3370203Z         -------
2025-08-30T09:58:47.3370330Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3370384Z     
2025-08-30T09:58:47.3370441Z         Examples
2025-08-30T09:58:47.3370505Z         --------
2025-08-30T09:58:47.3370592Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3370668Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3370813Z         1
2025-08-30T09:58:47.3370871Z     
2025-08-30T09:58:47.3370963Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3371041Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3371113Z         slice(1, 3, None)
2025-08-30T09:58:47.3371167Z     
2025-08-30T09:58:47.3371264Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3371345Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3371432Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3371487Z         """
2025-08-30T09:58:47.3371578Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3371639Z         try:
2025-08-30T09:58:47.3371726Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3371878Z         except KeyError as err:
2025-08-30T09:58:47.3371969Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3372061Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3372176Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3372233Z             ):
2025-08-30T09:58:47.3372319Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3372394Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3372466Z E           KeyError: 'date'
2025-08-30T09:58:47.3372471Z 
2025-08-30T09:58:47.3372663Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3372801Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3373126Z 2025-08-30 09:55:41 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3373732Z 2025-08-30 09:55:41 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3374152Z 2025-08-30 09:55:41 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3374252Z 2025-08-30 09:55:41 INFO Found no parameter file.
2025-08-30T09:58:47.3374539Z 2025-08-30 09:55:41 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3374715Z 2025-08-30 09:55:41 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3374895Z 2025-08-30 09:55:41 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3375092Z 2025-08-30 09:55:41 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3375280Z 2025-08-30 09:55:41 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3375543Z 2025-08-30 09:55:41 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3375733Z 2025-08-30 09:55:41 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3375931Z 2025-08-30 09:55:41 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3376034Z 2025-08-30 09:55:41 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3376139Z 2025-08-30 09:55:41 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3376258Z 2025-08-30 09:55:41 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3376404Z 2025-08-30 09:55:41 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3376558Z 2025-08-30 09:55:41 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3376692Z 2025-08-30 09:55:41 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3376829Z 2025-08-30 09:55:41 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3377133Z 2025-08-30 09:55:41 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3377449Z 2025-08-30 09:55:41 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3377564Z 2025-08-30 09:55:41 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3377672Z 2025-08-30 09:55:41 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3377802Z 2025-08-30 09:55:41 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3377969Z 2025-08-30 09:55:41 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3378085Z 2025-08-30 09:55:41 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3378209Z 2025-08-30 09:55:41 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3378352Z 2025-08-30 09:55:41 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3378583Z 2025-08-30 09:55:41 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3378727Z 2025-08-30 09:55:41 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3378882Z 2025-08-30 09:55:41 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3379028Z 2025-08-30 09:55:41 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3379168Z 2025-08-30 09:55:41 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3379282Z 2025-08-30 09:55:41 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3379495Z 2025-08-30 09:55:41 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 100 - after: 103 - 3.00%
2025-08-30T09:58:47.3379644Z ____________________ test_recursive_biased_strategy[bias1] _____________________
2025-08-30T09:58:47.3379649Z 
2025-08-30T09:58:47.3379808Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3379869Z key = 'date'
2025-08-30T09:58:47.3379873Z 
2025-08-30T09:58:47.3379947Z     def get_loc(self, key):
2025-08-30T09:58:47.3380007Z         """
2025-08-30T09:58:47.3380156Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3380214Z     
2025-08-30T09:58:47.3380276Z         Parameters
2025-08-30T09:58:47.3380345Z         ----------
2025-08-30T09:58:47.3380407Z         key : label
2025-08-30T09:58:47.3380463Z     
2025-08-30T09:58:47.3380529Z         Returns
2025-08-30T09:58:47.3380589Z         -------
2025-08-30T09:58:47.3380710Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3380765Z     
2025-08-30T09:58:47.3380831Z         Examples
2025-08-30T09:58:47.3380890Z         --------
2025-08-30T09:58:47.3380977Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3381061Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3381118Z         1
2025-08-30T09:58:47.3381172Z     
2025-08-30T09:58:47.3381266Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3381356Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3381422Z         slice(1, 3, None)
2025-08-30T09:58:47.3381476Z     
2025-08-30T09:58:47.3381579Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3381664Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3381743Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3381804Z         """
2025-08-30T09:58:47.3381895Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3381952Z         try:
2025-08-30T09:58:47.3382040Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3382115Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3382119Z 
2025-08-30T09:58:47.3382286Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3382385Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3382553Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3382613Z     ???
2025-08-30T09:58:47.3382770Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3382828Z     ???
2025-08-30T09:58:47.3383182Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3383237Z     ???
2025-08-30T09:58:47.3383336Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3383493Z 
2025-08-30T09:58:47.3383598Z >   ???
2025-08-30T09:58:47.3383675Z E   KeyError: 'date'
2025-08-30T09:58:47.3383681Z 
2025-08-30T09:58:47.3383808Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3383813Z 
2025-08-30T09:58:47.3383975Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3383981Z 
2025-08-30T09:58:47.3384693Z recursive_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3384854Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6594f0c550>
2025-08-30T09:58:47.3385017Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584f243d0>
2025-08-30T09:58:47.3385086Z scenario = 'bias1'
2025-08-30T09:58:47.3385091Z 
2025-08-30T09:58:47.3385248Z     @pytest.mark.parametrize("scenario", ["no_bias", "bias1", "bias2"])
2025-08-30T09:58:47.3385485Z     def test_recursive_biased_strategy(recursive_conf, mocker, caplog, scenario) -> None:
2025-08-30T09:58:47.3385562Z         patch_exchange(mocker)
2025-08-30T09:58:47.3385676Z         mocker.patch(f"{EXMS}.get_fee", return_value=0.0)
2025-08-30T09:58:47.3385850Z         mocker.patch("freqtrade.data.history.get_timerange", get_timerange)
2025-08-30T09:58:47.3385920Z         mocker.patch(
2025-08-30T09:58:47.3386104Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3386216Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3386275Z         )
2025-08-30T09:58:47.3386366Z         recursive_conf["pairs"] = ["UNITTEST/BTC"]
2025-08-30T09:58:47.3386422Z     
2025-08-30T09:58:47.3386515Z         recursive_conf["timeframe"] = "5m"
2025-08-30T09:58:47.3386616Z         recursive_conf["timerange"] = "20180119-20180122"
2025-08-30T09:58:47.3386705Z         recursive_conf["startup_candle"] = [100]
2025-08-30T09:58:47.3386767Z     
2025-08-30T09:58:47.3386887Z         # Patch scenario Parameter to allow for easy selection
2025-08-30T09:58:47.3386955Z         mocker.patch(
2025-08-30T09:58:47.3387153Z             "freqtrade.strategy.hyper.HyperStrategyMixin.load_params_from_file",
2025-08-30T09:58:47.3387279Z             return_value={"params": {"buy": {"scenario": scenario}}},
2025-08-30T09:58:47.3387337Z         )
2025-08-30T09:58:47.3395073Z     
2025-08-30T09:58:47.3395263Z         strategy_obj = {"name": "strategy_test_v3_recursive_issue"}
2025-08-30T09:58:47.3395428Z         instance = RecursiveAnalysis(recursive_conf, strategy_obj)
2025-08-30T09:58:47.3395504Z >       instance.start()
2025-08-30T09:58:47.3395510Z 
2025-08-30T09:58:47.3395632Z tests/optimize/test_recursive_analysis.py:172: 
2025-08-30T09:58:47.3395744Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3395885Z freqtrade/optimize/analysis/recursive.py:183: in start
2025-08-30T09:58:47.3395957Z     super().start()
2025-08-30T09:58:47.3396093Z freqtrade/optimize/analysis/base_analysis.py:64: in start
2025-08-30T09:58:47.3396175Z     self.fill_full_varholder()
2025-08-30T09:58:47.3396366Z freqtrade/optimize/analysis/base_analysis.py:60: in fill_full_varholder
2025-08-30T09:58:47.3396530Z     self.prepare_data(self.full_varHolder, self.local_config["pairs"])
2025-08-30T09:58:47.3396682Z freqtrade/optimize/analysis/recursive.py:151: in prepare_data
2025-08-30T09:58:47.3396845Z     varholder.data, varholder.timerange = backtesting.load_bt_data()
2025-08-30T09:58:47.3396932Z                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3397055Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3397161Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3397408Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3397555Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3397620Z     timeranges = [
2025-08-30T09:58:47.3397763Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3397921Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3397980Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3398176Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3398270Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3398336Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3398550Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3398556Z 
2025-08-30T09:58:47.3398723Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3398785Z key = 'date'
2025-08-30T09:58:47.3398794Z 
2025-08-30T09:58:47.3398867Z     def get_loc(self, key):
2025-08-30T09:58:47.3398930Z         """
2025-08-30T09:58:47.3399081Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3399138Z     
2025-08-30T09:58:47.3399206Z         Parameters
2025-08-30T09:58:47.3399269Z         ----------
2025-08-30T09:58:47.3399330Z         key : label
2025-08-30T09:58:47.3399385Z     
2025-08-30T09:58:47.3399449Z         Returns
2025-08-30T09:58:47.3399507Z         -------
2025-08-30T09:58:47.3399633Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3399692Z     
2025-08-30T09:58:47.3399753Z         Examples
2025-08-30T09:58:47.3399813Z         --------
2025-08-30T09:58:47.3399901Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3399988Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3400045Z         1
2025-08-30T09:58:47.3400100Z     
2025-08-30T09:58:47.3400199Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3400281Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3400349Z         slice(1, 3, None)
2025-08-30T09:58:47.3400404Z     
2025-08-30T09:58:47.3400510Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3400592Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3400674Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3400736Z         """
2025-08-30T09:58:47.3400827Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3400885Z         try:
2025-08-30T09:58:47.3400974Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3401053Z         except KeyError as err:
2025-08-30T09:58:47.3401142Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3401238Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3401357Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3401413Z             ):
2025-08-30T09:58:47.3401502Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3401585Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3401656Z E           KeyError: 'date'
2025-08-30T09:58:47.3401660Z 
2025-08-30T09:58:47.3401858Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3402005Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3402147Z 2025-08-30 09:55:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3402227Z 2025-08-30 09:55:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3402320Z 2025-08-30 09:55:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3402443Z 2025-08-30 09:55:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3402953Z 2025-08-30 09:55:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3403808Z 2025-08-30 09:55:55 INFO Using resolved strategy strategy_test_v3_recursive_issue from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3_recursive_issue.py'...
2025-08-30T09:58:47.3404262Z 2025-08-30 09:55:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3404450Z 2025-08-30 09:55:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3404638Z 2025-08-30 09:55:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3404843Z 2025-08-30 09:55:55 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.3405035Z 2025-08-30 09:55:55 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.3405424Z 2025-08-30 09:55:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3405619Z 2025-08-30 09:55:55 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3405819Z 2025-08-30 09:55:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3405924Z 2025-08-30 09:55:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3406037Z 2025-08-30 09:55:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3406160Z 2025-08-30 09:55:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3406310Z 2025-08-30 09:55:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3406473Z 2025-08-30 09:55:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3406600Z 2025-08-30 09:55:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3406742Z 2025-08-30 09:55:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3407225Z 2025-08-30 09:55:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3407420Z 2025-08-30 09:55:55 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3407532Z 2025-08-30 09:55:55 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.3407640Z 2025-08-30 09:55:55 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.3407773Z 2025-08-30 09:55:55 INFO Strategy using startup_candle_count: 100
2025-08-30T09:58:47.3407939Z 2025-08-30 09:55:55 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3408055Z 2025-08-30 09:55:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3408183Z 2025-08-30 09:55:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3408327Z 2025-08-30 09:55:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3408443Z 2025-08-30 09:55:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3408585Z 2025-08-30 09:55:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3408741Z 2025-08-30 09:55:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3408882Z 2025-08-30 09:55:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3409026Z 2025-08-30 09:55:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3409134Z 2025-08-30 09:55:55 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3409237Z 2025-08-30 09:55:55 INFO Validating configuration ...
2025-08-30T09:58:47.3409686Z 2025-08-30 09:55:55 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3409956Z 2025-08-30 09:55:55 WARNING Pair UNITTEST/BTC is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.3410135Z 2025-08-30 09:55:55 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3410256Z 2025-08-30 09:55:55 INFO Strategy Parameter: scenario = bias1
2025-08-30T09:58:47.3410616Z 2025-08-30 09:55:55 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3410775Z 2025-08-30 09:55:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3410926Z ___________________ test_recursive_biased_strategy[no_bias] ____________________
2025-08-30T09:58:47.3410932Z 
2025-08-30T09:58:47.3411094Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3411155Z key = 'date'
2025-08-30T09:58:47.3411159Z 
2025-08-30T09:58:47.3411231Z     def get_loc(self, key):
2025-08-30T09:58:47.3411293Z         """
2025-08-30T09:58:47.3411443Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3411496Z     
2025-08-30T09:58:47.3411564Z         Parameters
2025-08-30T09:58:47.3411703Z         ----------
2025-08-30T09:58:47.3411766Z         key : label
2025-08-30T09:58:47.3411821Z     
2025-08-30T09:58:47.3411884Z         Returns
2025-08-30T09:58:47.3411946Z         -------
2025-08-30T09:58:47.3412068Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3412127Z     
2025-08-30T09:58:47.3412186Z         Examples
2025-08-30T09:58:47.3412246Z         --------
2025-08-30T09:58:47.3412337Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3412419Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3412476Z         1
2025-08-30T09:58:47.3412530Z     
2025-08-30T09:58:47.3412631Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3412710Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3412778Z         slice(1, 3, None)
2025-08-30T09:58:47.3412832Z     
2025-08-30T09:58:47.3412939Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3413025Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3413109Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3413171Z         """
2025-08-30T09:58:47.3413265Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3413326Z         try:
2025-08-30T09:58:47.3413532Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3413609Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3413614Z 
2025-08-30T09:58:47.3413789Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3413894Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3414067Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3414126Z     ???
2025-08-30T09:58:47.3414285Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3414345Z     ???
2025-08-30T09:58:47.3414612Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3414670Z     ???
2025-08-30T09:58:47.3414773Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3414781Z 
2025-08-30T09:58:47.3414837Z >   ???
2025-08-30T09:58:47.3414905Z E   KeyError: 'date'
2025-08-30T09:58:47.3414909Z 
2025-08-30T09:58:47.3415033Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3415038Z 
2025-08-30T09:58:47.3415192Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3415196Z 
2025-08-30T09:58:47.3415788Z recursive_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3415950Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65a4198850>
2025-08-30T09:58:47.3416110Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6574cf89d0>
2025-08-30T09:58:47.3416177Z scenario = 'no_bias'
2025-08-30T09:58:47.3416182Z 
2025-08-30T09:58:47.3416343Z     @pytest.mark.parametrize("scenario", ["no_bias", "bias1", "bias2"])
2025-08-30T09:58:47.3416677Z     def test_recursive_biased_strategy(recursive_conf, mocker, caplog, scenario) -> None:
2025-08-30T09:58:47.3416755Z         patch_exchange(mocker)
2025-08-30T09:58:47.3416867Z         mocker.patch(f"{EXMS}.get_fee", return_value=0.0)
2025-08-30T09:58:47.3417039Z         mocker.patch("freqtrade.data.history.get_timerange", get_timerange)
2025-08-30T09:58:47.3417108Z         mocker.patch(
2025-08-30T09:58:47.3417291Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3417397Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3417453Z         )
2025-08-30T09:58:47.3417544Z         recursive_conf["pairs"] = ["UNITTEST/BTC"]
2025-08-30T09:58:47.3417603Z     
2025-08-30T09:58:47.3417687Z         recursive_conf["timeframe"] = "5m"
2025-08-30T09:58:47.3417909Z         recursive_conf["timerange"] = "20180119-20180122"
2025-08-30T09:58:47.3418003Z         recursive_conf["startup_candle"] = [100]
2025-08-30T09:58:47.3418065Z     
2025-08-30T09:58:47.3418184Z         # Patch scenario Parameter to allow for easy selection
2025-08-30T09:58:47.3418251Z         mocker.patch(
2025-08-30T09:58:47.3418447Z             "freqtrade.strategy.hyper.HyperStrategyMixin.load_params_from_file",
2025-08-30T09:58:47.3418570Z             return_value={"params": {"buy": {"scenario": scenario}}},
2025-08-30T09:58:47.3418638Z         )
2025-08-30T09:58:47.3418709Z     
2025-08-30T09:58:47.3418845Z         strategy_obj = {"name": "strategy_test_v3_recursive_issue"}
2025-08-30T09:58:47.3418981Z         instance = RecursiveAnalysis(recursive_conf, strategy_obj)
2025-08-30T09:58:47.3419051Z >       instance.start()
2025-08-30T09:58:47.3419055Z 
2025-08-30T09:58:47.3419166Z tests/optimize/test_recursive_analysis.py:172: 
2025-08-30T09:58:47.3419267Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3419393Z freqtrade/optimize/analysis/recursive.py:183: in start
2025-08-30T09:58:47.3419461Z     super().start()
2025-08-30T09:58:47.3419594Z freqtrade/optimize/analysis/base_analysis.py:64: in start
2025-08-30T09:58:47.3419670Z     self.fill_full_varholder()
2025-08-30T09:58:47.3419850Z freqtrade/optimize/analysis/base_analysis.py:60: in fill_full_varholder
2025-08-30T09:58:47.3420009Z     self.prepare_data(self.full_varHolder, self.local_config["pairs"])
2025-08-30T09:58:47.3420153Z freqtrade/optimize/analysis/recursive.py:151: in prepare_data
2025-08-30T09:58:47.3420310Z     varholder.data, varholder.timerange = backtesting.load_bt_data()
2025-08-30T09:58:47.3420392Z                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3420509Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3420607Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3420685Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3420826Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3420889Z     timeranges = [
2025-08-30T09:58:47.3421025Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3421180Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3421237Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3421423Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3421515Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3421592Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3421690Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3421695Z 
2025-08-30T09:58:47.3421860Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3421921Z key = 'date'
2025-08-30T09:58:47.3421926Z 
2025-08-30T09:58:47.3421999Z     def get_loc(self, key):
2025-08-30T09:58:47.3422059Z         """
2025-08-30T09:58:47.3422208Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3422354Z     
2025-08-30T09:58:47.3422422Z         Parameters
2025-08-30T09:58:47.3422483Z         ----------
2025-08-30T09:58:47.3422543Z         key : label
2025-08-30T09:58:47.3422601Z     
2025-08-30T09:58:47.3422658Z         Returns
2025-08-30T09:58:47.3422718Z         -------
2025-08-30T09:58:47.3422839Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3422898Z     
2025-08-30T09:58:47.3422957Z         Examples
2025-08-30T09:58:47.3423016Z         --------
2025-08-30T09:58:47.3423106Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3423184Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3423240Z         1
2025-08-30T09:58:47.3423294Z     
2025-08-30T09:58:47.3423590Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3423821Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3423896Z         slice(1, 3, None)
2025-08-30T09:58:47.3423956Z     
2025-08-30T09:58:47.3424058Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3424147Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3424230Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3424285Z         """
2025-08-30T09:58:47.3424374Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3424431Z         try:
2025-08-30T09:58:47.3424523Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3424598Z         except KeyError as err:
2025-08-30T09:58:47.3424687Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3424780Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3424889Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3424946Z             ):
2025-08-30T09:58:47.3425033Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3425116Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3425186Z E           KeyError: 'date'
2025-08-30T09:58:47.3425191Z 
2025-08-30T09:58:47.3425388Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3425532Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3425659Z 2025-08-30 09:55:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3425737Z 2025-08-30 09:55:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3425834Z 2025-08-30 09:55:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3425950Z 2025-08-30 09:55:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3426480Z 2025-08-30 09:55:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3427011Z 2025-08-30 09:55:55 INFO Using resolved strategy strategy_test_v3_recursive_issue from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3_recursive_issue.py'...
2025-08-30T09:58:47.3427301Z 2025-08-30 09:55:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3427479Z 2025-08-30 09:55:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3427659Z 2025-08-30 09:55:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3427852Z 2025-08-30 09:55:55 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.3428041Z 2025-08-30 09:55:55 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.3428309Z 2025-08-30 09:55:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3428498Z 2025-08-30 09:55:55 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3428694Z 2025-08-30 09:55:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3428801Z 2025-08-30 09:55:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3429025Z 2025-08-30 09:55:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3429140Z 2025-08-30 09:55:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3429287Z 2025-08-30 09:55:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3429446Z 2025-08-30 09:55:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3429573Z 2025-08-30 09:55:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3429710Z 2025-08-30 09:55:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3430264Z 2025-08-30 09:55:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3430458Z 2025-08-30 09:55:55 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3430571Z 2025-08-30 09:55:55 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.3430686Z 2025-08-30 09:55:55 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.3430811Z 2025-08-30 09:55:55 INFO Strategy using startup_candle_count: 100
2025-08-30T09:58:47.3430974Z 2025-08-30 09:55:55 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3431092Z 2025-08-30 09:55:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3431215Z 2025-08-30 09:55:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3431356Z 2025-08-30 09:55:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3431478Z 2025-08-30 09:55:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3431616Z 2025-08-30 09:55:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3431771Z 2025-08-30 09:55:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3431914Z 2025-08-30 09:55:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3432072Z 2025-08-30 09:55:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3432179Z 2025-08-30 09:55:55 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3432284Z 2025-08-30 09:55:55 INFO Validating configuration ...
2025-08-30T09:58:47.3432727Z 2025-08-30 09:55:55 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3432997Z 2025-08-30 09:55:55 WARNING Pair UNITTEST/BTC is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.3433171Z 2025-08-30 09:55:55 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3433294Z 2025-08-30 09:55:55 INFO Strategy Parameter: scenario = no_bias
2025-08-30T09:58:47.3433584Z 2025-08-30 09:55:55 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3433737Z 2025-08-30 09:55:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3433893Z ____________________ test_recursive_biased_strategy[bias2] _____________________
2025-08-30T09:58:47.3433899Z 
2025-08-30T09:58:47.3434055Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3434115Z key = 'date'
2025-08-30T09:58:47.3434120Z 
2025-08-30T09:58:47.3434195Z     def get_loc(self, key):
2025-08-30T09:58:47.3434252Z         """
2025-08-30T09:58:47.3434398Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3434458Z     
2025-08-30T09:58:47.3434523Z         Parameters
2025-08-30T09:58:47.3434584Z         ----------
2025-08-30T09:58:47.3434645Z         key : label
2025-08-30T09:58:47.3434703Z     
2025-08-30T09:58:47.3434762Z         Returns
2025-08-30T09:58:47.3434822Z         -------
2025-08-30T09:58:47.3434952Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3435007Z     
2025-08-30T09:58:47.3435066Z         Examples
2025-08-30T09:58:47.3435251Z         --------
2025-08-30T09:58:47.3435346Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3435424Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3435480Z         1
2025-08-30T09:58:47.3435538Z     
2025-08-30T09:58:47.3435631Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3435709Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3435776Z         slice(1, 3, None)
2025-08-30T09:58:47.3435834Z     
2025-08-30T09:58:47.3435933Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3436015Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3436100Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3436156Z         """
2025-08-30T09:58:47.3436246Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3436407Z         try:
2025-08-30T09:58:47.3436503Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3436573Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3436582Z 
2025-08-30T09:58:47.3436750Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3436852Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3437024Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3437081Z     ???
2025-08-30T09:58:47.3437250Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3437306Z     ???
2025-08-30T09:58:47.3437571Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3437631Z     ???
2025-08-30T09:58:47.3437731Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3437735Z 
2025-08-30T09:58:47.3437794Z >   ???
2025-08-30T09:58:47.3437866Z E   KeyError: 'date'
2025-08-30T09:58:47.3437871Z 
2025-08-30T09:58:47.3437990Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3437998Z 
2025-08-30T09:58:47.3438152Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3438157Z 
2025-08-30T09:58:47.3438747Z recursive_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3438910Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6594f94550>
2025-08-30T09:58:47.3439065Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65841c7f10>
2025-08-30T09:58:47.3439132Z scenario = 'bias2'
2025-08-30T09:58:47.3439137Z 
2025-08-30T09:58:47.3439294Z     @pytest.mark.parametrize("scenario", ["no_bias", "bias1", "bias2"])
2025-08-30T09:58:47.3439508Z     def test_recursive_biased_strategy(recursive_conf, mocker, caplog, scenario) -> None:
2025-08-30T09:58:47.3439588Z         patch_exchange(mocker)
2025-08-30T09:58:47.3439699Z         mocker.patch(f"{EXMS}.get_fee", return_value=0.0)
2025-08-30T09:58:47.3439871Z         mocker.patch("freqtrade.data.history.get_timerange", get_timerange)
2025-08-30T09:58:47.3439944Z         mocker.patch(
2025-08-30T09:58:47.3440126Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3440228Z             PropertyMock(return_value=["UNITTEST/BTC"]),
2025-08-30T09:58:47.3440285Z         )
2025-08-30T09:58:47.3440381Z         recursive_conf["pairs"] = ["UNITTEST/BTC"]
2025-08-30T09:58:47.3440435Z     
2025-08-30T09:58:47.3440518Z         recursive_conf["timeframe"] = "5m"
2025-08-30T09:58:47.3440621Z         recursive_conf["timerange"] = "20180119-20180122"
2025-08-30T09:58:47.3440708Z         recursive_conf["startup_candle"] = [100]
2025-08-30T09:58:47.3440762Z     
2025-08-30T09:58:47.3440883Z         # Patch scenario Parameter to allow for easy selection
2025-08-30T09:58:47.3440954Z         mocker.patch(
2025-08-30T09:58:47.3441140Z             "freqtrade.strategy.hyper.HyperStrategyMixin.load_params_from_file",
2025-08-30T09:58:47.3441499Z             return_value={"params": {"buy": {"scenario": scenario}}},
2025-08-30T09:58:47.3441617Z         )
2025-08-30T09:58:47.3441713Z     
2025-08-30T09:58:47.3441936Z         strategy_obj = {"name": "strategy_test_v3_recursive_issue"}
2025-08-30T09:58:47.3442080Z         instance = RecursiveAnalysis(recursive_conf, strategy_obj)
2025-08-30T09:58:47.3442150Z >       instance.start()
2025-08-30T09:58:47.3442155Z 
2025-08-30T09:58:47.3442266Z tests/optimize/test_recursive_analysis.py:172: 
2025-08-30T09:58:47.3442371Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3442500Z freqtrade/optimize/analysis/recursive.py:183: in start
2025-08-30T09:58:47.3442565Z     super().start()
2025-08-30T09:58:47.3442794Z freqtrade/optimize/analysis/base_analysis.py:64: in start
2025-08-30T09:58:47.3442880Z     self.fill_full_varholder()
2025-08-30T09:58:47.3443057Z freqtrade/optimize/analysis/base_analysis.py:60: in fill_full_varholder
2025-08-30T09:58:47.3443218Z     self.prepare_data(self.full_varHolder, self.local_config["pairs"])
2025-08-30T09:58:47.3443544Z freqtrade/optimize/analysis/recursive.py:151: in prepare_data
2025-08-30T09:58:47.3443822Z     varholder.data, varholder.timerange = backtesting.load_bt_data()
2025-08-30T09:58:47.3443906Z                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3444039Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3444142Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3444213Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3444356Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3444427Z     timeranges = [
2025-08-30T09:58:47.3444564Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3444723Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3444784Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3444976Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3445060Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3445128Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3445228Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3445234Z 
2025-08-30T09:58:47.3445395Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3445459Z key = 'date'
2025-08-30T09:58:47.3445464Z 
2025-08-30T09:58:47.3445536Z     def get_loc(self, key):
2025-08-30T09:58:47.3445592Z         """
2025-08-30T09:58:47.3445745Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3445800Z     
2025-08-30T09:58:47.3445865Z         Parameters
2025-08-30T09:58:47.3445926Z         ----------
2025-08-30T09:58:47.3445988Z         key : label
2025-08-30T09:58:47.3446043Z     
2025-08-30T09:58:47.3446100Z         Returns
2025-08-30T09:58:47.3446167Z         -------
2025-08-30T09:58:47.3446293Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3446347Z     
2025-08-30T09:58:47.3446405Z         Examples
2025-08-30T09:58:47.3446466Z         --------
2025-08-30T09:58:47.3446554Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3446632Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3446687Z         1
2025-08-30T09:58:47.3446744Z     
2025-08-30T09:58:47.3446836Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3446917Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3446987Z         slice(1, 3, None)
2025-08-30T09:58:47.3447041Z     
2025-08-30T09:58:47.3447140Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3447227Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3447311Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3447367Z         """
2025-08-30T09:58:47.3447601Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3447664Z         try:
2025-08-30T09:58:47.3447754Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3447828Z         except KeyError as err:
2025-08-30T09:58:47.3447917Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3448007Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3448118Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3448174Z             ):
2025-08-30T09:58:47.3448262Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3448339Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3448410Z E           KeyError: 'date'
2025-08-30T09:58:47.3448415Z 
2025-08-30T09:58:47.3448715Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3448861Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3448994Z 2025-08-30 09:55:56 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3449075Z 2025-08-30 09:55:56 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3449166Z 2025-08-30 09:55:56 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3449285Z 2025-08-30 09:55:56 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3449785Z 2025-08-30 09:55:56 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3450311Z 2025-08-30 09:55:56 INFO Using resolved strategy strategy_test_v3_recursive_issue from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3_recursive_issue.py'...
2025-08-30T09:58:47.3450599Z 2025-08-30 09:55:56 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3450779Z 2025-08-30 09:55:56 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3450961Z 2025-08-30 09:55:56 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3451158Z 2025-08-30 09:55:56 INFO Override strategy 'stake_currency' with value in config file: USDT.
2025-08-30T09:58:47.3451348Z 2025-08-30 09:55:56 INFO Override strategy 'stake_amount' with value in config file: 60.0.
2025-08-30T09:58:47.3451610Z 2025-08-30 09:55:56 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3451798Z 2025-08-30 09:55:56 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3451991Z 2025-08-30 09:55:56 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3452101Z 2025-08-30 09:55:56 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3452209Z 2025-08-30 09:55:56 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3452324Z 2025-08-30 09:55:56 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3452478Z 2025-08-30 09:55:56 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3452637Z 2025-08-30 09:55:56 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3452763Z 2025-08-30 09:55:56 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3452905Z 2025-08-30 09:55:56 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3453613Z 2025-08-30 09:55:56 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3453823Z 2025-08-30 09:55:56 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3453947Z 2025-08-30 09:55:56 INFO Strategy using stake_currency: USDT
2025-08-30T09:58:47.3454062Z 2025-08-30 09:55:56 INFO Strategy using stake_amount: 60.0
2025-08-30T09:58:47.3454191Z 2025-08-30 09:55:56 INFO Strategy using startup_candle_count: 100
2025-08-30T09:58:47.3454497Z 2025-08-30 09:55:56 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3454615Z 2025-08-30 09:55:56 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3454737Z 2025-08-30 09:55:56 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3454884Z 2025-08-30 09:55:56 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3455002Z 2025-08-30 09:55:56 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3455139Z 2025-08-30 09:55:56 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3455290Z 2025-08-30 09:55:56 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3455441Z 2025-08-30 09:55:56 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3455687Z 2025-08-30 09:55:56 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3455805Z 2025-08-30 09:55:56 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3455914Z 2025-08-30 09:55:56 INFO Validating configuration ...
2025-08-30T09:58:47.3456360Z 2025-08-30 09:55:56 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3456629Z 2025-08-30 09:55:56 WARNING Pair UNITTEST/BTC is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.3456829Z 2025-08-30 09:55:56 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3456946Z 2025-08-30 09:55:56 INFO Strategy Parameter: scenario = bias2
2025-08-30T09:58:47.3457085Z 2025-08-30 09:55:56 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3457238Z 2025-08-30 09:55:56 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3457395Z __________________ test_backtest_analysis_with_invalid_config __________________
2025-08-30T09:58:47.3457400Z 
2025-08-30T09:58:47.3457558Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3457625Z key = 'date'
2025-08-30T09:58:47.3457629Z 
2025-08-30T09:58:47.3457702Z     def get_loc(self, key):
2025-08-30T09:58:47.3457758Z         """
2025-08-30T09:58:47.3457909Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3457968Z     
2025-08-30T09:58:47.3458030Z         Parameters
2025-08-30T09:58:47.3458090Z         ----------
2025-08-30T09:58:47.3458155Z         key : label
2025-08-30T09:58:47.3458212Z     
2025-08-30T09:58:47.3458270Z         Returns
2025-08-30T09:58:47.3458328Z         -------
2025-08-30T09:58:47.3458454Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3458507Z     
2025-08-30T09:58:47.3458566Z         Examples
2025-08-30T09:58:47.3458628Z         --------
2025-08-30T09:58:47.3458722Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3458801Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3458857Z         1
2025-08-30T09:58:47.3458916Z     
2025-08-30T09:58:47.3459014Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3459093Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3459165Z         slice(1, 3, None)
2025-08-30T09:58:47.3459223Z     
2025-08-30T09:58:47.3459321Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3459406Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3459489Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3459546Z         """
2025-08-30T09:58:47.3459636Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3459697Z         try:
2025-08-30T09:58:47.3459786Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3459856Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3459860Z 
2025-08-30T09:58:47.3460038Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3460139Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3460394Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3460455Z     ???
2025-08-30T09:58:47.3460613Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3460668Z     ???
2025-08-30T09:58:47.3460927Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3460986Z     ???
2025-08-30T09:58:47.3461084Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3461089Z 
2025-08-30T09:58:47.3461143Z >   ???
2025-08-30T09:58:47.3461212Z E   KeyError: 'date'
2025-08-30T09:58:47.3461217Z 
2025-08-30T09:58:47.3461332Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3461336Z 
2025-08-30T09:58:47.3461569Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3461574Z 
2025-08-30T09:58:47.3462159Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3462317Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65949ad090>
2025-08-30T09:58:47.3462475Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65c8f42990>
2025-08-30T09:58:47.3462674Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3462918Z user_dir = PosixPath('/tmp/pytest-of-runner/pytest-0/test_backtest_analysis_with_in0/user_data')
2025-08-30T09:58:47.3463074Z capsys = <_pytest.capture.CaptureFixture object at 0x7f65c8f43450>
2025-08-30T09:58:47.3463079Z 
2025-08-30T09:58:47.3463183Z     def test_backtest_analysis_with_invalid_config(
2025-08-30T09:58:47.3463324Z         default_conf, mocker, caplog, testdatadir, user_dir, capsys
2025-08-30T09:58:47.3463564Z     ):
2025-08-30T09:58:47.3463679Z         caplog.set_level(logging.INFO)
2025-08-30T09:58:47.3463837Z         (user_dir / "backtest_results").mkdir(parents=True, exist_ok=True)
2025-08-30T09:58:47.3463893Z     
2025-08-30T09:58:47.3463970Z         default_conf.update(
2025-08-30T09:58:47.3464031Z             {
2025-08-30T09:58:47.3464109Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3464187Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3464268Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3464355Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3464411Z             }
2025-08-30T09:58:47.3464473Z         )
2025-08-30T09:58:47.3464550Z         patch_exchange(mocker)
2025-08-30T09:58:47.3464627Z         result1 = pd.DataFrame(
2025-08-30T09:58:47.3464683Z             {
2025-08-30T09:58:47.3464795Z                 "pair": ["ETH/BTC", "LTC/BTC", "ETH/BTC", "LTC/BTC"],
2025-08-30T09:58:47.3464888Z                 "profit_ratio": [0.025, 0.05, -0.1, -0.05],
2025-08-30T09:58:47.3464977Z                 "profit_abs": [0.5, 2.0, -4.0, -2.0],
2025-08-30T09:58:47.3465070Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.3465131Z                     [
2025-08-30T09:58:47.3465204Z                         "2018-01-29 18:40:00",
2025-08-30T09:58:47.3465273Z                         "2018-01-30 03:30:00",
2025-08-30T09:58:47.3465343Z                         "2018-01-30 08:10:00",
2025-08-30T09:58:47.3465410Z                         "2018-01-31 13:30:00",
2025-08-30T09:58:47.3465471Z                     ],
2025-08-30T09:58:47.3465544Z                     utc=True,
2025-08-30T09:58:47.3465601Z                 ),
2025-08-30T09:58:47.3465682Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.3465745Z                     [
2025-08-30T09:58:47.3465812Z                         "2018-01-29 20:45:00",
2025-08-30T09:58:47.3465881Z                         "2018-01-30 05:35:00",
2025-08-30T09:58:47.3465946Z                         "2018-01-30 09:10:00",
2025-08-30T09:58:47.3466016Z                         "2018-01-31 15:00:00",
2025-08-30T09:58:47.3466246Z                     ],
2025-08-30T09:58:47.3466312Z                     utc=True,
2025-08-30T09:58:47.3466372Z                 ),
2025-08-30T09:58:47.3466456Z                 "trade_duration": [235, 40, 60, 90],
2025-08-30T09:58:47.3466548Z                 "is_open": [False, False, False, False],
2025-08-30T09:58:47.3466631Z                 "stake_amount": [0.01, 0.01, 0.01, 0.01],
2025-08-30T09:58:47.3466748Z                 "open_rate": [0.104445, 0.10302485, 0.10302485, 0.10302485],
2025-08-30T09:58:47.3466851Z                 "close_rate": [0.104969, 0.103541, 0.102041, 0.102541],
2025-08-30T09:58:47.3466939Z                 "is_short": [False, False, False, False],
2025-08-30T09:58:47.3467012Z                 "enter_tag": [
2025-08-30T09:58:47.3467086Z                     "enter_tag_long_a",
2025-08-30T09:58:47.3467265Z                     "enter_tag_long_b",
2025-08-30T09:58:47.3467345Z                     "enter_tag_long_a",
2025-08-30T09:58:47.3467413Z                     "enter_tag_long_b",
2025-08-30T09:58:47.3467473Z                 ],
2025-08-30T09:58:47.3467543Z                 "exit_reason": [
2025-08-30T09:58:47.3467620Z                     ExitType.ROI.value,
2025-08-30T09:58:47.3467708Z                     ExitType.EXIT_SIGNAL.value,
2025-08-30T09:58:47.3467791Z                     ExitType.STOP_LOSS.value,
2025-08-30T09:58:47.3467887Z                     ExitType.TRAILING_STOP_LOSS.value,
2025-08-30T09:58:47.3467943Z                 ],
2025-08-30T09:58:47.3467998Z             }
2025-08-30T09:58:47.3468055Z         )
2025-08-30T09:58:47.3468128Z     
2025-08-30T09:58:47.3468205Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3468272Z             side_effect=[
2025-08-30T09:58:47.3468332Z                 {
2025-08-30T09:58:47.3468402Z                     "results": result1,
2025-08-30T09:58:47.3468481Z                     "config": default_conf,
2025-08-30T09:58:47.3468552Z                     "locks": [],
2025-08-30T09:58:47.3468628Z                     "rejected_signals": 20,
2025-08-30T09:58:47.3468712Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.3468790Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.3468888Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.3468971Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.3469049Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.3469129Z                     "final_balance": 1000,
2025-08-30T09:58:47.3469186Z                 }
2025-08-30T09:58:47.3469242Z             ]
2025-08-30T09:58:47.3469297Z         )
2025-08-30T09:58:47.3469370Z         mocker.patch(
2025-08-30T09:58:47.3469555Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3469704Z             PropertyMock(return_value=["ETH/BTC", "LTC/BTC", "DASH/BTC"]),
2025-08-30T09:58:47.3469764Z         )
2025-08-30T09:58:47.3470000Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3470058Z     
2025-08-30T09:58:47.3470203Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.3470258Z     
2025-08-30T09:58:47.3470316Z         args = [
2025-08-30T09:58:47.3470386Z             "backtesting",
2025-08-30T09:58:47.3470454Z             "--config",
2025-08-30T09:58:47.3470522Z             "config.json",
2025-08-30T09:58:47.3470585Z             "--datadir",
2025-08-30T09:58:47.3470661Z             str(testdatadir),
2025-08-30T09:58:47.3470731Z             "--user-data-dir",
2025-08-30T09:58:47.3470796Z             str(user_dir),
2025-08-30T09:58:47.3470860Z             "--timeframe",
2025-08-30T09:58:47.3470921Z             "5m",
2025-08-30T09:58:47.3470984Z             "--timerange",
2025-08-30T09:58:47.3471051Z             "1515560100-1517287800",
2025-08-30T09:58:47.3471121Z             "--export",
2025-08-30T09:58:47.3471182Z             "signals",
2025-08-30T09:58:47.3471244Z             "--cache",
2025-08-30T09:58:47.3471302Z             "none",
2025-08-30T09:58:47.3471452Z         ]
2025-08-30T09:58:47.3471523Z         args = get_args(args)
2025-08-30T09:58:47.3471596Z >       start_backtesting(args)
2025-08-30T09:58:47.3471600Z 
2025-08-30T09:58:47.3471700Z tests/data/test_entryexitanalysis.py:363: 
2025-08-30T09:58:47.3471800Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3471959Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.3472033Z     backtesting.start()
2025-08-30T09:58:47.3472136Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.3472219Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.3472285Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3472408Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3472585Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3472663Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3472813Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3472879Z     timeranges = [
2025-08-30T09:58:47.3473009Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3473167Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3473224Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3473532Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3473615Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3473684Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3473783Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3473788Z 
2025-08-30T09:58:47.3473949Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3474014Z key = 'date'
2025-08-30T09:58:47.3474019Z 
2025-08-30T09:58:47.3474089Z     def get_loc(self, key):
2025-08-30T09:58:47.3474145Z         """
2025-08-30T09:58:47.3474301Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3474356Z     
2025-08-30T09:58:47.3474418Z         Parameters
2025-08-30T09:58:47.3474477Z         ----------
2025-08-30T09:58:47.3474541Z         key : label
2025-08-30T09:58:47.3474596Z     
2025-08-30T09:58:47.3474653Z         Returns
2025-08-30T09:58:47.3474715Z         -------
2025-08-30T09:58:47.3474838Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3474893Z     
2025-08-30T09:58:47.3474952Z         Examples
2025-08-30T09:58:47.3475014Z         --------
2025-08-30T09:58:47.3475101Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3475178Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3475239Z         1
2025-08-30T09:58:47.3475298Z     
2025-08-30T09:58:47.3475391Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3475469Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3475540Z         slice(1, 3, None)
2025-08-30T09:58:47.3475597Z     
2025-08-30T09:58:47.3475695Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3475780Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3475860Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3475915Z         """
2025-08-30T09:58:47.3476011Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3476068Z         try:
2025-08-30T09:58:47.3476157Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3476230Z         except KeyError as err:
2025-08-30T09:58:47.3476320Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3476408Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3476520Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3476581Z             ):
2025-08-30T09:58:47.3476665Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3476740Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3476936Z E           KeyError: 'date'
2025-08-30T09:58:47.3476945Z 
2025-08-30T09:58:47.3477288Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3477426Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3477536Z 2025-08-30 09:55:57 INFO Using config: config.json ...
2025-08-30T09:58:47.3477645Z 2025-08-30 09:55:57 INFO Enabling colorized output.
2025-08-30T09:58:47.3477726Z 2025-08-30 09:55:57 INFO Logfile configured
2025-08-30T09:58:47.3477805Z 2025-08-30 09:55:57 INFO Verbosity set to 3
2025-08-30T09:58:47.3478000Z 2025-08-30 09:55:57 INFO Parameter -i/--timeframe detected ... Using timeframe: 5m ...
2025-08-30T09:58:47.3478104Z 2025-08-30 09:55:57 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.3478373Z 2025-08-30 09:55:57 INFO Parameter --timerange detected: 1515560100-1517287800 ...
2025-08-30T09:58:47.3478704Z 2025-08-30 09:55:57 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_analysis_with_in0/user_data ...
2025-08-30T09:58:47.3478947Z 2025-08-30 09:55:57 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.3479093Z 2025-08-30 09:55:57 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.3479228Z 2025-08-30 09:55:57 INFO Parameter --export detected: signals ...
2025-08-30T09:58:47.3479345Z 2025-08-30 09:55:57 INFO Parameter --cache=none detected ...
2025-08-30T09:58:47.3479482Z 2025-08-30 09:55:57 INFO Filter trades by timerange: 1515560100-1517287800
2025-08-30T09:58:47.3479574Z 2025-08-30 09:55:57 INFO Checking exchange...
2025-08-30T09:58:47.3479800Z 2025-08-30 09:55:57 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.3479920Z 2025-08-30 09:55:57 INFO Using pairlist from configuration.
2025-08-30T09:58:47.3480023Z 2025-08-30 09:55:57 INFO Validating configuration ...
2025-08-30T09:58:47.3480150Z 2025-08-30 09:55:57 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.3480261Z 2025-08-30 09:55:57 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3480382Z 2025-08-30 09:55:57 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3480463Z 2025-08-30 09:55:57 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3480557Z 2025-08-30 09:55:57 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3480677Z 2025-08-30 09:55:57 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3480796Z 2025-08-30 09:55:57 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3481120Z 2025-08-30 09:55:57 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3481615Z 2025-08-30 09:55:57 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3482035Z 2025-08-30 09:55:57 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3482134Z 2025-08-30 09:55:57 INFO Found no parameter file.
2025-08-30T09:58:47.3482418Z 2025-08-30 09:55:57 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3482603Z 2025-08-30 09:55:57 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3482783Z 2025-08-30 09:55:57 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3482977Z 2025-08-30 09:55:57 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3483173Z 2025-08-30 09:55:57 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3483643Z 2025-08-30 09:55:57 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.3483845Z 2025-08-30 09:55:57 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.3484175Z 2025-08-30 09:55:57 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.3484408Z 2025-08-30 09:55:57 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.3484608Z 2025-08-30 09:55:57 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.3484795Z 2025-08-30 09:55:57 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3484993Z 2025-08-30 09:55:57 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3485100Z 2025-08-30 09:55:57 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3485324Z 2025-08-30 09:55:57 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3485450Z 2025-08-30 09:55:57 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3485598Z 2025-08-30 09:55:57 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3485758Z 2025-08-30 09:55:57 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3485892Z 2025-08-30 09:55:57 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3486029Z 2025-08-30 09:55:57 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3486333Z 2025-08-30 09:55:57 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3486525Z 2025-08-30 09:55:57 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3486641Z 2025-08-30 09:55:57 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3486750Z 2025-08-30 09:55:57 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3486883Z 2025-08-30 09:55:57 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3487158Z 2025-08-30 09:55:57 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.3487279Z 2025-08-30 09:55:57 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3487407Z 2025-08-30 09:55:57 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3487552Z 2025-08-30 09:55:57 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3487670Z 2025-08-30 09:55:57 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3487810Z 2025-08-30 09:55:57 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3487967Z 2025-08-30 09:55:57 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3488109Z 2025-08-30 09:55:57 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3488255Z 2025-08-30 09:55:57 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3488369Z 2025-08-30 09:55:57 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3488471Z 2025-08-30 09:55:57 INFO Validating configuration ...
2025-08-30T09:58:47.3488824Z 2025-08-30 09:55:57 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3489110Z 2025-08-30 09:55:57 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3489542Z 2025-08-30 09:55:57 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3489735Z 2025-08-30 09:55:57 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3489913Z 2025-08-30 09:55:57 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3490037Z 2025-08-30 09:55:57 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.3490199Z 2025-08-30 09:55:57 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3490357Z 2025-08-30 09:55:57 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3490604Z 2025-08-30 09:55:57 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3490814Z 2025-08-30 09:55:57 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.3491000Z ___ test_backtest_analysis_on_entry_and_rejected_signals_only_entry_signals ____
2025-08-30T09:58:47.3491006Z 
2025-08-30T09:58:47.3491160Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3491222Z key = 'date'
2025-08-30T09:58:47.3491227Z 
2025-08-30T09:58:47.3491303Z     def get_loc(self, key):
2025-08-30T09:58:47.3491359Z         """
2025-08-30T09:58:47.3491511Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3491566Z     
2025-08-30T09:58:47.3491720Z         Parameters
2025-08-30T09:58:47.3491784Z         ----------
2025-08-30T09:58:47.3491844Z         key : label
2025-08-30T09:58:47.3491903Z     
2025-08-30T09:58:47.3491964Z         Returns
2025-08-30T09:58:47.3492026Z         -------
2025-08-30T09:58:47.3492147Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3492206Z     
2025-08-30T09:58:47.3492268Z         Examples
2025-08-30T09:58:47.3492327Z         --------
2025-08-30T09:58:47.3492419Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3492497Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3492554Z         1
2025-08-30T09:58:47.3492609Z     
2025-08-30T09:58:47.3492704Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3492783Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3492850Z         slice(1, 3, None)
2025-08-30T09:58:47.3492907Z     
2025-08-30T09:58:47.3493007Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3493093Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3493173Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3493234Z         """
2025-08-30T09:58:47.3493328Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3493484Z         try:
2025-08-30T09:58:47.3493578Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3493648Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3493653Z 
2025-08-30T09:58:47.3493826Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3493931Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3494099Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3494155Z     ???
2025-08-30T09:58:47.3494312Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3494373Z     ???
2025-08-30T09:58:47.3494635Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3494691Z     ???
2025-08-30T09:58:47.3494791Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3494799Z 
2025-08-30T09:58:47.3494854Z >   ???
2025-08-30T09:58:47.3494921Z E   KeyError: 'date'
2025-08-30T09:58:47.3494926Z 
2025-08-30T09:58:47.3495053Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3495058Z 
2025-08-30T09:58:47.3495215Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3495219Z 
2025-08-30T09:58:47.3495801Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3495960Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6584723610>
2025-08-30T09:58:47.3496122Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584f6d050>
2025-08-30T09:58:47.3496315Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3496562Z user_dir = PosixPath('/tmp/pytest-of-runner/pytest-0/test_backtest_analysis_on_entr0/user_data')
2025-08-30T09:58:47.3496841Z capsys = <_pytest.capture.CaptureFixture object at 0x7f6584f6e290>
2025-08-30T09:58:47.3496846Z 
2025-08-30T09:58:47.3497024Z     def test_backtest_analysis_on_entry_and_rejected_signals_only_entry_signals(
2025-08-30T09:58:47.3497167Z         default_conf, mocker, caplog, testdatadir, user_dir, capsys
2025-08-30T09:58:47.3497223Z     ):
2025-08-30T09:58:47.3497307Z         caplog.set_level(logging.INFO)
2025-08-30T09:58:47.3497455Z         (user_dir / "backtest_results").mkdir(parents=True, exist_ok=True)
2025-08-30T09:58:47.3497510Z     
2025-08-30T09:58:47.3497585Z         default_conf.update(
2025-08-30T09:58:47.3497641Z             {
2025-08-30T09:58:47.3497726Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3497910Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3498011Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3498124Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3498184Z             }
2025-08-30T09:58:47.3498239Z         )
2025-08-30T09:58:47.3498314Z         patch_exchange(mocker)
2025-08-30T09:58:47.3498394Z         result1 = pd.DataFrame(
2025-08-30T09:58:47.3498448Z             {
2025-08-30T09:58:47.3498551Z                 "pair": ["ETH/BTC", "LTC/BTC", "ETH/BTC", "LTC/BTC"],
2025-08-30T09:58:47.3498650Z                 "profit_ratio": [0.025, 0.05, -0.1, -0.05],
2025-08-30T09:58:47.3498734Z                 "profit_abs": [0.5, 2.0, -4.0, -2.0],
2025-08-30T09:58:47.3498822Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.3498882Z                     [
2025-08-30T09:58:47.3498961Z                         "2018-01-29 18:40:00",
2025-08-30T09:58:47.3499031Z                         "2018-01-30 03:30:00",
2025-08-30T09:58:47.3499100Z                         "2018-01-30 08:10:00",
2025-08-30T09:58:47.3499174Z                         "2018-01-31 13:30:00",
2025-08-30T09:58:47.3499235Z                     ],
2025-08-30T09:58:47.3499310Z                     utc=True,
2025-08-30T09:58:47.3499370Z                 ),
2025-08-30T09:58:47.3499450Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.3499510Z                     [
2025-08-30T09:58:47.3499577Z                         "2018-01-29 20:45:00",
2025-08-30T09:58:47.3499652Z                         "2018-01-30 05:35:00",
2025-08-30T09:58:47.3499718Z                         "2018-01-30 09:10:00",
2025-08-30T09:58:47.3499783Z                         "2018-01-31 15:00:00",
2025-08-30T09:58:47.3499847Z                     ],
2025-08-30T09:58:47.3499914Z                     utc=True,
2025-08-30T09:58:47.3499971Z                 ),
2025-08-30T09:58:47.3500051Z                 "trade_duration": [235, 40, 60, 90],
2025-08-30T09:58:47.3500151Z                 "is_open": [False, False, False, False],
2025-08-30T09:58:47.3500236Z                 "stake_amount": [0.01, 0.01, 0.01, 0.01],
2025-08-30T09:58:47.3500352Z                 "open_rate": [0.104445, 0.10302485, 0.10302485, 0.10302485],
2025-08-30T09:58:47.3500469Z                 "close_rate": [0.104969, 0.103541, 0.102041, 0.102541],
2025-08-30T09:58:47.3500557Z                 "is_short": [False, False, False, False],
2025-08-30T09:58:47.3500625Z                 "enter_tag": [
2025-08-30T09:58:47.3500704Z                     "enter_tag_long_a",
2025-08-30T09:58:47.3500774Z                     "enter_tag_long_b",
2025-08-30T09:58:47.3500844Z                     "enter_tag_long_a",
2025-08-30T09:58:47.3500914Z                     "enter_tag_long_b",
2025-08-30T09:58:47.3500976Z                 ],
2025-08-30T09:58:47.3501046Z                 "exit_reason": [
2025-08-30T09:58:47.3501121Z                     ExitType.ROI.value,
2025-08-30T09:58:47.3501213Z                     ExitType.EXIT_SIGNAL.value,
2025-08-30T09:58:47.3501299Z                     ExitType.STOP_LOSS.value,
2025-08-30T09:58:47.3501391Z                     ExitType.TRAILING_STOP_LOSS.value,
2025-08-30T09:58:47.3501452Z                 ],
2025-08-30T09:58:47.3501598Z             }
2025-08-30T09:58:47.3501653Z         )
2025-08-30T09:58:47.3501707Z     
2025-08-30T09:58:47.3501790Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3501857Z             side_effect=[
2025-08-30T09:58:47.3501913Z                 {
2025-08-30T09:58:47.3501987Z                     "results": result1,
2025-08-30T09:58:47.3502064Z                     "config": default_conf,
2025-08-30T09:58:47.3502130Z                     "locks": [],
2025-08-30T09:58:47.3502207Z                     "rejected_signals": 20,
2025-08-30T09:58:47.3502291Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.3502369Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.3502451Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.3502611Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.3502694Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.3502771Z                     "final_balance": 1000,
2025-08-30T09:58:47.3502837Z                 }
2025-08-30T09:58:47.3502892Z             ]
2025-08-30T09:58:47.3502948Z         )
2025-08-30T09:58:47.3503016Z         mocker.patch(
2025-08-30T09:58:47.3503202Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3503506Z             PropertyMock(return_value=["ETH/BTC", "LTC/BTC", "DASH/BTC"]),
2025-08-30T09:58:47.3503612Z         )
2025-08-30T09:58:47.3503862Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3503917Z     
2025-08-30T09:58:47.3504154Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.3504252Z     
2025-08-30T09:58:47.3504358Z         args = [
2025-08-30T09:58:47.3504471Z             "backtesting",
2025-08-30T09:58:47.3504586Z             "--config",
2025-08-30T09:58:47.3504709Z             "config.json",
2025-08-30T09:58:47.3504822Z             "--datadir",
2025-08-30T09:58:47.3504941Z             str(testdatadir),
2025-08-30T09:58:47.3505074Z             "--user-data-dir",
2025-08-30T09:58:47.3505151Z             str(user_dir),
2025-08-30T09:58:47.3505216Z             "--timeframe",
2025-08-30T09:58:47.3505274Z             "5m",
2025-08-30T09:58:47.3505343Z             "--timerange",
2025-08-30T09:58:47.3505409Z             "1515560100-1517287800",
2025-08-30T09:58:47.3505473Z             "--export",
2025-08-30T09:58:47.3505535Z             "signals",
2025-08-30T09:58:47.3505602Z             "--cache",
2025-08-30T09:58:47.3505661Z             "none",
2025-08-30T09:58:47.3505718Z         ]
2025-08-30T09:58:47.3505792Z         args = get_args(args)
2025-08-30T09:58:47.3505867Z >       start_backtesting(args)
2025-08-30T09:58:47.3505872Z 
2025-08-30T09:58:47.3505970Z tests/data/test_entryexitanalysis.py:502: 
2025-08-30T09:58:47.3506085Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3506247Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.3506323Z     backtesting.start()
2025-08-30T09:58:47.3506430Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.3506519Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.3506585Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3506705Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3506814Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3506884Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3507027Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3507097Z     timeranges = [
2025-08-30T09:58:47.3507229Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3507382Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3507443Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3507637Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3507719Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3507937Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3508043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3508047Z 
2025-08-30T09:58:47.3508210Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3508272Z key = 'date'
2025-08-30T09:58:47.3508277Z 
2025-08-30T09:58:47.3508355Z     def get_loc(self, key):
2025-08-30T09:58:47.3508412Z         """
2025-08-30T09:58:47.3508563Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3508622Z     
2025-08-30T09:58:47.3508684Z         Parameters
2025-08-30T09:58:47.3508746Z         ----------
2025-08-30T09:58:47.3508806Z         key : label
2025-08-30T09:58:47.3508997Z     
2025-08-30T09:58:47.3509059Z         Returns
2025-08-30T09:58:47.3509119Z         -------
2025-08-30T09:58:47.3509249Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3509307Z     
2025-08-30T09:58:47.3509366Z         Examples
2025-08-30T09:58:47.3509425Z         --------
2025-08-30T09:58:47.3509519Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3509598Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3509654Z         1
2025-08-30T09:58:47.3509713Z     
2025-08-30T09:58:47.3509804Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3509883Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3509950Z         slice(1, 3, None)
2025-08-30T09:58:47.3510009Z     
2025-08-30T09:58:47.3510108Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3510190Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3510274Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3510333Z         """
2025-08-30T09:58:47.3510424Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3510481Z         try:
2025-08-30T09:58:47.3510574Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3510652Z         except KeyError as err:
2025-08-30T09:58:47.3510739Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3510831Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3510939Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3510996Z             ):
2025-08-30T09:58:47.3511082Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3511158Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3511228Z E           KeyError: 'date'
2025-08-30T09:58:47.3511233Z 
2025-08-30T09:58:47.3511420Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3511566Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3511672Z 2025-08-30 09:55:57 INFO Using config: config.json ...
2025-08-30T09:58:47.3511767Z 2025-08-30 09:55:57 INFO Enabling colorized output.
2025-08-30T09:58:47.3511857Z 2025-08-30 09:55:57 INFO Logfile configured
2025-08-30T09:58:47.3511935Z 2025-08-30 09:55:57 INFO Verbosity set to 3
2025-08-30T09:58:47.3512120Z 2025-08-30 09:55:57 INFO Parameter -i/--timeframe detected ... Using timeframe: 5m ...
2025-08-30T09:58:47.3512226Z 2025-08-30 09:55:57 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.3512387Z 2025-08-30 09:55:57 INFO Parameter --timerange detected: 1515560100-1517287800 ...
2025-08-30T09:58:47.3512709Z 2025-08-30 09:55:57 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_analysis_on_entr0/user_data ...
2025-08-30T09:58:47.3512950Z 2025-08-30 09:55:57 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.3513093Z 2025-08-30 09:55:57 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.3513228Z 2025-08-30 09:55:57 INFO Parameter --export detected: signals ...
2025-08-30T09:58:47.3513471Z 2025-08-30 09:55:57 INFO Parameter --cache=none detected ...
2025-08-30T09:58:47.3513761Z 2025-08-30 09:55:57 INFO Filter trades by timerange: 1515560100-1517287800
2025-08-30T09:58:47.3513853Z 2025-08-30 09:55:57 INFO Checking exchange...
2025-08-30T09:58:47.3514083Z 2025-08-30 09:55:57 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.3514206Z 2025-08-30 09:55:57 INFO Using pairlist from configuration.
2025-08-30T09:58:47.3514309Z 2025-08-30 09:55:57 INFO Validating configuration ...
2025-08-30T09:58:47.3514431Z 2025-08-30 09:55:57 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.3514540Z 2025-08-30 09:55:57 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3514663Z 2025-08-30 09:55:57 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3514740Z 2025-08-30 09:55:57 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3514941Z 2025-08-30 09:55:57 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3515068Z 2025-08-30 09:55:57 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3515188Z 2025-08-30 09:55:57 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3515515Z 2025-08-30 09:55:57 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3516013Z 2025-08-30 09:55:57 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3516435Z 2025-08-30 09:55:57 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3516534Z 2025-08-30 09:55:57 INFO Found no parameter file.
2025-08-30T09:58:47.3516824Z 2025-08-30 09:55:57 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3516999Z 2025-08-30 09:55:57 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3517176Z 2025-08-30 09:55:57 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3517377Z 2025-08-30 09:55:57 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3517564Z 2025-08-30 09:55:57 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3517924Z 2025-08-30 09:55:57 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.3518129Z 2025-08-30 09:55:57 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.3518330Z 2025-08-30 09:55:57 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.3518561Z 2025-08-30 09:55:57 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.3518762Z 2025-08-30 09:55:57 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.3518948Z 2025-08-30 09:55:57 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3519145Z 2025-08-30 09:55:57 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3519251Z 2025-08-30 09:55:57 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3519356Z 2025-08-30 09:55:57 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3519473Z 2025-08-30 09:55:57 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3519627Z 2025-08-30 09:55:57 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3519781Z 2025-08-30 09:55:57 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3519909Z 2025-08-30 09:55:57 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3520055Z 2025-08-30 09:55:57 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3520358Z 2025-08-30 09:55:57 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3520637Z 2025-08-30 09:55:57 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3520756Z 2025-08-30 09:55:57 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3520863Z 2025-08-30 09:55:57 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3520987Z 2025-08-30 09:55:57 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3521258Z 2025-08-30 09:55:57 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.3521379Z 2025-08-30 09:55:57 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3521499Z 2025-08-30 09:55:57 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3521716Z 2025-08-30 09:55:57 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3521841Z 2025-08-30 09:55:57 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3521979Z 2025-08-30 09:55:57 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3522133Z 2025-08-30 09:55:57 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3522277Z 2025-08-30 09:55:57 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3522418Z 2025-08-30 09:55:57 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3522526Z 2025-08-30 09:55:57 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3522636Z 2025-08-30 09:55:57 INFO Validating configuration ...
2025-08-30T09:58:47.3522982Z 2025-08-30 09:55:57 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3523264Z 2025-08-30 09:55:57 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3523928Z 2025-08-30 09:55:57 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3524141Z 2025-08-30 09:55:57 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3524321Z 2025-08-30 09:55:57 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3524454Z 2025-08-30 09:55:57 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.3524617Z 2025-08-30 09:55:57 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3524771Z 2025-08-30 09:55:57 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3524929Z 2025-08-30 09:55:57 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3525145Z 2025-08-30 09:55:57 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.3525319Z _________ test_backtest_analysis_on_entry_and_rejected_signals_nomock __________
2025-08-30T09:58:47.3525324Z 
2025-08-30T09:58:47.3525482Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3525552Z key = 'date'
2025-08-30T09:58:47.3525556Z 
2025-08-30T09:58:47.3525630Z     def get_loc(self, key):
2025-08-30T09:58:47.3525687Z         """
2025-08-30T09:58:47.3525843Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3525897Z     
2025-08-30T09:58:47.3525961Z         Parameters
2025-08-30T09:58:47.3526029Z         ----------
2025-08-30T09:58:47.3526089Z         key : label
2025-08-30T09:58:47.3526144Z     
2025-08-30T09:58:47.3526202Z         Returns
2025-08-30T09:58:47.3526298Z         -------
2025-08-30T09:58:47.3526421Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3526475Z     
2025-08-30T09:58:47.3526537Z         Examples
2025-08-30T09:58:47.3526596Z         --------
2025-08-30T09:58:47.3526688Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3526767Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3526829Z         1
2025-08-30T09:58:47.3526883Z     
2025-08-30T09:58:47.3527128Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3527211Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3527277Z         slice(1, 3, None)
2025-08-30T09:58:47.3527331Z     
2025-08-30T09:58:47.3527431Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3527517Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3527597Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3527654Z         """
2025-08-30T09:58:47.3527751Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3527809Z         try:
2025-08-30T09:58:47.3527897Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3527966Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3527975Z 
2025-08-30T09:58:47.3528254Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3528358Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3528526Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3528588Z     ???
2025-08-30T09:58:47.3528746Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3528801Z     ???
2025-08-30T09:58:47.3529061Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3529117Z     ???
2025-08-30T09:58:47.3529214Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3529219Z 
2025-08-30T09:58:47.3529278Z >   ???
2025-08-30T09:58:47.3529345Z E   KeyError: 'date'
2025-08-30T09:58:47.3529349Z 
2025-08-30T09:58:47.3529466Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3529471Z 
2025-08-30T09:58:47.3529630Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3529634Z 
2025-08-30T09:58:47.3530214Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3530373Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc80f490>
2025-08-30T09:58:47.3530533Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65742628d0>
2025-08-30T09:58:47.3530728Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3530970Z user_dir = PosixPath('/tmp/pytest-of-runner/pytest-0/test_backtest_analysis_on_entr1/user_data')
2025-08-30T09:58:47.3531126Z capsys = <_pytest.capture.CaptureFixture object at 0x7f6574262c50>
2025-08-30T09:58:47.3531130Z 
2025-08-30T09:58:47.3531273Z     def test_backtest_analysis_on_entry_and_rejected_signals_nomock(
2025-08-30T09:58:47.3531409Z         default_conf, mocker, caplog, testdatadir, user_dir, capsys
2025-08-30T09:58:47.3531469Z     ):
2025-08-30T09:58:47.3531554Z         caplog.set_level(logging.INFO)
2025-08-30T09:58:47.3531702Z         (user_dir / "backtest_results").mkdir(parents=True, exist_ok=True)
2025-08-30T09:58:47.3531767Z     
2025-08-30T09:58:47.3531848Z         default_conf.update(
2025-08-30T09:58:47.3531907Z             {
2025-08-30T09:58:47.3531986Z                 "use_exit_signal": True,
2025-08-30T09:58:47.3532074Z                 "exit_profit_only": False,
2025-08-30T09:58:47.3532151Z                 "exit_profit_offset": 0.0,
2025-08-30T09:58:47.3532237Z                 "ignore_roi_if_entry_signal": False,
2025-08-30T09:58:47.3532294Z             }
2025-08-30T09:58:47.3532356Z         )
2025-08-30T09:58:47.3532429Z         patch_exchange(mocker)
2025-08-30T09:58:47.3532505Z         result1 = pd.DataFrame(
2025-08-30T09:58:47.3532565Z             {
2025-08-30T09:58:47.3532672Z                 "pair": ["ETH/BTC", "LTC/BTC", "ETH/BTC", "LTC/BTC"],
2025-08-30T09:58:47.3532763Z                 "profit_ratio": [0.025, 0.05, -0.1, -0.05],
2025-08-30T09:58:47.3532849Z                 "profit_abs": [0.5, 2.0, -4.0, -2.0],
2025-08-30T09:58:47.3533044Z                 "open_date": pd.to_datetime(
2025-08-30T09:58:47.3533106Z                     [
2025-08-30T09:58:47.3533179Z                         "2018-01-29 18:40:00",
2025-08-30T09:58:47.3533253Z                         "2018-01-30 03:30:00",
2025-08-30T09:58:47.3533323Z                         "2018-01-30 08:10:00",
2025-08-30T09:58:47.3533581Z                         "2018-01-31 13:30:00",
2025-08-30T09:58:47.3533659Z                     ],
2025-08-30T09:58:47.3533728Z                     utc=True,
2025-08-30T09:58:47.3533787Z                 ),
2025-08-30T09:58:47.3533873Z                 "close_date": pd.to_datetime(
2025-08-30T09:58:47.3533938Z                     [
2025-08-30T09:58:47.3534005Z                         "2018-01-29 20:45:00",
2025-08-30T09:58:47.3534194Z                         "2018-01-30 05:35:00",
2025-08-30T09:58:47.3534272Z                         "2018-01-30 09:10:00",
2025-08-30T09:58:47.3534338Z                         "2018-01-31 15:00:00",
2025-08-30T09:58:47.3534402Z                     ],
2025-08-30T09:58:47.3534466Z                     utc=True,
2025-08-30T09:58:47.3534530Z                 ),
2025-08-30T09:58:47.3534613Z                 "trade_duration": [235, 40, 60, 90],
2025-08-30T09:58:47.3534706Z                 "is_open": [False, False, False, False],
2025-08-30T09:58:47.3534797Z                 "stake_amount": [0.01, 0.01, 0.01, 0.01],
2025-08-30T09:58:47.3534911Z                 "open_rate": [0.104445, 0.10302485, 0.10302485, 0.10302485],
2025-08-30T09:58:47.3535016Z                 "close_rate": [0.104969, 0.103541, 0.102041, 0.102541],
2025-08-30T09:58:47.3535108Z                 "is_short": [False, False, False, False],
2025-08-30T09:58:47.3535177Z                 "enter_tag": [
2025-08-30T09:58:47.3535254Z                     "enter_tag_long_a",
2025-08-30T09:58:47.3535327Z                     "enter_tag_long_b",
2025-08-30T09:58:47.3535402Z                     "enter_tag_long_a",
2025-08-30T09:58:47.3535473Z                     "enter_tag_long_b",
2025-08-30T09:58:47.3535532Z                 ],
2025-08-30T09:58:47.3535607Z                 "exit_reason": [
2025-08-30T09:58:47.3535683Z                     ExitType.ROI.value,
2025-08-30T09:58:47.3535770Z                     ExitType.EXIT_SIGNAL.value,
2025-08-30T09:58:47.3535859Z                     ExitType.STOP_LOSS.value,
2025-08-30T09:58:47.3535950Z                     ExitType.TRAILING_STOP_LOSS.value,
2025-08-30T09:58:47.3536007Z                 ],
2025-08-30T09:58:47.3536062Z             }
2025-08-30T09:58:47.3536122Z         )
2025-08-30T09:58:47.3536177Z     
2025-08-30T09:58:47.3536253Z         backtestmock = MagicMock(
2025-08-30T09:58:47.3536327Z             side_effect=[
2025-08-30T09:58:47.3536384Z                 {
2025-08-30T09:58:47.3536458Z                     "results": result1,
2025-08-30T09:58:47.3536535Z                     "config": default_conf,
2025-08-30T09:58:47.3536606Z                     "locks": [],
2025-08-30T09:58:47.3536682Z                     "rejected_signals": 20,
2025-08-30T09:58:47.3536766Z                     "timedout_entry_orders": 0,
2025-08-30T09:58:47.3536849Z                     "timedout_exit_orders": 0,
2025-08-30T09:58:47.3536930Z                     "canceled_trade_entries": 0,
2025-08-30T09:58:47.3537005Z                     "canceled_entry_orders": 0,
2025-08-30T09:58:47.3537087Z                     "replaced_entry_orders": 0,
2025-08-30T09:58:47.3537163Z                     "final_balance": 1000,
2025-08-30T09:58:47.3537220Z                 }
2025-08-30T09:58:47.3537275Z             ]
2025-08-30T09:58:47.3537334Z         )
2025-08-30T09:58:47.3537401Z         mocker.patch(
2025-08-30T09:58:47.3537582Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3537732Z             PropertyMock(return_value=["ETH/BTC", "LTC/BTC", "DASH/BTC"]),
2025-08-30T09:58:47.3537789Z         )
2025-08-30T09:58:47.3538022Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting.backtest", backtestmock)
2025-08-30T09:58:47.3538195Z     
2025-08-30T09:58:47.3538342Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.3538397Z     
2025-08-30T09:58:47.3538455Z         args = [
2025-08-30T09:58:47.3538528Z             "backtesting",
2025-08-30T09:58:47.3538592Z             "--config",
2025-08-30T09:58:47.3538658Z             "config.json",
2025-08-30T09:58:47.3538723Z             "--datadir",
2025-08-30T09:58:47.3538797Z             str(testdatadir),
2025-08-30T09:58:47.3538868Z             "--user-data-dir",
2025-08-30T09:58:47.3538934Z             str(user_dir),
2025-08-30T09:58:47.3539002Z             "--timeframe",
2025-08-30T09:58:47.3539060Z             "5m",
2025-08-30T09:58:47.3539123Z             "--timerange",
2025-08-30T09:58:47.3539267Z             "1515560100-1517287800",
2025-08-30T09:58:47.3539339Z             "--export",
2025-08-30T09:58:47.3539401Z             "signals",
2025-08-30T09:58:47.3539462Z             "--cache",
2025-08-30T09:58:47.3539528Z             "none",
2025-08-30T09:58:47.3539582Z         ]
2025-08-30T09:58:47.3539650Z         args = get_args(args)
2025-08-30T09:58:47.3539728Z >       start_backtesting(args)
2025-08-30T09:58:47.3539733Z 
2025-08-30T09:58:47.3539830Z tests/data/test_entryexitanalysis.py:123: 
2025-08-30T09:58:47.3539931Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3540090Z freqtrade/commands/optimize_commands.py:61: in start_backtesting
2025-08-30T09:58:47.3540165Z     backtesting.start()
2025-08-30T09:58:47.3540267Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.3540349Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.3540419Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3540543Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3540644Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3540721Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3540867Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3540929Z     timeranges = [
2025-08-30T09:58:47.3541062Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3541220Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3541277Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3541462Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3541552Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3541616Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3541714Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3541719Z 
2025-08-30T09:58:47.3541884Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3541943Z key = 'date'
2025-08-30T09:58:47.3541948Z 
2025-08-30T09:58:47.3542019Z     def get_loc(self, key):
2025-08-30T09:58:47.3542085Z         """
2025-08-30T09:58:47.3542236Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3542293Z     
2025-08-30T09:58:47.3542356Z         Parameters
2025-08-30T09:58:47.3542423Z         ----------
2025-08-30T09:58:47.3542484Z         key : label
2025-08-30T09:58:47.3542541Z     
2025-08-30T09:58:47.3542602Z         Returns
2025-08-30T09:58:47.3542660Z         -------
2025-08-30T09:58:47.3542784Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3542839Z     
2025-08-30T09:58:47.3542903Z         Examples
2025-08-30T09:58:47.3542962Z         --------
2025-08-30T09:58:47.3543049Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3543132Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3543188Z         1
2025-08-30T09:58:47.3543246Z     
2025-08-30T09:58:47.3543336Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3543627Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3543831Z         slice(1, 3, None)
2025-08-30T09:58:47.3543888Z     
2025-08-30T09:58:47.3543998Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3544081Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3544162Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3544219Z         """
2025-08-30T09:58:47.3544314Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3544372Z         try:
2025-08-30T09:58:47.3544463Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3544545Z         except KeyError as err:
2025-08-30T09:58:47.3544635Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3544725Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3544948Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3545008Z             ):
2025-08-30T09:58:47.3545095Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3545173Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3545253Z E           KeyError: 'date'
2025-08-30T09:58:47.3545258Z 
2025-08-30T09:58:47.3545453Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3545593Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3545704Z 2025-08-30 09:55:58 INFO Using config: config.json ...
2025-08-30T09:58:47.3545800Z 2025-08-30 09:55:58 INFO Enabling colorized output.
2025-08-30T09:58:47.3545882Z 2025-08-30 09:55:58 INFO Logfile configured
2025-08-30T09:58:47.3545965Z 2025-08-30 09:55:58 INFO Verbosity set to 3
2025-08-30T09:58:47.3546148Z 2025-08-30 09:55:58 INFO Parameter -i/--timeframe detected ... Using timeframe: 5m ...
2025-08-30T09:58:47.3546252Z 2025-08-30 09:55:58 INFO Using max_open_trades: 1 ...
2025-08-30T09:58:47.3546412Z 2025-08-30 09:55:58 INFO Parameter --timerange detected: 1515560100-1517287800 ...
2025-08-30T09:58:47.3546740Z 2025-08-30 09:55:58 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_backtest_analysis_on_entr1/user_data ...
2025-08-30T09:58:47.3546980Z 2025-08-30 09:55:58 INFO Using data directory: /home/runner/work/freqtrade/freqtrade/tests/testdata ...
2025-08-30T09:58:47.3547123Z 2025-08-30 09:55:58 INFO Overriding timeframe with Command line argument
2025-08-30T09:58:47.3547256Z 2025-08-30 09:55:58 INFO Parameter --export detected: signals ...
2025-08-30T09:58:47.3547371Z 2025-08-30 09:55:58 INFO Parameter --cache=none detected ...
2025-08-30T09:58:47.3547506Z 2025-08-30 09:55:58 INFO Filter trades by timerange: 1515560100-1517287800
2025-08-30T09:58:47.3547600Z 2025-08-30 09:55:58 INFO Checking exchange...
2025-08-30T09:58:47.3547826Z 2025-08-30 09:55:58 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.3547948Z 2025-08-30 09:55:58 INFO Using pairlist from configuration.
2025-08-30T09:58:47.3548054Z 2025-08-30 09:55:58 INFO Validating configuration ...
2025-08-30T09:58:47.3548179Z 2025-08-30 09:55:58 INFO Starting freqtrade in Backtesting mode
2025-08-30T09:58:47.3548285Z 2025-08-30 09:55:58 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3548411Z 2025-08-30 09:55:58 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3548489Z 2025-08-30 09:55:58 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3548581Z 2025-08-30 09:55:58 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3548701Z 2025-08-30 09:55:58 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3548820Z 2025-08-30 09:55:58 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3549142Z 2025-08-30 09:55:58 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3549638Z 2025-08-30 09:55:58 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3550060Z 2025-08-30 09:55:58 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3550246Z 2025-08-30 09:55:58 INFO Found no parameter file.
2025-08-30T09:58:47.3550537Z 2025-08-30 09:55:58 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3550725Z 2025-08-30 09:55:58 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3550906Z 2025-08-30 09:55:58 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3551101Z 2025-08-30 09:55:58 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3551294Z 2025-08-30 09:55:58 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3551732Z 2025-08-30 09:55:58 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.3551937Z 2025-08-30 09:55:58 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.3552146Z 2025-08-30 09:55:58 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.3552376Z 2025-08-30 09:55:58 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.3552575Z 2025-08-30 09:55:58 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.3552766Z 2025-08-30 09:55:58 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3552959Z 2025-08-30 09:55:58 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3553062Z 2025-08-30 09:55:58 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3553176Z 2025-08-30 09:55:58 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3553295Z 2025-08-30 09:55:58 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3553556Z 2025-08-30 09:55:58 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3553724Z 2025-08-30 09:55:58 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3553854Z 2025-08-30 09:55:58 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3553994Z 2025-08-30 09:55:58 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3554299Z 2025-08-30 09:55:58 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3554491Z 2025-08-30 09:55:58 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3554605Z 2025-08-30 09:55:58 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3554717Z 2025-08-30 09:55:58 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3554847Z 2025-08-30 09:55:58 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3555121Z 2025-08-30 09:55:58 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.3555241Z 2025-08-30 09:55:58 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3555366Z 2025-08-30 09:55:58 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3555511Z 2025-08-30 09:55:58 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3555629Z 2025-08-30 09:55:58 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3555771Z 2025-08-30 09:55:58 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3555923Z 2025-08-30 09:55:58 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3556065Z 2025-08-30 09:55:58 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3556213Z 2025-08-30 09:55:58 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3556323Z 2025-08-30 09:55:58 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3556424Z 2025-08-30 09:55:58 INFO Validating configuration ...
2025-08-30T09:58:47.3556917Z 2025-08-30 09:55:58 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3557206Z 2025-08-30 09:55:58 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3557640Z 2025-08-30 09:55:58 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3557836Z 2025-08-30 09:55:58 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.3558015Z 2025-08-30 09:55:58 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3558141Z 2025-08-30 09:55:58 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.3558407Z 2025-08-30 09:55:58 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3558568Z 2025-08-30 09:55:58 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3558729Z 2025-08-30 09:55:58 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3558937Z 2025-08-30 09:55:58 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5758 - after: 5760 - 0.03%
2025-08-30T09:58:47.3559077Z ___________________________ test_start_test_pairlist ___________________________
2025-08-30T09:58:47.3559082Z 
2025-08-30T09:58:47.3559242Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65742546d0>
2025-08-30T09:58:47.3559402Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6574e57c50>
2025-08-30T09:58:47.3559489Z tickers = <MagicMock id='140074255038928'>
2025-08-30T09:58:47.3560070Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3560223Z capsys = <_pytest.capture.CaptureFixture object at 0x7f659436a790>
2025-08-30T09:58:47.3560231Z 
2025-08-30T09:58:47.3560412Z     def test_start_test_pairlist(mocker, caplog, tickers, default_conf, capsys):
2025-08-30T09:58:47.3560508Z         patch_exchange(mocker, mock_markets=True)
2025-08-30T09:58:47.3560591Z         mocker.patch.multiple(
2025-08-30T09:58:47.3560655Z             EXMS,
2025-08-30T09:58:47.3560753Z             exchange_has=MagicMock(return_value=True),
2025-08-30T09:58:47.3560825Z             get_tickers=tickers,
2025-08-30T09:58:47.3560883Z         )
2025-08-30T09:58:47.3560943Z     
2025-08-30T09:58:47.3561023Z         default_conf["pairlists"] = [
2025-08-30T09:58:47.3561080Z             {
2025-08-30T09:58:47.3561168Z                 "method": "VolumePairList",
2025-08-30T09:58:47.3561240Z                 "number_assets": 5,
2025-08-30T09:58:47.3561322Z                 "sort_key": "quoteVolume",
2025-08-30T09:58:47.3561382Z             },
2025-08-30T09:58:47.3561463Z             {"method": "PrecisionFilter"},
2025-08-30T09:58:47.3561570Z             {"method": "PriceFilter", "low_price_ratio": 0.02},
2025-08-30T09:58:47.3561630Z         ]
2025-08-30T09:58:47.3561690Z     
2025-08-30T09:58:47.3561832Z         patched_configuration_load_config_file(mocker, default_conf)
2025-08-30T09:58:47.3562019Z         args = ["test-pairlist", "-c", "tests/testdata/testconfigs/main_test_config.json"]
2025-08-30T09:58:47.3562077Z     
2025-08-30T09:58:47.3562158Z >       start_test_pairlist(get_args(args))
2025-08-30T09:58:47.3562163Z 
2025-08-30T09:58:47.3562249Z tests/commands/test_commands.py:1185: 
2025-08-30T09:58:47.3562353Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3562358Z 
2025-08-30T09:58:47.3562825Z args = {'command': 'test-pairlist', 'config': ['tests/testdata/testconfigs/main_test_config.json'], 'exchange': None, 'func': <function start_test_pairlist at 0x7f6703417380>, ...}
2025-08-30T09:58:47.3562830Z 
2025-08-30T09:58:47.3562949Z     def start_test_pairlist(args: dict[str, Any]) -> None:
2025-08-30T09:58:47.3563101Z         """
2025-08-30T09:58:47.3563180Z         Test Pairlist configuration
2025-08-30T09:58:47.3563236Z         """
2025-08-30T09:58:47.3563481Z         from freqtrade.configuration import setup_utils_configuration
2025-08-30T09:58:47.3563597Z         from freqtrade.persistence import FtNoDBContext
2025-08-30T09:58:47.3563752Z         from freqtrade.plugins.pairlistmanager import PairListManager
2025-08-30T09:58:47.3563864Z         from freqtrade.resolvers import ExchangeResolver
2025-08-30T09:58:47.3563922Z     
2025-08-30T09:58:47.3564066Z         config = setup_utils_configuration(args, RunMode.UTIL_EXCHANGE)
2025-08-30T09:58:47.3564120Z     
2025-08-30T09:58:47.3564281Z         exchange = ExchangeResolver.load_exchange(config, validate=False)
2025-08-30T09:58:47.3564335Z     
2025-08-30T09:58:47.3564560Z         quote_currencies = args.get("quote_currencies")
2025-08-30T09:58:47.3564641Z         if not quote_currencies:
2025-08-30T09:58:47.3564756Z             quote_currencies = [config.get("stake_currency")]
2025-08-30T09:58:47.3564825Z         results = {}
2025-08-30T09:58:47.3564900Z >       with FtNoDBContext():
2025-08-30T09:58:47.3565111Z E       TypeError: 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.3565116Z 
2025-08-30T09:58:47.3565239Z freqtrade/commands/pairlist_commands.py:29: TypeError
2025-08-30T09:58:47.3565379Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3565587Z 2025-08-30 09:56:05 INFO Using config: tests/testdata/testconfigs/main_test_config.json ...
2025-08-30T09:58:47.3565685Z 2025-08-30 09:56:05 INFO Enabling colorized output.
2025-08-30T09:58:47.3565766Z 2025-08-30 09:56:05 INFO Logfile configured
2025-08-30T09:58:47.3565844Z 2025-08-30 09:56:05 INFO Verbosity set to 3
2025-08-30T09:58:47.3566156Z 2025-08-30 09:56:05 INFO Using user-data directory: /tmp/pytest-of-runner/pytest-0/test_start_test_pairlist0/user_data ...
2025-08-30T09:58:47.3566256Z 2025-08-30 09:56:05 INFO Created data directory: None
2025-08-30T09:58:47.3566579Z 2025-08-30 09:56:05 INFO Using data directory: /tmp/pytest-of-runner/pytest-0/test_start_test_pairlist0/user_data/data/binance ...
2025-08-30T09:58:47.3566672Z 2025-08-30 09:56:05 INFO Checking exchange...
2025-08-30T09:58:47.3567057Z 2025-08-30 09:56:05 INFO Exchange "binance" is officially supported by the Freqtrade development team.
2025-08-30T09:58:47.3567269Z 2025-08-30 09:56:05 INFO Using pairlist from configuration.
2025-08-30T09:58:47.3567439Z 2025-08-30 09:56:05 INFO Validating configuration ...
2025-08-30T09:58:47.3567548Z 2025-08-30 09:56:05 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3567673Z 2025-08-30 09:56:05 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3567756Z 2025-08-30 09:56:05 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3567853Z 2025-08-30 09:56:05 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3567971Z 2025-08-30 09:56:05 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3568115Z _________________________ test_generate_backtest_stats _________________________
2025-08-30T09:58:47.3568124Z 
2025-08-30T09:58:47.3568282Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3568342Z key = 'date'
2025-08-30T09:58:47.3568347Z 
2025-08-30T09:58:47.3568425Z     def get_loc(self, key):
2025-08-30T09:58:47.3568481Z         """
2025-08-30T09:58:47.3568631Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3568687Z     
2025-08-30T09:58:47.3568754Z         Parameters
2025-08-30T09:58:47.3568814Z         ----------
2025-08-30T09:58:47.3568876Z         key : label
2025-08-30T09:58:47.3568935Z     
2025-08-30T09:58:47.3568993Z         Returns
2025-08-30T09:58:47.3569052Z         -------
2025-08-30T09:58:47.3569176Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3569234Z     
2025-08-30T09:58:47.3569295Z         Examples
2025-08-30T09:58:47.3569355Z         --------
2025-08-30T09:58:47.3569586Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3569664Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3569721Z         1
2025-08-30T09:58:47.3569775Z     
2025-08-30T09:58:47.3569871Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3569951Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3570018Z         slice(1, 3, None)
2025-08-30T09:58:47.3570077Z     
2025-08-30T09:58:47.3570178Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3570260Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3570339Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3570400Z         """
2025-08-30T09:58:47.3570490Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3570627Z         try:
2025-08-30T09:58:47.3570722Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3570792Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3570800Z 
2025-08-30T09:58:47.3570969Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3571074Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3571237Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3571295Z     ???
2025-08-30T09:58:47.3571453Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3571512Z     ???
2025-08-30T09:58:47.3571770Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3571825Z     ???
2025-08-30T09:58:47.3571928Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3571932Z 
2025-08-30T09:58:47.3571987Z >   ???
2025-08-30T09:58:47.3572056Z E   KeyError: 'date'
2025-08-30T09:58:47.3572061Z 
2025-08-30T09:58:47.3572183Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3572191Z 
2025-08-30T09:58:47.3572345Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3572350Z 
2025-08-30T09:58:47.3572922Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.3573121Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3573322Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_generate_backtest_stats0')
2025-08-30T09:58:47.3573327Z 
2025-08-30T09:58:47.3573604Z     def test_generate_backtest_stats(default_conf, testdatadir, tmp_path):
2025-08-30T09:58:47.3573741Z         default_conf.update({"strategy": CURRENT_TEST_STRATEGY})
2025-08-30T09:58:47.3573848Z         StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.3573903Z     
2025-08-30T09:58:47.3573968Z         results = {
2025-08-30T09:58:47.3574035Z             "DefStrat": {
2025-08-30T09:58:47.3574117Z                 "results": pd.DataFrame(
2025-08-30T09:58:47.3574180Z                     {
2025-08-30T09:58:47.3574354Z                         "pair": ["UNITTEST/BTC", "UNITTEST/BTC", "UNITTEST/BTC", "UNITTEST/BTC"],
2025-08-30T09:58:47.3574466Z                         "profit_ratio": [0.003312, 0.010801, 0.013803, 0.002780],
2025-08-30T09:58:47.3574571Z                         "profit_abs": [0.000003, 0.000011, 0.000014, 0.000003],
2025-08-30T09:58:47.3574648Z                         "open_date": [
2025-08-30T09:58:47.3574731Z                             dt_utc(2017, 11, 14, 19, 32, 00),
2025-08-30T09:58:47.3574810Z                             dt_utc(2017, 11, 14, 21, 36, 00),
2025-08-30T09:58:47.3574889Z                             dt_utc(2017, 11, 14, 22, 12, 00),
2025-08-30T09:58:47.3574967Z                             dt_utc(2017, 11, 14, 22, 44, 00),
2025-08-30T09:58:47.3575030Z                         ],
2025-08-30T09:58:47.3575102Z                         "close_date": [
2025-08-30T09:58:47.3575301Z                             dt_utc(2017, 11, 14, 21, 35, 00),
2025-08-30T09:58:47.3575376Z                             dt_utc(2017, 11, 14, 22, 10, 00),
2025-08-30T09:58:47.3575449Z                             dt_utc(2017, 11, 14, 22, 43, 00),
2025-08-30T09:58:47.3575528Z                             dt_utc(2017, 11, 14, 22, 58, 00),
2025-08-30T09:58:47.3575592Z                         ],
2025-08-30T09:58:47.3575694Z                         "open_rate": [0.002543, 0.003003, 0.003089, 0.003214],
2025-08-30T09:58:47.3575801Z                         "close_rate": [0.002546, 0.003014, 0.003103, 0.003217],
2025-08-30T09:58:47.3575888Z                         "trade_duration": [123, 34, 31, 14],
2025-08-30T09:58:47.3576105Z                         "is_open": [False, False, False, True],
2025-08-30T09:58:47.3576208Z                         "is_short": [False, False, False, False],
2025-08-30T09:58:47.3576293Z                         "stake_amount": [0.01, 0.01, 0.01, 0.01],
2025-08-30T09:58:47.3576370Z                         "exit_reason": [
2025-08-30T09:58:47.3576457Z                             ExitType.ROI.value,
2025-08-30T09:58:47.3576547Z                             ExitType.STOP_LOSS.value,
2025-08-30T09:58:47.3576627Z                             ExitType.ROI.value,
2025-08-30T09:58:47.3576714Z                             ExitType.FORCE_EXIT.value,
2025-08-30T09:58:47.3576780Z                         ],
2025-08-30T09:58:47.3576840Z                     }
2025-08-30T09:58:47.3576896Z                 ),
2025-08-30T09:58:47.3576971Z                 "config": default_conf,
2025-08-30T09:58:47.3577042Z                 "locks": [],
2025-08-30T09:58:47.3577118Z                 "final_balance": 1000.02,
2025-08-30T09:58:47.3577191Z                 "rejected_signals": 20,
2025-08-30T09:58:47.3577282Z                 "timedout_entry_orders": 0,
2025-08-30T09:58:47.3577360Z                 "timedout_exit_orders": 0,
2025-08-30T09:58:47.3577441Z                 "canceled_trade_entries": 0,
2025-08-30T09:58:47.3577525Z                 "canceled_entry_orders": 0,
2025-08-30T09:58:47.3577600Z                 "replaced_entry_orders": 0,
2025-08-30T09:58:47.3577687Z                 "backtest_start_time": dt_ts() // 1000,
2025-08-30T09:58:47.3577768Z                 "backtest_end_time": dt_ts() // 1000,
2025-08-30T09:58:47.3577843Z                 "run_id": "123",
2025-08-30T09:58:47.3577900Z             }
2025-08-30T09:58:47.3577956Z         }
2025-08-30T09:58:47.3578105Z         timerange = TimeRange.parse_timerange("1510688220-1510700340")
2025-08-30T09:58:47.3578180Z         min_date = dt_from_ts(1510688220)
2025-08-30T09:58:47.3578252Z         max_date = dt_from_ts(1510700340)
2025-08-30T09:58:47.3578336Z         btdata = history.load_data(
2025-08-30T09:58:47.3578515Z             testdatadir, "1m", ["UNITTEST/BTC"], timerange=timerange, fill_up_missing=True
2025-08-30T09:58:47.3578573Z         )
2025-08-30T09:58:47.3578629Z     
2025-08-30T09:58:47.3578790Z >       stats = generate_backtest_stats(btdata, results, min_date, max_date)
2025-08-30T09:58:47.3578873Z                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3578878Z 
2025-08-30T09:58:47.3578979Z tests/optimize/test_optimize_reports.py:159: 
2025-08-30T09:58:47.3579082Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3579311Z freqtrade/optimize/optimize_reports/optimize_reports.py:684: in generate_backtest_stats
2025-08-30T09:58:47.3579481Z     market_change = calculate_market_change(btdata, "close", min_date=min_date)
2025-08-30T09:58:47.3579565Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3579692Z freqtrade/data/metrics.py:32: in calculate_market_change
2025-08-30T09:58:47.3579770Z     df1 = df1[df1["date"] >= min_date]
2025-08-30T09:58:47.3579837Z               ^^^^^^^^^^^
2025-08-30T09:58:47.3580024Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3580194Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3580259Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3580360Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3580364Z 
2025-08-30T09:58:47.3580526Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3580587Z key = 'date'
2025-08-30T09:58:47.3580592Z 
2025-08-30T09:58:47.3580667Z     def get_loc(self, key):
2025-08-30T09:58:47.3580724Z         """
2025-08-30T09:58:47.3580871Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3580931Z     
2025-08-30T09:58:47.3580993Z         Parameters
2025-08-30T09:58:47.3581054Z         ----------
2025-08-30T09:58:47.3581209Z         key : label
2025-08-30T09:58:47.3581272Z     
2025-08-30T09:58:47.3581330Z         Returns
2025-08-30T09:58:47.3581388Z         -------
2025-08-30T09:58:47.3581512Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3581571Z     
2025-08-30T09:58:47.3581630Z         Examples
2025-08-30T09:58:47.3581689Z         --------
2025-08-30T09:58:47.3581782Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3581859Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3581916Z         1
2025-08-30T09:58:47.3581975Z     
2025-08-30T09:58:47.3582068Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3582147Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3582213Z         slice(1, 3, None)
2025-08-30T09:58:47.3582271Z     
2025-08-30T09:58:47.3582369Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3582451Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3582541Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3582598Z         """
2025-08-30T09:58:47.3582689Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3582747Z         try:
2025-08-30T09:58:47.3589317Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3589435Z         except KeyError as err:
2025-08-30T09:58:47.3589536Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3589638Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3589764Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3589827Z             ):
2025-08-30T09:58:47.3589918Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3589997Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3590070Z E           KeyError: 'date'
2025-08-30T09:58:47.3590077Z 
2025-08-30T09:58:47.3590288Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3590441Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3590947Z 2025-08-30 09:56:08 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3591371Z 2025-08-30 09:56:08 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.3591472Z 2025-08-30 09:56:08 INFO Found no parameter file.
2025-08-30T09:58:47.3591849Z 2025-08-30 09:56:08 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3592184Z 2025-08-30 09:56:08 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3592511Z 2025-08-30 09:56:08 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3592722Z 2025-08-30 09:56:08 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3592923Z 2025-08-30 09:56:08 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3593190Z 2025-08-30 09:56:08 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3593894Z 2025-08-30 09:56:08 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3594102Z 2025-08-30 09:56:08 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3594212Z 2025-08-30 09:56:08 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3594327Z 2025-08-30 09:56:08 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3594447Z 2025-08-30 09:56:08 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3594602Z 2025-08-30 09:56:08 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3594760Z 2025-08-30 09:56:08 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3595023Z 2025-08-30 09:56:08 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3595169Z 2025-08-30 09:56:08 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3595472Z 2025-08-30 09:56:08 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.3595671Z 2025-08-30 09:56:08 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.3595786Z 2025-08-30 09:56:08 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3595895Z 2025-08-30 09:56:08 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3596025Z 2025-08-30 09:56:08 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.3596203Z 2025-08-30 09:56:08 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3596326Z 2025-08-30 09:56:08 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3596453Z 2025-08-30 09:56:08 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3596601Z 2025-08-30 09:56:08 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3596719Z 2025-08-30 09:56:08 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3596864Z 2025-08-30 09:56:08 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3597022Z 2025-08-30 09:56:08 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3597163Z 2025-08-30 09:56:08 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3597304Z 2025-08-30 09:56:08 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3597420Z 2025-08-30 09:56:08 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3597634Z 2025-08-30 09:56:08 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 195 - after: 203 - 4.10%
2025-08-30T09:58:47.3597793Z __________________ test_freqai_backtest_consistent_timerange ___________________
2025-08-30T09:58:47.3597799Z 
2025-08-30T09:58:47.3597966Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3598030Z key = 'date'
2025-08-30T09:58:47.3598034Z 
2025-08-30T09:58:47.3598108Z     def get_loc(self, key):
2025-08-30T09:58:47.3598175Z         """
2025-08-30T09:58:47.3598325Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3598382Z     
2025-08-30T09:58:47.3598450Z         Parameters
2025-08-30T09:58:47.3598512Z         ----------
2025-08-30T09:58:47.3598577Z         key : label
2025-08-30T09:58:47.3598633Z     
2025-08-30T09:58:47.3598697Z         Returns
2025-08-30T09:58:47.3598755Z         -------
2025-08-30T09:58:47.3598881Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3598940Z     
2025-08-30T09:58:47.3598999Z         Examples
2025-08-30T09:58:47.3599061Z         --------
2025-08-30T09:58:47.3599151Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3599234Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3599290Z         1
2025-08-30T09:58:47.3599347Z     
2025-08-30T09:58:47.3599449Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3599530Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3599723Z         slice(1, 3, None)
2025-08-30T09:58:47.3599779Z     
2025-08-30T09:58:47.3599894Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3599984Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3600069Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3600131Z         """
2025-08-30T09:58:47.3600224Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3600282Z         try:
2025-08-30T09:58:47.3600373Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3600446Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3600451Z 
2025-08-30T09:58:47.3600624Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3600808Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3600987Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3601046Z     ???
2025-08-30T09:58:47.3601208Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3601268Z     ???
2025-08-30T09:58:47.3601534Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3601591Z     ???
2025-08-30T09:58:47.3601696Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3601701Z 
2025-08-30T09:58:47.3601755Z >   ???
2025-08-30T09:58:47.3601821Z E   KeyError: 'date'
2025-08-30T09:58:47.3601826Z 
2025-08-30T09:58:47.3601956Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3601978Z 
2025-08-30T09:58:47.3602133Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3602138Z 
2025-08-30T09:58:47.3602294Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6594f78610>
2025-08-30T09:58:47.3602988Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'config_files': [PosixPath('...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3602998Z 
2025-08-30T09:58:47.3603153Z     def test_freqai_backtest_consistent_timerange(mocker, freqai_conf):
2025-08-30T09:58:47.3603237Z         freqai_conf["runmode"] = "backtest"
2025-08-30T09:58:47.3603312Z         mocker.patch(
2025-08-30T09:58:47.3603723Z             "freqtrade.plugins.pairlistmanager.PairListManager.whitelist",
2025-08-30T09:58:47.3603838Z             PropertyMock(return_value=["XRP/USDT:USDT"]),
2025-08-30T09:58:47.3603899Z         )
2025-08-30T09:58:47.3603960Z     
2025-08-30T09:58:47.3604160Z         gbs = mocker.patch("freqtrade.optimize.backtesting.generate_backtest_stats")
2025-08-30T09:58:47.3604215Z     
2025-08-30T09:58:47.3604315Z         freqai_conf["trading_mode"] = "futures"
2025-08-30T09:58:47.3604489Z         freqai_conf.get("exchange", {}).update({"pair_whitelist": ["XRP/USDT:USDT"]})
2025-08-30T09:58:47.3604638Z         freqai_conf.get("freqai", {}).get("feature_parameters", {}).update(
2025-08-30T09:58:47.3604787Z             {"include_timeframes": ["5m", "1h"], "include_corr_pairlist": []}
2025-08-30T09:58:47.3604845Z         )
2025-08-30T09:58:47.3604941Z         freqai_conf["timerange"] = "20211120-20211121"
2025-08-30T09:58:47.3604997Z     
2025-08-30T09:58:47.3605148Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.3605264Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.3605319Z     
2025-08-30T09:58:47.3605435Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.3605549Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.3605626Z         freqai = strategy.freqai
2025-08-30T09:58:47.3605725Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.3605786Z     
2025-08-30T09:58:47.3605917Z         timerange = TimeRange.parse_timerange("20211115-20211122")
2025-08-30T09:58:47.3606181Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.3606241Z     
2025-08-30T09:58:47.3606350Z         backtesting = Backtesting(deepcopy(freqai_conf))
2025-08-30T09:58:47.3606427Z >       backtesting.start()
2025-08-30T09:58:47.3606432Z 
2025-08-30T09:58:47.3606538Z tests/freqai/test_freqai_backtesting.py:163: 
2025-08-30T09:58:47.3606640Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3606745Z freqtrade/optimize/backtesting.py:1858: in start
2025-08-30T09:58:47.3606830Z     data, timerange = self.load_bt_data()
2025-08-30T09:58:47.3606906Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3607027Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.3607258Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.3607340Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3607484Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.3607553Z     timeranges = [
2025-08-30T09:58:47.3607690Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.3607841Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.3607899Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.3608086Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3608181Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3608247Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3608345Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3608350Z 
2025-08-30T09:58:47.3608515Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3608580Z key = 'date'
2025-08-30T09:58:47.3608585Z 
2025-08-30T09:58:47.3608656Z     def get_loc(self, key):
2025-08-30T09:58:47.3608721Z         """
2025-08-30T09:58:47.3608871Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3608931Z     
2025-08-30T09:58:47.3608998Z         Parameters
2025-08-30T09:58:47.3609060Z         ----------
2025-08-30T09:58:47.3609123Z         key : label
2025-08-30T09:58:47.3609177Z     
2025-08-30T09:58:47.3609240Z         Returns
2025-08-30T09:58:47.3609300Z         -------
2025-08-30T09:58:47.3609421Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3609483Z     
2025-08-30T09:58:47.3609543Z         Examples
2025-08-30T09:58:47.3609603Z         --------
2025-08-30T09:58:47.3609691Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3609776Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3609833Z         1
2025-08-30T09:58:47.3609890Z     
2025-08-30T09:58:47.3609990Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3610070Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3610137Z         slice(1, 3, None)
2025-08-30T09:58:47.3610196Z     
2025-08-30T09:58:47.3610301Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3610383Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3610465Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3610527Z         """
2025-08-30T09:58:47.3610618Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3610676Z         try:
2025-08-30T09:58:47.3610767Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3610847Z         except KeyError as err:
2025-08-30T09:58:47.3610933Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3611022Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3611138Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3611199Z             ):
2025-08-30T09:58:47.3611283Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3611364Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3611529Z E           KeyError: 'date'
2025-08-30T09:58:47.3611534Z 
2025-08-30T09:58:47.3611724Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3611864Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3612199Z 2025-08-30 09:56:09 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3612688Z 2025-08-30 09:56:09 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3613111Z 2025-08-30 09:56:09 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3613284Z 2025-08-30 09:56:09 INFO Found no parameter file.
2025-08-30T09:58:47.3613783Z 2025-08-30 09:56:09 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3613975Z 2025-08-30 09:56:09 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3614156Z 2025-08-30 09:56:09 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3614353Z 2025-08-30 09:56:09 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3614541Z 2025-08-30 09:56:09 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3614810Z 2025-08-30 09:56:09 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3614996Z 2025-08-30 09:56:09 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3615193Z 2025-08-30 09:56:09 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3615304Z 2025-08-30 09:56:09 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3615409Z 2025-08-30 09:56:09 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3615532Z 2025-08-30 09:56:09 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3615686Z 2025-08-30 09:56:09 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3615840Z 2025-08-30 09:56:09 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3615969Z 2025-08-30 09:56:09 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3616113Z 2025-08-30 09:56:09 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3616889Z 2025-08-30 09:56:09 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3617099Z 2025-08-30 09:56:09 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3617224Z 2025-08-30 09:56:09 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3617339Z 2025-08-30 09:56:09 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3617467Z 2025-08-30 09:56:09 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3617637Z 2025-08-30 09:56:09 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3617754Z 2025-08-30 09:56:09 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3617875Z 2025-08-30 09:56:09 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3618017Z 2025-08-30 09:56:09 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3618140Z 2025-08-30 09:56:09 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3618280Z 2025-08-30 09:56:09 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3618434Z 2025-08-30 09:56:09 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3618587Z 2025-08-30 09:56:09 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3618730Z 2025-08-30 09:56:09 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3618983Z 2025-08-30 09:56:09 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3619359Z 2025-08-30 09:56:09 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3619644Z 2025-08-30 09:56:09 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3620046Z 2025-08-30 09:56:09 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_freqai_backtest_consisten0/freqaimodels'
2025-08-30T09:58:47.3620362Z 2025-08-30 09:56:09 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_freqai_backtest_consisten0/freqaimodels" does not exist.
2025-08-30T09:58:47.3620861Z 2025-08-30 09:56:09 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3621178Z 2025-08-30 09:56:09 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3621697Z 2025-08-30 09:56:09 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3621847Z 2025-08-30 09:56:09 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.3622012Z 2025-08-30 09:56:09 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3622210Z 2025-08-30 09:56:09 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3622385Z 2025-08-30 09:56:09 INFO Set fresh train queue from whitelist. Queue: ['XRP/USDT:USDT']
2025-08-30T09:58:47.3622525Z 2025-08-30 09:56:09 INFO No params for buy found, using default values.
2025-08-30T09:58:47.3622669Z 2025-08-30 09:56:09 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3622829Z 2025-08-30 09:56:09 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3622983Z 2025-08-30 09:56:09 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3623135Z 2025-08-30 09:56:09 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3623245Z 2025-08-30 09:56:09 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3623553Z 2025-08-30 09:56:09 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3623692Z 2025-08-30 09:56:09 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3623802Z 2025-08-30 09:56:09 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3623930Z 2025-08-30 09:56:09 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3624049Z 2025-08-30 09:56:09 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3624240Z 2025-08-30 09:56:09 WARNING XRP/USDT:USDT, futures, 5m, data ends at 2021-11-21 22:30:00
2025-08-30T09:58:47.3624431Z 2025-08-30 09:56:09 WARNING XRP/USDT:USDT, futures, 1h, data starts at 2021-11-17 01:00:00
2025-08-30T09:58:47.3624600Z 2025-08-30 09:56:09 WARNING XRP/USDT:USDT, futures, 1h, data ends at 2021-11-21 04:00:00
2025-08-30T09:58:47.3624713Z 2025-08-30 09:56:09 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3624836Z 2025-08-30 09:56:09 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3624912Z 2025-08-30 09:56:09 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3625008Z 2025-08-30 09:56:09 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3625130Z 2025-08-30 09:56:09 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3625243Z 2025-08-30 09:56:10 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3625575Z 2025-08-30 09:56:10 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3626069Z 2025-08-30 09:56:10 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3626522Z 2025-08-30 09:56:10 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3626756Z 2025-08-30 09:56:10 INFO Found no parameter file.
2025-08-30T09:58:47.3627039Z 2025-08-30 09:56:10 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3627212Z 2025-08-30 09:56:10 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3627393Z 2025-08-30 09:56:10 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3627586Z 2025-08-30 09:56:10 INFO Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.3627929Z 2025-08-30 09:56:10 INFO Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.3628178Z 2025-08-30 09:56:10 INFO Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.3628394Z 2025-08-30 09:56:10 INFO Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.3628617Z 2025-08-30 09:56:10 INFO Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.3629180Z 2025-08-30 09:56:10 INFO Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.3629462Z 2025-08-30 09:56:10 INFO Override strategy 'order_time_in_force' with value in config file: {'entry': 'GTC', 'exit': 'GTC'}.
2025-08-30T09:58:47.3629652Z 2025-08-30 09:56:10 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3629847Z 2025-08-30 09:56:10 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3630056Z 2025-08-30 09:56:10 INFO Override strategy 'startup_candle_count' with value in config file: 300.
2025-08-30T09:58:47.3630320Z 2025-08-30 09:56:10 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3630517Z 2025-08-30 09:56:10 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.3630722Z 2025-08-30 09:56:10 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.3630949Z 2025-08-30 09:56:10 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.3631144Z 2025-08-30 09:56:10 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.3631377Z 2025-08-30 09:56:10 INFO Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.3631621Z 2025-08-30 09:56:10 INFO Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.3631853Z 2025-08-30 09:56:10 INFO Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.3632085Z 2025-08-30 09:56:10 INFO Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.3632271Z 2025-08-30 09:56:10 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3632464Z 2025-08-30 09:56:10 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3632574Z 2025-08-30 09:56:10 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3632680Z 2025-08-30 09:56:10 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3632797Z 2025-08-30 09:56:10 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3632949Z 2025-08-30 09:56:10 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3633106Z 2025-08-30 09:56:10 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3633236Z 2025-08-30 09:56:10 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3633580Z 2025-08-30 09:56:10 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3634244Z 2025-08-30 09:56:10 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3634440Z 2025-08-30 09:56:10 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3634562Z 2025-08-30 09:56:10 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3634670Z 2025-08-30 09:56:10 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3634798Z 2025-08-30 09:56:10 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3634964Z 2025-08-30 09:56:10 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3635193Z 2025-08-30 09:56:10 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3635321Z 2025-08-30 09:56:10 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3635464Z 2025-08-30 09:56:10 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3635590Z 2025-08-30 09:56:10 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3635730Z 2025-08-30 09:56:10 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3635882Z 2025-08-30 09:56:10 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3636032Z 2025-08-30 09:56:10 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3636181Z 2025-08-30 09:56:10 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3636292Z 2025-08-30 09:56:10 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3636404Z 2025-08-30 09:56:10 INFO Validating configuration ...
2025-08-30T09:58:47.3636765Z 2025-08-30 09:56:10 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.3637053Z 2025-08-30 09:56:10 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.3637505Z 2025-08-30 09:56:10 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.3637773Z 2025-08-30 09:56:10 DEBUG Pair XRP/USDT:USDT is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.3638033Z 2025-08-30 09:56:10 WARNING Pair XRP/USDT:USDT is not compatible with exchange Binance. Removing it from whitelist..
2025-08-30T09:58:47.3638147Z 2025-08-30 09:56:10 DEBUG Whitelist with 0 pairs: []
2025-08-30T09:58:47.3638324Z 2025-08-30 09:56:10 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.3638491Z 2025-08-30 09:56:10 INFO Increasing startup_candle_count for freqai on 5m to 876
2025-08-30T09:58:47.3638629Z 2025-08-30 09:56:10 DEBUG Using indicator startup period: 876 ...
2025-08-30T09:58:47.3638767Z _________________________ test_get_shared_data_wrapper _________________________
2025-08-30T09:58:47.3638775Z 
2025-08-30T09:58:47.3639022Z config = {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}
2025-08-30T09:58:47.3639027Z 
2025-08-30T09:58:47.3639127Z     def test_get_shared_data_wrapper(config):
2025-08-30T09:58:47.3639216Z         """Test getting shared data wrapper."""
2025-08-30T09:58:47.3639314Z         integration = HyperoptIntegration(config)
2025-08-30T09:58:47.3639373Z     
2025-08-30T09:58:47.3639455Z         # No shared memory setup
2025-08-30T09:58:47.3639635Z         wrapper = integration.get_shared_data_wrapper()
2025-08-30T09:58:47.3639772Z         assert wrapper is None
2025-08-30T09:58:47.3639879Z     
2025-08-30T09:58:47.3640005Z         # With shared memory
2025-08-30T09:58:47.3640197Z         integration.shared_memory_manager = MagicMock()
2025-08-30T09:58:47.3640327Z         integration.shared_data_keys = {'main_data': 'key1'}
2025-08-30T09:58:47.3640440Z         integration.shared_memory_manager.metadata = {
2025-08-30T09:58:47.3640628Z             'key1': {'type': 'dict', 'shape': (100, 5)}
2025-08-30T09:58:47.3640686Z         }
2025-08-30T09:58:47.3640746Z     
2025-08-30T09:58:47.3640849Z         wrapper = integration.get_shared_data_wrapper()
2025-08-30T09:58:47.3640927Z >       assert wrapper is not None
2025-08-30T09:58:47.3641004Z E       assert None is not None
2025-08-30T09:58:47.3641010Z 
2025-08-30T09:58:47.3641167Z tests/optimize/test_hyperopt_integration.py:186: AssertionError
2025-08-30T09:58:47.3641308Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3641560Z 2025-08-30 09:56:48 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 14106MB available
2025-08-30T09:58:47.3641715Z __________________ test_optimize_parallel_settings_configured __________________
2025-08-30T09:58:47.3641797Z 
2025-08-30T09:58:47.3641859Z args = ()
2025-08-30T09:58:47.3642140Z keywargs = {'config': {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}}
2025-08-30T09:58:47.3642155Z 
2025-08-30T09:58:47.3642217Z     @wraps(func)
2025-08-30T09:58:47.3642297Z     def patched(*args, **keywargs):
2025-08-30T09:58:47.3642385Z >       with self.decoration_helper(patched,
2025-08-30T09:58:47.3642461Z                                     args,
2025-08-30T09:58:47.3642563Z                                     keywargs) as (newargs, newkeywargs):
2025-08-30T09:58:47.3642568Z 
2025-08-30T09:58:47.3642763Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1375: 
2025-08-30T09:58:47.3642869Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3643081Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/contextlib.py:137: in __enter__
2025-08-30T09:58:47.3643160Z     return next(self.gen)
2025-08-30T09:58:47.3643225Z            ^^^^^^^^^^^^^^
2025-08-30T09:58:47.3643705Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1357: in decoration_helper
2025-08-30T09:58:47.3643809Z     arg = exit_stack.enter_context(patching)
2025-08-30T09:58:47.3643882Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3644116Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/contextlib.py:517: in enter_context
2025-08-30T09:58:47.3644184Z     result = _enter(cm)
2025-08-30T09:58:47.3644249Z              ^^^^^^^^^^
2025-08-30T09:58:47.3644470Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3644554Z     original, local = self.get_original()
2025-08-30T09:58:47.3644624Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3644723Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3644727Z 
2025-08-30T09:58:47.3644846Z self = <unittest.mock._patch object at 0x7f66eb6d2b50>
2025-08-30T09:58:47.3644851Z 
2025-08-30T09:58:47.3644927Z     def get_original(self):
2025-08-30T09:58:47.3645002Z         target = self.getter()
2025-08-30T09:58:47.3645079Z         name = self.attribute
2025-08-30T09:58:47.3645134Z     
2025-08-30T09:58:47.3645209Z         original = DEFAULT
2025-08-30T09:58:47.3645272Z         local = False
2025-08-30T09:58:47.3645327Z     
2025-08-30T09:58:47.3645390Z         try:
2025-08-30T09:58:47.3645470Z             original = target.__dict__[name]
2025-08-30T09:58:47.3645556Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3645649Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3645711Z         else:
2025-08-30T09:58:47.3645776Z             local = True
2025-08-30T09:58:47.3645829Z     
2025-08-30T09:58:47.3645959Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3646031Z             self.create = True
2025-08-30T09:58:47.3646085Z     
2025-08-30T09:58:47.3646183Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3646263Z >           raise AttributeError(
2025-08-30T09:58:47.3646376Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3646565Z             )
2025-08-30T09:58:47.3647254Z E           AttributeError: <module 'freqtrade.optimize.hyperopt_integration' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_integration.py'> does not have the attribute 'HyperoptResourceOptimizer'
2025-08-30T09:58:47.3647259Z 
2025-08-30T09:58:47.3647500Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3647652Z _____________________ test_optimize_parallel_settings_auto _____________________
2025-08-30T09:58:47.3647656Z 
2025-08-30T09:58:47.3647718Z args = ()
2025-08-30T09:58:47.3647999Z keywargs = {'config': {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}}
2025-08-30T09:58:47.3648004Z 
2025-08-30T09:58:47.3648168Z     @wraps(func)
2025-08-30T09:58:47.3648255Z     def patched(*args, **keywargs):
2025-08-30T09:58:47.3648341Z >       with self.decoration_helper(patched,
2025-08-30T09:58:47.3648414Z                                     args,
2025-08-30T09:58:47.3648516Z                                     keywargs) as (newargs, newkeywargs):
2025-08-30T09:58:47.3648520Z 
2025-08-30T09:58:47.3648708Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1375: 
2025-08-30T09:58:47.3648804Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3649016Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/contextlib.py:137: in __enter__
2025-08-30T09:58:47.3649087Z     return next(self.gen)
2025-08-30T09:58:47.3649147Z            ^^^^^^^^^^^^^^
2025-08-30T09:58:47.3649397Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1357: in decoration_helper
2025-08-30T09:58:47.3649489Z     arg = exit_stack.enter_context(patching)
2025-08-30T09:58:47.3649559Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3649778Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/contextlib.py:517: in enter_context
2025-08-30T09:58:47.3649851Z     result = _enter(cm)
2025-08-30T09:58:47.3649913Z              ^^^^^^^^^^
2025-08-30T09:58:47.3650126Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3650212Z     original, local = self.get_original()
2025-08-30T09:58:47.3650278Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3650373Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3650378Z 
2025-08-30T09:58:47.3650496Z self = <unittest.mock._patch object at 0x7f66e8ccbd50>
2025-08-30T09:58:47.3650500Z 
2025-08-30T09:58:47.3650572Z     def get_original(self):
2025-08-30T09:58:47.3650643Z         target = self.getter()
2025-08-30T09:58:47.3650713Z         name = self.attribute
2025-08-30T09:58:47.3650772Z     
2025-08-30T09:58:47.3650842Z         original = DEFAULT
2025-08-30T09:58:47.3650906Z         local = False
2025-08-30T09:58:47.3650963Z     
2025-08-30T09:58:47.3651020Z         try:
2025-08-30T09:58:47.3651100Z             original = target.__dict__[name]
2025-08-30T09:58:47.3651183Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3651279Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3651336Z         else:
2025-08-30T09:58:47.3651399Z             local = True
2025-08-30T09:58:47.3651457Z     
2025-08-30T09:58:47.3651580Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3651649Z             self.create = True
2025-08-30T09:58:47.3651709Z     
2025-08-30T09:58:47.3651803Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3651878Z >           raise AttributeError(
2025-08-30T09:58:47.3651986Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3652046Z             )
2025-08-30T09:58:47.3652729Z E           AttributeError: <module 'freqtrade.optimize.hyperopt_integration' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_integration.py'> does not have the attribute 'HyperoptResourceOptimizer'
2025-08-30T09:58:47.3652820Z 
2025-08-30T09:58:47.3653058Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3653186Z _________________________________ test_cleanup _________________________________
2025-08-30T09:58:47.3653191Z 
2025-08-30T09:58:47.3653535Z config = {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}
2025-08-30T09:58:47.3653541Z 
2025-08-30T09:58:47.3653616Z     def test_cleanup(config):
2025-08-30T09:58:47.3653702Z         """Test cleanup of shared memory."""
2025-08-30T09:58:47.3653799Z         integration = HyperoptIntegration(config)
2025-08-30T09:58:47.3653855Z     
2025-08-30T09:58:47.3653933Z         # Setup mock shared memory
2025-08-30T09:58:47.3654143Z         mock_manager = MagicMock()
2025-08-30T09:58:47.3654259Z         integration.shared_memory_manager = mock_manager
2025-08-30T09:58:47.3654365Z         integration.shared_data_keys = {'test': 'key'}
2025-08-30T09:58:47.3654424Z     
2025-08-30T09:58:47.3654500Z         integration.cleanup()
2025-08-30T09:58:47.3654554Z     
2025-08-30T09:58:47.3654651Z         mock_manager.cleanup.assert_called_once()
2025-08-30T09:58:47.3654758Z >       assert integration.shared_memory_manager is None
2025-08-30T09:58:47.3654907Z E       AssertionError: assert <MagicMock id='140073995110288'> is None
2025-08-30T09:58:47.3655331Z E        +  where <MagicMock id='140073995110288'> = <freqtrade.optimize.hyperopt_integration.HyperoptIntegration object at 0x7f6584b89750>.shared_memory_manager
2025-08-30T09:58:47.3655336Z 
2025-08-30T09:58:47.3655491Z tests/optimize/test_hyperopt_integration.py:204: AssertionError
2025-08-30T09:58:47.3655632Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3655882Z 2025-08-30 09:56:48 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 14107MB available
2025-08-30T09:58:47.3655997Z 2025-08-30 09:56:48 INFO Cleaned up shared memory resources
2025-08-30T09:58:47.3656135Z ________________________ test_setup_shared_memory_dict _________________________
2025-08-30T09:58:47.3656139Z 
2025-08-30T09:58:47.3656269Z mock_pickle_load = <MagicMock name='load' id='140073992002832'>
2025-08-30T09:58:47.3656378Z mock_file = <MagicMock name='open' id='140074257756816'>
2025-08-30T09:58:47.3656553Z mock_estimate_size = <MagicMock name='estimate_data_size' id='140073725213584'>
2025-08-30T09:58:47.3656794Z config = {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}
2025-08-30T09:58:47.3656914Z sample_data = {'BTC/USDT':          open     close    volume
2025-08-30T09:58:47.3656980Z 0    0.926178  0.778361  0.570613
2025-08-30T09:58:47.3657046Z 1    1.909417 -0.551186  0.968185
2025-08-30T09:58:47.3657118Z 2  ...76848 -0.651675  1.181890
2025-08-30T09:58:47.3657186Z 998 -2.169677 -2.194382 -0.066449
2025-08-30T09:58:47.3657249Z 999 -1.194189  1.599471 -0.358079
2025-08-30T09:58:47.3657257Z 
2025-08-30T09:58:47.3657332Z [1000 rows x 3 columns]}
2025-08-30T09:58:47.3657336Z 
2025-08-30T09:58:47.3657514Z     @patch('freqtrade.optimize.hyperopt_integration.estimate_data_size')
2025-08-30T09:58:47.3657624Z     @patch('builtins.open', new_callable=mock_open)
2025-08-30T09:58:47.3657704Z     @patch('pickle.load')
2025-08-30T09:58:47.3657959Z     def test_setup_shared_memory_dict(mock_pickle_load, mock_file, mock_estimate_size, config, sample_data):
2025-08-30T09:58:47.3658097Z         """Test shared memory setup with dictionary of DataFrames."""
2025-08-30T09:58:47.3658165Z         # Setup mocks
2025-08-30T09:58:47.3658258Z         mock_pickle_load.return_value = sample_data
2025-08-30T09:58:47.3658357Z         mock_estimate_size.return_value = 150.0  # 150MB
2025-08-30T09:58:47.3658411Z     
2025-08-30T09:58:47.3658516Z >       integration = HyperoptIntegration(config)
2025-08-30T09:58:47.3658586Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3658590Z 
2025-08-30T09:58:47.3658844Z tests/optimize/test_hyperopt_integration.py:106: 
2025-08-30T09:58:47.3659062Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3659202Z freqtrade/optimize/hyperopt_integration.py:44: in __init__
2025-08-30T09:58:47.3659317Z     self.resource_optimizer = ResourceOptimizer(config)
2025-08-30T09:58:47.3659393Z                               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3659552Z freqtrade/optimize/hyperopt_resource_optimizer.py:37: in __init__
2025-08-30T09:58:47.3659644Z     self.system_info = self._get_system_info()
2025-08-30T09:58:47.3659717Z                        ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3659898Z freqtrade/optimize/hyperopt_resource_optimizer.py:50: in _get_system_info
2025-08-30T09:58:47.3660117Z     'memory_total_mb': psutil.virtual_memory().total / (1024 * 1024),
2025-08-30T09:58:47.3660189Z                        ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3660384Z .venv/lib/python3.11/site-packages/psutil/__init__.py:2017: in virtual_memory
2025-08-30T09:58:47.3660474Z     ret = _psplatform.virtual_memory()
2025-08-30T09:58:47.3660540Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3660643Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3660648Z 
2025-08-30T09:58:47.3660719Z     def virtual_memory():
2025-08-30T09:58:47.3660799Z         """Report virtual memory stats.
2025-08-30T09:58:47.3660959Z         This implementation mimics procps-ng-3.3.12, aka "free" CLI tool:
2025-08-30T09:58:47.3661075Z         https://gitlab.com/procps-ng/procps/blob/
2025-08-30T09:58:47.3661367Z             24fd2605c51fccc375ab0287cec33aa767f06718/proc/sysinfo.c#L778-791
2025-08-30T09:58:47.3661665Z         The returned values are supposed to match both "free" and "vmstat -s"
2025-08-30T09:58:47.3661779Z         CLI tools.
2025-08-30T09:58:47.3661881Z         """
2025-08-30T09:58:47.3662004Z         missing_fields = []
2025-08-30T09:58:47.3662123Z         mems = {}
2025-08-30T09:58:47.3662262Z         with open_binary(f"{get_procfs_path()}/meminfo") as f:
2025-08-30T09:58:47.3662330Z             for line in f:
2025-08-30T09:58:47.3662413Z                 fields = line.split()
2025-08-30T09:58:47.3662499Z                 mems[fields[0]] = int(fields[1]) * 1024
2025-08-30T09:58:47.3662554Z     
2025-08-30T09:58:47.3662701Z         # /proc doc states that the available fields in /proc/meminfo vary
2025-08-30T09:58:47.3662859Z         # by architecture and compile options, but these 3 values are also
2025-08-30T09:58:47.3663000Z         # returned by sysinfo(2); as such we assume they are always there.
2025-08-30T09:58:47.3663075Z >       total = mems[b'MemTotal:']
2025-08-30T09:58:47.3663144Z                 ^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3663250Z E       KeyError: b'MemTotal:'
2025-08-30T09:58:47.3663257Z 
2025-08-30T09:58:47.3663688Z .venv/lib/python3.11/site-packages/psutil/_pslinux.py:370: KeyError
2025-08-30T09:58:47.3663955Z ___________________ test_setup_shared_memory_not_recommended ___________________
2025-08-30T09:58:47.3663989Z 
2025-08-30T09:58:47.3664150Z mock_pickle_load = <MagicMock name='load' id='140071140062352'>
2025-08-30T09:58:47.3664258Z mock_file = <MagicMock name='open' id='140071140055440'>
2025-08-30T09:58:47.3664430Z mock_estimate_size = <MagicMock name='estimate_data_size' id='140071138694416'>
2025-08-30T09:58:47.3664676Z config = {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}
2025-08-30T09:58:47.3664799Z sample_data = {'BTC/USDT':          open     close    volume
2025-08-30T09:58:47.3664870Z 0    1.227274  1.725694  2.505449
2025-08-30T09:58:47.3664937Z 1   -1.210161  0.121844 -0.451641
2025-08-30T09:58:47.3665005Z 2  ...87205 -0.663833  0.745857
2025-08-30T09:58:47.3665073Z 998  1.247304 -0.241063 -0.184611
2025-08-30T09:58:47.3665140Z 999  0.135491 -0.434033 -1.157713
2025-08-30T09:58:47.3665145Z 
2025-08-30T09:58:47.3665213Z [1000 rows x 3 columns]}
2025-08-30T09:58:47.3665363Z 
2025-08-30T09:58:47.3665546Z     @patch('freqtrade.optimize.hyperopt_integration.estimate_data_size')
2025-08-30T09:58:47.3665657Z     @patch('builtins.open', new_callable=mock_open)
2025-08-30T09:58:47.3665733Z     @patch('pickle.load')
2025-08-30T09:58:47.3666028Z     def test_setup_shared_memory_not_recommended(mock_pickle_load, mock_file, mock_estimate_size, config, sample_data):
2025-08-30T09:58:47.3666144Z         """Test shared memory setup when not recommended."""
2025-08-30T09:58:47.3666210Z         # Setup mocks
2025-08-30T09:58:47.3666303Z         mock_pickle_load.return_value = sample_data
2025-08-30T09:58:47.3666417Z         mock_estimate_size.return_value = 10.0  # Small data
2025-08-30T09:58:47.3666473Z     
2025-08-30T09:58:47.3666570Z >       integration = HyperoptIntegration(config)
2025-08-30T09:58:47.3666748Z                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3666753Z 
2025-08-30T09:58:47.3666869Z tests/optimize/test_hyperopt_integration.py:139: 
2025-08-30T09:58:47.3666975Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3667117Z freqtrade/optimize/hyperopt_integration.py:44: in __init__
2025-08-30T09:58:47.3667236Z     self.resource_optimizer = ResourceOptimizer(config)
2025-08-30T09:58:47.3667310Z                               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3667470Z freqtrade/optimize/hyperopt_resource_optimizer.py:37: in __init__
2025-08-30T09:58:47.3667566Z     self.system_info = self._get_system_info()
2025-08-30T09:58:47.3667634Z                        ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3667817Z freqtrade/optimize/hyperopt_resource_optimizer.py:50: in _get_system_info
2025-08-30T09:58:47.3667961Z     'memory_total_mb': psutil.virtual_memory().total / (1024 * 1024),
2025-08-30T09:58:47.3668036Z                        ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3668226Z .venv/lib/python3.11/site-packages/psutil/__init__.py:2017: in virtual_memory
2025-08-30T09:58:47.3668314Z     ret = _psplatform.virtual_memory()
2025-08-30T09:58:47.3668390Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3668487Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3668492Z 
2025-08-30T09:58:47.3668562Z     def virtual_memory():
2025-08-30T09:58:47.3668647Z         """Report virtual memory stats.
2025-08-30T09:58:47.3668800Z         This implementation mimics procps-ng-3.3.12, aka "free" CLI tool:
2025-08-30T09:58:47.3668903Z         https://gitlab.com/procps-ng/procps/blob/
2025-08-30T09:58:47.3669066Z             24fd2605c51fccc375ab0287cec33aa767f06718/proc/sysinfo.c#L778-791
2025-08-30T09:58:47.3669226Z         The returned values are supposed to match both "free" and "vmstat -s"
2025-08-30T09:58:47.3669287Z         CLI tools.
2025-08-30T09:58:47.3669349Z         """
2025-08-30T09:58:47.3669426Z         missing_fields = []
2025-08-30T09:58:47.3669485Z         mems = {}
2025-08-30T09:58:47.3669604Z         with open_binary(f"{get_procfs_path()}/meminfo") as f:
2025-08-30T09:58:47.3669679Z             for line in f:
2025-08-30T09:58:47.3669756Z                 fields = line.split()
2025-08-30T09:58:47.3669845Z                 mems[fields[0]] = int(fields[1]) * 1024
2025-08-30T09:58:47.3669900Z     
2025-08-30T09:58:47.3670051Z         # /proc doc states that the available fields in /proc/meminfo vary
2025-08-30T09:58:47.3670199Z         # by architecture and compile options, but these 3 values are also
2025-08-30T09:58:47.3670337Z         # returned by sysinfo(2); as such we assume they are always there.
2025-08-30T09:58:47.3670418Z >       total = mems[b'MemTotal:']
2025-08-30T09:58:47.3670483Z                 ^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3670560Z E       KeyError: b'MemTotal:'
2025-08-30T09:58:47.3670565Z 
2025-08-30T09:58:47.3670737Z .venv/lib/python3.11/site-packages/psutil/_pslinux.py:370: KeyError
2025-08-30T09:58:47.3670870Z ___________________________ test_log_resource_status ___________________________
2025-08-30T09:58:47.3670875Z 
2025-08-30T09:58:47.3671027Z args = ()
2025-08-30T09:58:47.3671539Z keywargs = {'capsys': <_pytest.capture.CaptureFixture object at 0x7f6584824490>, 'config': {'hyperopt_jobs': -1, 'strategy': 'TestStrategy', 'user_data_dir': PosixPath('/tmp/freqtrade')}}
2025-08-30T09:58:47.3671544Z 
2025-08-30T09:58:47.3671607Z     @wraps(func)
2025-08-30T09:58:47.3671688Z     def patched(*args, **keywargs):
2025-08-30T09:58:47.3671785Z >       with self.decoration_helper(patched,
2025-08-30T09:58:47.3671857Z                                     args,
2025-08-30T09:58:47.3671960Z                                     keywargs) as (newargs, newkeywargs):
2025-08-30T09:58:47.3671964Z 
2025-08-30T09:58:47.3672175Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1375: 
2025-08-30T09:58:47.3672352Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3672574Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/contextlib.py:137: in __enter__
2025-08-30T09:58:47.3672650Z     return next(self.gen)
2025-08-30T09:58:47.3672715Z            ^^^^^^^^^^^^^^
2025-08-30T09:58:47.3672974Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1357: in decoration_helper
2025-08-30T09:58:47.3673067Z     arg = exit_stack.enter_context(patching)
2025-08-30T09:58:47.3673138Z           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3673536Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/contextlib.py:517: in enter_context
2025-08-30T09:58:47.3673643Z     result = _enter(cm)
2025-08-30T09:58:47.3673712Z              ^^^^^^^^^^
2025-08-30T09:58:47.3673945Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1446: in __enter__
2025-08-30T09:58:47.3674031Z     original, local = self.get_original()
2025-08-30T09:58:47.3674101Z                       ^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3674205Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3674210Z 
2025-08-30T09:58:47.3674332Z self = <unittest.mock._patch object at 0x7f66e91943d0>
2025-08-30T09:58:47.3674337Z 
2025-08-30T09:58:47.3674409Z     def get_original(self):
2025-08-30T09:58:47.3674487Z         target = self.getter()
2025-08-30T09:58:47.3674559Z         name = self.attribute
2025-08-30T09:58:47.3674612Z     
2025-08-30T09:58:47.3674686Z         original = DEFAULT
2025-08-30T09:58:47.3674751Z         local = False
2025-08-30T09:58:47.3674804Z     
2025-08-30T09:58:47.3674862Z         try:
2025-08-30T09:58:47.3674947Z             original = target.__dict__[name]
2025-08-30T09:58:47.3675034Z         except (AttributeError, KeyError):
2025-08-30T09:58:47.3675128Z             original = getattr(target, name, DEFAULT)
2025-08-30T09:58:47.3675190Z         else:
2025-08-30T09:58:47.3675255Z             local = True
2025-08-30T09:58:47.3675309Z     
2025-08-30T09:58:47.3675442Z         if name in _builtins and isinstance(target, ModuleType):
2025-08-30T09:58:47.3675513Z             self.create = True
2025-08-30T09:58:47.3675567Z     
2025-08-30T09:58:47.3675665Z         if not self.create and original is DEFAULT:
2025-08-30T09:58:47.3675744Z >           raise AttributeError(
2025-08-30T09:58:47.3675856Z                 "%s does not have the attribute %r" % (target, name)
2025-08-30T09:58:47.3675913Z             )
2025-08-30T09:58:47.3676599Z E           AttributeError: <module 'freqtrade.optimize.hyperopt_integration' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_integration.py'> does not have the attribute 'HyperoptResourceOptimizer'
2025-08-30T09:58:47.3676605Z 
2025-08-30T09:58:47.3676845Z /opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/unittest/mock.py:1419: AttributeError
2025-08-30T09:58:47.3676983Z _________________________ test_calculate_market_change _________________________
2025-08-30T09:58:47.3676987Z 
2025-08-30T09:58:47.3677153Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3677213Z key = 'date'
2025-08-30T09:58:47.3677217Z 
2025-08-30T09:58:47.3677421Z     def get_loc(self, key):
2025-08-30T09:58:47.3677482Z         """
2025-08-30T09:58:47.3677631Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3677685Z     
2025-08-30T09:58:47.3677748Z         Parameters
2025-08-30T09:58:47.3677815Z         ----------
2025-08-30T09:58:47.3677875Z         key : label
2025-08-30T09:58:47.3677929Z     
2025-08-30T09:58:47.3677989Z         Returns
2025-08-30T09:58:47.3678047Z         -------
2025-08-30T09:58:47.3678171Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3678224Z     
2025-08-30T09:58:47.3678288Z         Examples
2025-08-30T09:58:47.3678347Z         --------
2025-08-30T09:58:47.3678439Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3678650Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3678711Z         1
2025-08-30T09:58:47.3678766Z     
2025-08-30T09:58:47.3678860Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3678946Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3679012Z         slice(1, 3, None)
2025-08-30T09:58:47.3679066Z     
2025-08-30T09:58:47.3679171Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3679251Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3679333Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3679394Z         """
2025-08-30T09:58:47.3679484Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3679543Z         try:
2025-08-30T09:58:47.3679630Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3679702Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3679707Z 
2025-08-30T09:58:47.3679877Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3679978Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3680148Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3680210Z     ???
2025-08-30T09:58:47.3680367Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3680428Z     ???
2025-08-30T09:58:47.3680690Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3680745Z     ???
2025-08-30T09:58:47.3680842Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3680851Z 
2025-08-30T09:58:47.3680905Z >   ???
2025-08-30T09:58:47.3680970Z E   KeyError: 'date'
2025-08-30T09:58:47.3680975Z 
2025-08-30T09:58:47.3681092Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3681097Z 
2025-08-30T09:58:47.3681257Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3681264Z 
2025-08-30T09:58:47.3681459Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3681463Z 
2025-08-30T09:58:47.3681565Z     def test_calculate_market_change(testdatadir):
2025-08-30T09:58:47.3681648Z         pairs = ["ETH/BTC", "ADA/BTC"]
2025-08-30T09:58:47.3681798Z         data = load_data(datadir=testdatadir, pairs=pairs, timeframe="5m")
2025-08-30T09:58:47.3681884Z         result = calculate_market_change(data)
2025-08-30T09:58:47.3681968Z         assert isinstance(result, float)
2025-08-30T09:58:47.3682059Z         assert pytest.approx(result) == 0.01100002
2025-08-30T09:58:47.3682112Z     
2025-08-30T09:58:47.3682268Z >       result = calculate_market_change(data, min_date=dt_utc(2018, 1, 20))
2025-08-30T09:58:47.3682345Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3682350Z 
2025-08-30T09:58:47.3682432Z tests/data/test_btanalysis.py:273: 
2025-08-30T09:58:47.3682535Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3682664Z freqtrade/data/metrics.py:32: in calculate_market_change
2025-08-30T09:58:47.3682738Z     df1 = df1[df1["date"] >= min_date]
2025-08-30T09:58:47.3682894Z               ^^^^^^^^^^^
2025-08-30T09:58:47.3683082Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3683165Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3683230Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3683328Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3683333Z 
2025-08-30T09:58:47.3683701Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3683764Z key = 'date'
2025-08-30T09:58:47.3683769Z 
2025-08-30T09:58:47.3683844Z     def get_loc(self, key):
2025-08-30T09:58:47.3683900Z         """
2025-08-30T09:58:47.3684171Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3684230Z     
2025-08-30T09:58:47.3684299Z         Parameters
2025-08-30T09:58:47.3684364Z         ----------
2025-08-30T09:58:47.3684424Z         key : label
2025-08-30T09:58:47.3684487Z     
2025-08-30T09:58:47.3684545Z         Returns
2025-08-30T09:58:47.3684613Z         -------
2025-08-30T09:58:47.3684839Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3684948Z     
2025-08-30T09:58:47.3685056Z         Examples
2025-08-30T09:58:47.3685167Z         --------
2025-08-30T09:58:47.3685266Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3685346Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3685402Z         1
2025-08-30T09:58:47.3685461Z     
2025-08-30T09:58:47.3685555Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3685634Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3685704Z         slice(1, 3, None)
2025-08-30T09:58:47.3685762Z     
2025-08-30T09:58:47.3685866Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3685948Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3686032Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3686093Z         """
2025-08-30T09:58:47.3686182Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3686240Z         try:
2025-08-30T09:58:47.3686332Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3686405Z         except KeyError as err:
2025-08-30T09:58:47.3686493Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3686587Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3686696Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3686754Z             ):
2025-08-30T09:58:47.3686838Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3686921Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3686991Z E           KeyError: 'date'
2025-08-30T09:58:47.3686999Z 
2025-08-30T09:58:47.3687191Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3687351Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3687950Z 2025-08-30 09:56:49,809 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 5720 - after: 5760 - 0.70%
2025-08-30T09:58:47.3688093Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3688309Z 2025-08-30 09:56:49 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5720 - after: 5760 - 0.70%
2025-08-30T09:58:47.3688453Z ______________________ test_combine_dataframes_with_mean _______________________
2025-08-30T09:58:47.3688457Z 
2025-08-30T09:58:47.3688654Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3688659Z 
2025-08-30T09:58:47.3688777Z     def test_combine_dataframes_with_mean(testdatadir):
2025-08-30T09:58:47.3688857Z         pairs = ["ETH/BTC", "ADA/BTC"]
2025-08-30T09:58:47.3689012Z         data = load_data(datadir=testdatadir, pairs=pairs, timeframe="5m")
2025-08-30T09:58:47.3689242Z >       df = combine_dataframes_with_mean(data)
2025-08-30T09:58:47.3689312Z              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3689317Z 
2025-08-30T09:58:47.3689401Z tests/data/test_btanalysis.py:285: 
2025-08-30T09:58:47.3689501Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3689648Z freqtrade/data/metrics.py:94: in combine_dataframes_with_mean
2025-08-30T09:58:47.3689755Z     df_comb = combine_dataframes_by_column(data, column)
2025-08-30T09:58:47.3689837Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3689930Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3689934Z 
2025-08-30T09:58:47.3690233Z data = <freqtrade.data.history.history_utils.LazyDataLoader object at 0x7f64da2cfc10>
2025-08-30T09:58:47.3690299Z column = 'close'
2025-08-30T09:58:47.3690309Z 
2025-08-30T09:58:47.3690389Z     def combine_dataframes_by_column(
2025-08-30T09:58:47.3690502Z         data: dict[str, pd.DataFrame], column: str = "close"
2025-08-30T09:58:47.3690576Z     ) -> pd.DataFrame:
2025-08-30T09:58:47.3690639Z         """
2025-08-30T09:58:47.3690723Z         Combine multiple dataframes "column"
2025-08-30T09:58:47.3690852Z         :param data: Dict of Dataframes, dict key should be pair.
2025-08-30T09:58:47.3690981Z         :param column: Column in the original dataframes to use
2025-08-30T09:58:47.3691114Z         :return: DataFrame with the column renamed to the dict key.
2025-08-30T09:58:47.3691205Z         :raise: ValueError if no data is provided.
2025-08-30T09:58:47.3691265Z         """
2025-08-30T09:58:47.3691331Z         if not data:
2025-08-30T09:58:47.3691422Z >           raise ValueError("No data provided.")
2025-08-30T09:58:47.3691505Z E           ValueError: No data provided.
2025-08-30T09:58:47.3691514Z 
2025-08-30T09:58:47.3691603Z freqtrade/data/metrics.py:56: ValueError
2025-08-30T09:58:47.3691751Z ____________________ test_combined_dataframes_with_rel_mean ____________________
2025-08-30T09:58:47.3691758Z 
2025-08-30T09:58:47.3691954Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3691959Z 
2025-08-30T09:58:47.3692087Z     def test_combined_dataframes_with_rel_mean(testdatadir):
2025-08-30T09:58:47.3692162Z         pairs = ["ETH/BTC", "ADA/BTC"]
2025-08-30T09:58:47.3692315Z         data = load_data(datadir=testdatadir, pairs=pairs, timeframe="5m")
2025-08-30T09:58:47.3692408Z >       df = combined_dataframes_with_rel_mean(
2025-08-30T09:58:47.3692564Z             data, datetime(2018, 1, 12, tzinfo=UTC), datetime(2018, 1, 28, tzinfo=UTC)
2025-08-30T09:58:47.3692629Z         )
2025-08-30T09:58:47.3692633Z 
2025-08-30T09:58:47.3692721Z tests/data/test_btanalysis.py:295: 
2025-08-30T09:58:47.3692821Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3692982Z freqtrade/data/metrics.py:74: in combined_dataframes_with_rel_mean
2025-08-30T09:58:47.3693092Z     df_comb = combine_dataframes_by_column(data, column)
2025-08-30T09:58:47.3693169Z               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3693263Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3693268Z 
2025-08-30T09:58:47.3693701Z data = <freqtrade.data.history.history_utils.LazyDataLoader object at 0x7f64da7472d0>
2025-08-30T09:58:47.3693772Z column = 'close'
2025-08-30T09:58:47.3693777Z 
2025-08-30T09:58:47.3693858Z     def combine_dataframes_by_column(
2025-08-30T09:58:47.3693976Z         data: dict[str, pd.DataFrame], column: str = "close"
2025-08-30T09:58:47.3694056Z     ) -> pd.DataFrame:
2025-08-30T09:58:47.3694113Z         """
2025-08-30T09:58:47.3694196Z         Combine multiple dataframes "column"
2025-08-30T09:58:47.3694331Z         :param data: Dict of Dataframes, dict key should be pair.
2025-08-30T09:58:47.3694452Z         :param column: Column in the original dataframes to use
2025-08-30T09:58:47.3694584Z         :return: DataFrame with the column renamed to the dict key.
2025-08-30T09:58:47.3694810Z         :raise: ValueError if no data is provided.
2025-08-30T09:58:47.3694866Z         """
2025-08-30T09:58:47.3694928Z         if not data:
2025-08-30T09:58:47.3695015Z >           raise ValueError("No data provided.")
2025-08-30T09:58:47.3695100Z E           ValueError: No data provided.
2025-08-30T09:58:47.3695105Z 
2025-08-30T09:58:47.3695187Z freqtrade/data/metrics.py:56: ValueError
2025-08-30T09:58:47.3695325Z ________________________ test_extract_trades_of_period _________________________
2025-08-30T09:58:47.3695330Z 
2025-08-30T09:58:47.3695492Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3695553Z key = 'date'
2025-08-30T09:58:47.3695557Z 
2025-08-30T09:58:47.3695733Z     def get_loc(self, key):
2025-08-30T09:58:47.3695796Z         """
2025-08-30T09:58:47.3695948Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3696003Z     
2025-08-30T09:58:47.3696070Z         Parameters
2025-08-30T09:58:47.3696135Z         ----------
2025-08-30T09:58:47.3696196Z         key : label
2025-08-30T09:58:47.3696250Z     
2025-08-30T09:58:47.3696311Z         Returns
2025-08-30T09:58:47.3696369Z         -------
2025-08-30T09:58:47.3696490Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3696545Z     
2025-08-30T09:58:47.3696612Z         Examples
2025-08-30T09:58:47.3696671Z         --------
2025-08-30T09:58:47.3696759Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3696839Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3696895Z         1
2025-08-30T09:58:47.3696949Z     
2025-08-30T09:58:47.3697041Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3697126Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3697193Z         slice(1, 3, None)
2025-08-30T09:58:47.3697247Z     
2025-08-30T09:58:47.3697349Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3697435Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3697516Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3697576Z         """
2025-08-30T09:58:47.3697666Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3697724Z         try:
2025-08-30T09:58:47.3697812Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3697887Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3697891Z 
2025-08-30T09:58:47.3698059Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3698155Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3698326Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3698386Z     ???
2025-08-30T09:58:47.3698543Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3698602Z     ???
2025-08-30T09:58:47.3698860Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3698920Z     ???
2025-08-30T09:58:47.3699015Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3699024Z 
2025-08-30T09:58:47.3699078Z >   ???
2025-08-30T09:58:47.3699144Z E   KeyError: 'date'
2025-08-30T09:58:47.3699149Z 
2025-08-30T09:58:47.3699265Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3699270Z 
2025-08-30T09:58:47.3699427Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3699431Z 
2025-08-30T09:58:47.3699624Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3699629Z 
2025-08-30T09:58:47.3699732Z     def test_extract_trades_of_period(testdatadir):
2025-08-30T09:58:47.3699812Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.3699875Z         # 2018-11-14 06:07:00
2025-08-30T09:58:47.3699979Z         timerange = TimeRange("date", None, 1510639620, 0)
2025-08-30T09:58:47.3700129Z     
2025-08-30T09:58:47.3700355Z         data = load_pair_history(pair=pair, timeframe="1m", datadir=testdatadir, timerange=timerange)
2025-08-30T09:58:47.3700410Z     
2025-08-30T09:58:47.3700486Z         trades = DataFrame(
2025-08-30T09:58:47.3700542Z             {
2025-08-30T09:58:47.3700631Z                 "pair": [pair, pair, pair, pair],
2025-08-30T09:58:47.3700721Z                 "profit_ratio": [0.0, 0.1, -0.2, -0.5],
2025-08-30T09:58:47.3700805Z                 "profit_abs": [0.0, 1, -2, -5],
2025-08-30T09:58:47.3700882Z                 "open_date": to_datetime(
2025-08-30T09:58:47.3700943Z                     [
2025-08-30T09:58:47.3701046Z                         datetime(2017, 11, 13, 15, 40, 0, tzinfo=UTC),
2025-08-30T09:58:47.3701234Z                         datetime(2017, 11, 14, 9, 41, 0, tzinfo=UTC),
2025-08-30T09:58:47.3701334Z                         datetime(2017, 11, 14, 14, 20, 0, tzinfo=UTC),
2025-08-30T09:58:47.3701434Z                         datetime(2017, 11, 15, 3, 40, 0, tzinfo=UTC),
2025-08-30T09:58:47.3701495Z                     ],
2025-08-30T09:58:47.3701564Z                     utc=True,
2025-08-30T09:58:47.3701621Z                 ),
2025-08-30T09:58:47.3701705Z                 "close_date": to_datetime(
2025-08-30T09:58:47.3701767Z                     [
2025-08-30T09:58:47.3701858Z                         datetime(2017, 11, 13, 16, 40, 0, tzinfo=UTC),
2025-08-30T09:58:47.3701952Z                         datetime(2017, 11, 14, 10, 41, 0, tzinfo=UTC),
2025-08-30T09:58:47.3702041Z                         datetime(2017, 11, 14, 15, 25, 0, tzinfo=UTC),
2025-08-30T09:58:47.3702131Z                         datetime(2017, 11, 15, 3, 55, 0, tzinfo=UTC),
2025-08-30T09:58:47.3702194Z                     ],
2025-08-30T09:58:47.3702261Z                     utc=True,
2025-08-30T09:58:47.3702321Z                 ),
2025-08-30T09:58:47.3702377Z             }
2025-08-30T09:58:47.3702438Z         )
2025-08-30T09:58:47.3702544Z >       trades1 = extract_trades_of_period(data, trades)
2025-08-30T09:58:47.3702620Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3702625Z 
2025-08-30T09:58:47.3702715Z tests/data/test_btanalysis.py:203: 
2025-08-30T09:58:47.3702812Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3702998Z freqtrade/data/btanalysis/bt_fileutils.py:592: in extract_trades_of_period
2025-08-30T09:58:47.3703090Z     trades_start = dataframe.iloc[0]["date"]
2025-08-30T09:58:47.3703157Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3703447Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1130: in __getitem__
2025-08-30T09:58:47.3703526Z     return self._get_value(key)
2025-08-30T09:58:47.3703593Z            ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3703777Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1246: in _get_value
2025-08-30T09:58:47.3703855Z     loc = self.index.get_loc(label)
2025-08-30T09:58:47.3703928Z           ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3704024Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3704030Z 
2025-08-30T09:58:47.3704187Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3704251Z key = 'date'
2025-08-30T09:58:47.3704256Z 
2025-08-30T09:58:47.3704326Z     def get_loc(self, key):
2025-08-30T09:58:47.3704382Z         """
2025-08-30T09:58:47.3704531Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3704589Z     
2025-08-30T09:58:47.3704650Z         Parameters
2025-08-30T09:58:47.3704711Z         ----------
2025-08-30T09:58:47.3704776Z         key : label
2025-08-30T09:58:47.3704831Z     
2025-08-30T09:58:47.3704888Z         Returns
2025-08-30T09:58:47.3704950Z         -------
2025-08-30T09:58:47.3705079Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3705134Z     
2025-08-30T09:58:47.3705194Z         Examples
2025-08-30T09:58:47.3705380Z         --------
2025-08-30T09:58:47.3705469Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3705551Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3705612Z         1
2025-08-30T09:58:47.3705666Z     
2025-08-30T09:58:47.3705760Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3705838Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3705909Z         slice(1, 3, None)
2025-08-30T09:58:47.3705964Z     
2025-08-30T09:58:47.3706060Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3706142Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3706224Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3706278Z         """
2025-08-30T09:58:47.3706474Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3706537Z         try:
2025-08-30T09:58:47.3706625Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3706702Z         except KeyError as err:
2025-08-30T09:58:47.3706792Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3706880Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3706987Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3707043Z             ):
2025-08-30T09:58:47.3707129Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3707206Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3707278Z E           KeyError: 'date'
2025-08-30T09:58:47.3707282Z 
2025-08-30T09:58:47.3707474Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3707611Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3707982Z 2025-08-30 09:56:50,822 - freqtrade.data.converter.converter - INFO - Missing data fillup for UNITTEST/BTC, 1m: before: 1000 - after: 1013 - 1.30%
2025-08-30T09:58:47.3708123Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3708344Z 2025-08-30 09:56:50 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 1000 - after: 1013 - 1.30%
2025-08-30T09:58:47.3708473Z ____________________________ test_create_cum_profit ____________________________
2025-08-30T09:58:47.3708477Z 
2025-08-30T09:58:47.3708751Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3708760Z 
2025-08-30T09:58:47.3708924Z     def test_create_cum_profit(testdatadir):
2025-08-30T09:58:47.3709186Z         filename = testdatadir / "backtest_results/backtest-result.json"
2025-08-30T09:58:47.3709285Z         bt_data = load_backtest_data(filename)
2025-08-30T09:58:47.3709417Z         timerange = TimeRange.parse_timerange("20180110-20180112")
2025-08-30T09:58:47.3709473Z     
2025-08-30T09:58:47.3709706Z         df = load_pair_history(pair="TRX/BTC", timeframe="5m", datadir=testdatadir, timerange=timerange)
2025-08-30T09:58:47.3709760Z     
2025-08-30T09:58:47.3709846Z         cum_profits = create_cum_profit(
2025-08-30T09:58:47.3710035Z >           df.set_index("date"), bt_data[bt_data["pair"] == "TRX/BTC"], "cum_profits", timeframe="5m"
2025-08-30T09:58:47.3710107Z             ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3710163Z         )
2025-08-30T09:58:47.3710168Z 
2025-08-30T09:58:47.3710251Z tests/data/test_btanalysis.py:324: 
2025-08-30T09:58:47.3710354Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3710358Z 
2025-08-30T09:58:47.3710473Z self =                         index      open  ...     close         volume
2025-08-30T09:58:47.3710594Z 0   2018-01-10 04:55:00+00:00  0.000108  ...  0....   0.00011   147770.52813
2025-08-30T09:58:47.3710711Z 517 2018-01-12 00:00:00+00:00   0.00011  ...  0.000109  357208.363199
2025-08-30T09:58:47.3710719Z 
2025-08-30T09:58:47.3710785Z [518 rows x 6 columns]
2025-08-30T09:58:47.3710861Z keys = ['date']
2025-08-30T09:58:47.3710869Z 
2025-08-30T09:58:47.3710990Z     def set_index(
2025-08-30T09:58:47.3711294Z         self,
2025-08-30T09:58:47.3711387Z         keys,
2025-08-30T09:58:47.3711446Z         *,
2025-08-30T09:58:47.3711526Z         drop: bool = True,
2025-08-30T09:58:47.3711600Z         append: bool = False,
2025-08-30T09:58:47.3711671Z         inplace: bool = False,
2025-08-30T09:58:47.3711759Z         verify_integrity: bool = False,
2025-08-30T09:58:47.3711833Z     ) -> DataFrame | None:
2025-08-30T09:58:47.3711889Z         """
2025-08-30T09:58:47.3711997Z         Set the DataFrame index using existing columns.
2025-08-30T09:58:47.3712057Z     
2025-08-30T09:58:47.3712200Z         Set the DataFrame index (row labels) using one or more existing
2025-08-30T09:58:47.3712352Z         columns or arrays (of the correct length). The index can replace the
2025-08-30T09:58:47.3712526Z         existing index or expand on it.
2025-08-30T09:58:47.3712584Z     
2025-08-30T09:58:47.3712647Z         Parameters
2025-08-30T09:58:47.3712716Z         ----------
2025-08-30T09:58:47.3712834Z         keys : label or array-like or list of labels/arrays
2025-08-30T09:58:47.3712992Z             This parameter can be either a single column key, a single array of
2025-08-30T09:58:47.3713138Z             the same length as the calling DataFrame, or a list containing an
2025-08-30T09:58:47.3713287Z             arbitrary combination of column keys and arrays. Here, "array"
2025-08-30T09:58:47.3713639Z             encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
2025-08-30T09:58:47.3713763Z             instances of :class:`~collections.abc.Iterator`.
2025-08-30T09:58:47.3713843Z         drop : bool, default True
2025-08-30T09:58:47.3713939Z             Delete columns to be used as the new index.
2025-08-30T09:58:47.3714016Z         append : bool, default False
2025-08-30T09:58:47.3714129Z             Whether to append columns to existing index.
2025-08-30T09:58:47.3714206Z         inplace : bool, default False
2025-08-30T09:58:47.3714349Z             Whether to modify the DataFrame rather than creating a new one.
2025-08-30T09:58:47.3714439Z         verify_integrity : bool, default False
2025-08-30T09:58:47.3714591Z             Check the new index for duplicates. Otherwise defer the check until
2025-08-30T09:58:47.3714742Z             necessary. Setting to False will improve the performance of this
2025-08-30T09:58:47.3714801Z             method.
2025-08-30T09:58:47.3714859Z     
2025-08-30T09:58:47.3714919Z         Returns
2025-08-30T09:58:47.3714978Z         -------
2025-08-30T09:58:47.3715050Z         DataFrame or None
2025-08-30T09:58:47.3715154Z             Changed row labels or None if ``inplace=True``.
2025-08-30T09:58:47.3715208Z     
2025-08-30T09:58:47.3715266Z         See Also
2025-08-30T09:58:47.3715329Z         --------
2025-08-30T09:58:47.3715437Z         DataFrame.reset_index : Opposite of set_index.
2025-08-30T09:58:47.3715582Z         DataFrame.reindex : Change to new indices or expand indices.
2025-08-30T09:58:47.3715741Z         DataFrame.reindex_like : Change to same indices as other DataFrame.
2025-08-30T09:58:47.3715798Z     
2025-08-30T09:58:47.3715856Z         Examples
2025-08-30T09:58:47.3715915Z         --------
2025-08-30T09:58:47.3716008Z         >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
2025-08-30T09:58:47.3716093Z         ...                    'year': [2012, 2014, 2013, 2014],
2025-08-30T09:58:47.3716174Z         ...                    'sale': [55, 40, 84, 31]})
2025-08-30T09:58:47.3716237Z         >>> df
2025-08-30T09:58:47.3716308Z            month  year  sale
2025-08-30T09:58:47.3716369Z         0      1  2012    55
2025-08-30T09:58:47.3716433Z         1      4  2014    40
2025-08-30T09:58:47.3716494Z         2      7  2013    84
2025-08-30T09:58:47.3716553Z         3     10  2014    31
2025-08-30T09:58:47.3716606Z     
2025-08-30T09:58:47.3716711Z         Set the index to become the 'month' column:
2025-08-30T09:58:47.3716765Z     
2025-08-30T09:58:47.3716836Z         >>> df.set_index('month')
2025-08-30T09:58:47.3716905Z                year  sale
2025-08-30T09:58:47.3717097Z         month
2025-08-30T09:58:47.3717157Z         1      2012    55
2025-08-30T09:58:47.3717217Z         4      2014    40
2025-08-30T09:58:47.3717282Z         7      2013    84
2025-08-30T09:58:47.3717342Z         10     2014    31
2025-08-30T09:58:47.3717395Z     
2025-08-30T09:58:47.3717518Z         Create a MultiIndex using columns 'year' and 'month':
2025-08-30T09:58:47.3717572Z     
2025-08-30T09:58:47.3717651Z         >>> df.set_index(['year', 'month'])
2025-08-30T09:58:47.3717715Z                     sale
2025-08-30T09:58:47.3717780Z         year  month
2025-08-30T09:58:47.3717840Z         2012  1     55
2025-08-30T09:58:47.3717898Z         2014  4     40
2025-08-30T09:58:47.3717959Z         2013  7     84
2025-08-30T09:58:47.3718016Z         2014  10    31
2025-08-30T09:58:47.3718072Z     
2025-08-30T09:58:47.3718286Z         Create a MultiIndex using an Index and a column:
2025-08-30T09:58:47.3718347Z     
2025-08-30T09:58:47.3718442Z         >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
2025-08-30T09:58:47.3718512Z                  month  sale
2025-08-30T09:58:47.3718572Z            year
2025-08-30T09:58:47.3718634Z         1  2012  1      55
2025-08-30T09:58:47.3718697Z         2  2014  4      40
2025-08-30T09:58:47.3718756Z         3  2013  7      84
2025-08-30T09:58:47.3718819Z         4  2014  10     31
2025-08-30T09:58:47.3718873Z     
2025-08-30T09:58:47.3718958Z         Create a MultiIndex using two Series:
2025-08-30T09:58:47.3719016Z     
2025-08-30T09:58:47.3719091Z         >>> s = pd.Series([1, 2, 3, 4])
2025-08-30T09:58:47.3719166Z         >>> df.set_index([s, s**2])
2025-08-30T09:58:47.3719235Z               month  year  sale
2025-08-30T09:58:47.3719301Z         1 1       1  2012    55
2025-08-30T09:58:47.3719362Z         2 4       4  2014    40
2025-08-30T09:58:47.3719426Z         3 9       7  2013    84
2025-08-30T09:58:47.3719490Z         4 16     10  2014    31
2025-08-30T09:58:47.3719548Z         """
2025-08-30T09:58:47.3719661Z         inplace = validate_bool_kwarg(inplace, "inplace")
2025-08-30T09:58:47.3719792Z         self._check_inplace_and_allows_duplicate_labels(inplace)
2025-08-30T09:58:47.3719873Z         if not isinstance(keys, list):
2025-08-30T09:58:47.3719939Z             keys = [keys]
2025-08-30T09:58:47.3719992Z     
2025-08-30T09:58:47.3720057Z         err_msg = (
2025-08-30T09:58:47.3720199Z             'The parameter "keys" may be a column key, one-dimensional '
2025-08-30T09:58:47.3720326Z             "array, or a list containing only valid column keys and "
2025-08-30T09:58:47.3720410Z             "one-dimensional arrays."
2025-08-30T09:58:47.3720467Z         )
2025-08-30T09:58:47.3720521Z     
2025-08-30T09:58:47.3720598Z         missing: list[Hashable] = []
2025-08-30T09:58:47.3720669Z         for col in keys:
2025-08-30T09:58:47.3720829Z             if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):
2025-08-30T09:58:47.3720944Z                 # arrays are fine as long as they are one-dimensional
2025-08-30T09:58:47.3721043Z                 # iterators get converted to list below
2025-08-30T09:58:47.3721125Z                 if getattr(col, "ndim", 1) != 1:
2025-08-30T09:58:47.3721206Z                     raise ValueError(err_msg)
2025-08-30T09:58:47.3721267Z             else:
2025-08-30T09:58:47.3721380Z                 # everything else gets tried as a key; see GH 24969
2025-08-30T09:58:47.3721440Z                 try:
2025-08-30T09:58:47.3721523Z                     found = col in self.columns
2025-08-30T09:58:47.3721605Z                 except TypeError as err:
2025-08-30T09:58:47.3721677Z                     raise TypeError(
2025-08-30T09:58:47.3721787Z                         f"{err_msg}. Received column of type {type(col)}"
2025-08-30T09:58:47.3721858Z                     ) from err
2025-08-30T09:58:47.3721919Z                 else:
2025-08-30T09:58:47.3721990Z                     if not found:
2025-08-30T09:58:47.3722072Z                         missing.append(col)
2025-08-30T09:58:47.3722130Z     
2025-08-30T09:58:47.3722303Z         if missing:
2025-08-30T09:58:47.3722429Z >           raise KeyError(f"None of {missing} are in the columns")
2025-08-30T09:58:47.3722540Z E           KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.3722545Z 
2025-08-30T09:58:47.3722716Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6129: KeyError
2025-08-30T09:58:47.3722857Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3723599Z 2025-08-30 09:56:51,059 - freqtrade.data.btanalysis.bt_fileutils - INFO - Loading backtest result from /home/runner/work/freqtrade/freqtrade/tests/testdata/backtest_results/backtest-result.json
2025-08-30T09:58:47.3724089Z 2025-08-30 09:56:51,069 - freqtrade.data.history.datahandlers.idatahandler - WARNING - TRX/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3724235Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3724635Z 2025-08-30 09:56:51 INFO Loading backtest result from /home/runner/work/freqtrade/freqtrade/tests/testdata/backtest_results/backtest-result.json
2025-08-30T09:58:47.3724796Z 2025-08-30 09:56:51 WARNING TRX/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3724927Z ___________________________ test_create_cum_profit1 ____________________________
2025-08-30T09:58:47.3724932Z 
2025-08-30T09:58:47.3725132Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.3725137Z 
2025-08-30T09:58:47.3725230Z     def test_create_cum_profit1(testdatadir):
2025-08-30T09:58:47.3725385Z         filename = testdatadir / "backtest_results/backtest-result.json"
2025-08-30T09:58:47.3725479Z         bt_data = load_backtest_data(filename)
2025-08-30T09:58:47.3725640Z         # Move close-time to "off" the candle, to make sure the logic still works
2025-08-30T09:58:47.3725805Z         bt_data["close_date"] = bt_data.loc[:, "close_date"] + DateOffset(seconds=20)
2025-08-30T09:58:47.3725945Z         timerange = TimeRange.parse_timerange("20180110-20180112")
2025-08-30T09:58:47.3726003Z     
2025-08-30T09:58:47.3726231Z         df = load_pair_history(pair="TRX/BTC", timeframe="5m", datadir=testdatadir, timerange=timerange)
2025-08-30T09:58:47.3726286Z     
2025-08-30T09:58:47.3726403Z         cum_profits = create_cum_profit(
2025-08-30T09:58:47.3726595Z >           df.set_index("date"), bt_data[bt_data["pair"] == "TRX/BTC"], "cum_profits", timeframe="5m"
2025-08-30T09:58:47.3726660Z             ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3726720Z         )
2025-08-30T09:58:47.3726725Z 
2025-08-30T09:58:47.3726807Z tests/data/test_btanalysis.py:341: 
2025-08-30T09:58:47.3726907Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3726911Z 
2025-08-30T09:58:47.3727027Z self =                         index      open  ...     close         volume
2025-08-30T09:58:47.3727148Z 0   2018-01-10 04:55:00+00:00  0.000108  ...  0....   0.00011   147770.52813
2025-08-30T09:58:47.3727265Z 517 2018-01-12 00:00:00+00:00   0.00011  ...  0.000109  357208.363199
2025-08-30T09:58:47.3727269Z 
2025-08-30T09:58:47.3727337Z [518 rows x 6 columns]
2025-08-30T09:58:47.3727397Z keys = ['date']
2025-08-30T09:58:47.3727401Z 
2025-08-30T09:58:47.3727462Z     def set_index(
2025-08-30T09:58:47.3727522Z         self,
2025-08-30T09:58:47.3727579Z         keys,
2025-08-30T09:58:47.3727635Z         *,
2025-08-30T09:58:47.3727704Z         drop: bool = True,
2025-08-30T09:58:47.3727780Z         append: bool = False,
2025-08-30T09:58:47.3727851Z         inplace: bool = False,
2025-08-30T09:58:47.3727934Z         verify_integrity: bool = False,
2025-08-30T09:58:47.3728008Z     ) -> DataFrame | None:
2025-08-30T09:58:47.3728065Z         """
2025-08-30T09:58:47.3728170Z         Set the DataFrame index using existing columns.
2025-08-30T09:58:47.3728230Z     
2025-08-30T09:58:47.3728376Z         Set the DataFrame index (row labels) using one or more existing
2025-08-30T09:58:47.3728525Z         columns or arrays (of the correct length). The index can replace the
2025-08-30T09:58:47.3728724Z         existing index or expand on it.
2025-08-30T09:58:47.3728784Z     
2025-08-30T09:58:47.3728846Z         Parameters
2025-08-30T09:58:47.3728908Z         ----------
2025-08-30T09:58:47.3729018Z         keys : label or array-like or list of labels/arrays
2025-08-30T09:58:47.3729179Z             This parameter can be either a single column key, a single array of
2025-08-30T09:58:47.3729320Z             the same length as the calling DataFrame, or a list containing an
2025-08-30T09:58:47.3729467Z             arbitrary combination of column keys and arrays. Here, "array"
2025-08-30T09:58:47.3729618Z             encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
2025-08-30T09:58:47.3729814Z             instances of :class:`~collections.abc.Iterator`.
2025-08-30T09:58:47.3729892Z         drop : bool, default True
2025-08-30T09:58:47.3729993Z             Delete columns to be used as the new index.
2025-08-30T09:58:47.3730073Z         append : bool, default False
2025-08-30T09:58:47.3730179Z             Whether to append columns to existing index.
2025-08-30T09:58:47.3730267Z         inplace : bool, default False
2025-08-30T09:58:47.3730419Z             Whether to modify the DataFrame rather than creating a new one.
2025-08-30T09:58:47.3730508Z         verify_integrity : bool, default False
2025-08-30T09:58:47.3730662Z             Check the new index for duplicates. Otherwise defer the check until
2025-08-30T09:58:47.3730823Z             necessary. Setting to False will improve the performance of this
2025-08-30T09:58:47.3730884Z             method.
2025-08-30T09:58:47.3730940Z     
2025-08-30T09:58:47.3731007Z         Returns
2025-08-30T09:58:47.3731066Z         -------
2025-08-30T09:58:47.3731135Z         DataFrame or None
2025-08-30T09:58:47.3731247Z             Changed row labels or None if ``inplace=True``.
2025-08-30T09:58:47.3731306Z     
2025-08-30T09:58:47.3731364Z         See Also
2025-08-30T09:58:47.3731423Z         --------
2025-08-30T09:58:47.3731536Z         DataFrame.reset_index : Opposite of set_index.
2025-08-30T09:58:47.3731681Z         DataFrame.reindex : Change to new indices or expand indices.
2025-08-30T09:58:47.3731874Z         DataFrame.reindex_like : Change to same indices as other DataFrame.
2025-08-30T09:58:47.3731986Z     
2025-08-30T09:58:47.3732100Z         Examples
2025-08-30T09:58:47.3732205Z         --------
2025-08-30T09:58:47.3732362Z         >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
2025-08-30T09:58:47.3732462Z         ...                    'year': [2012, 2014, 2013, 2014],
2025-08-30T09:58:47.3732545Z         ...                    'sale': [55, 40, 84, 31]})
2025-08-30T09:58:47.3732605Z         >>> df
2025-08-30T09:58:47.3732679Z            month  year  sale
2025-08-30T09:58:47.3732745Z         0      1  2012    55
2025-08-30T09:58:47.3732807Z         1      4  2014    40
2025-08-30T09:58:47.3732867Z         2      7  2013    84
2025-08-30T09:58:47.3732930Z         3     10  2014    31
2025-08-30T09:58:47.3732989Z     
2025-08-30T09:58:47.3733083Z         Set the index to become the 'month' column:
2025-08-30T09:58:47.3733142Z     
2025-08-30T09:58:47.3733216Z         >>> df.set_index('month')
2025-08-30T09:58:47.3733282Z                year  sale
2025-08-30T09:58:47.3733442Z         month
2025-08-30T09:58:47.3733513Z         1      2012    55
2025-08-30T09:58:47.3733575Z         4      2014    40
2025-08-30T09:58:47.3733634Z         7      2013    84
2025-08-30T09:58:47.3733700Z         10     2014    31
2025-08-30T09:58:47.3733755Z     
2025-08-30T09:58:47.3733874Z         Create a MultiIndex using columns 'year' and 'month':
2025-08-30T09:58:47.3733929Z     
2025-08-30T09:58:47.3734015Z         >>> df.set_index(['year', 'month'])
2025-08-30T09:58:47.3734079Z                     sale
2025-08-30T09:58:47.3734144Z         year  month
2025-08-30T09:58:47.3734212Z         2012  1     55
2025-08-30T09:58:47.3734289Z         2014  4     40
2025-08-30T09:58:47.3734400Z         2013  7     84
2025-08-30T09:58:47.3734719Z         2014  10    31
2025-08-30T09:58:47.3734824Z     
2025-08-30T09:58:47.3734942Z         Create a MultiIndex using an Index and a column:
2025-08-30T09:58:47.3734999Z     
2025-08-30T09:58:47.3735102Z         >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
2025-08-30T09:58:47.3735169Z                  month  sale
2025-08-30T09:58:47.3735228Z            year
2025-08-30T09:58:47.3735294Z         1  2012  1      55
2025-08-30T09:58:47.3735355Z         2  2014  4      40
2025-08-30T09:58:47.3735415Z         3  2013  7      84
2025-08-30T09:58:47.3735473Z         4  2014  10     31
2025-08-30T09:58:47.3735532Z     
2025-08-30T09:58:47.3735621Z         Create a MultiIndex using two Series:
2025-08-30T09:58:47.3735675Z     
2025-08-30T09:58:47.3735754Z         >>> s = pd.Series([1, 2, 3, 4])
2025-08-30T09:58:47.3735950Z         >>> df.set_index([s, s**2])
2025-08-30T09:58:47.3736027Z               month  year  sale
2025-08-30T09:58:47.3736090Z         1 1       1  2012    55
2025-08-30T09:58:47.3736159Z         2 4       4  2014    40
2025-08-30T09:58:47.3736219Z         3 9       7  2013    84
2025-08-30T09:58:47.3736281Z         4 16     10  2014    31
2025-08-30T09:58:47.3736341Z         """
2025-08-30T09:58:47.3736454Z         inplace = validate_bool_kwarg(inplace, "inplace")
2025-08-30T09:58:47.3736581Z         self._check_inplace_and_allows_duplicate_labels(inplace)
2025-08-30T09:58:47.3736665Z         if not isinstance(keys, list):
2025-08-30T09:58:47.3736737Z             keys = [keys]
2025-08-30T09:58:47.3736791Z     
2025-08-30T09:58:47.3736852Z         err_msg = (
2025-08-30T09:58:47.3737004Z             'The parameter "keys" may be a column key, one-dimensional '
2025-08-30T09:58:47.3737129Z             "array, or a list containing only valid column keys and "
2025-08-30T09:58:47.3737212Z             "one-dimensional arrays."
2025-08-30T09:58:47.3737274Z         )
2025-08-30T09:58:47.3737330Z     
2025-08-30T09:58:47.3737406Z         missing: list[Hashable] = []
2025-08-30T09:58:47.3737477Z         for col in keys:
2025-08-30T09:58:47.3737638Z             if isinstance(col, (Index, Series, np.ndarray, list, abc.Iterator)):
2025-08-30T09:58:47.3737754Z                 # arrays are fine as long as they are one-dimensional
2025-08-30T09:58:47.3737846Z                 # iterators get converted to list below
2025-08-30T09:58:47.3737933Z                 if getattr(col, "ndim", 1) != 1:
2025-08-30T09:58:47.3738014Z                     raise ValueError(err_msg)
2025-08-30T09:58:47.3738072Z             else:
2025-08-30T09:58:47.3738184Z                 # everything else gets tried as a key; see GH 24969
2025-08-30T09:58:47.3738249Z                 try:
2025-08-30T09:58:47.3738332Z                     found = col in self.columns
2025-08-30T09:58:47.3738413Z                 except TypeError as err:
2025-08-30T09:58:47.3738493Z                     raise TypeError(
2025-08-30T09:58:47.3738605Z                         f"{err_msg}. Received column of type {type(col)}"
2025-08-30T09:58:47.3738677Z                     ) from err
2025-08-30T09:58:47.3738742Z                 else:
2025-08-30T09:58:47.3738810Z                     if not found:
2025-08-30T09:58:47.3738892Z                         missing.append(col)
2025-08-30T09:58:47.3738947Z     
2025-08-30T09:58:47.3739013Z         if missing:
2025-08-30T09:58:47.3739137Z >           raise KeyError(f"None of {missing} are in the columns")
2025-08-30T09:58:47.3739244Z E           KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.3739250Z 
2025-08-30T09:58:47.3739431Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:6129: KeyError
2025-08-30T09:58:47.3739575Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3740136Z 2025-08-30 09:56:51,209 - freqtrade.data.btanalysis.bt_fileutils - INFO - Loading backtest result from /home/runner/work/freqtrade/freqtrade/tests/testdata/backtest_results/backtest-result.json
2025-08-30T09:58:47.3740505Z 2025-08-30 09:56:51,218 - freqtrade.data.history.datahandlers.idatahandler - WARNING - TRX/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3740736Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3741128Z 2025-08-30 09:56:51 INFO Loading backtest result from /home/runner/work/freqtrade/freqtrade/tests/testdata/backtest_results/backtest-result.json
2025-08-30T09:58:47.3741289Z 2025-08-30 09:56:51 WARNING TRX/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3741421Z ____________________________ test_populate_features ____________________________
2025-08-30T09:58:47.3741426Z 
2025-08-30T09:58:47.3741582Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3741648Z key = 'date'
2025-08-30T09:58:47.3741653Z 
2025-08-30T09:58:47.3741802Z     def get_loc(self, key):
2025-08-30T09:58:47.3741861Z         """
2025-08-30T09:58:47.3742017Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3742076Z     
2025-08-30T09:58:47.3742142Z         Parameters
2025-08-30T09:58:47.3742205Z         ----------
2025-08-30T09:58:47.3742271Z         key : label
2025-08-30T09:58:47.3742325Z     
2025-08-30T09:58:47.3742383Z         Returns
2025-08-30T09:58:47.3742445Z         -------
2025-08-30T09:58:47.3742570Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3742625Z     
2025-08-30T09:58:47.3742685Z         Examples
2025-08-30T09:58:47.3742751Z         --------
2025-08-30T09:58:47.3742842Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3742918Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3742980Z         1
2025-08-30T09:58:47.3743036Z     
2025-08-30T09:58:47.3743132Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3743214Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3743287Z         slice(1, 3, None)
2025-08-30T09:58:47.3743459Z     
2025-08-30T09:58:47.3743565Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3743654Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3743735Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3743793Z         """
2025-08-30T09:58:47.3743885Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3743948Z         try:
2025-08-30T09:58:47.3744037Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3744108Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3744113Z 
2025-08-30T09:58:47.3744288Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3744389Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3744556Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3744618Z     ???
2025-08-30T09:58:47.3744777Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3744834Z     ???
2025-08-30T09:58:47.3745100Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3745159Z     ???
2025-08-30T09:58:47.3745255Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3745260Z 
2025-08-30T09:58:47.3745314Z >   ???
2025-08-30T09:58:47.3745385Z E   KeyError: 'date'
2025-08-30T09:58:47.3745390Z 
2025-08-30T09:58:47.3745506Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3745511Z 
2025-08-30T09:58:47.3745669Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3745673Z 
2025-08-30T09:58:47.3745832Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da78d990>
2025-08-30T09:58:47.3746517Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3746664Z 
2025-08-30T09:58:47.3746778Z     def test_populate_features(mocker, freqai_conf):
2025-08-30T09:58:47.3746913Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.3747026Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.3747141Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.3747258Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.3747334Z         freqai = strategy.freqai
2025-08-30T09:58:47.3747429Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.3747568Z         timerange = TimeRange.parse_timerange("20180115-20180130")
2025-08-30T09:58:47.3747697Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.3747863Z     
2025-08-30T09:58:47.3748075Z >       corr_df, base_df = freqai.dd.get_base_and_corr_dataframes(timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.3748165Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3748173Z 
2025-08-30T09:58:47.3748275Z tests/freqai/test_freqai_datakitchen.py:195: 
2025-08-30T09:58:47.3748379Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3748544Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.3748634Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.3748760Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.3748939Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.3749003Z                  ^^^^^^^^^^
2025-08-30T09:58:47.3749195Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3749283Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3749349Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3749450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3749464Z 
2025-08-30T09:58:47.3749632Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3749700Z key = 'date'
2025-08-30T09:58:47.3749705Z 
2025-08-30T09:58:47.3749776Z     def get_loc(self, key):
2025-08-30T09:58:47.3749838Z         """
2025-08-30T09:58:47.3749989Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3750045Z     
2025-08-30T09:58:47.3750107Z         Parameters
2025-08-30T09:58:47.3750176Z         ----------
2025-08-30T09:58:47.3750236Z         key : label
2025-08-30T09:58:47.3750292Z     
2025-08-30T09:58:47.3750355Z         Returns
2025-08-30T09:58:47.3750415Z         -------
2025-08-30T09:58:47.3750540Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3750597Z     
2025-08-30T09:58:47.3750661Z         Examples
2025-08-30T09:58:47.3750720Z         --------
2025-08-30T09:58:47.3750812Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3750893Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3750949Z         1
2025-08-30T09:58:47.3751004Z     
2025-08-30T09:58:47.3751096Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3751181Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3751248Z         slice(1, 3, None)
2025-08-30T09:58:47.3751303Z     
2025-08-30T09:58:47.3751405Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3751487Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3751567Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3751623Z         """
2025-08-30T09:58:47.3751718Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3751780Z         try:
2025-08-30T09:58:47.3751869Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3751947Z         except KeyError as err:
2025-08-30T09:58:47.3752036Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3752219Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3752334Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3752391Z             ):
2025-08-30T09:58:47.3752477Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3752554Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3752630Z E           KeyError: 'date'
2025-08-30T09:58:47.3752635Z 
2025-08-30T09:58:47.3752820Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3752958Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3753743Z 2025-08-30 09:56:54,058 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3754316Z 2025-08-30 09:56:54,060 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.3754392Z 'nonexiting_module''
2025-08-30T09:58:47.3754938Z 2025-08-30 09:56:54,061 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3755124Z 2025-08-30 09:56:54,061 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.3755560Z 2025-08-30 09:56:54,062 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3755909Z 2025-08-30 09:56:54,062 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3756482Z 2025-08-30 09:56:54,062 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3756836Z 2025-08-30 09:56:54,063 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3757173Z 2025-08-30 09:56:54,063 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3757582Z 2025-08-30 09:56:54,063 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3757912Z 2025-08-30 09:56:54,064 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3758257Z 2025-08-30 09:56:54,064 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3758649Z 2025-08-30 09:56:54,064 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.3758987Z 2025-08-30 09:56:54,065 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.3759251Z 2025-08-30 09:56:54,065 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.3759540Z 2025-08-30 09:56:54,065 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3759839Z 2025-08-30 09:56:54,066 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3760104Z 2025-08-30 09:56:54,066 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3760387Z 2025-08-30 09:56:54,066 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3760838Z 2025-08-30 09:56:54,067 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.3761127Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3761462Z 2025-08-30 09:56:54,067 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3761708Z 2025-08-30 09:56:54,067 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.3761953Z 2025-08-30 09:56:54,068 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3762213Z 2025-08-30 09:56:54,068 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3762605Z 2025-08-30 09:56:54,068 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3762861Z 2025-08-30 09:56:54,069 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.3763122Z 2025-08-30 09:56:54,069 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.3763610Z 2025-08-30 09:56:54,069 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3763878Z 2025-08-30 09:56:54,069 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3764165Z 2025-08-30 09:56:54,070 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3764458Z 2025-08-30 09:56:54,070 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3764747Z 2025-08-30 09:56:54,070 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3765026Z 2025-08-30 09:56:54,071 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3765268Z 2025-08-30 09:56:54,071 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.3765758Z 2025-08-30 09:56:54,071 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3766168Z 2025-08-30 09:56:54,072 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3766669Z 2025-08-30 09:56:54,072 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_populate_features0/freqaimodels'
2025-08-30T09:58:47.3767081Z 2025-08-30 09:56:54,072 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_populate_features0/freqaimodels" does not exist.
2025-08-30T09:58:47.3767600Z 2025-08-30 09:56:54,073 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3768038Z 2025-08-30 09:56:54,074 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3768309Z 2025-08-30 09:56:54,075 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.3768603Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3768876Z 2025-08-30 09:56:54,075 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.3769146Z 2025-08-30 09:56:54,076 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3769448Z 2025-08-30 09:56:54,076 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3769961Z 2025-08-30 09:56:54,077 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3770194Z 2025-08-30 09:56:54,077 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.3770431Z 2025-08-30 09:56:54,078 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.3770690Z 2025-08-30 09:56:54,078 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3770931Z 2025-08-30 09:56:54,078 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3771298Z 2025-08-30 09:56:54,079 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.3771450Z 2025-08-30 09:56:54,082 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.3771685Z 2025-08-30 09:56:54,082 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.3771846Z 2025-08-30 09:56:54,083 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.3772036Z 2025-08-30 09:56:54,084 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.3772262Z 2025-08-30 09:56:54,084 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.3772512Z 2025-08-30 09:56:54,085 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3772858Z 2025-08-30 09:56:54,104 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 4281 - after: 4321 - 0.93%
2025-08-30T09:58:47.3773488Z 2025-08-30 09:56:54,121 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 4319 - after: 4321 - 0.05%
2025-08-30T09:58:47.3773688Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3774030Z 2025-08-30 09:56:54 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3774520Z 2025-08-30 09:56:54 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3774938Z 2025-08-30 09:56:54 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
﻿2025-08-30T09:58:47.3777118Z 2025-08-30 09:56:54 INFO Found no parameter file.
2025-08-30T09:58:47.3777427Z 2025-08-30 09:56:54 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3777613Z 2025-08-30 09:56:54 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3777801Z 2025-08-30 09:56:54 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3778005Z 2025-08-30 09:56:54 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3778193Z 2025-08-30 09:56:54 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3778458Z 2025-08-30 09:56:54 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3778654Z 2025-08-30 09:56:54 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3778848Z 2025-08-30 09:56:54 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3778988Z 2025-08-30 09:56:54 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3779098Z 2025-08-30 09:56:54 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3779222Z 2025-08-30 09:56:54 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3779372Z 2025-08-30 09:56:54 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3779623Z 2025-08-30 09:56:54 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3779757Z 2025-08-30 09:56:54 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3779907Z 2025-08-30 09:56:54 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3780526Z 2025-08-30 09:56:54 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3780867Z 2025-08-30 09:56:54 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3781079Z 2025-08-30 09:56:54 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3781545Z 2025-08-30 09:56:54 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3781796Z 2025-08-30 09:56:54 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3782092Z 2025-08-30 09:56:54 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3782300Z 2025-08-30 09:56:54 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3782513Z 2025-08-30 09:56:54 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3782769Z 2025-08-30 09:56:54 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3782984Z 2025-08-30 09:56:54 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3783144Z 2025-08-30 09:56:54 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3783304Z 2025-08-30 09:56:54 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3783584Z 2025-08-30 09:56:54 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3783735Z 2025-08-30 09:56:54 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3783855Z 2025-08-30 09:56:54 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3784226Z 2025-08-30 09:56:54 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3784516Z 2025-08-30 09:56:54 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3784899Z 2025-08-30 09:56:54 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_populate_features0/freqaimodels'
2025-08-30T09:58:47.3785189Z 2025-08-30 09:56:54 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_populate_features0/freqaimodels" does not exist.
2025-08-30T09:58:47.3785585Z 2025-08-30 09:56:54 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3786056Z 2025-08-30 09:56:54 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3786561Z 2025-08-30 09:56:54 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3786711Z 2025-08-30 09:56:54 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.3786879Z 2025-08-30 09:56:54 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3787074Z 2025-08-30 09:56:54 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3787321Z 2025-08-30 09:56:54 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3787464Z 2025-08-30 09:56:54 INFO No params for buy found, using default values.
2025-08-30T09:58:47.3787609Z 2025-08-30 09:56:54 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3787775Z 2025-08-30 09:56:54 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3787930Z 2025-08-30 09:56:54 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3788078Z 2025-08-30 09:56:54 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3788255Z 2025-08-30 09:56:54 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3788386Z 2025-08-30 09:56:54 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3788467Z 2025-08-30 09:56:54 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3788560Z 2025-08-30 09:56:54 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3788682Z 2025-08-30 09:56:54 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3788803Z 2025-08-30 09:56:54 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3789010Z 2025-08-30 09:56:54 DEBUG Missing data fillup for ADA/BTC, 5m: before: 4281 - after: 4321 - 0.93%
2025-08-30T09:58:47.3789218Z 2025-08-30 09:56:54 DEBUG Missing data fillup for DASH/BTC, 5m: before: 4319 - after: 4321 - 0.05%
2025-08-30T09:58:47.3789469Z ________________________ test_make_train_test_datasets _________________________
2025-08-30T09:58:47.3789476Z 
2025-08-30T09:58:47.3789638Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3789702Z key = 'date'
2025-08-30T09:58:47.3789707Z 
2025-08-30T09:58:47.3789785Z     def get_loc(self, key):
2025-08-30T09:58:47.3789842Z         """
2025-08-30T09:58:47.3789994Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3790053Z     
2025-08-30T09:58:47.3790124Z         Parameters
2025-08-30T09:58:47.3790189Z         ----------
2025-08-30T09:58:47.3790256Z         key : label
2025-08-30T09:58:47.3790312Z     
2025-08-30T09:58:47.3790371Z         Returns
2025-08-30T09:58:47.3790431Z         -------
2025-08-30T09:58:47.3790563Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3790622Z     
2025-08-30T09:58:47.3790686Z         Examples
2025-08-30T09:58:47.3790751Z         --------
2025-08-30T09:58:47.3790845Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3790924Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3790982Z         1
2025-08-30T09:58:47.3791044Z     
2025-08-30T09:58:47.3791141Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3791221Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3791295Z         slice(1, 3, None)
2025-08-30T09:58:47.3791355Z     
2025-08-30T09:58:47.3791456Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3791538Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3791623Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3791681Z         """
2025-08-30T09:58:47.3791772Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3791903Z         try:
2025-08-30T09:58:47.3791994Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3792093Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3792103Z 
2025-08-30T09:58:47.3792279Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3792382Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3792551Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3792615Z     ???
2025-08-30T09:58:47.3792775Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3792831Z     ???
2025-08-30T09:58:47.3793090Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3793150Z     ???
2025-08-30T09:58:47.3793248Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3793252Z 
2025-08-30T09:58:47.3793308Z >   ???
2025-08-30T09:58:47.3793484Z E   KeyError: 'date'
2025-08-30T09:58:47.3793489Z 
2025-08-30T09:58:47.3793692Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3793707Z 
2025-08-30T09:58:47.3793911Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3793916Z 
2025-08-30T09:58:47.3794084Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da86bad0>
2025-08-30T09:58:47.3794853Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3794858Z 
2025-08-30T09:58:47.3801935Z     def test_make_train_test_datasets(mocker, freqai_conf):
2025-08-30T09:58:47.3802274Z >       freqai, unfiltered_dataframe = make_unfiltered_dataframe(mocker, freqai_conf)
2025-08-30T09:58:47.3802372Z                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3802388Z 
2025-08-30T09:58:47.3802504Z tests/freqai/test_freqai_datakitchen.py:92: 
2025-08-30T09:58:47.3802794Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3802953Z tests/freqai/conftest.py:149: in make_unfiltered_dataframe
2025-08-30T09:58:47.3803135Z     corr_dataframes, base_dataframes = freqai.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.3803307Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.3803644Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.3803784Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.3803888Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.3803960Z                 ^^^^^^^^^^
2025-08-30T09:58:47.3804159Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3804248Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3804315Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3804421Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3804431Z 
2025-08-30T09:58:47.3804594Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3804657Z key = 'date'
2025-08-30T09:58:47.3804665Z 
2025-08-30T09:58:47.3804743Z     def get_loc(self, key):
2025-08-30T09:58:47.3804800Z         """
2025-08-30T09:58:47.3804959Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3805019Z     
2025-08-30T09:58:47.3805084Z         Parameters
2025-08-30T09:58:47.3805148Z         ----------
2025-08-30T09:58:47.3805211Z         key : label
2025-08-30T09:58:47.3805270Z     
2025-08-30T09:58:47.3805331Z         Returns
2025-08-30T09:58:47.3805390Z         -------
2025-08-30T09:58:47.3805523Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3805578Z     
2025-08-30T09:58:47.3805723Z         Examples
2025-08-30T09:58:47.3805783Z         --------
2025-08-30T09:58:47.3805883Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3805964Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3806023Z         1
2025-08-30T09:58:47.3806082Z     
2025-08-30T09:58:47.3806177Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3806260Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3806327Z         slice(1, 3, None)
2025-08-30T09:58:47.3806388Z     
2025-08-30T09:58:47.3806490Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3806573Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3806663Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3806720Z         """
2025-08-30T09:58:47.3806811Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3806874Z         try:
2025-08-30T09:58:47.3806962Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3807041Z         except KeyError as err:
2025-08-30T09:58:47.3807127Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3807225Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3807337Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3807393Z             ):
2025-08-30T09:58:47.3807550Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3807628Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3807702Z E           KeyError: 'date'
2025-08-30T09:58:47.3807707Z 
2025-08-30T09:58:47.3807906Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3808049Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3808516Z 2025-08-30 09:56:54,802 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3809205Z 2025-08-30 09:56:54,803 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.3809280Z 'nonexiting_module''
2025-08-30T09:58:47.3810141Z 2025-08-30 09:56:54,804 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3810384Z 2025-08-30 09:56:54,805 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.3810830Z 2025-08-30 09:56:54,805 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3811156Z 2025-08-30 09:56:54,806 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3811483Z 2025-08-30 09:56:54,806 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3811829Z 2025-08-30 09:56:54,806 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3812169Z 2025-08-30 09:56:54,807 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3812585Z 2025-08-30 09:56:54,807 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3812917Z 2025-08-30 09:56:54,807 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3813257Z 2025-08-30 09:56:54,808 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3813734Z 2025-08-30 09:56:54,808 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.3814067Z 2025-08-30 09:56:54,808 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.3814322Z 2025-08-30 09:56:54,809 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.3814620Z 2025-08-30 09:56:54,809 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3814918Z 2025-08-30 09:56:54,809 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3815192Z 2025-08-30 09:56:54,810 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3815476Z 2025-08-30 09:56:54,810 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3815933Z 2025-08-30 09:56:54,810 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.3816084Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3816425Z 2025-08-30 09:56:54,811 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3816738Z 2025-08-30 09:56:54,811 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.3816979Z 2025-08-30 09:56:54,811 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3817245Z 2025-08-30 09:56:54,812 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3817555Z 2025-08-30 09:56:54,812 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3817809Z 2025-08-30 09:56:54,812 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.3818170Z 2025-08-30 09:56:54,812 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.3818457Z 2025-08-30 09:56:54,813 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3818716Z 2025-08-30 09:56:54,813 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3819004Z 2025-08-30 09:56:54,813 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3819301Z 2025-08-30 09:56:54,814 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3819586Z 2025-08-30 09:56:54,814 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3819870Z 2025-08-30 09:56:54,814 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3820112Z 2025-08-30 09:56:54,815 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.3820601Z 2025-08-30 09:56:54,815 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3821020Z 2025-08-30 09:56:54,815 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3821541Z 2025-08-30 09:56:54,816 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_make_train_test_datasets0/freqaimodels'
2025-08-30T09:58:47.3821964Z 2025-08-30 09:56:54,816 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_make_train_test_datasets0/freqaimodels" does not exist.
2025-08-30T09:58:47.3822535Z 2025-08-30 09:56:54,816 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3822967Z 2025-08-30 09:56:54,817 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3823239Z 2025-08-30 09:56:54,818 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.3823653Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3823926Z 2025-08-30 09:56:54,819 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.3824206Z 2025-08-30 09:56:54,819 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3824526Z 2025-08-30 09:56:54,820 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3824906Z 2025-08-30 09:56:54,820 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3825207Z 2025-08-30 09:56:54,820 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.3825446Z 2025-08-30 09:56:54,821 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.3825699Z 2025-08-30 09:56:54,821 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3825948Z 2025-08-30 09:56:54,822 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3826197Z 2025-08-30 09:56:54,822 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.3826377Z 2025-08-30 09:56:54,825 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.3826714Z 2025-08-30 09:56:54,826 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.3826886Z 2025-08-30 09:56:54,826 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.3827074Z 2025-08-30 09:56:54,827 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.3827296Z 2025-08-30 09:56:54,828 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.3827553Z 2025-08-30 09:56:54,829 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3827906Z 2025-08-30 09:56:54,834 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3828244Z 2025-08-30 09:56:54,849 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3828608Z 2025-08-30 09:56:54,853 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3828951Z 2025-08-30 09:56:54,866 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3829300Z 2025-08-30 09:56:54,871 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3829648Z 2025-08-30 09:56:54,887 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3829791Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3830113Z 2025-08-30 09:56:54 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3830667Z 2025-08-30 09:56:54 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3831085Z 2025-08-30 09:56:54 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3831186Z 2025-08-30 09:56:54 INFO Found no parameter file.
2025-08-30T09:58:47.3831474Z 2025-08-30 09:56:54 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3831650Z 2025-08-30 09:56:54 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3831829Z 2025-08-30 09:56:54 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3832028Z 2025-08-30 09:56:54 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3832216Z 2025-08-30 09:56:54 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3832481Z 2025-08-30 09:56:54 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3832673Z 2025-08-30 09:56:54 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3832909Z 2025-08-30 09:56:54 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3833013Z 2025-08-30 09:56:54 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3833123Z 2025-08-30 09:56:54 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3833322Z 2025-08-30 09:56:54 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3833733Z 2025-08-30 09:56:54 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3834035Z 2025-08-30 09:56:54 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3834179Z 2025-08-30 09:56:54 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3834326Z 2025-08-30 09:56:54 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3834941Z 2025-08-30 09:56:54 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3835142Z 2025-08-30 09:56:54 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3835260Z 2025-08-30 09:56:54 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3835375Z 2025-08-30 09:56:54 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3835509Z 2025-08-30 09:56:54 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3835679Z 2025-08-30 09:56:54 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3835797Z 2025-08-30 09:56:54 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3835925Z 2025-08-30 09:56:54 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3836069Z 2025-08-30 09:56:54 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3836189Z 2025-08-30 09:56:54 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3836334Z 2025-08-30 09:56:54 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3836485Z 2025-08-30 09:56:54 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3836630Z 2025-08-30 09:56:54 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3836775Z 2025-08-30 09:56:54 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3836885Z 2025-08-30 09:56:54 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3837255Z 2025-08-30 09:56:54 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3837542Z 2025-08-30 09:56:54 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3838005Z 2025-08-30 09:56:54 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_make_train_test_datasets0/freqaimodels'
2025-08-30T09:58:47.3838314Z 2025-08-30 09:56:54 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_make_train_test_datasets0/freqaimodels" does not exist.
2025-08-30T09:58:47.3838716Z 2025-08-30 09:56:54 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3839035Z 2025-08-30 09:56:54 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3839540Z 2025-08-30 09:56:54 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3839690Z 2025-08-30 09:56:54 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.3839852Z 2025-08-30 09:56:54 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3840045Z 2025-08-30 09:56:54 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3840299Z 2025-08-30 09:56:54 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3840437Z 2025-08-30 09:56:54 INFO No params for buy found, using default values.
2025-08-30T09:58:47.3840654Z 2025-08-30 09:56:54 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3840819Z 2025-08-30 09:56:54 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3840969Z 2025-08-30 09:56:54 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3841123Z 2025-08-30 09:56:54 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3841232Z 2025-08-30 09:56:54 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3841361Z 2025-08-30 09:56:54 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3841443Z 2025-08-30 09:56:54 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3841538Z 2025-08-30 09:56:54 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3841747Z 2025-08-30 09:56:54 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3841867Z 2025-08-30 09:56:54 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3842028Z 2025-08-30 09:56:54 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3842241Z 2025-08-30 09:56:54 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3842401Z 2025-08-30 09:56:54 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3842607Z 2025-08-30 09:56:54 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3842766Z 2025-08-30 09:56:54 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3842916Z 2025-08-30 09:56:54 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3843073Z _________________ test_get_full_model_path[LightGBMRegressor] __________________
2025-08-30T09:58:47.3843079Z 
2025-08-30T09:58:47.3843242Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3843305Z key = 'date'
2025-08-30T09:58:47.3843310Z 
2025-08-30T09:58:47.3843584Z     def get_loc(self, key):
2025-08-30T09:58:47.3843660Z         """
2025-08-30T09:58:47.3843814Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3843869Z     
2025-08-30T09:58:47.3843932Z         Parameters
2025-08-30T09:58:47.3843999Z         ----------
2025-08-30T09:58:47.3844061Z         key : label
2025-08-30T09:58:47.3844116Z     
2025-08-30T09:58:47.3844179Z         Returns
2025-08-30T09:58:47.3844238Z         -------
2025-08-30T09:58:47.3844361Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3844416Z     
2025-08-30T09:58:47.3844481Z         Examples
2025-08-30T09:58:47.3844621Z         --------
2025-08-30T09:58:47.3844711Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3844794Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3844857Z         1
2025-08-30T09:58:47.3844913Z     
2025-08-30T09:58:47.3845009Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3845095Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3848255Z         slice(1, 3, None)
2025-08-30T09:58:47.3848357Z     
2025-08-30T09:58:47.3848495Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3848597Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3848684Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3848758Z         """
2025-08-30T09:58:47.3848858Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3848922Z         try:
2025-08-30T09:58:47.3849015Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3849089Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3849103Z 
2025-08-30T09:58:47.3849286Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3849395Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3849570Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3849738Z     ???
2025-08-30T09:58:47.3849925Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3849983Z     ???
2025-08-30T09:58:47.3850247Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3850309Z     ???
2025-08-30T09:58:47.3850411Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3850417Z 
2025-08-30T09:58:47.3850472Z >   ???
2025-08-30T09:58:47.3850544Z E   KeyError: 'date'
2025-08-30T09:58:47.3850549Z 
2025-08-30T09:58:47.3850672Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3850679Z 
2025-08-30T09:58:47.3850839Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3850843Z 
2025-08-30T09:58:47.3851069Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f66fb30c3d0>
2025-08-30T09:58:47.3851770Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3851857Z model = 'LightGBMRegressor'
2025-08-30T09:58:47.3851862Z 
2025-08-30T09:58:47.3852009Z     @pytest.mark.parametrize("model", ["LightGBMRegressor"])
2025-08-30T09:58:47.3852137Z     def test_get_full_model_path(mocker, freqai_conf, model):
2025-08-30T09:58:47.3852234Z         freqai_conf.update({"freqaimodel": model})
2025-08-30T09:58:47.3852352Z         freqai_conf.update({"timerange": "20180110-20180130"})
2025-08-30T09:58:47.3852467Z         freqai_conf.update({"strategy": "freqai_test_strat"})
2025-08-30T09:58:47.3852523Z     
2025-08-30T09:58:47.3852589Z         if is_mac():
2025-08-30T09:58:47.3852752Z             pytest.skip("Mac is confused during this test for unknown reasons")
2025-08-30T09:58:47.3852807Z     
2025-08-30T09:58:47.3852943Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.3853063Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.3853176Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.3853288Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.3853611Z         freqai = strategy.freqai
2025-08-30T09:58:47.3853713Z         freqai.live = True
2025-08-30T09:58:47.3853815Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.3853893Z         freqai.dk.live = True
2025-08-30T09:58:47.3854027Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.3854242Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.3854301Z     
2025-08-30T09:58:47.3854392Z         freqai.dd.pair_dict = MagicMock()
2025-08-30T09:58:47.3854448Z     
2025-08-30T09:58:47.3854606Z         data_load_timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.3854748Z         new_timerange = TimeRange.parse_timerange("20180120-20180130")
2025-08-30T09:58:47.3854930Z         freqai.dk.set_paths("ADA/BTC", None)
2025-08-30T09:58:47.3855020Z >       freqai.extract_data_and_train_model(
2025-08-30T09:58:47.3855183Z             new_timerange, "ADA/BTC", strategy, freqai.dk, data_load_timerange
2025-08-30T09:58:47.3855241Z         )
2025-08-30T09:58:47.3855246Z 
2025-08-30T09:58:47.3855351Z tests/freqai/test_freqai_datakitchen.py:134: 
2025-08-30T09:58:47.3855454Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3855646Z freqtrade/freqai/freqai_interface.py:611: in extract_data_and_train_model
2025-08-30T09:58:47.3855817Z     corr_dataframes, base_dataframes = self.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.3855984Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.3856082Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.3856213Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.3856384Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.3856454Z                 ^^^^^^^^^^
2025-08-30T09:58:47.3856644Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3856728Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3856798Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3856898Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3856903Z 
2025-08-30T09:58:47.3857065Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3857128Z key = 'date'
2025-08-30T09:58:47.3857138Z 
2025-08-30T09:58:47.3857211Z     def get_loc(self, key):
2025-08-30T09:58:47.3857268Z         """
2025-08-30T09:58:47.3857496Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3857558Z     
2025-08-30T09:58:47.3857623Z         Parameters
2025-08-30T09:58:47.3857688Z         ----------
2025-08-30T09:58:47.3857754Z         key : label
2025-08-30T09:58:47.3857810Z     
2025-08-30T09:58:47.3857868Z         Returns
2025-08-30T09:58:47.3857927Z         -------
2025-08-30T09:58:47.3858055Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3858109Z     
2025-08-30T09:58:47.3858170Z         Examples
2025-08-30T09:58:47.3858234Z         --------
2025-08-30T09:58:47.3858394Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3858538Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3858644Z         1
2025-08-30T09:58:47.3858746Z     
2025-08-30T09:58:47.3858916Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3859066Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3859147Z         slice(1, 3, None)
2025-08-30T09:58:47.3859208Z     
2025-08-30T09:58:47.3859311Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3859393Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3859482Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3859540Z         """
2025-08-30T09:58:47.3859633Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3859694Z         try:
2025-08-30T09:58:47.3859782Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3859857Z         except KeyError as err:
2025-08-30T09:58:47.3859944Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3860037Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3860148Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3860269Z             ):
2025-08-30T09:58:47.3860357Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3860435Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3860509Z E           KeyError: 'date'
2025-08-30T09:58:47.3860515Z 
2025-08-30T09:58:47.3860711Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3860908Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3861369Z 2025-08-30 09:56:55,119 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3861920Z 2025-08-30 09:56:55,120 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.3861989Z 'nonexiting_module''
2025-08-30T09:58:47.3862527Z 2025-08-30 09:56:55,121 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3862719Z 2025-08-30 09:56:55,122 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.3863157Z 2025-08-30 09:56:55,122 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3863752Z 2025-08-30 09:56:55,122 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3864089Z 2025-08-30 09:56:55,123 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3864430Z 2025-08-30 09:56:55,123 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3864761Z 2025-08-30 09:56:55,123 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3865310Z 2025-08-30 09:56:55,124 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3865651Z 2025-08-30 09:56:55,124 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3865992Z 2025-08-30 09:56:55,124 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3866232Z 2025-08-30 09:56:55,125 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.3866470Z 2025-08-30 09:56:55,125 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.3866722Z 2025-08-30 09:56:55,125 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.3867017Z 2025-08-30 09:56:55,126 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3867318Z 2025-08-30 09:56:55,126 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3867587Z 2025-08-30 09:56:55,126 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3867864Z 2025-08-30 09:56:55,127 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3868321Z 2025-08-30 09:56:55,127 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.3868468Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3868804Z 2025-08-30 09:56:55,127 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3869149Z 2025-08-30 09:56:55,127 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.3869390Z 2025-08-30 09:56:55,128 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3869706Z 2025-08-30 09:56:55,128 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3870022Z 2025-08-30 09:56:55,128 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3870273Z 2025-08-30 09:56:55,129 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.3870532Z 2025-08-30 09:56:55,129 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.3870825Z 2025-08-30 09:56:55,129 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3871080Z 2025-08-30 09:56:55,130 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3871357Z 2025-08-30 09:56:55,130 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3871712Z 2025-08-30 09:56:55,130 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3871995Z 2025-08-30 09:56:55,131 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3872273Z 2025-08-30 09:56:55,131 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3872520Z 2025-08-30 09:56:55,131 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.3873006Z 2025-08-30 09:56:55,132 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3873593Z 2025-08-30 09:56:55,132 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3874131Z 2025-08-30 09:56:55,132 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_full_model_path_Light0/freqaimodels'
2025-08-30T09:58:47.3874566Z 2025-08-30 09:56:55,133 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_get_full_model_path_Light0/freqaimodels" does not exist.
2025-08-30T09:58:47.3875084Z 2025-08-30 09:56:55,133 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3875519Z 2025-08-30 09:56:55,134 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3875804Z 2025-08-30 09:56:55,135 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.3876099Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3876379Z 2025-08-30 09:56:55,136 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.3876644Z 2025-08-30 09:56:55,136 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3876947Z 2025-08-30 09:56:55,136 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3877325Z 2025-08-30 09:56:55,137 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3877617Z 2025-08-30 09:56:55,137 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.3877851Z 2025-08-30 09:56:55,138 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.3878110Z 2025-08-30 09:56:55,138 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3878407Z 2025-08-30 09:56:55,138 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3878652Z 2025-08-30 09:56:55,139 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.3878802Z 2025-08-30 09:56:55,142 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.3879030Z 2025-08-30 09:56:55,142 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.3879190Z 2025-08-30 09:56:55,143 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.3879383Z 2025-08-30 09:56:55,144 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.3879619Z 2025-08-30 09:56:55,144 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.3880096Z 2025-08-30 09:56:55,145 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3880580Z 2025-08-30 09:56:55,151 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3880925Z 2025-08-30 09:56:55,165 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3881275Z 2025-08-30 09:56:55,169 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3881617Z 2025-08-30 09:56:55,182 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3882005Z 2025-08-30 09:56:55,187 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3882579Z 2025-08-30 09:56:55,204 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3882771Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3883091Z 2025-08-30 09:56:55 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3883784Z 2025-08-30 09:56:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3884214Z 2025-08-30 09:56:55 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3884316Z 2025-08-30 09:56:55 INFO Found no parameter file.
2025-08-30T09:58:47.3884601Z 2025-08-30 09:56:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3884780Z 2025-08-30 09:56:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3884962Z 2025-08-30 09:56:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3885160Z 2025-08-30 09:56:55 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3885352Z 2025-08-30 09:56:55 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3885614Z 2025-08-30 09:56:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3885797Z 2025-08-30 09:56:55 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3886082Z 2025-08-30 09:56:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3886189Z 2025-08-30 09:56:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3886295Z 2025-08-30 09:56:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3886420Z 2025-08-30 09:56:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3886631Z 2025-08-30 09:56:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3886792Z 2025-08-30 09:56:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3886926Z 2025-08-30 09:56:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3887064Z 2025-08-30 09:56:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3887544Z 2025-08-30 09:56:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3887740Z 2025-08-30 09:56:55 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3887855Z 2025-08-30 09:56:55 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3887963Z 2025-08-30 09:56:55 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3888089Z 2025-08-30 09:56:55 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3888322Z 2025-08-30 09:56:55 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3888440Z 2025-08-30 09:56:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3888560Z 2025-08-30 09:56:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3888706Z 2025-08-30 09:56:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3888821Z 2025-08-30 09:56:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3888960Z 2025-08-30 09:56:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3889118Z 2025-08-30 09:56:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3889316Z 2025-08-30 09:56:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3889460Z 2025-08-30 09:56:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3889575Z 2025-08-30 09:56:55 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3889938Z 2025-08-30 09:56:55 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3890222Z 2025-08-30 09:56:55 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3890630Z 2025-08-30 09:56:55 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_full_model_path_Light0/freqaimodels'
2025-08-30T09:58:47.3890941Z 2025-08-30 09:56:55 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_get_full_model_path_Light0/freqaimodels" does not exist.
2025-08-30T09:58:47.3891341Z 2025-08-30 09:56:55 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3891657Z 2025-08-30 09:56:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3892163Z 2025-08-30 09:56:55 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3892309Z 2025-08-30 09:56:55 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.3892476Z 2025-08-30 09:56:55 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3892667Z 2025-08-30 09:56:55 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3892913Z 2025-08-30 09:56:55 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3893096Z 2025-08-30 09:56:55 INFO No params for buy found, using default values.
2025-08-30T09:58:47.3893236Z 2025-08-30 09:56:55 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3893571Z 2025-08-30 09:56:55 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3893733Z 2025-08-30 09:56:55 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3893958Z 2025-08-30 09:56:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3894073Z 2025-08-30 09:56:55 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3894198Z 2025-08-30 09:56:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3894285Z 2025-08-30 09:56:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3894381Z 2025-08-30 09:56:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3894503Z 2025-08-30 09:56:55 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3894623Z 2025-08-30 09:56:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3894783Z 2025-08-30 09:56:55 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3894989Z 2025-08-30 09:56:55 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3895152Z 2025-08-30 09:56:55 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3895418Z 2025-08-30 09:56:55 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3895571Z 2025-08-30 09:56:55 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3895723Z 2025-08-30 09:56:55 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3895851Z _____________________________ test_filter_features _____________________________
2025-08-30T09:58:47.3895857Z 
2025-08-30T09:58:47.3896011Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3896073Z key = 'date'
2025-08-30T09:58:47.3896087Z 
2025-08-30T09:58:47.3896161Z     def get_loc(self, key):
2025-08-30T09:58:47.3896218Z         """
2025-08-30T09:58:47.3896444Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3896507Z     
2025-08-30T09:58:47.3896570Z         Parameters
2025-08-30T09:58:47.3896632Z         ----------
2025-08-30T09:58:47.3896698Z         key : label
2025-08-30T09:58:47.3896753Z     
2025-08-30T09:58:47.3896813Z         Returns
2025-08-30T09:58:47.3896872Z         -------
2025-08-30T09:58:47.3897000Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3897055Z     
2025-08-30T09:58:47.3897113Z         Examples
2025-08-30T09:58:47.3897176Z         --------
2025-08-30T09:58:47.3897266Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3897344Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3897401Z         1
2025-08-30T09:58:47.3897459Z     
2025-08-30T09:58:47.3897552Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3897633Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3897704Z         slice(1, 3, None)
2025-08-30T09:58:47.3897759Z     
2025-08-30T09:58:47.3897860Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3897942Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3898028Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3898086Z         """
2025-08-30T09:58:47.3898179Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3898241Z         try:
2025-08-30T09:58:47.3898329Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3898399Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3898404Z 
2025-08-30T09:58:47.3898577Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3898680Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3898845Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3898971Z     ???
2025-08-30T09:58:47.3899135Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3899191Z     ???
2025-08-30T09:58:47.3899446Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3899508Z     ???
2025-08-30T09:58:47.3899643Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3899648Z 
2025-08-30T09:58:47.3899704Z >   ???
2025-08-30T09:58:47.3899773Z E   KeyError: 'date'
2025-08-30T09:58:47.3899778Z 
2025-08-30T09:58:47.3899899Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3899904Z 
2025-08-30T09:58:47.3900059Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3900063Z 
2025-08-30T09:58:47.3900223Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65e4f912d0>
2025-08-30T09:58:47.3900908Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3900915Z 
2025-08-30T09:58:47.3901013Z     def test_filter_features(mocker, freqai_conf):
2025-08-30T09:58:47.3901256Z >       freqai, unfiltered_dataframe = make_unfiltered_dataframe(mocker, freqai_conf)
2025-08-30T09:58:47.3901339Z                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3901344Z 
2025-08-30T09:58:47.3901441Z tests/freqai/test_freqai_datakitchen.py:78: 
2025-08-30T09:58:47.3901539Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3901675Z tests/freqai/conftest.py:149: in make_unfiltered_dataframe
2025-08-30T09:58:47.3901848Z     corr_dataframes, base_dataframes = freqai.dd.get_base_and_corr_dataframes(
2025-08-30T09:58:47.3902017Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.3902108Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.3902272Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.3902372Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.3902442Z                 ^^^^^^^^^^
2025-08-30T09:58:47.3902630Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3902712Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3902781Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3902877Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3902881Z 
2025-08-30T09:58:47.3903038Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3903101Z key = 'date'
2025-08-30T09:58:47.3903106Z 
2025-08-30T09:58:47.3903177Z     def get_loc(self, key):
2025-08-30T09:58:47.3903233Z         """
2025-08-30T09:58:47.3903576Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3903677Z     
2025-08-30T09:58:47.3903799Z         Parameters
2025-08-30T09:58:47.3903912Z         ----------
2025-08-30T09:58:47.3904028Z         key : label
2025-08-30T09:58:47.3904132Z     
2025-08-30T09:58:47.3904217Z         Returns
2025-08-30T09:58:47.3904289Z         -------
2025-08-30T09:58:47.3904426Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3904481Z     
2025-08-30T09:58:47.3904543Z         Examples
2025-08-30T09:58:47.3904608Z         --------
2025-08-30T09:58:47.3904698Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3904777Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3904841Z         1
2025-08-30T09:58:47.3904895Z     
2025-08-30T09:58:47.3904991Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3905071Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3905237Z         slice(1, 3, None)
2025-08-30T09:58:47.3905294Z     
2025-08-30T09:58:47.3905396Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3905484Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3905564Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3905620Z         """
2025-08-30T09:58:47.3905715Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3905838Z         try:
2025-08-30T09:58:47.3905929Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3906005Z         except KeyError as err:
2025-08-30T09:58:47.3906140Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3906305Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3906500Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3906602Z             ):
2025-08-30T09:58:47.3906689Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3906768Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3906844Z E           KeyError: 'date'
2025-08-30T09:58:47.3906849Z 
2025-08-30T09:58:47.3907051Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3907193Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3907659Z 2025-08-30 09:56:55,901 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3908315Z 2025-08-30 09:56:55,903 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.3908386Z 'nonexiting_module''
2025-08-30T09:58:47.3908938Z 2025-08-30 09:56:55,904 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3909128Z 2025-08-30 09:56:55,904 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.3909615Z 2025-08-30 09:56:55,905 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3909945Z 2025-08-30 09:56:55,905 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3910278Z 2025-08-30 09:56:55,906 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3910616Z 2025-08-30 09:56:55,906 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3910954Z 2025-08-30 09:56:55,906 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3911361Z 2025-08-30 09:56:55,907 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3911694Z 2025-08-30 09:56:55,907 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3912037Z 2025-08-30 09:56:55,907 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3912267Z 2025-08-30 09:56:55,908 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.3912496Z 2025-08-30 09:56:55,908 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.3912752Z 2025-08-30 09:56:55,908 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.3913042Z 2025-08-30 09:56:55,908 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3913504Z 2025-08-30 09:56:55,909 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3913775Z 2025-08-30 09:56:55,909 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3914114Z 2025-08-30 09:56:55,909 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3914571Z 2025-08-30 09:56:55,910 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.3914719Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3915048Z 2025-08-30 09:56:55,910 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3915292Z 2025-08-30 09:56:55,910 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.3915537Z 2025-08-30 09:56:55,911 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3915797Z 2025-08-30 09:56:55,911 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3916166Z 2025-08-30 09:56:55,911 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3916417Z 2025-08-30 09:56:55,912 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.3916673Z 2025-08-30 09:56:55,912 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.3916953Z 2025-08-30 09:56:55,912 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3917207Z 2025-08-30 09:56:55,913 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3917553Z 2025-08-30 09:56:55,913 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3917858Z 2025-08-30 09:56:55,913 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3918144Z 2025-08-30 09:56:55,913 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3918422Z 2025-08-30 09:56:55,914 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3918663Z 2025-08-30 09:56:55,914 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.3919150Z 2025-08-30 09:56:55,914 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3919556Z 2025-08-30 09:56:55,915 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3920038Z 2025-08-30 09:56:55,915 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_filter_features0/freqaimodels'
2025-08-30T09:58:47.3920442Z 2025-08-30 09:56:55,915 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_filter_features0/freqaimodels" does not exist.
2025-08-30T09:58:47.3920958Z 2025-08-30 09:56:55,916 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3921384Z 2025-08-30 09:56:55,917 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3921655Z 2025-08-30 09:56:55,918 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.3922006Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3922276Z 2025-08-30 09:56:55,918 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.3922587Z 2025-08-30 09:56:55,919 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3922890Z 2025-08-30 09:56:55,919 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3923265Z 2025-08-30 09:56:55,919 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3923705Z 2025-08-30 09:56:55,920 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.3923947Z 2025-08-30 09:56:55,920 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.3924204Z 2025-08-30 09:56:55,921 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3924452Z 2025-08-30 09:56:55,921 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3924798Z 2025-08-30 09:56:55,921 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.3924943Z 2025-08-30 09:56:55,925 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.3925175Z 2025-08-30 09:56:55,925 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.3925336Z 2025-08-30 09:56:55,925 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.3925519Z 2025-08-30 09:56:55,926 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.3925748Z 2025-08-30 09:56:55,927 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.3926054Z 2025-08-30 09:56:55,928 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3926448Z 2025-08-30 09:56:55,933 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3926797Z 2025-08-30 09:56:55,947 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3927148Z 2025-08-30 09:56:55,952 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3927488Z 2025-08-30 09:56:55,965 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3927939Z 2025-08-30 09:56:55,969 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3928477Z 2025-08-30 09:56:55,986 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3928623Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3928956Z 2025-08-30 09:56:55 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3929447Z 2025-08-30 09:56:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3929862Z 2025-08-30 09:56:55 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3929962Z 2025-08-30 09:56:55 INFO Found no parameter file.
2025-08-30T09:58:47.3930574Z 2025-08-30 09:56:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3930772Z 2025-08-30 09:56:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3930957Z 2025-08-30 09:56:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3931226Z 2025-08-30 09:56:55 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3931422Z 2025-08-30 09:56:55 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3931687Z 2025-08-30 09:56:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3931877Z 2025-08-30 09:56:55 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3932069Z 2025-08-30 09:56:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3932182Z 2025-08-30 09:56:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3932289Z 2025-08-30 09:56:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3932408Z 2025-08-30 09:56:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3932562Z 2025-08-30 09:56:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3932788Z 2025-08-30 09:56:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3932918Z 2025-08-30 09:56:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3933056Z 2025-08-30 09:56:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3933653Z 2025-08-30 09:56:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3933847Z 2025-08-30 09:56:55 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3933964Z 2025-08-30 09:56:55 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3934077Z 2025-08-30 09:56:55 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3934272Z 2025-08-30 09:56:55 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3934442Z 2025-08-30 09:56:55 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3934566Z 2025-08-30 09:56:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3934692Z 2025-08-30 09:56:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3934833Z 2025-08-30 09:56:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3934957Z 2025-08-30 09:56:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3935095Z 2025-08-30 09:56:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3935248Z 2025-08-30 09:56:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3935393Z 2025-08-30 09:56:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3935533Z 2025-08-30 09:56:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3935645Z 2025-08-30 09:56:55 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3936011Z 2025-08-30 09:56:55 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3936302Z 2025-08-30 09:56:55 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3936659Z 2025-08-30 09:56:55 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_filter_features0/freqaimodels'
2025-08-30T09:58:47.3936940Z 2025-08-30 09:56:55 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_filter_features0/freqaimodels" does not exist.
2025-08-30T09:58:47.3937334Z 2025-08-30 09:56:55 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3937706Z 2025-08-30 09:56:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3938214Z 2025-08-30 09:56:55 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3938364Z 2025-08-30 09:56:55 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.3938583Z 2025-08-30 09:56:55 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3938784Z 2025-08-30 09:56:55 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3939033Z 2025-08-30 09:56:55 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3939168Z 2025-08-30 09:56:55 INFO No params for buy found, using default values.
2025-08-30T09:58:47.3939305Z 2025-08-30 09:56:55 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3939471Z 2025-08-30 09:56:55 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3939622Z 2025-08-30 09:56:55 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3939771Z 2025-08-30 09:56:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3939943Z 2025-08-30 09:56:55 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3940068Z 2025-08-30 09:56:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3940148Z 2025-08-30 09:56:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3940246Z 2025-08-30 09:56:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3940368Z 2025-08-30 09:56:55 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3940483Z 2025-08-30 09:56:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3940643Z 2025-08-30 09:56:55 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3940845Z 2025-08-30 09:56:55 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3941004Z 2025-08-30 09:56:55 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3941250Z 2025-08-30 09:56:55 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3941409Z 2025-08-30 09:56:55 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3941564Z 2025-08-30 09:56:55 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3941726Z _____________ test_get_pair_data_for_features_with_prealoaded_data _____________
2025-08-30T09:58:47.3941735Z 
2025-08-30T09:58:47.3941893Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3941957Z key = 'date'
2025-08-30T09:58:47.3941962Z 
2025-08-30T09:58:47.3942034Z     def get_loc(self, key):
2025-08-30T09:58:47.3942094Z         """
2025-08-30T09:58:47.3942248Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3942305Z     
2025-08-30T09:58:47.3942372Z         Parameters
2025-08-30T09:58:47.3942434Z         ----------
2025-08-30T09:58:47.3942496Z         key : label
2025-08-30T09:58:47.3942549Z     
2025-08-30T09:58:47.3942613Z         Returns
2025-08-30T09:58:47.3942671Z         -------
2025-08-30T09:58:47.3942794Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3942859Z     
2025-08-30T09:58:47.3942919Z         Examples
2025-08-30T09:58:47.3942977Z         --------
2025-08-30T09:58:47.3943069Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3943151Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3943207Z         1
2025-08-30T09:58:47.3943262Z     
2025-08-30T09:58:47.3943526Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3943653Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3943725Z         slice(1, 3, None)
2025-08-30T09:58:47.3943785Z     
2025-08-30T09:58:47.3943980Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3944064Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3944147Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3944209Z         """
2025-08-30T09:58:47.3944301Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3944361Z         try:
2025-08-30T09:58:47.3944513Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3944584Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3944589Z 
2025-08-30T09:58:47.3944763Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3944870Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3945038Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3945096Z     ???
2025-08-30T09:58:47.3945253Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3945316Z     ???
2025-08-30T09:58:47.3945576Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3945634Z     ???
2025-08-30T09:58:47.3945736Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3945740Z 
2025-08-30T09:58:47.3945794Z >   ???
2025-08-30T09:58:47.3945922Z E   KeyError: 'date'
2025-08-30T09:58:47.3945927Z 
2025-08-30T09:58:47.3946053Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3946058Z 
2025-08-30T09:58:47.3946213Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3946218Z 
2025-08-30T09:58:47.3946370Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65843d6410>
2025-08-30T09:58:47.3947057Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3947065Z 
2025-08-30T09:58:47.3947297Z     def test_get_pair_data_for_features_with_prealoaded_data(mocker, freqai_conf):
2025-08-30T09:58:47.3947436Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.3947555Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.3947671Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.3947784Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.3947866Z         freqai = strategy.freqai
2025-08-30T09:58:47.3947960Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.3948091Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.3948219Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.3948279Z     
2025-08-30T09:58:47.3948463Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.3948550Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3948555Z 
2025-08-30T09:58:47.3948662Z tests/freqai/test_freqai_datakitchen.py:152: 
2025-08-30T09:58:47.3948759Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3948926Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.3949021Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.3949147Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.3949319Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.3949389Z                  ^^^^^^^^^^
2025-08-30T09:58:47.3949575Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.3949658Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.3949727Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3949877Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3949881Z 
2025-08-30T09:58:47.3950041Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3950101Z key = 'date'
2025-08-30T09:58:47.3950105Z 
2025-08-30T09:58:47.3950180Z     def get_loc(self, key):
2025-08-30T09:58:47.3950238Z         """
2025-08-30T09:58:47.3950446Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3950508Z     
2025-08-30T09:58:47.3950571Z         Parameters
2025-08-30T09:58:47.3950630Z         ----------
2025-08-30T09:58:47.3950691Z         key : label
2025-08-30T09:58:47.3950750Z     
2025-08-30T09:58:47.3950807Z         Returns
2025-08-30T09:58:47.3950866Z         -------
2025-08-30T09:58:47.3950994Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3951048Z     
2025-08-30T09:58:47.3951106Z         Examples
2025-08-30T09:58:47.3951167Z         --------
2025-08-30T09:58:47.3951260Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3951337Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3951395Z         1
2025-08-30T09:58:47.3951453Z     
2025-08-30T09:58:47.3951545Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3951623Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3951745Z         slice(1, 3, None)
2025-08-30T09:58:47.3951802Z     
2025-08-30T09:58:47.3951904Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3951985Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3952070Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3952126Z         """
2025-08-30T09:58:47.3952217Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3952278Z         try:
2025-08-30T09:58:47.3952367Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3952440Z         except KeyError as err:
2025-08-30T09:58:47.3952527Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3952620Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3952770Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3952831Z             ):
2025-08-30T09:58:47.3952919Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3952998Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3953070Z E           KeyError: 'date'
2025-08-30T09:58:47.3953075Z 
2025-08-30T09:58:47.3953266Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.3953511Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.3953970Z 2025-08-30 09:56:56,210 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3954516Z 2025-08-30 09:56:56,212 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.3954589Z 'nonexiting_module''
2025-08-30T09:58:47.3955125Z 2025-08-30 09:56:56,213 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3955314Z 2025-08-30 09:56:56,213 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.3955746Z 2025-08-30 09:56:56,214 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3956069Z 2025-08-30 09:56:56,214 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3956393Z 2025-08-30 09:56:56,215 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3956805Z 2025-08-30 09:56:56,215 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3957136Z 2025-08-30 09:56:56,215 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3957599Z 2025-08-30 09:56:56,216 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3957931Z 2025-08-30 09:56:56,216 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3958269Z 2025-08-30 09:56:56,216 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3958501Z 2025-08-30 09:56:56,217 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.3958734Z 2025-08-30 09:56:56,217 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.3958984Z 2025-08-30 09:56:56,217 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.3959279Z 2025-08-30 09:56:56,218 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3959633Z 2025-08-30 09:56:56,218 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3959896Z 2025-08-30 09:56:56,218 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3960173Z 2025-08-30 09:56:56,219 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3960622Z 2025-08-30 09:56:56,219 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.3960819Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3961157Z 2025-08-30 09:56:56,219 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3961406Z 2025-08-30 09:56:56,220 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.3961648Z 2025-08-30 09:56:56,220 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3961910Z 2025-08-30 09:56:56,220 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3962217Z 2025-08-30 09:56:56,220 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3962463Z 2025-08-30 09:56:56,221 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.3962726Z 2025-08-30 09:56:56,221 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.3963006Z 2025-08-30 09:56:56,221 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3963260Z 2025-08-30 09:56:56,222 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3963740Z 2025-08-30 09:56:56,222 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3964039Z 2025-08-30 09:56:56,222 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3964321Z 2025-08-30 09:56:56,223 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3964600Z 2025-08-30 09:56:56,223 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3964918Z 2025-08-30 09:56:56,223 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.3965399Z 2025-08-30 09:56:56,224 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3965867Z 2025-08-30 09:56:56,224 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3966386Z 2025-08-30 09:56:56,224 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature0/freqaimodels'
2025-08-30T09:58:47.3966810Z 2025-08-30 09:56:56,225 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature0/freqaimodels" does not exist.
2025-08-30T09:58:47.3967348Z 2025-08-30 09:56:56,225 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3967784Z 2025-08-30 09:56:56,226 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3968113Z 2025-08-30 09:56:56,227 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.3968405Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3968673Z 2025-08-30 09:56:56,227 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.3968936Z 2025-08-30 09:56:56,228 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3969240Z 2025-08-30 09:56:56,228 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3970004Z 2025-08-30 09:56:56,229 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3970403Z 2025-08-30 09:56:56,229 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.3970654Z 2025-08-30 09:56:56,230 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.3970911Z 2025-08-30 09:56:56,230 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3971156Z 2025-08-30 09:56:56,230 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3971409Z 2025-08-30 09:56:56,231 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.3971555Z 2025-08-30 09:56:56,234 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.3971787Z 2025-08-30 09:56:56,235 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.3971954Z 2025-08-30 09:56:56,235 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.3972137Z 2025-08-30 09:56:56,236 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.3972364Z 2025-08-30 09:56:56,236 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.3972619Z 2025-08-30 09:56:56,237 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3972975Z 2025-08-30 09:56:56,243 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3973312Z 2025-08-30 09:56:56,256 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3973870Z 2025-08-30 09:56:56,261 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3974219Z 2025-08-30 09:56:56,274 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3974630Z 2025-08-30 09:56:56,278 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3974978Z 2025-08-30 09:56:56,295 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3975119Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.3975438Z 2025-08-30 09:56:56 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.3975930Z 2025-08-30 09:56:56 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.3976351Z 2025-08-30 09:56:56 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.3976510Z 2025-08-30 09:56:56 INFO Found no parameter file.
2025-08-30T09:58:47.3976798Z 2025-08-30 09:56:56 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.3976977Z 2025-08-30 09:56:56 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.3977155Z 2025-08-30 09:56:56 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.3977355Z 2025-08-30 09:56:56 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.3977541Z 2025-08-30 09:56:56 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.3977804Z 2025-08-30 09:56:56 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.3978052Z 2025-08-30 09:56:56 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.3978247Z 2025-08-30 09:56:56 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.3978355Z 2025-08-30 09:56:56 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.3978466Z 2025-08-30 09:56:56 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.3978584Z 2025-08-30 09:56:56 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.3978733Z 2025-08-30 09:56:56 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.3978891Z 2025-08-30 09:56:56 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.3979020Z 2025-08-30 09:56:56 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.3979162Z 2025-08-30 09:56:56 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.3979643Z 2025-08-30 09:56:56 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.3979831Z 2025-08-30 09:56:56 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.3979949Z 2025-08-30 09:56:56 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.3980062Z 2025-08-30 09:56:56 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.3980190Z 2025-08-30 09:56:56 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.3980354Z 2025-08-30 09:56:56 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.3980470Z 2025-08-30 09:56:56 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.3980596Z 2025-08-30 09:56:56 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.3980820Z 2025-08-30 09:56:56 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.3980939Z 2025-08-30 09:56:56 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.3981084Z 2025-08-30 09:56:56 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.3981237Z 2025-08-30 09:56:56 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.3981417Z 2025-08-30 09:56:56 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.3981566Z 2025-08-30 09:56:56 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.3981675Z 2025-08-30 09:56:56 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.3982038Z 2025-08-30 09:56:56 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3982323Z 2025-08-30 09:56:56 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.3982732Z 2025-08-30 09:56:56 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature0/freqaimodels'
2025-08-30T09:58:47.3983045Z 2025-08-30 09:56:56 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature0/freqaimodels" does not exist.
2025-08-30T09:58:47.3983651Z 2025-08-30 09:56:56 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.3984052Z 2025-08-30 09:56:56 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.3984555Z 2025-08-30 09:56:56 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.3984705Z 2025-08-30 09:56:56 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.3984868Z 2025-08-30 09:56:56 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.3985062Z 2025-08-30 09:56:56 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.3985368Z 2025-08-30 09:56:56 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.3985508Z 2025-08-30 09:56:56 INFO No params for buy found, using default values.
2025-08-30T09:58:47.3985650Z 2025-08-30 09:56:56 INFO No params for sell found, using default values.
2025-08-30T09:58:47.3985814Z 2025-08-30 09:56:56 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.3985965Z 2025-08-30 09:56:56 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.3986115Z 2025-08-30 09:56:56 INFO No params for protection found, using default values.
2025-08-30T09:58:47.3986229Z 2025-08-30 09:56:56 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.3986353Z 2025-08-30 09:56:56 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.3986433Z 2025-08-30 09:56:56 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.3986530Z 2025-08-30 09:56:56 INFO Using Exchange "Binance"
2025-08-30T09:58:47.3986659Z 2025-08-30 09:56:56 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.3986777Z 2025-08-30 09:56:56 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.3986933Z 2025-08-30 09:56:56 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3987144Z 2025-08-30 09:56:56 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.3987305Z 2025-08-30 09:56:56 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3987506Z 2025-08-30 09:56:56 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.3987665Z 2025-08-30 09:56:56 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3987813Z 2025-08-30 09:56:56 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.3988038Z ____________ test_get_pair_data_for_features_without_preloaded_data ____________
2025-08-30T09:58:47.3988044Z 
2025-08-30T09:58:47.3988210Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3988270Z key = 'date'
2025-08-30T09:58:47.3988275Z 
2025-08-30T09:58:47.3988347Z     def get_loc(self, key):
2025-08-30T09:58:47.3988411Z         """
2025-08-30T09:58:47.3988616Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3988675Z     
2025-08-30T09:58:47.3988739Z         Parameters
2025-08-30T09:58:47.3988805Z         ----------
2025-08-30T09:58:47.3988867Z         key : label
2025-08-30T09:58:47.3988921Z     
2025-08-30T09:58:47.3988985Z         Returns
2025-08-30T09:58:47.3989043Z         -------
2025-08-30T09:58:47.3989167Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3989222Z     
2025-08-30T09:58:47.3989286Z         Examples
2025-08-30T09:58:47.3989345Z         --------
2025-08-30T09:58:47.3989435Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3989517Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3989574Z         1
2025-08-30T09:58:47.3989633Z     
2025-08-30T09:58:47.3989726Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3989811Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3989925Z         slice(1, 3, None)
2025-08-30T09:58:47.3989979Z     
2025-08-30T09:58:47.3990085Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3990171Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3990252Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3990308Z         """
2025-08-30T09:58:47.3990403Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3990461Z         try:
2025-08-30T09:58:47.3990549Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3990623Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3990629Z 
2025-08-30T09:58:47.3990802Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.3990943Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3991113Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3991170Z     ???
2025-08-30T09:58:47.3991330Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.3991385Z     ???
2025-08-30T09:58:47.3991645Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.3991700Z     ???
2025-08-30T09:58:47.3991797Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3991802Z 
2025-08-30T09:58:47.3991860Z >   ???
2025-08-30T09:58:47.3991926Z E   KeyError: 'date'
2025-08-30T09:58:47.3991931Z 
2025-08-30T09:58:47.3992049Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.3992055Z 
2025-08-30T09:58:47.3992214Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.3992218Z 
2025-08-30T09:58:47.3992374Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64de788290>
2025-08-30T09:58:47.3993059Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.3993071Z 
2025-08-30T09:58:47.3993255Z     def test_get_pair_data_for_features_without_preloaded_data(mocker, freqai_conf):
2025-08-30T09:58:47.3993482Z         freqai_conf.update({"timerange": "20180115-20180130"})
2025-08-30T09:58:47.3993568Z         freqai_conf["runmode"] = "backtest"
2025-08-30T09:58:47.3993628Z     
2025-08-30T09:58:47.3993762Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.3993876Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.3994061Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.3994177Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.3994253Z         freqai = strategy.freqai
2025-08-30T09:58:47.3994351Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.3994483Z         timerange = TimeRange.parse_timerange("20180110-20180130")
2025-08-30T09:58:47.3994664Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.3994721Z     
2025-08-30T09:58:47.3994805Z         base_df = {"5m": pd.DataFrame()}
2025-08-30T09:58:47.3994893Z         df = freqai.dk.get_pair_data_for_features(
2025-08-30T09:58:47.3995005Z             "LTC/BTC", "5m", strategy, {}, base_dataframes=base_df
2025-08-30T09:58:47.3995064Z         )
2025-08-30T09:58:47.3995118Z     
2025-08-30T09:58:47.3995195Z         assert df is not base_df["5m"]
2025-08-30T09:58:47.3995268Z         assert not df.empty
2025-08-30T09:58:47.3995441Z >       assert df.iloc[0]["date"].strftime("%Y-%m-%d %H:%M:%S") == "2018-01-11 23:00:00"
2025-08-30T09:58:47.3995508Z                ^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3995516Z 
2025-08-30T09:58:47.3995618Z tests/freqai/test_freqai_datakitchen.py:181: 
2025-08-30T09:58:47.3995721Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3995971Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1130: in __getitem__
2025-08-30T09:58:47.3996047Z     return self._get_value(key)
2025-08-30T09:58:47.3996114Z            ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3996294Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1246: in _get_value
2025-08-30T09:58:47.3996375Z     loc = self.index.get_loc(label)
2025-08-30T09:58:47.3996442Z           ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.3996537Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.3996542Z 
2025-08-30T09:58:47.3996701Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.3996762Z key = 'date'
2025-08-30T09:58:47.3996771Z 
2025-08-30T09:58:47.3996896Z     def get_loc(self, key):
2025-08-30T09:58:47.3996954Z         """
2025-08-30T09:58:47.3997104Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.3997165Z     
2025-08-30T09:58:47.3997227Z         Parameters
2025-08-30T09:58:47.3997291Z         ----------
2025-08-30T09:58:47.3997355Z         key : label
2025-08-30T09:58:47.3997410Z     
2025-08-30T09:58:47.3997467Z         Returns
2025-08-30T09:58:47.3997525Z         -------
2025-08-30T09:58:47.3997650Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.3997704Z     
2025-08-30T09:58:47.3997762Z         Examples
2025-08-30T09:58:47.3997825Z         --------
2025-08-30T09:58:47.3997912Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.3997988Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.3998046Z         1
2025-08-30T09:58:47.3998103Z     
2025-08-30T09:58:47.3998196Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.3998276Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.3998348Z         slice(1, 3, None)
2025-08-30T09:58:47.3998402Z     
2025-08-30T09:58:47.3998502Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.3998587Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.3998672Z         array([False,  True, False,  True])
2025-08-30T09:58:47.3998729Z         """
2025-08-30T09:58:47.3998817Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.3998879Z         try:
2025-08-30T09:58:47.3998966Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.3999038Z         except KeyError as err:
2025-08-30T09:58:47.3999125Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.3999220Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.3999381Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.3999438Z             ):
2025-08-30T09:58:47.3999531Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.3999607Z >           raise KeyError(key) from err
2025-08-30T09:58:47.3999678Z E           KeyError: 'date'
2025-08-30T09:58:47.3999683Z 
2025-08-30T09:58:47.3999930Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4000072Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4000531Z 2025-08-30 09:56:56,533 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4001079Z 2025-08-30 09:56:56,535 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4001150Z 'nonexiting_module''
2025-08-30T09:58:47.4001690Z 2025-08-30 09:56:56,536 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4001876Z 2025-08-30 09:56:56,536 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4002357Z 2025-08-30 09:56:56,537 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4002679Z 2025-08-30 09:56:56,537 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4003006Z 2025-08-30 09:56:56,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4003489Z 2025-08-30 09:56:56,538 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4003984Z 2025-08-30 09:56:56,539 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4004408Z 2025-08-30 09:56:56,539 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4004745Z 2025-08-30 09:56:56,539 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4005084Z 2025-08-30 09:56:56,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4005318Z 2025-08-30 09:56:56,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4005551Z 2025-08-30 09:56:56,540 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4005805Z 2025-08-30 09:56:56,541 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4006112Z 2025-08-30 09:56:56,541 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4006411Z 2025-08-30 09:56:56,541 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4006679Z 2025-08-30 09:56:56,542 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4006961Z 2025-08-30 09:56:56,542 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4007414Z 2025-08-30 09:56:56,542 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4007560Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4007963Z 2025-08-30 09:56:56,543 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4008212Z 2025-08-30 09:56:56,543 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4008453Z 2025-08-30 09:56:56,543 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4008769Z 2025-08-30 09:56:56,543 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4009080Z 2025-08-30 09:56:56,544 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4009327Z 2025-08-30 09:56:56,544 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4009587Z 2025-08-30 09:56:56,544 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4009872Z 2025-08-30 09:56:56,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4010125Z 2025-08-30 09:56:56,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4010406Z 2025-08-30 09:56:56,545 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4010759Z 2025-08-30 09:56:56,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4011041Z 2025-08-30 09:56:56,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4011323Z 2025-08-30 09:56:56,546 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4011563Z 2025-08-30 09:56:56,547 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4012088Z 2025-08-30 09:56:56,547 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4012500Z 2025-08-30 09:56:56,547 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4013024Z 2025-08-30 09:56:56,548 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature1/freqaimodels'
2025-08-30T09:58:47.4013552Z 2025-08-30 09:56:56,548 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature1/freqaimodels" does not exist.
2025-08-30T09:58:47.4014078Z 2025-08-30 09:56:56,548 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4014521Z 2025-08-30 09:56:56,549 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4014796Z 2025-08-30 09:56:56,550 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.4015091Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4015359Z 2025-08-30 09:56:56,551 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.4015628Z 2025-08-30 09:56:56,551 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4015933Z 2025-08-30 09:56:56,552 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4016308Z 2025-08-30 09:56:56,552 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4016619Z 2025-08-30 09:56:56,553 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.4016849Z 2025-08-30 09:56:56,553 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.4017162Z 2025-08-30 09:56:56,554 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4017414Z 2025-08-30 09:56:56,554 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4017660Z 2025-08-30 09:56:56,554 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4017806Z 2025-08-30 09:56:56,558 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4018039Z 2025-08-30 09:56:56,558 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4018202Z 2025-08-30 09:56:56,559 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4018390Z 2025-08-30 09:56:56,560 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4018613Z 2025-08-30 09:56:56,560 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4018926Z 2025-08-30 09:56:56,561 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4019280Z 2025-08-30 09:56:56,567 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4019619Z 2025-08-30 09:56:56,581 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.4019976Z 2025-08-30 09:56:56,586 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4020369Z 2025-08-30 09:56:56,600 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.4020719Z 2025-08-30 09:56:56,604 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4021064Z 2025-08-30 09:56:56,623 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4021335Z 2025-08-30 09:56:56,637 - freqtrade.data.dataprovider - INFO - Increasing startup_candle_count for freqai on 5m to 876
2025-08-30T09:58:47.4021819Z 2025-08-30 09:56:56,638 - freqtrade.data.dataprovider - INFO - Loading data for LTC/BTC 5m from 2018-01-11 23:00:00 to 2018-01-30 00:00:00
2025-08-30T09:58:47.4021960Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4022284Z 2025-08-30 09:56:56 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4022781Z 2025-08-30 09:56:56 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4023197Z 2025-08-30 09:56:56 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4023298Z 2025-08-30 09:56:56 INFO Found no parameter file.
2025-08-30T09:58:47.4023788Z 2025-08-30 09:56:56 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4023972Z 2025-08-30 09:56:56 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4024152Z 2025-08-30 09:56:56 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4024350Z 2025-08-30 09:56:56 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4024754Z 2025-08-30 09:56:56 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4025019Z 2025-08-30 09:56:56 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4025212Z 2025-08-30 09:56:56 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4025463Z 2025-08-30 09:56:56 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4025572Z 2025-08-30 09:56:56 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4025680Z 2025-08-30 09:56:56 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4025804Z 2025-08-30 09:56:56 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4025952Z 2025-08-30 09:56:56 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4026108Z 2025-08-30 09:56:56 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4026255Z 2025-08-30 09:56:56 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4026465Z 2025-08-30 09:56:56 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4026940Z 2025-08-30 09:56:56 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4027201Z 2025-08-30 09:56:56 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4027317Z 2025-08-30 09:56:56 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4027427Z 2025-08-30 09:56:56 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4027559Z 2025-08-30 09:56:56 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4027724Z 2025-08-30 09:56:56 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4027840Z 2025-08-30 09:56:56 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4027967Z 2025-08-30 09:56:56 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4028169Z 2025-08-30 09:56:56 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4028289Z 2025-08-30 09:56:56 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4028428Z 2025-08-30 09:56:56 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4028588Z 2025-08-30 09:56:56 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4028732Z 2025-08-30 09:56:56 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4028872Z 2025-08-30 09:56:56 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4028986Z 2025-08-30 09:56:56 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4029350Z 2025-08-30 09:56:56 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4029630Z 2025-08-30 09:56:56 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4030041Z 2025-08-30 09:56:56 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature1/freqaimodels'
2025-08-30T09:58:47.4030345Z 2025-08-30 09:56:56 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_get_pair_data_for_feature1/freqaimodels" does not exist.
2025-08-30T09:58:47.4030744Z 2025-08-30 09:56:56 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4031057Z 2025-08-30 09:56:56 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4031558Z 2025-08-30 09:56:56 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4031703Z 2025-08-30 09:56:56 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.4031918Z 2025-08-30 09:56:56 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4032113Z 2025-08-30 09:56:56 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4032359Z 2025-08-30 09:56:56 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4032539Z 2025-08-30 09:56:56 INFO No params for buy found, using default values.
2025-08-30T09:58:47.4032677Z 2025-08-30 09:56:56 INFO No params for sell found, using default values.
2025-08-30T09:58:47.4032835Z 2025-08-30 09:56:56 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4032991Z 2025-08-30 09:56:56 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4033139Z 2025-08-30 09:56:56 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4033250Z 2025-08-30 09:56:56 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4033481Z 2025-08-30 09:56:56 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4033566Z 2025-08-30 09:56:56 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4033663Z 2025-08-30 09:56:56 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4033786Z 2025-08-30 09:56:56 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4033906Z 2025-08-30 09:56:56 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4034153Z 2025-08-30 09:56:56 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4034358Z 2025-08-30 09:56:56 DEBUG Missing data fillup for ADA/BTC, 5m: before: 5662 - after: 5702 - 0.71%
2025-08-30T09:58:47.4034521Z 2025-08-30 09:56:56 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4034734Z 2025-08-30 09:56:56 DEBUG Missing data fillup for DASH/BTC, 5m: before: 5700 - after: 5702 - 0.04%
2025-08-30T09:58:47.4034886Z 2025-08-30 09:56:56 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4035042Z 2025-08-30 09:56:56 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4035260Z 2025-08-30 09:56:56 INFO Increasing startup_candle_count for freqai on 5m to 876
2025-08-30T09:58:47.4035460Z 2025-08-30 09:56:56 INFO Loading data for LTC/BTC 5m from 2018-01-11 23:00:00 to 2018-01-30 00:00:00
2025-08-30T09:58:47.4035620Z ___________________ test_vectorized_vs_standard_performance ____________________
2025-08-30T09:58:47.4035627Z 
2025-08-30T09:58:47.4035779Z simple_strategy = <MagicMock spec='IStrategy' id='140073729927184'>
2025-08-30T09:58:47.4036357Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.4036362Z 
2025-08-30T09:58:47.4036437Z     @pytest.mark.slow
2025-08-30T09:58:47.4036615Z     def test_vectorized_vs_standard_performance(simple_strategy, default_conf):
2025-08-30T09:58:47.4036765Z         """Benchmark vectorized vs standard backtesting performance."""
2025-08-30T09:58:47.4036824Z     
2025-08-30T09:58:47.4036912Z         benchmark = BenchmarkResults()
2025-08-30T09:58:47.4036966Z     
2025-08-30T09:58:47.4037038Z         # Generate test data
2025-08-30T09:58:47.4037126Z         print("\nGenerating test data...")
2025-08-30T09:58:47.4037304Z         data = generate_test_data(num_pairs=10, num_candles=5000, trade_frequency=50)
2025-08-30T09:58:47.4037419Z         start_date = data[list(data.keys())[0]]['date'].iloc[0]
2025-08-30T09:58:47.4037531Z         end_date = data[list(data.keys())[0]]['date'].iloc[-1]
2025-08-30T09:58:47.4037585Z     
2025-08-30T09:58:47.4037658Z         # Configure backtesting
2025-08-30T09:58:47.4037741Z         config = default_conf.copy()
2025-08-30T09:58:47.4037811Z         config.update({
2025-08-30T09:58:47.4037882Z             'timeframe': '1h',
2025-08-30T09:58:47.4037950Z             'dry_run': True,
2025-08-30T09:58:47.4038031Z             'stake_currency': 'USDT',
2025-08-30T09:58:47.4038175Z             'position_stacking': False,
2025-08-30T09:58:47.4038262Z             'trading_mode': TradingMode.SPOT,
2025-08-30T09:58:47.4038342Z             'use_exit_signal': False,
2025-08-30T09:58:47.4038421Z             'enable_protections': False,
2025-08-30T09:58:47.4038490Z             'minimal_roi': {"0": 0.1},
2025-08-30T09:58:47.4038567Z             'stoploss': -0.05,
2025-08-30T09:58:47.4038679Z         })
2025-08-30T09:58:47.4038735Z     
2025-08-30T09:58:47.4038829Z         # Test 1: Standard backtesting (simulated)
2025-08-30T09:58:47.4038955Z         print("\nRunning standard backtesting simulation...")
2025-08-30T09:58:47.4039033Z         memory_before = measure_memory()
2025-08-30T09:58:47.4039109Z         start_time = time.time()
2025-08-30T09:58:47.4039168Z     
2025-08-30T09:58:47.4039286Z         # Simulate standard backtesting with realistic overhead
2025-08-30T09:58:47.4039356Z         trades_count = 0
2025-08-30T09:58:47.4039435Z         for pair, df in data.items():
2025-08-30T09:58:47.4039524Z             entries = df[df['enter_long']].index
2025-08-30T09:58:47.4039598Z             for entry_idx in entries:
2025-08-30T09:58:47.4039690Z                 # Simulate trade processing overhead
2025-08-30T09:58:47.4039865Z                 time.sleep(0.0001)  # 0.1ms per trade (realistic for loop-based processing)
2025-08-30T09:58:47.4039980Z                 trades_count += 1
2025-08-30T09:58:47.4040037Z     
2025-08-30T09:58:47.4040138Z         standard_duration = time.time() - start_time
2025-08-30T09:58:47.4040249Z         standard_memory = measure_memory() - memory_before
2025-08-30T09:58:47.4040491Z         benchmark.add_result("Standard Backtesting", standard_duration, trades_count, standard_memory)
2025-08-30T09:58:47.4040545Z     
2025-08-30T09:58:47.4040629Z         # Test 2: Vectorized backtesting
2025-08-30T09:58:47.4040724Z         print("Running vectorized backtesting...")
2025-08-30T09:58:47.4040801Z         memory_before = measure_memory()
2025-08-30T09:58:47.4040880Z         start_time = time.time()
2025-08-30T09:58:47.4040934Z     
2025-08-30T09:58:47.4041075Z         vectorized_bt = VectorizedBacktester(config)
2025-08-30T09:58:47.4041246Z         results = vectorized_bt.vectorized_backtest(data, start_date, end_date)
2025-08-30T09:58:47.4041305Z     
2025-08-30T09:58:47.4041406Z         vectorized_duration = time.time() - start_time
2025-08-30T09:58:47.4041527Z         vectorized_memory = measure_memory() - memory_before
2025-08-30T09:58:47.4041711Z         vectorized_trades = len(results) if isinstance(results, pd.DataFrame) else 0
2025-08-30T09:58:47.4041989Z         benchmark.add_result("Vectorized Backtesting", vectorized_duration, vectorized_trades, vectorized_memory)
2025-08-30T09:58:47.4042044Z     
2025-08-30T09:58:47.4042117Z         # Display results
2025-08-30T09:58:47.4042190Z >       benchmark.display()
2025-08-30T09:58:47.4042195Z 
2025-08-30T09:58:47.4042308Z tests/optimize/test_performance_benchmark.py:182: 
2025-08-30T09:58:47.4042415Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4042420Z 
2025-08-30T09:58:47.4042658Z self = <tests.optimize.test_performance_benchmark.BenchmarkResults object at 0x7f6584f94050>
2025-08-30T09:58:47.4042663Z 
2025-08-30T09:58:47.4042730Z     def display(self):
2025-08-30T09:58:47.4042805Z         if not self.results:
2025-08-30T09:58:47.4042865Z             return
2025-08-30T09:58:47.4042920Z     
2025-08-30T09:58:47.4042987Z         print("\n" + "="*80)
2025-08-30T09:58:47.4043092Z         print("PERFORMANCE BENCHMARK RESULTS")
2025-08-30T09:58:47.4043157Z         print("="*80)
2025-08-30T09:58:47.4043212Z     
2025-08-30T09:58:47.4043294Z         for result in self.results:
2025-08-30T09:58:47.4043545Z             print(f"\n{result['name']}:")
2025-08-30T09:58:47.4043703Z             print(f"  Duration: {result['duration']:.3f} seconds")
2025-08-30T09:58:47.4043806Z             print(f"  Trades: {result['trades_count']}")
2025-08-30T09:58:47.4043991Z             print(f"  Memory: {result['memory_mb']:.2f} MB")
2025-08-30T09:58:47.4044159Z             print(f"  Throughput: {result['trades_per_second']:.0f} trades/second")
2025-08-30T09:58:47.4044214Z     
2025-08-30T09:58:47.4044294Z         if len(self.results) >= 2:
2025-08-30T09:58:47.4044445Z             speedup = self.results[0]['duration'] / self.results[1]['duration']
2025-08-30T09:58:47.4044781Z >           memory_reduction = (self.results[0]['memory_mb'] - self.results[1]['memory_mb']) / self.results[0]['memory_mb'] * 100
2025-08-30T09:58:47.4044887Z                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4044989Z E           ZeroDivisionError: float division by zero
2025-08-30T09:58:47.4044994Z 
2025-08-30T09:58:47.4045162Z tests/optimize/test_performance_benchmark.py:49: ZeroDivisionError
2025-08-30T09:58:47.4045316Z ----------------------------- Captured stdout call -----------------------------
2025-08-30T09:58:47.4045331Z 
2025-08-30T09:58:47.4045414Z Generating test data...
2025-08-30T09:58:47.4045419Z 
2025-08-30T09:58:47.4045511Z Running standard backtesting simulation...
2025-08-30T09:58:47.4045596Z Running vectorized backtesting...
2025-08-30T09:58:47.4045601Z 
2025-08-30T09:58:47.4045682Z ================================================================================
2025-08-30T09:58:47.4045822Z PERFORMANCE BENCHMARK RESULTS
2025-08-30T09:58:47.4045904Z ================================================================================
2025-08-30T09:58:47.4045909Z 
2025-08-30T09:58:47.4045977Z Standard Backtesting:
2025-08-30T09:58:47.4046046Z   Duration: 0.164 seconds
2025-08-30T09:58:47.4046107Z   Trades: 1000
2025-08-30T09:58:47.4046173Z   Memory: 0.00 MB
2025-08-30T09:58:47.4046248Z   Throughput: 6093 trades/second
2025-08-30T09:58:47.4046252Z 
2025-08-30T09:58:47.4046327Z Vectorized Backtesting:
2025-08-30T09:58:47.4046400Z   Duration: 0.036 seconds
2025-08-30T09:58:47.4046462Z   Trades: 1000
2025-08-30T09:58:47.4046522Z   Memory: 0.00 MB
2025-08-30T09:58:47.4046599Z   Throughput: 28073 trades/second
2025-08-30T09:58:47.4046796Z _________________________ test_validate_backtest_data __________________________
2025-08-30T09:58:47.4046801Z 
2025-08-30T09:58:47.4046964Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4047028Z key = 'date'
2025-08-30T09:58:47.4047032Z 
2025-08-30T09:58:47.4047112Z     def get_loc(self, key):
2025-08-30T09:58:47.4047170Z         """
2025-08-30T09:58:47.4047323Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4047383Z     
2025-08-30T09:58:47.4047447Z         Parameters
2025-08-30T09:58:47.4047509Z         ----------
2025-08-30T09:58:47.4047572Z         key : label
2025-08-30T09:58:47.4047632Z     
2025-08-30T09:58:47.4047689Z         Returns
2025-08-30T09:58:47.4047749Z         -------
2025-08-30T09:58:47.4047880Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4047937Z     
2025-08-30T09:58:47.4047997Z         Examples
2025-08-30T09:58:47.4048057Z         --------
2025-08-30T09:58:47.4048155Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4048232Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4048290Z         1
2025-08-30T09:58:47.4048349Z     
2025-08-30T09:58:47.4048445Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4048525Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4048634Z         slice(1, 3, None)
2025-08-30T09:58:47.4048739Z     
2025-08-30T09:58:47.4048917Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4049060Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4049209Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4049312Z         """
2025-08-30T09:58:47.4049476Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4049582Z         try:
2025-08-30T09:58:47.4049826Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4049946Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4049952Z 
2025-08-30T09:58:47.4050141Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4050243Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4050476Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4050542Z     ???
2025-08-30T09:58:47.4050711Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4050767Z     ???
2025-08-30T09:58:47.4051033Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4051092Z     ???
2025-08-30T09:58:47.4051192Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4051197Z 
2025-08-30T09:58:47.4051259Z >   ???
2025-08-30T09:58:47.4051344Z E   KeyError: 'date'
2025-08-30T09:58:47.4051349Z 
2025-08-30T09:58:47.4051473Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4051478Z 
2025-08-30T09:58:47.4051638Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4051643Z 
2025-08-30T09:58:47.4052235Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.4052442Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da5d4fd0>
2025-08-30T09:58:47.4052599Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6584847990>
2025-08-30T09:58:47.4052798Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.4052803Z 
2025-08-30T09:58:47.4053008Z     def test_validate_backtest_data(default_conf, mocker, caplog, testdatadir) -> None:
2025-08-30T09:58:47.4053084Z         patch_exchange(mocker)
2025-08-30T09:58:47.4053145Z     
2025-08-30T09:58:47.4053275Z         default_conf.update({"strategy": CURRENT_TEST_STRATEGY})
2025-08-30T09:58:47.4053592Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.4053653Z     
2025-08-30T09:58:47.4053733Z         timerange = TimeRange()
2025-08-30T09:58:47.4053828Z >       data = strategy.advise_all_indicators(
2025-08-30T09:58:47.4054059Z             load_data(datadir=testdatadir, timeframe="5m", pairs=["UNITTEST/BTC"], timerange=timerange)
2025-08-30T09:58:47.4054122Z         )
2025-08-30T09:58:47.4054126Z 
2025-08-30T09:58:47.4054208Z tests/data/test_history.py:523: 
2025-08-30T09:58:47.4054305Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4054460Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.4054549Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.4054685Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.4054791Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.4054866Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4055056Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4055142Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4055216Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4055313Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4055318Z 
2025-08-30T09:58:47.4055477Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4055541Z key = 'date'
2025-08-30T09:58:47.4055546Z 
2025-08-30T09:58:47.4055618Z     def get_loc(self, key):
2025-08-30T09:58:47.4055674Z         """
2025-08-30T09:58:47.4055828Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4055881Z     
2025-08-30T09:58:47.4055943Z         Parameters
2025-08-30T09:58:47.4056070Z         ----------
2025-08-30T09:58:47.4056135Z         key : label
2025-08-30T09:58:47.4056190Z     
2025-08-30T09:58:47.4056246Z         Returns
2025-08-30T09:58:47.4056312Z         -------
2025-08-30T09:58:47.4056433Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4056488Z     
2025-08-30T09:58:47.4056549Z         Examples
2025-08-30T09:58:47.4056614Z         --------
2025-08-30T09:58:47.4056778Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4056859Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4056921Z         1
2025-08-30T09:58:47.4056976Z     
2025-08-30T09:58:47.4057070Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4057149Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4057220Z         slice(1, 3, None)
2025-08-30T09:58:47.4057274Z     
2025-08-30T09:58:47.4057374Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4057458Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4057540Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4057596Z         """
2025-08-30T09:58:47.4057688Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4057748Z         try:
2025-08-30T09:58:47.4057835Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4057971Z         except KeyError as err:
2025-08-30T09:58:47.4058064Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4058154Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4058264Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4058326Z             ):
2025-08-30T09:58:47.4058409Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4058485Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4058555Z E           KeyError: 'date'
2025-08-30T09:58:47.4058560Z 
2025-08-30T09:58:47.4058754Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4058896Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4059392Z 2025-08-30 09:57:01,367 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4059941Z 2025-08-30 09:57:01,368 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4060012Z 'nonexiting_module''
2025-08-30T09:58:47.4060550Z 2025-08-30 09:57:01,369 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4060740Z 2025-08-30 09:57:01,370 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4061174Z 2025-08-30 09:57:01,370 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4061501Z 2025-08-30 09:57:01,371 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4061830Z 2025-08-30 09:57:01,371 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4062171Z 2025-08-30 09:57:01,371 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4062512Z 2025-08-30 09:57:01,372 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4062932Z 2025-08-30 09:57:01,372 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4063263Z 2025-08-30 09:57:01,372 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4063882Z 2025-08-30 09:57:01,373 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4064119Z 2025-08-30 09:57:01,373 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4064429Z 2025-08-30 09:57:01,373 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4064689Z 2025-08-30 09:57:01,373 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4064983Z 2025-08-30 09:57:01,374 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4065279Z 2025-08-30 09:57:01,374 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4065551Z 2025-08-30 09:57:01,374 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4065829Z 2025-08-30 09:57:01,375 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4066282Z 2025-08-30 09:57:01,375 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4066694Z 2025-08-30 09:57:01,375 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4066946Z 2025-08-30 09:57:01,376 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4067184Z 2025-08-30 09:57:01,376 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4067451Z 2025-08-30 09:57:01,376 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4067817Z 2025-08-30 09:57:01,377 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4068067Z 2025-08-30 09:57:01,377 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4068332Z 2025-08-30 09:57:01,377 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4068614Z 2025-08-30 09:57:01,377 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4068864Z 2025-08-30 09:57:01,378 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4069147Z 2025-08-30 09:57:01,378 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4069439Z 2025-08-30 09:57:01,378 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4069726Z 2025-08-30 09:57:01,379 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4070011Z 2025-08-30 09:57:01,379 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4070255Z 2025-08-30 09:57:01,379 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4070397Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4070721Z 2025-08-30 09:57:01 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4071214Z 2025-08-30 09:57:01 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4071629Z 2025-08-30 09:57:01 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4071815Z 2025-08-30 09:57:01 INFO Found no parameter file.
2025-08-30T09:58:47.4072099Z 2025-08-30 09:57:01 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4072318Z 2025-08-30 09:57:01 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4072505Z 2025-08-30 09:57:01 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4072702Z 2025-08-30 09:57:01 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4073030Z 2025-08-30 09:57:01 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4073570Z 2025-08-30 09:57:01 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4073775Z 2025-08-30 09:57:01 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4074067Z 2025-08-30 09:57:01 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4074259Z 2025-08-30 09:57:01 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4074396Z 2025-08-30 09:57:01 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4074610Z 2025-08-30 09:57:01 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4074761Z 2025-08-30 09:57:01 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4074923Z 2025-08-30 09:57:01 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4075055Z 2025-08-30 09:57:01 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4075193Z 2025-08-30 09:57:01 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4075499Z 2025-08-30 09:57:01 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4075693Z 2025-08-30 09:57:01 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4075865Z 2025-08-30 09:57:01 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4075981Z 2025-08-30 09:57:01 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4076106Z 2025-08-30 09:57:01 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4076278Z 2025-08-30 09:57:01 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4076401Z 2025-08-30 09:57:01 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4076524Z 2025-08-30 09:57:01 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4076664Z 2025-08-30 09:57:01 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4076782Z 2025-08-30 09:57:01 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4076926Z 2025-08-30 09:57:01 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4077081Z 2025-08-30 09:57:01 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4077223Z 2025-08-30 09:57:01 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4077366Z 2025-08-30 09:57:01 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4077476Z 2025-08-30 09:57:01 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4077610Z ______________________________ test_get_timerange ______________________________
2025-08-30T09:58:47.4077615Z 
2025-08-30T09:58:47.4077779Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4077840Z key = 'date'
2025-08-30T09:58:47.4077845Z 
2025-08-30T09:58:47.4077918Z     def get_loc(self, key):
2025-08-30T09:58:47.4077978Z         """
2025-08-30T09:58:47.4078127Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4078182Z     
2025-08-30T09:58:47.4078244Z         Parameters
2025-08-30T09:58:47.4078378Z         ----------
2025-08-30T09:58:47.4078441Z         key : label
2025-08-30T09:58:47.4078497Z     
2025-08-30T09:58:47.4078559Z         Returns
2025-08-30T09:58:47.4078619Z         -------
2025-08-30T09:58:47.4078740Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4078795Z     
2025-08-30T09:58:47.4078861Z         Examples
2025-08-30T09:58:47.4078922Z         --------
2025-08-30T09:58:47.4079068Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4079153Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4079209Z         1
2025-08-30T09:58:47.4079264Z     
2025-08-30T09:58:47.4079357Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4079442Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4079508Z         slice(1, 3, None)
2025-08-30T09:58:47.4079562Z     
2025-08-30T09:58:47.4079668Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4079751Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4079834Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4079895Z         """
2025-08-30T09:58:47.4079991Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4080047Z         try:
2025-08-30T09:58:47.4080137Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4080215Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4080264Z 
2025-08-30T09:58:47.4080436Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4080537Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4080704Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4080762Z     ???
2025-08-30T09:58:47.4080920Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4080980Z     ???
2025-08-30T09:58:47.4081243Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4081304Z     ???
2025-08-30T09:58:47.4081402Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4081452Z 
2025-08-30T09:58:47.4081510Z >   ???
2025-08-30T09:58:47.4081576Z E   KeyError: 'date'
2025-08-30T09:58:47.4081581Z 
2025-08-30T09:58:47.4081698Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4081705Z 
2025-08-30T09:58:47.4081865Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4081870Z 
2025-08-30T09:58:47.4082451Z default_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), 'dataformat_ohlcv': 'feather', ...}
2025-08-30T09:58:47.4082608Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da645210>
2025-08-30T09:58:47.4082811Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.4082817Z 
2025-08-30T09:58:47.4082970Z     def test_get_timerange(default_conf, mocker, testdatadir) -> None:
2025-08-30T09:58:47.4083044Z         patch_exchange(mocker)
2025-08-30T09:58:47.4083104Z     
2025-08-30T09:58:47.4090621Z         default_conf.update({"strategy": CURRENT_TEST_STRATEGY})
2025-08-30T09:58:47.4090805Z         strategy = StrategyResolver.load_strategy(default_conf)
2025-08-30T09:58:47.4090871Z     
2025-08-30T09:58:47.4090979Z >       data = strategy.advise_all_indicators(
2025-08-30T09:58:47.4091166Z             load_data(datadir=testdatadir, timeframe="1m", pairs=["UNITTEST/BTC"])
2025-08-30T09:58:47.4091225Z         )
2025-08-30T09:58:47.4091231Z 
2025-08-30T09:58:47.4091318Z tests/data/test_history.py:485: 
2025-08-30T09:58:47.4091430Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4091586Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.4091678Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.4091955Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.4092068Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.4092143Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4092340Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4092435Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4092569Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4092674Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4092679Z 
2025-08-30T09:58:47.4092849Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4092913Z key = 'date'
2025-08-30T09:58:47.4092918Z 
2025-08-30T09:58:47.4092992Z     def get_loc(self, key):
2025-08-30T09:58:47.4093055Z         """
2025-08-30T09:58:47.4093209Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4093268Z     
2025-08-30T09:58:47.4093332Z         Parameters
2025-08-30T09:58:47.4093549Z         ----------
2025-08-30T09:58:47.4093613Z         key : label
2025-08-30T09:58:47.4093671Z     
2025-08-30T09:58:47.4093734Z         Returns
2025-08-30T09:58:47.4093797Z         -------
2025-08-30T09:58:47.4093926Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4094059Z     
2025-08-30T09:58:47.4094129Z         Examples
2025-08-30T09:58:47.4094193Z         --------
2025-08-30T09:58:47.4094286Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4094368Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4094425Z         1
2025-08-30T09:58:47.4094481Z     
2025-08-30T09:58:47.4094576Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4094662Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4094763Z         slice(1, 3, None)
2025-08-30T09:58:47.4094868Z     
2025-08-30T09:58:47.4095058Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4095219Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4095369Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4095515Z         """
2025-08-30T09:58:47.4095618Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4095679Z         try:
2025-08-30T09:58:47.4095772Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4095850Z         except KeyError as err:
2025-08-30T09:58:47.4095937Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4096026Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4096142Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4096198Z             ):
2025-08-30T09:58:47.4096283Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4096359Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4096434Z E           KeyError: 'date'
2025-08-30T09:58:47.4096439Z 
2025-08-30T09:58:47.4096636Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4096781Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4097244Z 2025-08-30 09:57:01,789 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4097790Z 2025-08-30 09:57:01,790 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4097884Z 'nonexiting_module''
2025-08-30T09:58:47.4098688Z 2025-08-30 09:57:01,791 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4098881Z 2025-08-30 09:57:01,792 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4099400Z 2025-08-30 09:57:01,792 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4099730Z 2025-08-30 09:57:01,792 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4100105Z 2025-08-30 09:57:01,793 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4100445Z 2025-08-30 09:57:01,793 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4100782Z 2025-08-30 09:57:01,793 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4101187Z 2025-08-30 09:57:01,794 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4101519Z 2025-08-30 09:57:01,794 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4101874Z 2025-08-30 09:57:01,794 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4102162Z 2025-08-30 09:57:01,795 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4102400Z 2025-08-30 09:57:01,795 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4102656Z 2025-08-30 09:57:01,795 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4102949Z 2025-08-30 09:57:01,796 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4103244Z 2025-08-30 09:57:01,796 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4103827Z 2025-08-30 09:57:01,796 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4104155Z 2025-08-30 09:57:01,797 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4104615Z 2025-08-30 09:57:01,797 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4104951Z 2025-08-30 09:57:01,797 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4105197Z 2025-08-30 09:57:01,797 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4105442Z 2025-08-30 09:57:01,798 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4105702Z 2025-08-30 09:57:01,798 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4106013Z 2025-08-30 09:57:01,798 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4106277Z 2025-08-30 09:57:01,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4106537Z 2025-08-30 09:57:01,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4106817Z 2025-08-30 09:57:01,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4107080Z 2025-08-30 09:57:01,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4107360Z 2025-08-30 09:57:01,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4107715Z 2025-08-30 09:57:01,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4108008Z 2025-08-30 09:57:01,801 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4108286Z 2025-08-30 09:57:01,801 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4108583Z 2025-08-30 09:57:01,801 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4108950Z 2025-08-30 09:57:01,817 - freqtrade.data.converter.converter - INFO - Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4109096Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4109417Z 2025-08-30 09:57:01 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4109918Z 2025-08-30 09:57:01 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4110334Z 2025-08-30 09:57:01 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4110494Z 2025-08-30 09:57:01 INFO Found no parameter file.
2025-08-30T09:58:47.4110782Z 2025-08-30 09:57:01 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4110958Z 2025-08-30 09:57:01 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4111135Z 2025-08-30 09:57:01 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4111329Z 2025-08-30 09:57:01 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4111525Z 2025-08-30 09:57:01 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4111824Z 2025-08-30 09:57:01 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4112016Z 2025-08-30 09:57:01 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4112220Z 2025-08-30 09:57:01 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4112327Z 2025-08-30 09:57:01 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4112435Z 2025-08-30 09:57:01 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4112559Z 2025-08-30 09:57:01 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4112710Z 2025-08-30 09:57:01 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4112868Z 2025-08-30 09:57:01 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4113003Z 2025-08-30 09:57:01 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4113142Z 2025-08-30 09:57:01 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4113554Z 2025-08-30 09:57:01 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4113754Z 2025-08-30 09:57:01 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4113875Z 2025-08-30 09:57:01 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4113984Z 2025-08-30 09:57:01 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4114112Z 2025-08-30 09:57:01 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4114279Z 2025-08-30 09:57:01 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4114396Z 2025-08-30 09:57:01 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4114516Z 2025-08-30 09:57:01 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4114664Z 2025-08-30 09:57:01 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4114854Z 2025-08-30 09:57:01 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4114995Z 2025-08-30 09:57:01 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4115151Z 2025-08-30 09:57:01 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4115297Z 2025-08-30 09:57:01 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4115488Z 2025-08-30 09:57:01 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4115604Z 2025-08-30 09:57:01 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4115826Z 2025-08-30 09:57:01 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4115962Z __________________________ test_update_historic_data ___________________________
2025-08-30T09:58:47.4115968Z 
2025-08-30T09:58:47.4116127Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4116191Z key = 'date'
2025-08-30T09:58:47.4116195Z 
2025-08-30T09:58:47.4116269Z     def get_loc(self, key):
2025-08-30T09:58:47.4116333Z         """
2025-08-30T09:58:47.4116489Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4116546Z     
2025-08-30T09:58:47.4116611Z         Parameters
2025-08-30T09:58:47.4116741Z         ----------
2025-08-30T09:58:47.4116803Z         key : label
2025-08-30T09:58:47.4116860Z     
2025-08-30T09:58:47.4116925Z         Returns
2025-08-30T09:58:47.4116984Z         -------
2025-08-30T09:58:47.4117108Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4117163Z     
2025-08-30T09:58:47.4117230Z         Examples
2025-08-30T09:58:47.4117291Z         --------
2025-08-30T09:58:47.4117381Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4117465Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4117523Z         1
2025-08-30T09:58:47.4117576Z     
2025-08-30T09:58:47.4117676Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4117764Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4117911Z         slice(1, 3, None)
2025-08-30T09:58:47.4117970Z     
2025-08-30T09:58:47.4118081Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4118165Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4118252Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4118311Z         """
2025-08-30T09:58:47.4118408Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4118467Z         try:
2025-08-30T09:58:47.4118558Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4118634Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4118639Z 
2025-08-30T09:58:47.4118818Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4118921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4119131Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4119242Z     ???
2025-08-30T09:58:47.4119543Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4119657Z     ???
2025-08-30T09:58:47.4119928Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4119992Z     ???
2025-08-30T09:58:47.4120092Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4120098Z 
2025-08-30T09:58:47.4120159Z >   ???
2025-08-30T09:58:47.4120227Z E   KeyError: 'date'
2025-08-30T09:58:47.4120232Z 
2025-08-30T09:58:47.4120353Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4120358Z 
2025-08-30T09:58:47.4120520Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4120524Z 
2025-08-30T09:58:47.4120679Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da222f50>
2025-08-30T09:58:47.4121431Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.4121442Z 
2025-08-30T09:58:47.4121555Z     def test_update_historic_data(mocker, freqai_conf):
2025-08-30T09:58:47.4121687Z         freqai_conf["runmode"] = "backtest"
2025-08-30T09:58:47.4121940Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.4122155Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.4122328Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.4122409Z         freqai = strategy.freqai
2025-08-30T09:58:47.4122488Z         freqai.live = True
2025-08-30T09:58:47.4122586Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.4122659Z         freqai.dk.live = True
2025-08-30T09:58:47.4122800Z         timerange = TimeRange.parse_timerange("20180110-20180114")
2025-08-30T09:58:47.4122855Z     
2025-08-30T09:58:47.4122987Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.4123136Z         historic_candles = len(freqai.dd.historic_data["ADA/BTC"]["5m"])
2025-08-30T09:58:47.4123285Z         dp_candles = len(strategy.dp.get_pair_dataframe("ADA/BTC", "5m"))
2025-08-30T09:58:47.4123674Z         candle_difference = dp_candles - historic_candles
2025-08-30T09:58:47.4123758Z         freqai.dk.pair = "ADA/BTC"
2025-08-30T09:58:47.4123884Z >       freqai.dd.update_historic_data(strategy, freqai.dk)
2025-08-30T09:58:47.4123889Z 
2025-08-30T09:58:47.4123986Z tests/freqai/test_freqai_datadrawer.py:32: 
2025-08-30T09:58:47.4124087Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4124238Z freqtrade/freqai/data_drawer.py:650: in update_historic_data
2025-08-30T09:58:47.4124389Z     if str(hist_df.iloc[-1]["date"]) == str(df_dp.iloc[-1:]["date"].iloc[-1]):
2025-08-30T09:58:47.4124460Z            ^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4124735Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1130: in __getitem__
2025-08-30T09:58:47.4124815Z     return self._get_value(key)
2025-08-30T09:58:47.4124879Z            ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4125063Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1246: in _get_value
2025-08-30T09:58:47.4125148Z     loc = self.index.get_loc(label)
2025-08-30T09:58:47.4125212Z           ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4125310Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4125315Z 
2025-08-30T09:58:47.4125484Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4125545Z key = 'date'
2025-08-30T09:58:47.4125550Z 
2025-08-30T09:58:47.4125620Z     def get_loc(self, key):
2025-08-30T09:58:47.4125681Z         """
2025-08-30T09:58:47.4125833Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4125888Z     
2025-08-30T09:58:47.4125954Z         Parameters
2025-08-30T09:58:47.4126018Z         ----------
2025-08-30T09:58:47.4126080Z         key : label
2025-08-30T09:58:47.4126134Z     
2025-08-30T09:58:47.4126196Z         Returns
2025-08-30T09:58:47.4126254Z         -------
2025-08-30T09:58:47.4126381Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4126473Z     
2025-08-30T09:58:47.4126535Z         Examples
2025-08-30T09:58:47.4126597Z         --------
2025-08-30T09:58:47.4126686Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4126770Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4126829Z         1
2025-08-30T09:58:47.4126884Z     
2025-08-30T09:58:47.4126982Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4127060Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4127128Z         slice(1, 3, None)
2025-08-30T09:58:47.4127252Z     
2025-08-30T09:58:47.4127359Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4127445Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4127526Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4127587Z         """
2025-08-30T09:58:47.4127677Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4127737Z         try:
2025-08-30T09:58:47.4127880Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4127961Z         except KeyError as err:
2025-08-30T09:58:47.4128049Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4128138Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4128253Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4128310Z             ):
2025-08-30T09:58:47.4128395Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4128475Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4128548Z E           KeyError: 'date'
2025-08-30T09:58:47.4128553Z 
2025-08-30T09:58:47.4128744Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4128891Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4129351Z 2025-08-30 09:57:07,055 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4129955Z 2025-08-30 09:57:07,056 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4130032Z 'nonexiting_module''
2025-08-30T09:58:47.4130570Z 2025-08-30 09:57:07,057 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4130753Z 2025-08-30 09:57:07,058 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4131227Z 2025-08-30 09:57:07,058 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4131552Z 2025-08-30 09:57:07,058 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4131877Z 2025-08-30 09:57:07,059 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4132219Z 2025-08-30 09:57:07,059 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4132551Z 2025-08-30 09:57:07,059 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4132957Z 2025-08-30 09:57:07,060 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4133296Z 2025-08-30 09:57:07,060 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4133746Z 2025-08-30 09:57:07,060 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4133985Z 2025-08-30 09:57:07,061 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4134223Z 2025-08-30 09:57:07,061 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4134474Z 2025-08-30 09:57:07,061 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4134766Z 2025-08-30 09:57:07,062 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4135135Z 2025-08-30 09:57:07,062 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4135412Z 2025-08-30 09:57:07,062 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4135691Z 2025-08-30 09:57:07,063 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4136202Z 2025-08-30 09:57:07,063 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4136347Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4136682Z 2025-08-30 09:57:07,063 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4136932Z 2025-08-30 09:57:07,064 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4137176Z 2025-08-30 09:57:07,064 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4137436Z 2025-08-30 09:57:07,064 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4137748Z 2025-08-30 09:57:07,064 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4138053Z 2025-08-30 09:57:07,065 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4138306Z 2025-08-30 09:57:07,065 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4138595Z 2025-08-30 09:57:07,065 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4138847Z 2025-08-30 09:57:07,066 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4139175Z 2025-08-30 09:57:07,066 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4139474Z 2025-08-30 09:57:07,066 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4139759Z 2025-08-30 09:57:07,067 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4140037Z 2025-08-30 09:57:07,067 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4140281Z 2025-08-30 09:57:07,067 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4140765Z 2025-08-30 09:57:07,068 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4141171Z 2025-08-30 09:57:07,068 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4141681Z 2025-08-30 09:57:07,070 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_update_historic_data0/freqaimodels'
2025-08-30T09:58:47.4142095Z 2025-08-30 09:57:07,070 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_update_historic_data0/freqaimodels" does not exist.
2025-08-30T09:58:47.4142608Z 2025-08-30 09:57:07,070 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4143039Z 2025-08-30 09:57:07,071 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4143311Z 2025-08-30 09:57:07,072 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.4143879Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4144165Z 2025-08-30 09:57:07,073 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.4144504Z 2025-08-30 09:57:07,073 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4144814Z 2025-08-30 09:57:07,074 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4145192Z 2025-08-30 09:57:07,074 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4145423Z 2025-08-30 09:57:07,075 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.4145655Z 2025-08-30 09:57:07,075 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.4145913Z 2025-08-30 09:57:07,075 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4146153Z 2025-08-30 09:57:07,076 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4146480Z 2025-08-30 09:57:07,076 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4146631Z 2025-08-30 09:57:07,079 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4146861Z 2025-08-30 09:57:07,080 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4147023Z 2025-08-30 09:57:07,080 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4147212Z 2025-08-30 09:57:07,081 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4147438Z 2025-08-30 09:57:07,081 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4147761Z 2025-08-30 09:57:07,083 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4148122Z 2025-08-30 09:57:07,088 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4148477Z 2025-08-30 09:57:07,103 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4148823Z 2025-08-30 09:57:07,117 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4149176Z 2025-08-30 09:57:07,132 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4149451Z 2025-08-30 09:57:07,142 - freqtrade.data.dataprovider - INFO - Increasing startup_candle_count for freqai on 5m to 876
2025-08-30T09:58:47.4149764Z 2025-08-30 09:57:07,142 - freqtrade.data.dataprovider - INFO - Loading data for ADA/BTC 5m from 2018-01-06 23:00:00 to 2018-01-15 00:00:00
2025-08-30T09:58:47.4150110Z 2025-08-30 09:57:07,146 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4150255Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4150575Z 2025-08-30 09:57:07 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4151073Z 2025-08-30 09:57:07 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4151488Z 2025-08-30 09:57:07 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4151649Z 2025-08-30 09:57:07 INFO Found no parameter file.
2025-08-30T09:58:47.4151937Z 2025-08-30 09:57:07 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4152112Z 2025-08-30 09:57:07 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4152330Z 2025-08-30 09:57:07 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4152529Z 2025-08-30 09:57:07 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4152721Z 2025-08-30 09:57:07 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4152985Z 2025-08-30 09:57:07 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4153171Z 2025-08-30 09:57:07 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4153473Z 2025-08-30 09:57:07 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4153588Z 2025-08-30 09:57:07 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4153695Z 2025-08-30 09:57:07 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4153812Z 2025-08-30 09:57:07 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4154034Z 2025-08-30 09:57:07 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4154188Z 2025-08-30 09:57:07 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4154317Z 2025-08-30 09:57:07 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4154456Z 2025-08-30 09:57:07 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4154939Z 2025-08-30 09:57:07 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4155132Z 2025-08-30 09:57:07 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4155302Z 2025-08-30 09:57:07 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4155418Z 2025-08-30 09:57:07 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4155545Z 2025-08-30 09:57:07 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4155714Z 2025-08-30 09:57:07 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4155836Z 2025-08-30 09:57:07 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4155957Z 2025-08-30 09:57:07 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4156101Z 2025-08-30 09:57:07 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4156220Z 2025-08-30 09:57:07 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4156357Z 2025-08-30 09:57:07 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4156509Z 2025-08-30 09:57:07 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4156656Z 2025-08-30 09:57:07 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4156798Z 2025-08-30 09:57:07 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4156908Z 2025-08-30 09:57:07 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4157268Z 2025-08-30 09:57:07 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4157555Z 2025-08-30 09:57:07 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4157947Z 2025-08-30 09:57:07 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_update_historic_data0/freqaimodels'
2025-08-30T09:58:47.4158246Z 2025-08-30 09:57:07 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_update_historic_data0/freqaimodels" does not exist.
2025-08-30T09:58:47.4158644Z 2025-08-30 09:57:07 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4159019Z 2025-08-30 09:57:07 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4159581Z 2025-08-30 09:57:07 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4159736Z 2025-08-30 09:57:07 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.4159902Z 2025-08-30 09:57:07 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4160100Z 2025-08-30 09:57:07 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4160349Z 2025-08-30 09:57:07 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4160488Z 2025-08-30 09:57:07 INFO No params for buy found, using default values.
2025-08-30T09:58:47.4160628Z 2025-08-30 09:57:07 INFO No params for sell found, using default values.
2025-08-30T09:58:47.4160824Z 2025-08-30 09:57:07 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4161102Z 2025-08-30 09:57:07 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4161409Z 2025-08-30 09:57:07 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4161528Z 2025-08-30 09:57:07 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4161655Z 2025-08-30 09:57:07 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4161735Z 2025-08-30 09:57:07 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4161833Z 2025-08-30 09:57:07 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4161956Z 2025-08-30 09:57:07 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4162071Z 2025-08-30 09:57:07 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4162234Z 2025-08-30 09:57:07 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4162443Z 2025-08-30 09:57:07 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4162598Z 2025-08-30 09:57:07 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4162747Z 2025-08-30 09:57:07 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4162917Z 2025-08-30 09:57:07 INFO Increasing startup_candle_count for freqai on 5m to 876
2025-08-30T09:58:47.4163119Z 2025-08-30 09:57:07 INFO Loading data for ADA/BTC 5m from 2018-01-06 23:00:00 to 2018-01-15 00:00:00
2025-08-30T09:58:47.4163269Z 2025-08-30 09:57:07 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4163626Z ______________________ test_get_base_and_corr_dataframes _______________________
2025-08-30T09:58:47.4163635Z 
2025-08-30T09:58:47.4163802Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4163869Z key = 'date'
2025-08-30T09:58:47.4163874Z 
2025-08-30T09:58:47.4163952Z     def get_loc(self, key):
2025-08-30T09:58:47.4164010Z         """
2025-08-30T09:58:47.4164167Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4164227Z     
2025-08-30T09:58:47.4164293Z         Parameters
2025-08-30T09:58:47.4164358Z         ----------
2025-08-30T09:58:47.4164418Z         key : label
2025-08-30T09:58:47.4164479Z     
2025-08-30T09:58:47.4164536Z         Returns
2025-08-30T09:58:47.4164595Z         -------
2025-08-30T09:58:47.4164725Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4164780Z     
2025-08-30T09:58:47.4164840Z         Examples
2025-08-30T09:58:47.4164898Z         --------
2025-08-30T09:58:47.4164995Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4165072Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4165129Z         1
2025-08-30T09:58:47.4165188Z     
2025-08-30T09:58:47.4165370Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4165449Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4165520Z         slice(1, 3, None)
2025-08-30T09:58:47.4165577Z     
2025-08-30T09:58:47.4165678Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4165760Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4165848Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4165959Z         """
2025-08-30T09:58:47.4166054Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4166116Z         try:
2025-08-30T09:58:47.4166207Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4166277Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4166282Z 
2025-08-30T09:58:47.4166455Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4166563Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4166731Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4166789Z     ???
2025-08-30T09:58:47.4166951Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4167008Z     ???
2025-08-30T09:58:47.4167269Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4167388Z     ???
2025-08-30T09:58:47.4167488Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4167493Z 
2025-08-30T09:58:47.4167548Z >   ???
2025-08-30T09:58:47.4167620Z E   KeyError: 'date'
2025-08-30T09:58:47.4167625Z 
2025-08-30T09:58:47.4167744Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4167749Z 
2025-08-30T09:58:47.4167903Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4167907Z 
2025-08-30T09:58:47.4168062Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65943f6e90>
2025-08-30T09:58:47.4168805Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.4168811Z 
2025-08-30T09:58:47.4168963Z     def test_get_base_and_corr_dataframes(mocker, freqai_conf):
2025-08-30T09:58:47.4169124Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.4169238Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.4169349Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.4169429Z         freqai = strategy.freqai
2025-08-30T09:58:47.4169499Z         freqai.live = True
2025-08-30T09:58:47.4169594Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.4169666Z         freqai.dk.live = True
2025-08-30T09:58:47.4169801Z         timerange = TimeRange.parse_timerange("20180110-20180114")
2025-08-30T09:58:47.4169928Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.4170068Z         sub_timerange = TimeRange.parse_timerange("20180111-20180114")
2025-08-30T09:58:47.4170287Z >       corr_df, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.4170375Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4170382Z 
2025-08-30T09:58:47.4170476Z tests/freqai/test_freqai_datadrawer.py:71: 
2025-08-30T09:58:47.4170582Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4170746Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.4170837Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.4170967Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.4171065Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.4171174Z                 ^^^^^^^^^^
2025-08-30T09:58:47.4171360Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4171449Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4171514Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4171610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4171616Z 
2025-08-30T09:58:47.4171836Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4171899Z key = 'date'
2025-08-30T09:58:47.4171903Z 
2025-08-30T09:58:47.4171974Z     def get_loc(self, key):
2025-08-30T09:58:47.4172034Z         """
2025-08-30T09:58:47.4172181Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4172237Z     
2025-08-30T09:58:47.4172303Z         Parameters
2025-08-30T09:58:47.4172367Z         ----------
2025-08-30T09:58:47.4172428Z         key : label
2025-08-30T09:58:47.4172486Z     
2025-08-30T09:58:47.4172549Z         Returns
2025-08-30T09:58:47.4172608Z         -------
2025-08-30T09:58:47.4172730Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4172784Z     
2025-08-30T09:58:47.4172847Z         Examples
2025-08-30T09:58:47.4172907Z         --------
2025-08-30T09:58:47.4172995Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4173123Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4173180Z         1
2025-08-30T09:58:47.4173234Z     
2025-08-30T09:58:47.4173334Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4173514Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4173582Z         slice(1, 3, None)
2025-08-30T09:58:47.4173635Z     
2025-08-30T09:58:47.4173736Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4173817Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4173897Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4173959Z         """
2025-08-30T09:58:47.4174050Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4174107Z         try:
2025-08-30T09:58:47.4174259Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4174340Z         except KeyError as err:
2025-08-30T09:58:47.4174427Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4174518Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4174633Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4174691Z             ):
2025-08-30T09:58:47.4174772Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4174848Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4174923Z E           KeyError: 'date'
2025-08-30T09:58:47.4174928Z 
2025-08-30T09:58:47.4175114Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4175253Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4175716Z 2025-08-30 09:57:07,360 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4176256Z 2025-08-30 09:57:07,362 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4176328Z 'nonexiting_module''
2025-08-30T09:58:47.4176874Z 2025-08-30 09:57:07,363 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4177054Z 2025-08-30 09:57:07,363 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4177483Z 2025-08-30 09:57:07,364 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4177873Z 2025-08-30 09:57:07,364 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4178194Z 2025-08-30 09:57:07,364 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4178587Z 2025-08-30 09:57:07,365 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4178924Z 2025-08-30 09:57:07,365 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4179332Z 2025-08-30 09:57:07,365 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4179665Z 2025-08-30 09:57:07,366 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4180005Z 2025-08-30 09:57:07,366 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4180234Z 2025-08-30 09:57:07,366 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4180467Z 2025-08-30 09:57:07,367 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4180775Z 2025-08-30 09:57:07,367 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4181061Z 2025-08-30 09:57:07,367 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4181357Z 2025-08-30 09:57:07,368 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4181620Z 2025-08-30 09:57:07,368 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4181898Z 2025-08-30 09:57:07,368 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4182390Z 2025-08-30 09:57:07,368 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4182540Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4182875Z 2025-08-30 09:57:07,369 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4183123Z 2025-08-30 09:57:07,369 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4183524Z 2025-08-30 09:57:07,369 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4183835Z 2025-08-30 09:57:07,370 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4184157Z 2025-08-30 09:57:07,370 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4184407Z 2025-08-30 09:57:07,370 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4184668Z 2025-08-30 09:57:07,371 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4184954Z 2025-08-30 09:57:07,371 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4185205Z 2025-08-30 09:57:07,371 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4185482Z 2025-08-30 09:57:07,372 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4185778Z 2025-08-30 09:57:07,372 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4186138Z 2025-08-30 09:57:07,372 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4186418Z 2025-08-30 09:57:07,372 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4186720Z 2025-08-30 09:57:07,373 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4187206Z 2025-08-30 09:57:07,373 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4187610Z 2025-08-30 09:57:07,374 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4188133Z 2025-08-30 09:57:07,374 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_base_and_corr_datafra0/freqaimodels'
2025-08-30T09:58:47.4188564Z 2025-08-30 09:57:07,374 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_get_base_and_corr_datafra0/freqaimodels" does not exist.
2025-08-30T09:58:47.4189078Z 2025-08-30 09:57:07,375 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4189571Z 2025-08-30 09:57:07,375 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4189840Z 2025-08-30 09:57:07,377 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.4190134Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4190408Z 2025-08-30 09:57:07,377 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.4190727Z 2025-08-30 09:57:07,378 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4191030Z 2025-08-30 09:57:07,378 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4191412Z 2025-08-30 09:57:07,378 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4191642Z 2025-08-30 09:57:07,379 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.4191872Z 2025-08-30 09:57:07,379 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.4192128Z 2025-08-30 09:57:07,380 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4192371Z 2025-08-30 09:57:07,380 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4192613Z 2025-08-30 09:57:07,380 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4192761Z 2025-08-30 09:57:07,384 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4192992Z 2025-08-30 09:57:07,385 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4193154Z 2025-08-30 09:57:07,385 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4193447Z 2025-08-30 09:57:07,386 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4193676Z 2025-08-30 09:57:07,386 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4193925Z 2025-08-30 09:57:07,387 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4194279Z 2025-08-30 09:57:07,393 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4194699Z 2025-08-30 09:57:07,407 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4195095Z 2025-08-30 09:57:07,421 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4195446Z 2025-08-30 09:57:07,435 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4195586Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4195907Z 2025-08-30 09:57:07 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4196400Z 2025-08-30 09:57:07 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4196819Z 2025-08-30 09:57:07 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4196917Z 2025-08-30 09:57:07 INFO Found no parameter file.
2025-08-30T09:58:47.4197260Z 2025-08-30 09:57:07 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4197437Z 2025-08-30 09:57:07 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4197615Z 2025-08-30 09:57:07 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4197811Z 2025-08-30 09:57:07 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4197997Z 2025-08-30 09:57:07 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4198258Z 2025-08-30 09:57:07 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4198501Z 2025-08-30 09:57:07 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4198697Z 2025-08-30 09:57:07 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4198805Z 2025-08-30 09:57:07 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4198916Z 2025-08-30 09:57:07 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4199035Z 2025-08-30 09:57:07 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4199186Z 2025-08-30 09:57:07 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4199346Z 2025-08-30 09:57:07 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4199474Z 2025-08-30 09:57:07 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4199613Z 2025-08-30 09:57:07 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4200091Z 2025-08-30 09:57:07 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4200285Z 2025-08-30 09:57:07 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4200402Z 2025-08-30 09:57:07 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4200512Z 2025-08-30 09:57:07 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4200642Z 2025-08-30 09:57:07 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4200810Z 2025-08-30 09:57:07 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4200927Z 2025-08-30 09:57:07 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4201055Z 2025-08-30 09:57:07 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4201199Z 2025-08-30 09:57:07 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4201384Z 2025-08-30 09:57:07 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4201528Z 2025-08-30 09:57:07 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4201681Z 2025-08-30 09:57:07 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4201822Z 2025-08-30 09:57:07 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4202008Z 2025-08-30 09:57:07 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4202121Z 2025-08-30 09:57:07 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4202483Z 2025-08-30 09:57:07 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4202769Z 2025-08-30 09:57:07 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4203168Z 2025-08-30 09:57:07 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_base_and_corr_datafra0/freqaimodels'
2025-08-30T09:58:47.4203671Z 2025-08-30 09:57:07 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_get_base_and_corr_datafra0/freqaimodels" does not exist.
2025-08-30T09:58:47.4204087Z 2025-08-30 09:57:07 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4204480Z 2025-08-30 09:57:07 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4204986Z 2025-08-30 09:57:07 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4205137Z 2025-08-30 09:57:07 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.4205302Z 2025-08-30 09:57:07 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4205497Z 2025-08-30 09:57:07 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4205807Z 2025-08-30 09:57:07 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4205949Z 2025-08-30 09:57:07 INFO No params for buy found, using default values.
2025-08-30T09:58:47.4206089Z 2025-08-30 09:57:07 INFO No params for sell found, using default values.
2025-08-30T09:58:47.4206254Z 2025-08-30 09:57:07 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4206411Z 2025-08-30 09:57:07 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4206560Z 2025-08-30 09:57:07 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4206667Z 2025-08-30 09:57:07 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4206797Z 2025-08-30 09:57:07 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4206876Z 2025-08-30 09:57:07 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4206971Z 2025-08-30 09:57:07 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4207095Z 2025-08-30 09:57:07 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4207213Z 2025-08-30 09:57:07 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4207374Z 2025-08-30 09:57:07 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4207538Z 2025-08-30 09:57:07 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4207692Z 2025-08-30 09:57:07 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4207841Z 2025-08-30 09:57:07 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4208001Z ______________ test_get_timerange_from_live_historic_predictions _______________
2025-08-30T09:58:47.4208010Z 
2025-08-30T09:58:47.4208166Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4208226Z key = 'date'
2025-08-30T09:58:47.4208231Z 
2025-08-30T09:58:47.4208366Z     def get_loc(self, key):
2025-08-30T09:58:47.4208428Z         """
2025-08-30T09:58:47.4208577Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4208634Z     
2025-08-30T09:58:47.4208702Z         Parameters
2025-08-30T09:58:47.4208764Z         ----------
2025-08-30T09:58:47.4208823Z         key : label
2025-08-30T09:58:47.4208879Z     
2025-08-30T09:58:47.4208941Z         Returns
2025-08-30T09:58:47.4209059Z         -------
2025-08-30T09:58:47.4209184Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4209242Z     
2025-08-30T09:58:47.4209301Z         Examples
2025-08-30T09:58:47.4209360Z         --------
2025-08-30T09:58:47.4209449Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4209529Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4209585Z         1
2025-08-30T09:58:47.4209639Z     
2025-08-30T09:58:47.4209740Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4209821Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4209888Z         slice(1, 3, None)
2025-08-30T09:58:47.4209945Z     
2025-08-30T09:58:47.4210047Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4210128Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4210209Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4210317Z         """
2025-08-30T09:58:47.4210411Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4210469Z         try:
2025-08-30T09:58:47.4210560Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4210629Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4210634Z 
2025-08-30T09:58:47.4210804Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4210910Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4211074Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4211133Z     ???
2025-08-30T09:58:47.4211291Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4211350Z     ???
2025-08-30T09:58:47.4211653Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4211712Z     ???
2025-08-30T09:58:47.4211816Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4211823Z 
2025-08-30T09:58:47.4211878Z >   ???
2025-08-30T09:58:47.4211944Z E   KeyError: 'date'
2025-08-30T09:58:47.4211949Z 
2025-08-30T09:58:47.4212069Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4212075Z 
2025-08-30T09:58:47.4212229Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4212234Z 
2025-08-30T09:58:47.4212388Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64dfad8e10>
2025-08-30T09:58:47.4213080Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.4213087Z 
2025-08-30T09:58:47.4213264Z     def test_get_timerange_from_live_historic_predictions(mocker, freqai_conf):
2025-08-30T09:58:47.4213507Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.4213627Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.4213740Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.4213817Z         freqai = strategy.freqai
2025-08-30T09:58:47.4213890Z         freqai.live = False
2025-08-30T09:58:47.4213983Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.4214054Z         freqai.dk.live = False
2025-08-30T09:58:47.4214184Z         timerange = TimeRange.parse_timerange("20180126-20180130")
2025-08-30T09:58:47.4214315Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.4214521Z         sub_timerange = TimeRange.parse_timerange("20180128-20180130")
2025-08-30T09:58:47.4214721Z >       _, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "ADA/BTC", freqai.dk)
2025-08-30T09:58:47.4214810Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4214817Z 
2025-08-30T09:58:47.4214965Z tests/freqai/test_freqai_datadrawer.py:118: 
2025-08-30T09:58:47.4215064Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4215230Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.4215321Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.4215447Z freqtrade/freqai/data_kitchen.py:390: in slice_dataframe
2025-08-30T09:58:47.4215624Z     df = df.loc[(df["date"] >= timerange.startdt) & (df["date"] < timerange.stopdt), :]
2025-08-30T09:58:47.4215687Z                  ^^^^^^^^^^
2025-08-30T09:58:47.4215875Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4215958Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4216029Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4216124Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4216219Z 
2025-08-30T09:58:47.4216381Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4216445Z key = 'date'
2025-08-30T09:58:47.4216450Z 
2025-08-30T09:58:47.4216519Z     def get_loc(self, key):
2025-08-30T09:58:47.4216576Z         """
2025-08-30T09:58:47.4216729Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4216784Z     
2025-08-30T09:58:47.4216845Z         Parameters
2025-08-30T09:58:47.4216910Z         ----------
2025-08-30T09:58:47.4216970Z         key : label
2025-08-30T09:58:47.4217026Z     
2025-08-30T09:58:47.4217085Z         Returns
2025-08-30T09:58:47.4217149Z         -------
2025-08-30T09:58:47.4217269Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4217384Z     
2025-08-30T09:58:47.4217450Z         Examples
2025-08-30T09:58:47.4217511Z         --------
2025-08-30T09:58:47.4217597Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4217676Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4217737Z         1
2025-08-30T09:58:47.4217792Z     
2025-08-30T09:58:47.4217884Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4217977Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4218068Z         slice(1, 3, None)
2025-08-30T09:58:47.4218126Z     
2025-08-30T09:58:47.4218227Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4218316Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4218397Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4218453Z         """
2025-08-30T09:58:47.4218551Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4218609Z         try:
2025-08-30T09:58:47.4218700Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4218774Z         except KeyError as err:
2025-08-30T09:58:47.4218864Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4218952Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4219065Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4219130Z             ):
2025-08-30T09:58:47.4219215Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4219292Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4219367Z E           KeyError: 'date'
2025-08-30T09:58:47.4219371Z 
2025-08-30T09:58:47.4219571Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4219710Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4220220Z 2025-08-30 09:57:08,411 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4220762Z 2025-08-30 09:57:08,412 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4220832Z 'nonexiting_module''
2025-08-30T09:58:47.4221419Z 2025-08-30 09:57:08,413 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4221605Z 2025-08-30 09:57:08,414 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4222038Z 2025-08-30 09:57:08,414 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4222462Z 2025-08-30 09:57:08,415 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4222996Z 2025-08-30 09:57:08,415 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4223492Z 2025-08-30 09:57:08,415 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4223957Z 2025-08-30 09:57:08,416 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4224370Z 2025-08-30 09:57:08,416 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4224703Z 2025-08-30 09:57:08,416 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4225048Z 2025-08-30 09:57:08,416 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4225363Z 2025-08-30 09:57:08,417 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4225603Z 2025-08-30 09:57:08,417 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4225874Z 2025-08-30 09:57:08,417 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4226467Z 2025-08-30 09:57:08,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4226806Z 2025-08-30 09:57:08,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4227078Z 2025-08-30 09:57:08,418 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4227358Z 2025-08-30 09:57:08,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4227810Z 2025-08-30 09:57:08,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4227962Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4228298Z 2025-08-30 09:57:08,419 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4228542Z 2025-08-30 09:57:08,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4228787Z 2025-08-30 09:57:08,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4229045Z 2025-08-30 09:57:08,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4229442Z 2025-08-30 09:57:08,420 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4229695Z 2025-08-30 09:57:08,421 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4229949Z 2025-08-30 09:57:08,421 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4230285Z 2025-08-30 09:57:08,421 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4230541Z 2025-08-30 09:57:08,422 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4230816Z 2025-08-30 09:57:08,422 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4231106Z 2025-08-30 09:57:08,422 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4231393Z 2025-08-30 09:57:08,423 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4231673Z 2025-08-30 09:57:08,423 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4231911Z 2025-08-30 09:57:08,423 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4232442Z 2025-08-30 09:57:08,424 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4232844Z 2025-08-30 09:57:08,424 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4233529Z 2025-08-30 09:57:08,424 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_timerange_from_live_h0/freqaimodels'
2025-08-30T09:58:47.4234058Z 2025-08-30 09:57:08,425 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_get_timerange_from_live_h0/freqaimodels" does not exist.
2025-08-30T09:58:47.4234580Z 2025-08-30 09:57:08,425 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4235015Z 2025-08-30 09:57:08,426 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4235295Z 2025-08-30 09:57:08,427 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.4235586Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4235857Z 2025-08-30 09:57:08,428 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.4236132Z 2025-08-30 09:57:08,428 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4236432Z 2025-08-30 09:57:08,428 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4236811Z 2025-08-30 09:57:08,429 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4237046Z 2025-08-30 09:57:08,429 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.4237278Z 2025-08-30 09:57:08,430 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.4237529Z 2025-08-30 09:57:08,430 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4237777Z 2025-08-30 09:57:08,430 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4238081Z 2025-08-30 09:57:08,431 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4238229Z 2025-08-30 09:57:08,434 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4238461Z 2025-08-30 09:57:08,434 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4238676Z 2025-08-30 09:57:08,435 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4238864Z 2025-08-30 09:57:08,435 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4239090Z 2025-08-30 09:57:08,436 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4239339Z 2025-08-30 09:57:08,437 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4239684Z 2025-08-30 09:57:08,467 - freqtrade.data.converter.converter - DEBUG - Missing data fillup for DASH/BTC, 5m: before: 1151 - after: 1153 - 0.17%
2025-08-30T09:58:47.4239833Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4240156Z 2025-08-30 09:57:08 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4240706Z 2025-08-30 09:57:08 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4241126Z 2025-08-30 09:57:08 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4241226Z 2025-08-30 09:57:08 INFO Found no parameter file.
2025-08-30T09:58:47.4241507Z 2025-08-30 09:57:08 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4241691Z 2025-08-30 09:57:08 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4241905Z 2025-08-30 09:57:08 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4242105Z 2025-08-30 09:57:08 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4242295Z 2025-08-30 09:57:08 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4242559Z 2025-08-30 09:57:08 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4242748Z 2025-08-30 09:57:08 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4242944Z 2025-08-30 09:57:08 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4243050Z 2025-08-30 09:57:08 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4243154Z 2025-08-30 09:57:08 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4243277Z 2025-08-30 09:57:08 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4243623Z 2025-08-30 09:57:08 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4243797Z 2025-08-30 09:57:08 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4243931Z 2025-08-30 09:57:08 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4244072Z 2025-08-30 09:57:08 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4244543Z 2025-08-30 09:57:08 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4244736Z 2025-08-30 09:57:08 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4244850Z 2025-08-30 09:57:08 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4244958Z 2025-08-30 09:57:08 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4245165Z 2025-08-30 09:57:08 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4245340Z 2025-08-30 09:57:08 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4245455Z 2025-08-30 09:57:08 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4245576Z 2025-08-30 09:57:08 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4245779Z 2025-08-30 09:57:08 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4245900Z 2025-08-30 09:57:08 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4246039Z 2025-08-30 09:57:08 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4246193Z 2025-08-30 09:57:08 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4246333Z 2025-08-30 09:57:08 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4246471Z 2025-08-30 09:57:08 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4246586Z 2025-08-30 09:57:08 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4246947Z 2025-08-30 09:57:08 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4247227Z 2025-08-30 09:57:08 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4247690Z 2025-08-30 09:57:08 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_get_timerange_from_live_h0/freqaimodels'
2025-08-30T09:58:47.4248002Z 2025-08-30 09:57:08 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_get_timerange_from_live_h0/freqaimodels" does not exist.
2025-08-30T09:58:47.4248396Z 2025-08-30 09:57:08 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4248707Z 2025-08-30 09:57:08 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4249262Z 2025-08-30 09:57:08 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4249411Z 2025-08-30 09:57:08 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.4249578Z 2025-08-30 09:57:08 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4249774Z 2025-08-30 09:57:08 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4250020Z 2025-08-30 09:57:08 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4250159Z 2025-08-30 09:57:08 INFO No params for buy found, using default values.
2025-08-30T09:58:47.4250295Z 2025-08-30 09:57:08 INFO No params for sell found, using default values.
2025-08-30T09:58:47.4250454Z 2025-08-30 09:57:08 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4250606Z 2025-08-30 09:57:08 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4250759Z 2025-08-30 09:57:08 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4250866Z 2025-08-30 09:57:08 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4250989Z 2025-08-30 09:57:08 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4251074Z 2025-08-30 09:57:08 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4251170Z 2025-08-30 09:57:08 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4251290Z 2025-08-30 09:57:08 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4251411Z 2025-08-30 09:57:08 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4251620Z 2025-08-30 09:57:08 DEBUG Missing data fillup for DASH/BTC, 5m: before: 1151 - after: 1153 - 0.17%
2025-08-30T09:58:47.4251770Z ___________________ test_use_strategy_to_populate_indicators ___________________
2025-08-30T09:58:47.4251776Z 
2025-08-30T09:58:47.4251938Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4252047Z key = 'date'
2025-08-30T09:58:47.4252051Z 
2025-08-30T09:58:47.4252125Z     def get_loc(self, key):
2025-08-30T09:58:47.4252186Z         """
2025-08-30T09:58:47.4252335Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4252392Z     
2025-08-30T09:58:47.4252455Z         Parameters
2025-08-30T09:58:47.4252559Z         ----------
2025-08-30T09:58:47.4252621Z         key : label
2025-08-30T09:58:47.4252676Z     
2025-08-30T09:58:47.4252738Z         Returns
2025-08-30T09:58:47.4252796Z         -------
2025-08-30T09:58:47.4252920Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4252974Z     
2025-08-30T09:58:47.4253037Z         Examples
2025-08-30T09:58:47.4253096Z         --------
2025-08-30T09:58:47.4253183Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4253264Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4253323Z         1
2025-08-30T09:58:47.4253482Z     
2025-08-30T09:58:47.4253580Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4253666Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4253733Z         slice(1, 3, None)
2025-08-30T09:58:47.4253788Z     
2025-08-30T09:58:47.4253894Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4254063Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4254145Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4254201Z         """
2025-08-30T09:58:47.4254294Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4254352Z         try:
2025-08-30T09:58:47.4254440Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4254518Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4254522Z 
2025-08-30T09:58:47.4254691Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4254791Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4254961Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4255076Z     ???
2025-08-30T09:58:47.4255235Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4255290Z     ???
2025-08-30T09:58:47.4255557Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4255612Z     ???
2025-08-30T09:58:47.4255709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4255714Z 
2025-08-30T09:58:47.4255774Z >   ???
2025-08-30T09:58:47.4255841Z E   KeyError: 'date'
2025-08-30T09:58:47.4255845Z 
2025-08-30T09:58:47.4255963Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4255967Z 
2025-08-30T09:58:47.4256126Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4256131Z 
2025-08-30T09:58:47.4256288Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6564d43910>
2025-08-30T09:58:47.4256969Z freqai_conf = {'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'config_files': [PosixPath('config...mples/config_freqai.example.json')], 'datadir': PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata'), ...}
2025-08-30T09:58:47.4256979Z 
2025-08-30T09:58:47.4257131Z     def test_use_strategy_to_populate_indicators(mocker, freqai_conf):
2025-08-30T09:58:47.4257266Z         strategy = get_patched_freqai_strategy(mocker, freqai_conf)
2025-08-30T09:58:47.4257382Z         exchange = get_patched_exchange(mocker, freqai_conf)
2025-08-30T09:58:47.4257499Z         strategy.dp = DataProvider(freqai_conf, exchange)
2025-08-30T09:58:47.4257614Z         strategy.freqai_info = freqai_conf.get("freqai", {})
2025-08-30T09:58:47.4257691Z         freqai = strategy.freqai
2025-08-30T09:58:47.4257766Z         freqai.live = True
2025-08-30T09:58:47.4257860Z         freqai.dk = FreqaiDataKitchen(freqai_conf)
2025-08-30T09:58:47.4258001Z         freqai.dk.live = True
2025-08-30T09:58:47.4258139Z         timerange = TimeRange.parse_timerange("20180110-20180114")
2025-08-30T09:58:47.4258268Z         freqai.dd.load_all_pair_histories(timerange, freqai.dk)
2025-08-30T09:58:47.4258402Z         sub_timerange = TimeRange.parse_timerange("20180111-20180114")
2025-08-30T09:58:47.4258670Z >       corr_df, base_df = freqai.dd.get_base_and_corr_dataframes(sub_timerange, "LTC/BTC", freqai.dk)
2025-08-30T09:58:47.4258767Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4258772Z 
2025-08-30T09:58:47.4258868Z tests/freqai/test_freqai_datadrawer.py:99: 
2025-08-30T09:58:47.4258967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4259135Z freqtrade/freqai/data_drawer.py:724: in get_base_and_corr_dataframes
2025-08-30T09:58:47.4259226Z     base_dataframes[tf] = dk.slice_dataframe(
2025-08-30T09:58:47.4259355Z freqtrade/freqai/data_kitchen.py:392: in slice_dataframe
2025-08-30T09:58:47.4259455Z     df = df.loc[df["date"] >= timerange.startdt, :]
2025-08-30T09:58:47.4259521Z                 ^^^^^^^^^^
2025-08-30T09:58:47.4259707Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4259795Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4259906Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4260004Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4260008Z 
2025-08-30T09:58:47.4260174Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4260234Z key = 'date'
2025-08-30T09:58:47.4260238Z 
2025-08-30T09:58:47.4260312Z     def get_loc(self, key):
2025-08-30T09:58:47.4260367Z         """
2025-08-30T09:58:47.4260519Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4260576Z     
2025-08-30T09:58:47.4260637Z         Parameters
2025-08-30T09:58:47.4260703Z         ----------
2025-08-30T09:58:47.4260764Z         key : label
2025-08-30T09:58:47.4260863Z     
2025-08-30T09:58:47.4260924Z         Returns
2025-08-30T09:58:47.4260988Z         -------
2025-08-30T09:58:47.4261116Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4261174Z     
2025-08-30T09:58:47.4261238Z         Examples
2025-08-30T09:58:47.4261298Z         --------
2025-08-30T09:58:47.4261386Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4261464Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4261527Z         1
2025-08-30T09:58:47.4261582Z     
2025-08-30T09:58:47.4261678Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4261762Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4261830Z         slice(1, 3, None)
2025-08-30T09:58:47.4261885Z     
2025-08-30T09:58:47.4261985Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4262075Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4262155Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4262213Z         """
2025-08-30T09:58:47.4262309Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4262366Z         try:
2025-08-30T09:58:47.4262456Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4262538Z         except KeyError as err:
2025-08-30T09:58:47.4262625Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4262715Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4262827Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4262889Z             ):
2025-08-30T09:58:47.4262972Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4263048Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4263122Z E           KeyError: 'date'
2025-08-30T09:58:47.4263126Z 
2025-08-30T09:58:47.4263557Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4263729Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4264187Z 2025-08-30 09:57:08,702 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4264804Z 2025-08-30 09:57:08,703 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4264877Z 'nonexiting_module''
2025-08-30T09:58:47.4265672Z 2025-08-30 09:57:08,705 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4265862Z 2025-08-30 09:57:08,705 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4266302Z 2025-08-30 09:57:08,706 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4266627Z 2025-08-30 09:57:08,706 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4267030Z 2025-08-30 09:57:08,706 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4267366Z 2025-08-30 09:57:08,707 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4267701Z 2025-08-30 09:57:08,707 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4268108Z 2025-08-30 09:57:08,707 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4268493Z 2025-08-30 09:57:08,708 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4268841Z 2025-08-30 09:57:08,708 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4269075Z 2025-08-30 09:57:08,708 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4269306Z 2025-08-30 09:57:08,709 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4269562Z 2025-08-30 09:57:08,709 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4269850Z 2025-08-30 09:57:08,709 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4270146Z 2025-08-30 09:57:08,709 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4270417Z 2025-08-30 09:57:08,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4270692Z 2025-08-30 09:57:08,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4271144Z 2025-08-30 09:57:08,710 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4271292Z 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4271625Z 2025-08-30 09:57:08,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4271872Z 2025-08-30 09:57:08,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4272119Z 2025-08-30 09:57:08,711 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4272445Z 2025-08-30 09:57:08,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4272752Z 2025-08-30 09:57:08,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4273045Z 2025-08-30 09:57:08,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4273300Z 2025-08-30 09:57:08,712 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4273694Z 2025-08-30 09:57:08,713 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4273953Z 2025-08-30 09:57:08,713 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4274230Z 2025-08-30 09:57:08,713 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4274527Z 2025-08-30 09:57:08,714 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4274813Z 2025-08-30 09:57:08,714 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4275160Z 2025-08-30 09:57:08,714 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4275399Z 2025-08-30 09:57:08,715 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4275885Z 2025-08-30 09:57:08,715 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4276292Z 2025-08-30 09:57:08,716 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4276880Z 2025-08-30 09:57:08,716 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_use_strategy_to_populate_0/freqaimodels'
2025-08-30T09:58:47.4277313Z 2025-08-30 09:57:08,716 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_use_strategy_to_populate_0/freqaimodels" does not exist.
2025-08-30T09:58:47.4277829Z 2025-08-30 09:57:08,717 - freqtrade.resolvers.iresolver - DEBUG - Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4278264Z 2025-08-30 09:57:08,717 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4278533Z 2025-08-30 09:57:08,719 - freqtrade.resolvers.iresolver - INFO - Using resolved freqaimodel LightGBMRegressor from 
2025-08-30T09:58:47.4278827Z '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4279108Z 2025-08-30 09:57:08,719 - freqtrade.freqai.freqai_interface - INFO - Backtesting module configured to save all models.
2025-08-30T09:58:47.4279376Z 2025-08-30 09:57:08,720 - freqtrade.freqai.data_drawer - INFO - Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4279680Z 2025-08-30 09:57:08,720 - freqtrade.freqai.data_drawer - INFO - Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4280061Z 2025-08-30 09:57:08,720 - freqtrade.freqai.freqai_interface - INFO - Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4280297Z 2025-08-30 09:57:08,721 - freqtrade.strategy.hyper - INFO - No params for buy found, using default values.
2025-08-30T09:58:47.4280527Z 2025-08-30 09:57:08,721 - freqtrade.strategy.hyper - INFO - No params for sell found, using default values.
2025-08-30T09:58:47.4280845Z 2025-08-30 09:57:08,722 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4281092Z 2025-08-30 09:57:08,722 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4281333Z 2025-08-30 09:57:08,722 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4281553Z 2025-08-30 09:57:08,726 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4281787Z 2025-08-30 09:57:08,726 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4281951Z 2025-08-30 09:57:08,727 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4282135Z 2025-08-30 09:57:08,727 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4282361Z 2025-08-30 09:57:08,728 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4282616Z 2025-08-30 09:57:08,729 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4282969Z 2025-08-30 09:57:08,735 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4283326Z 2025-08-30 09:57:08,750 - freqtrade.data.history.datahandlers.idatahandler - WARNING - DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4283949Z 2025-08-30 09:57:08,764 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4284302Z 2025-08-30 09:57:08,779 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4284445Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4284771Z 2025-08-30 09:57:08 DEBUG Searching for IStrategy freqai_test_strat in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4285336Z 2025-08-30 09:57:08 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4285758Z 2025-08-30 09:57:08 INFO Using resolved strategy freqai_test_strat from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/freqai_test_strat.py'...
2025-08-30T09:58:47.4285859Z 2025-08-30 09:57:08 INFO Found no parameter file.
2025-08-30T09:58:47.4286146Z 2025-08-30 09:57:08 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4286320Z 2025-08-30 09:57:08 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4286497Z 2025-08-30 09:57:08 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4286690Z 2025-08-30 09:57:08 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4286883Z 2025-08-30 09:57:08 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4287145Z 2025-08-30 09:57:08 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4287333Z 2025-08-30 09:57:08 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4287534Z 2025-08-30 09:57:08 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4287639Z 2025-08-30 09:57:08 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4287744Z 2025-08-30 09:57:08 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4287869Z 2025-08-30 09:57:08 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4288018Z 2025-08-30 09:57:08 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4288173Z 2025-08-30 09:57:08 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4288370Z 2025-08-30 09:57:08 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4288513Z 2025-08-30 09:57:08 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4288987Z 2025-08-30 09:57:08 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'stoploss_on_exchange_interval': 60, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4289250Z 2025-08-30 09:57:08 INFO Strategy using order_time_in_force: {'entry': 'GTC', 'exit': 'GTC'}
2025-08-30T09:58:47.4289366Z 2025-08-30 09:57:08 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4289477Z 2025-08-30 09:57:08 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4289611Z 2025-08-30 09:57:08 INFO Strategy using startup_candle_count: 300
2025-08-30T09:58:47.4289778Z 2025-08-30 09:57:08 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4289894Z 2025-08-30 09:57:08 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4290017Z 2025-08-30 09:57:08 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4290165Z 2025-08-30 09:57:08 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4290282Z 2025-08-30 09:57:08 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4290420Z 2025-08-30 09:57:08 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4290650Z 2025-08-30 09:57:08 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4290920Z 2025-08-30 09:57:08 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4291186Z 2025-08-30 09:57:08 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4291393Z 2025-08-30 09:57:08 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4291819Z 2025-08-30 09:57:08 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4292099Z 2025-08-30 09:57:08 WARNING Path "/home/runner/work/freqtrade/freqtrade/freqai/prediction_models" does not exist.
2025-08-30T09:58:47.4292566Z 2025-08-30 09:57:08 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/tmp/pytest-of-runner/pytest-0/test_use_strategy_to_populate_0/freqaimodels'
2025-08-30T09:58:47.4292876Z 2025-08-30 09:57:08 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_use_strategy_to_populate_0/freqaimodels" does not exist.
2025-08-30T09:58:47.4293274Z 2025-08-30 09:57:08 DEBUG Searching for IFreqaiModel LightGBMRegressor in '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models'
2025-08-30T09:58:47.4293691Z 2025-08-30 09:57:08 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/__pycache__
2025-08-30T09:58:47.4294195Z 2025-08-30 09:57:08 INFO Using resolved freqaimodel LightGBMRegressor from '/home/runner/work/freqtrade/freqtrade/freqtrade/freqai/prediction_models/LightGBMRegressor.py'...
2025-08-30T09:58:47.4294342Z 2025-08-30 09:57:08 INFO Backtesting module configured to save all models.
2025-08-30T09:58:47.4294511Z 2025-08-30 09:57:08 INFO Could not find existing datadrawer, starting from scratch
2025-08-30T09:58:47.4294705Z 2025-08-30 09:57:08 INFO Could not find existing historic_predictions, starting from scratch
2025-08-30T09:58:47.4294954Z 2025-08-30 09:57:08 INFO Set fresh train queue from whitelist. Queue: ['ADA/BTC', 'DASH/BTC', 'ETH/BTC', 'LTC/BTC']
2025-08-30T09:58:47.4295096Z 2025-08-30 09:57:08 INFO No params for buy found, using default values.
2025-08-30T09:58:47.4295233Z 2025-08-30 09:57:08 INFO No params for sell found, using default values.
2025-08-30T09:58:47.4295393Z 2025-08-30 09:57:08 INFO Strategy Parameter(default): linear_roi_offset = 0.005
2025-08-30T09:58:47.4295547Z 2025-08-30 09:57:08 INFO Strategy Parameter(default): max_roi_time_long = 400
2025-08-30T09:58:47.4295695Z 2025-08-30 09:57:08 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4295803Z 2025-08-30 09:57:08 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4296007Z 2025-08-30 09:57:08 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4296088Z 2025-08-30 09:57:08 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4296185Z 2025-08-30 09:57:08 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4296305Z 2025-08-30 09:57:08 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4296430Z 2025-08-30 09:57:08 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4296647Z 2025-08-30 09:57:08 WARNING ADA/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4296808Z 2025-08-30 09:57:08 WARNING DASH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4296965Z 2025-08-30 09:57:08 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4297114Z 2025-08-30 09:57:08 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.4297241Z _______________________________ test_share_dict ________________________________
2025-08-30T09:58:47.4297247Z 
2025-08-30T09:58:47.4297512Z manager = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f65944f88d0>
2025-08-30T09:58:47.4297651Z sample_dict_data = {'BTC/USDT':    open  high  low  close  volume
2025-08-30T09:58:47.4297721Z 0   100   101   99  100.5    1000
2025-08-30T09:58:47.4297788Z 1   101   102  100  101.5    1100
2025-08-30T09:58:47.4297847Z 2  ...   110.0
2025-08-30T09:58:47.4297971Z 2  10.2  10.3  10.1  10.25   120.0
2025-08-30T09:58:47.4298098Z 3  10.3  10.4  10.2  10.35   130.0, 'metadata': {'pairs': 2, 'version': 1}}
2025-08-30T09:58:47.4298108Z 
2025-08-30T09:58:47.4298211Z     def test_share_dict(manager, sample_dict_data):
2025-08-30T09:58:47.4298317Z         """Test sharing a dictionary in shared memory."""
2025-08-30T09:58:47.4298410Z         key = manager.share_dict(sample_dict_data)
2025-08-30T09:58:47.4298471Z     
2025-08-30T09:58:47.4298551Z >       assert key in manager.metadata
2025-08-30T09:58:47.4298617Z                ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4298709Z E       TypeError: unhashable type: 'dict'
2025-08-30T09:58:47.4298716Z 
2025-08-30T09:58:47.4298856Z tests/optimize/test_shared_memory_manager.py:101: TypeError
2025-08-30T09:58:47.4299051Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4299401Z 2025-08-30 09:57:09,541 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: dict_be0db63c_BTC/USDT, size: 0.00MB
2025-08-30T09:58:47.4299735Z 2025-08-30 09:57:09,542 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: dict_be0db63c_ETH/USDT, size: 0.00MB
2025-08-30T09:58:47.4300058Z 2025-08-30 09:57:09,542 - freqtrade.optimize.shared_memory_manager - INFO - Shared dictionary with key: dict_be0db63c, total size: 0.00MB
2025-08-30T09:58:47.4300200Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4300383Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: dict_be0db63c_BTC/USDT, size: 0.00MB
2025-08-30T09:58:47.4300561Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: dict_be0db63c_ETH/USDT, size: 0.00MB
2025-08-30T09:58:47.4300741Z 2025-08-30 09:57:09 INFO Shared dictionary with key: dict_be0db63c, total size: 0.00MB
2025-08-30T09:58:47.4300880Z --------------------------- Captured stderr teardown ---------------------------
2025-08-30T09:58:47.4301198Z 2025-08-30 09:57:09,554 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: dict_be0db63c_BTC/USDT
2025-08-30T09:58:47.4301510Z 2025-08-30 09:57:09,555 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: dict_be0db63c_ETH/USDT
2025-08-30T09:58:47.4301646Z ---------------------------- Captured log teardown -----------------------------
2025-08-30T09:58:47.4301802Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: dict_be0db63c_BTC/USDT
2025-08-30T09:58:47.4301954Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: dict_be0db63c_ETH/USDT
2025-08-30T09:58:47.4302104Z _____________________ test_cleanup_dict_with_subdataframes _____________________
2025-08-30T09:58:47.4302151Z 
2025-08-30T09:58:47.4302411Z manager = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f6594193ed0>
2025-08-30T09:58:47.4302552Z sample_dict_data = {'BTC/USDT':    open  high  low  close  volume
2025-08-30T09:58:47.4302623Z 0   100   101   99  100.5    1000
2025-08-30T09:58:47.4302686Z 1   101   102  100  101.5    1100
2025-08-30T09:58:47.4302781Z 2  ...   110.0
2025-08-30T09:58:47.4302852Z 2  10.2  10.3  10.1  10.25   120.0
2025-08-30T09:58:47.4302972Z 3  10.3  10.4  10.2  10.35   130.0, 'metadata': {'pairs': 2, 'version': 1}}
2025-08-30T09:58:47.4302977Z 
2025-08-30T09:58:47.4303136Z     def test_cleanup_dict_with_subdataframes(manager, sample_dict_data):
2025-08-30T09:58:47.4303564Z         """Test that cleaning up a dict also cleans up its sub-DataFrames."""
2025-08-30T09:58:47.4303660Z         key = manager.share_dict(sample_dict_data)
2025-08-30T09:58:47.4303716Z     
2025-08-30T09:58:47.4303795Z         # Count initial blocks
2025-08-30T09:58:47.4303888Z         initial_blocks = len(manager.shared_blocks)
2025-08-30T09:58:47.4304034Z         assert initial_blocks > 1  # Should have main dict + DataFrames
2025-08-30T09:58:47.4304090Z     
2025-08-30T09:58:47.4304162Z         # Clean up the dict
2025-08-30T09:58:47.4304235Z >       manager.cleanup(key)
2025-08-30T09:58:47.4304306Z 
2025-08-30T09:58:47.4304421Z tests/optimize/test_shared_memory_manager.py:169: 
2025-08-30T09:58:47.4304521Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4304525Z 
2025-08-30T09:58:47.4304767Z self = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f6594193ed0>
2025-08-30T09:58:47.4305324Z key = ('dict_be0db63c', {'shared_keys': {'BTC/USDT': 'dict_be0db63c_BTC/USDT', 'ETH/USDT': 'dict_be0db63c_ETH/USDT', 'metada...'\x80\x04\x95\x1b\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x07version\x94K\x01\x8c\x05pairs\x94K\x02u.'}, 'type': 'dict'})
2025-08-30T09:58:47.4305332Z 
2025-08-30T09:58:47.4305436Z     def cleanup(self, key: Optional[str] = None):
2025-08-30T09:58:47.4305496Z         """
2025-08-30T09:58:47.4305629Z         Clean up shared memory blocks.
2025-08-30T09:58:47.4305690Z     
2025-08-30T09:58:47.4305857Z         :param key: Optional key to clean up specific block, or None to clean all
2025-08-30T09:58:47.4305918Z         """
2025-08-30T09:58:47.4305980Z         if key:
2025-08-30T09:58:47.4306055Z             keys_to_clean = [key]
2025-08-30T09:58:47.4306141Z             # Also clean sub-keys for dictionaries
2025-08-30T09:58:47.4306282Z >           if key in self.metadata and self.metadata[key]['type'] == 'dict':
2025-08-30T09:58:47.4306353Z                ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4306441Z E           TypeError: unhashable type: 'dict'
2025-08-30T09:58:47.4306446Z 
2025-08-30T09:58:47.4306585Z freqtrade/optimize/shared_memory_manager.py:236: TypeError
2025-08-30T09:58:47.4306726Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4307072Z 2025-08-30 09:57:09,587 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: dict_be0db63c_BTC/USDT, size: 0.00MB
2025-08-30T09:58:47.4307403Z 2025-08-30 09:57:09,588 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: dict_be0db63c_ETH/USDT, size: 0.00MB
2025-08-30T09:58:47.4307735Z 2025-08-30 09:57:09,588 - freqtrade.optimize.shared_memory_manager - INFO - Shared dictionary with key: dict_be0db63c, total size: 0.00MB
2025-08-30T09:58:47.4307870Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4308054Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: dict_be0db63c_BTC/USDT, size: 0.00MB
2025-08-30T09:58:47.4308235Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: dict_be0db63c_ETH/USDT, size: 0.00MB
2025-08-30T09:58:47.4308408Z 2025-08-30 09:57:09 INFO Shared dictionary with key: dict_be0db63c, total size: 0.00MB
2025-08-30T09:58:47.4308629Z --------------------------- Captured stderr teardown ---------------------------
2025-08-30T09:58:47.4308943Z 2025-08-30 09:57:09,605 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: dict_be0db63c_BTC/USDT
2025-08-30T09:58:47.4309248Z 2025-08-30 09:57:09,605 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: dict_be0db63c_ETH/USDT
2025-08-30T09:58:47.4309436Z ---------------------------- Captured log teardown -----------------------------
2025-08-30T09:58:47.4309599Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: dict_be0db63c_BTC/USDT
2025-08-30T09:58:47.4309752Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: dict_be0db63c_ETH/USDT
2025-08-30T09:58:47.4309875Z ________________________________ test_get_dict _________________________________
2025-08-30T09:58:47.4309880Z 
2025-08-30T09:58:47.4310140Z manager = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f64db6cba50>
2025-08-30T09:58:47.4310282Z sample_dict_data = {'BTC/USDT':    open  high  low  close  volume
2025-08-30T09:58:47.4310347Z 0   100   101   99  100.5    1000
2025-08-30T09:58:47.4310412Z 1   101   102  100  101.5    1100
2025-08-30T09:58:47.4310475Z 2  ...   110.0
2025-08-30T09:58:47.4310537Z 2  10.2  10.3  10.1  10.25   120.0
2025-08-30T09:58:47.4310656Z 3  10.3  10.4  10.2  10.35   130.0, 'metadata': {'pairs': 2, 'version': 1}}
2025-08-30T09:58:47.4310703Z 
2025-08-30T09:58:47.4310807Z     def test_get_dict(manager, sample_dict_data):
2025-08-30T09:58:47.4310925Z         """Test retrieving a dictionary from shared memory."""
2025-08-30T09:58:47.4311016Z         key = manager.share_dict(sample_dict_data)
2025-08-30T09:58:47.4311075Z     
2025-08-30T09:58:47.4311148Z         # Retrieve the dictionary
2025-08-30T09:58:47.4311236Z >       retrieved_dict = manager.get_dict(key)
2025-08-30T09:58:47.4311305Z                          ^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4311314Z 
2025-08-30T09:58:47.4311421Z tests/optimize/test_shared_memory_manager.py:118: 
2025-08-30T09:58:47.4311520Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4311525Z 
2025-08-30T09:58:47.4311808Z self = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f64db6cba50>
2025-08-30T09:58:47.4312370Z key = ('dict_be0db63c', {'shared_keys': {'BTC/USDT': 'dict_be0db63c_BTC/USDT', 'ETH/USDT': 'dict_be0db63c_ETH/USDT', 'metada...'\x80\x04\x95\x1b\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x07version\x94K\x01\x8c\x05pairs\x94K\x02u.'}, 'type': 'dict'})
2025-08-30T09:58:47.4312438Z metadata = None
2025-08-30T09:58:47.4312442Z 
2025-08-30T09:58:47.4312651Z     def get_dict(self, key: str, metadata: Optional[Dict[str, Dict]] = None) -> Dict:
2025-08-30T09:58:47.4312708Z         """
2025-08-30T09:58:47.4312799Z         Retrieve a dictionary from shared memory.
2025-08-30T09:58:47.4312854Z     
2025-08-30T09:58:47.4312948Z         :param key: Key of the shared dictionary
2025-08-30T09:58:47.4313110Z         :param metadata: Optional metadata dict for all shared memory blocks
2025-08-30T09:58:47.4313188Z         :return: Retrieved dictionary
2025-08-30T09:58:47.4313249Z         """
2025-08-30T09:58:47.4313338Z         # Use provided metadata or local metadata
2025-08-30T09:58:47.4313551Z         all_metadata = metadata if metadata else self.metadata
2025-08-30T09:58:47.4313609Z     
2025-08-30T09:58:47.4313690Z >       if key not in all_metadata:
2025-08-30T09:58:47.4313756Z            ^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4313845Z E       TypeError: unhashable type: 'dict'
2025-08-30T09:58:47.4313849Z 
2025-08-30T09:58:47.4313991Z freqtrade/optimize/shared_memory_manager.py:201: TypeError
2025-08-30T09:58:47.4314128Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4314464Z 2025-08-30 09:57:09,628 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: dict_be0db63c_BTC/USDT, size: 0.00MB
2025-08-30T09:58:47.4314796Z 2025-08-30 09:57:09,629 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: dict_be0db63c_ETH/USDT, size: 0.00MB
2025-08-30T09:58:47.4315497Z 2025-08-30 09:57:09,629 - freqtrade.optimize.shared_memory_manager - INFO - Shared dictionary with key: dict_be0db63c, total size: 0.00MB
2025-08-30T09:58:47.4315742Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4316137Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: dict_be0db63c_BTC/USDT, size: 0.00MB
2025-08-30T09:58:47.4316331Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: dict_be0db63c_ETH/USDT, size: 0.00MB
2025-08-30T09:58:47.4316508Z 2025-08-30 09:57:09 INFO Shared dictionary with key: dict_be0db63c, total size: 0.00MB
2025-08-30T09:58:47.4316654Z --------------------------- Captured stderr teardown ---------------------------
2025-08-30T09:58:47.4316967Z 2025-08-30 09:57:09,645 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: dict_be0db63c_BTC/USDT
2025-08-30T09:58:47.4317276Z 2025-08-30 09:57:09,645 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: dict_be0db63c_ETH/USDT
2025-08-30T09:58:47.4317416Z ---------------------------- Captured log teardown -----------------------------
2025-08-30T09:58:47.4317576Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: dict_be0db63c_BTC/USDT
2025-08-30T09:58:47.4317798Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: dict_be0db63c_ETH/USDT
2025-08-30T09:58:47.4317926Z ______________________________ test_get_dataframe ______________________________
2025-08-30T09:58:47.4317932Z 
2025-08-30T09:58:47.4318188Z manager = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f64da22e510>
2025-08-30T09:58:47.4318299Z sample_dataframe =    open  high  low  close  volume
2025-08-30T09:58:47.4318369Z 0   100   101   99  100.5    1000
2025-08-30T09:58:47.4318432Z 1   101   102  100  101.5    1100
2025-08-30T09:58:47.4318492Z 2   102   103  101  102.5    1200
2025-08-30T09:58:47.4318554Z 3   103   104  102  103.5    1300
2025-08-30T09:58:47.4318558Z 
2025-08-30T09:58:47.4318728Z     def test_get_dataframe(manager, sample_dataframe):
2025-08-30T09:58:47.4318846Z         """Test retrieving a DataFrame from shared memory."""
2025-08-30T09:58:47.4318951Z         key = manager.share_dataframe(sample_dataframe)
2025-08-30T09:58:47.4319014Z     
2025-08-30T09:58:47.4319092Z         # Retrieve the DataFrame
2025-08-30T09:58:47.4319184Z >       retrieved_df = manager.get_dataframe(key)
2025-08-30T09:58:47.4319259Z                        ^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4319461Z E       AttributeError: 'SharedMemoryManager' object has no attribute 'get_dataframe'
2025-08-30T09:58:47.4319466Z 
2025-08-30T09:58:47.4319620Z tests/optimize/test_shared_memory_manager.py:91: AttributeError
2025-08-30T09:58:47.4319759Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4320062Z 2025-08-30 09:57:09,672 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: df_ce2bb19b, size: 0.00MB
2025-08-30T09:58:47.4320198Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4320349Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: df_ce2bb19b, size: 0.00MB
2025-08-30T09:58:47.4320489Z --------------------------- Captured stderr teardown ---------------------------
2025-08-30T09:58:47.4320773Z 2025-08-30 09:57:09,680 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: df_ce2bb19b
2025-08-30T09:58:47.4320905Z ---------------------------- Captured log teardown -----------------------------
2025-08-30T09:58:47.4321043Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: df_ce2bb19b
2025-08-30T09:58:47.4321186Z _____________________ test_error_handling_nonexistent_key ______________________
2025-08-30T09:58:47.4321190Z 
2025-08-30T09:58:47.4321439Z manager = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f6574842d50>
2025-08-30T09:58:47.4321494Z 
2025-08-30T09:58:47.4321604Z     def test_error_handling_nonexistent_key(manager):
2025-08-30T09:58:47.4321711Z         """Test error handling for non-existent keys."""
2025-08-30T09:58:47.4321793Z         with pytest.raises(KeyError):
2025-08-30T09:58:47.4321890Z >           manager.get_dataframe("nonexistent_key")
2025-08-30T09:58:47.4321956Z             ^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4322205Z E           AttributeError: 'SharedMemoryManager' object has no attribute 'get_dataframe'
2025-08-30T09:58:47.4322211Z 
2025-08-30T09:58:47.4322369Z tests/optimize/test_shared_memory_manager.py:178: AttributeError
2025-08-30T09:58:47.4322492Z _______________________________ test_custom_key ________________________________
2025-08-30T09:58:47.4322496Z 
2025-08-30T09:58:47.4322743Z manager = <freqtrade.optimize.shared_memory_manager.SharedMemoryManager object at 0x7f6574112190>
2025-08-30T09:58:47.4322854Z sample_dataframe =    open  high  low  close  volume
2025-08-30T09:58:47.4322919Z 0   100   101   99  100.5    1000
2025-08-30T09:58:47.4322981Z 1   101   102  100  101.5    1100
2025-08-30T09:58:47.4323048Z 2   102   103  101  102.5    1200
2025-08-30T09:58:47.4323110Z 3   103   104  102  103.5    1300
2025-08-30T09:58:47.4323114Z 
2025-08-30T09:58:47.4323214Z     def test_custom_key(manager, sample_dataframe):
2025-08-30T09:58:47.4323511Z         """Test sharing with custom key."""
2025-08-30T09:58:47.4323654Z         custom_key = "my_custom_key"
2025-08-30T09:58:47.4323808Z         key = manager.share_dataframe(sample_dataframe, key=custom_key)
2025-08-30T09:58:47.4323864Z     
2025-08-30T09:58:47.4323943Z         assert key == custom_key
2025-08-30T09:58:47.4324038Z         assert custom_key in manager.shared_blocks
2025-08-30T09:58:47.4324126Z         assert custom_key in manager.metadata
2025-08-30T09:58:47.4324184Z     
2025-08-30T09:58:47.4324259Z         # Retrieve with custom key
2025-08-30T09:58:47.4324368Z >       retrieved_df = manager.get_dataframe(custom_key)
2025-08-30T09:58:47.4324440Z                        ^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4324717Z E       AttributeError: 'SharedMemoryManager' object has no attribute 'get_dataframe'
2025-08-30T09:58:47.4324723Z 
2025-08-30T09:58:47.4324876Z tests/optimize/test_shared_memory_manager.py:263: AttributeError
2025-08-30T09:58:47.4325019Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4325340Z 2025-08-30 09:57:09,705 - freqtrade.optimize.shared_memory_manager - INFO - Shared DataFrame with key: my_custom_key, size: 0.00MB
2025-08-30T09:58:47.4325471Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4325629Z 2025-08-30 09:57:09 INFO Shared DataFrame with key: my_custom_key, size: 0.00MB
2025-08-30T09:58:47.4325769Z --------------------------- Captured stderr teardown ---------------------------
2025-08-30T09:58:47.4326057Z 2025-08-30 09:57:09,713 - freqtrade.optimize.shared_memory_manager - DEBUG - Cleaned up shared memory block: my_custom_key
2025-08-30T09:58:47.4326193Z ---------------------------- Captured log teardown -----------------------------
2025-08-30T09:58:47.4326339Z 2025-08-30 09:57:09 DEBUG Cleaned up shared memory block: my_custom_key
2025-08-30T09:58:47.4326526Z ________________ test_backtest_position_adjustment_detailed[2] _________________
2025-08-30T09:58:47.4326534Z 
2025-08-30T09:58:47.4326996Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4327081Z fee = <MagicMock id='140071133805328'>
2025-08-30T09:58:47.4327240Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65849ce110>
2025-08-30T09:58:47.4327303Z leverage = 2
2025-08-30T09:58:47.4327307Z 
2025-08-30T09:58:47.4327411Z     @pytest.mark.parametrize("leverage", [1, 2])
2025-08-30T09:58:47.4327645Z     def test_backtest_position_adjustment_detailed(default_conf, fee, mocker, leverage) -> None:
2025-08-30T09:58:47.4327799Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.4327888Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4328046Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=10)
2025-08-30T09:58:47.4328214Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.4328397Z         mocker.patch(f"{EXMS}.get_max_leverage", return_value=10)
2025-08-30T09:58:47.4328586Z         mocker.patch(f"{EXMS}.get_maintenance_ratio_and_amt", return_value=(0.1, 0.1))
2025-08-30T09:58:47.4328786Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting._run_funding_fees")
2025-08-30T09:58:47.4328842Z     
2025-08-30T09:58:47.4328925Z         patch_exchange(mocker)
2025-08-30T09:58:47.4329000Z         default_conf.update(
2025-08-30T09:58:47.4329058Z             {
2025-08-30T09:58:47.4329133Z                 "stake_amount": 100.0,
2025-08-30T09:58:47.4329214Z                 "dry_run_wallet": 1000.0,
2025-08-30T09:58:47.4329298Z                 "strategy": "StrategyTestV3",
2025-08-30T09:58:47.4329376Z                 "trading_mode": "futures",
2025-08-30T09:58:47.4329456Z                 "margin_mode": "isolated",
2025-08-30T09:58:47.4329512Z             }
2025-08-30T09:58:47.4329569Z         )
2025-08-30T09:58:47.4329821Z         default_conf["pairlists"] = [{"method": "StaticPairList", "allow_inactive": True}]
2025-08-30T09:58:47.4329910Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.4329989Z         backtesting._can_short = True
2025-08-30T09:58:47.4330119Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.4330195Z         pair = "XRP/USDT:USDT"
2025-08-30T09:58:47.4330260Z         row_enter = [
2025-08-30T09:58:47.4330390Z             pd.Timestamp(year=2020, month=1, day=1, hour=4, minute=0),
2025-08-30T09:58:47.4330460Z             2.1,  # Open
2025-08-30T09:58:47.4330524Z             2.2,  # High
2025-08-30T09:58:47.4330587Z             1.9,  # Low
2025-08-30T09:58:47.4330654Z             2.1,  # Close
2025-08-30T09:58:47.4330719Z             1,  # enter_long
2025-08-30T09:58:47.4330850Z             0,  # exit_long
2025-08-30T09:58:47.4330920Z             0,  # enter_short
2025-08-30T09:58:47.4330988Z             0,  # exit_short
2025-08-30T09:58:47.4331052Z             "",  # enter_tag
2025-08-30T09:58:47.4331115Z             "",  # exit_tag
2025-08-30T09:58:47.4331179Z         ]
2025-08-30T09:58:47.4331277Z         # Exit row - with slightly different values
2025-08-30T09:58:47.4331339Z         row_exit = [
2025-08-30T09:58:47.4331464Z             pd.Timestamp(year=2020, month=1, day=1, hour=5, minute=0),
2025-08-30T09:58:47.4331532Z             2.2,  # Open
2025-08-30T09:58:47.4331593Z             2.3,  # High
2025-08-30T09:58:47.4331653Z             2.0,  # Low
2025-08-30T09:58:47.4331719Z             2.2,  # Close
2025-08-30T09:58:47.4331783Z             1,  # enter_long
2025-08-30T09:58:47.4331848Z             0,  # exit_long
2025-08-30T09:58:47.4331912Z             0,  # enter_short
2025-08-30T09:58:47.4331979Z             0,  # exit_short
2025-08-30T09:58:47.4332043Z             "",  # enter_tag
2025-08-30T09:58:47.4332104Z             "",  # exit_tag
2025-08-30T09:58:47.4332163Z         ]
2025-08-30T09:58:47.4332326Z         backtesting.strategy.leverage = MagicMock(return_value=leverage)
2025-08-30T09:58:47.4332498Z         trade = backtesting._enter_trade(pair, row=row_enter, direction="long")
2025-08-30T09:58:47.4332594Z         current_time = row_enter[0].to_pydatetime()
2025-08-30T09:58:47.4332656Z         assert trade
2025-08-30T09:58:47.4332767Z         assert pytest.approx(trade.stake_amount) == 100.0
2025-08-30T09:58:47.4332899Z         assert pytest.approx(trade.amount) == 47.61904762 * leverage
2025-08-30T09:58:47.4332981Z         assert len(trade.orders) == 1
2025-08-30T09:58:47.4333165Z         backtesting.strategy.adjust_trade_position = MagicMock(return_value=None)
2025-08-30T09:58:47.4333548Z         assert pytest.approx(trade.liquidation_price) == (0.10278333 if leverage == 1 else 1.2122249)
2025-08-30T09:58:47.4333609Z     
2025-08-30T09:58:47.4333808Z         trade = backtesting._check_adjust_trade_for_candle(trade, row_enter, current_time)
2025-08-30T09:58:47.4333871Z         assert trade
2025-08-30T09:58:47.4333984Z         assert pytest.approx(trade.stake_amount) == 100.0
2025-08-30T09:58:47.4334188Z         assert pytest.approx(trade.amount) == 47.61904762 * leverage
2025-08-30T09:58:47.4334269Z         assert len(trade.orders) == 1
2025-08-30T09:58:47.4334347Z         # Increase position by 100
2025-08-30T09:58:47.4334593Z         backtesting.strategy.adjust_trade_position = MagicMock(return_value=(100, "PartIncrease"))
2025-08-30T09:58:47.4334648Z     
2025-08-30T09:58:47.4334838Z         trade = backtesting._check_adjust_trade_for_candle(trade, row_enter, current_time)
2025-08-30T09:58:47.4334897Z     
2025-08-30T09:58:47.4335004Z         liq_price = 0.1038916 if leverage == 1 else 1.2127791
2025-08-30T09:58:47.4335068Z         assert trade
2025-08-30T09:58:47.4335178Z         assert pytest.approx(trade.stake_amount) == 200.0
2025-08-30T09:58:47.4335312Z         assert pytest.approx(trade.amount) == 95.23809524 * leverage
2025-08-30T09:58:47.4335388Z         assert len(trade.orders) == 2
2025-08-30T09:58:47.4335509Z         assert trade.orders[-1].ft_order_tag == "PartIncrease"
2025-08-30T09:58:47.4335710Z         assert pytest.approx(trade.liquidation_price) == liq_price
2025-08-30T09:58:47.4335765Z     
2025-08-30T09:58:47.4335873Z         # Reduce by more than amount - no change to trade.
2025-08-30T09:58:47.4336148Z         backtesting.strategy.adjust_trade_position = MagicMock(return_value=-500)
2025-08-30T09:58:47.4336318Z         current_time = row_exit[0].to_pydatetime()
2025-08-30T09:58:47.4336417Z     
2025-08-30T09:58:47.4336678Z >       trade = backtesting._check_adjust_trade_for_candle(trade, row_exit, current_time)
2025-08-30T09:58:47.4336764Z                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4336773Z 
2025-08-30T09:58:47.4336910Z tests/optimize/test_backtesting_adjust_position.py:188: 
2025-08-30T09:58:47.4337091Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4337097Z 
2025-08-30T09:58:47.4337293Z self = <freqtrade.optimize.backtesting.Backtesting object at 0x7f6584e98350>
2025-08-30T09:58:47.4337634Z trade = Trade(id=1, pair=XRP/USDT:USDT, amount=190.47619048, is_short=False, leverage=2, open_rate=2.10000000, open_since=2020-01-01 04:00:00)
2025-08-30T09:58:47.4337765Z row = [Timestamp('2020-01-01 05:00:00'), 2.2, 2.3, 2.0, 2.2, 1, ...]
2025-08-30T09:58:47.4337871Z current_time = datetime.datetime(2020, 1, 1, 5, 0)
2025-08-30T09:58:47.4337876Z 
2025-08-30T09:58:47.4337959Z     def _check_adjust_trade_for_candle(
2025-08-30T09:58:47.4338091Z         self, trade: LocalTrade, row: tuple, current_time: datetime
2025-08-30T09:58:47.4338160Z     ) -> LocalTrade:
2025-08-30T09:58:47.4338247Z         current_rate: float = row[OPEN_IDX]
2025-08-30T09:58:47.4338368Z         current_profit = trade.calc_profit_ratio(current_rate)
2025-08-30T09:58:47.4338570Z         min_stake = self.exchange.get_min_pair_stake_amount(trade.pair, current_rate, -0.1)
2025-08-30T09:58:47.4338745Z         max_stake = self.exchange.get_max_pair_stake_amount(trade.pair, current_rate)
2025-08-30T09:58:47.4338881Z         stake_available = self.wallets.get_available_stake_amount()
2025-08-30T09:58:47.4339048Z         stake_amount, order_tag = self.strategy._adjust_trade_position_internal(
2025-08-30T09:58:47.4339186Z             trade=trade,  # type: ignore[arg-type]
2025-08-30T09:58:47.4339329Z             current_time=current_time,
2025-08-30T09:58:47.4339473Z             current_rate=current_rate,
2025-08-30T09:58:47.4339624Z             current_profit=current_profit,
2025-08-30T09:58:47.4339726Z             min_stake=min_stake,
2025-08-30T09:58:47.4339826Z             max_stake=min(max_stake, stake_available),
2025-08-30T09:58:47.4339996Z             current_entry_rate=current_rate,
2025-08-30T09:58:47.4340077Z             current_exit_rate=current_rate,
2025-08-30T09:58:47.4340166Z             current_entry_profit=current_profit,
2025-08-30T09:58:47.4340256Z             current_exit_profit=current_profit,
2025-08-30T09:58:47.4340313Z         )
2025-08-30T09:58:47.4340370Z     
2025-08-30T09:58:47.4340500Z         # Check if we should increase our position
2025-08-30T09:58:47.4340615Z         if stake_amount is not None and stake_amount > 0.0:
2025-08-30T09:58:47.4340693Z             check_adjust_entry = True
2025-08-30T09:58:47.4340837Z             if self.strategy.max_entry_position_adjustment > -1:
2025-08-30T09:58:47.4340943Z                 entry_count = trade.nr_of_successful_entries
2025-08-30T09:58:47.4341131Z                 check_adjust_entry = entry_count <= self.strategy.max_entry_position_adjustment
2025-08-30T09:58:47.4341205Z             if check_adjust_entry:
2025-08-30T09:58:47.4341299Z                 pos_trade = self._enter_trade(
2025-08-30T09:58:47.4341369Z                     trade.pair,
2025-08-30T09:58:47.4341434Z                     row,
2025-08-30T09:58:47.4341527Z                     "short" if trade.is_short else "long",
2025-08-30T09:58:47.4341600Z                     stake_amount,
2025-08-30T09:58:47.4341663Z                     trade,
2025-08-30T09:58:47.4341784Z                     entry_tag1=order_tag,
2025-08-30T09:58:47.4341851Z                 )
2025-08-30T09:58:47.4341926Z                 if pos_trade is not None:
2025-08-30T09:58:47.4342004Z                     self.wallets.update()
2025-08-30T09:58:47.4342078Z                     return pos_trade
2025-08-30T09:58:47.4342133Z     
2025-08-30T09:58:47.4342239Z         if stake_amount is not None and stake_amount < 0.0:
2025-08-30T09:58:47.4342326Z             amount = amount_to_contract_precision(
2025-08-30T09:58:47.4342391Z                 abs(
2025-08-30T09:58:47.4342455Z                     float(
2025-08-30T09:58:47.4342538Z >                       FtPrecise(stake_amount)
2025-08-30T09:58:47.4342606Z                         ^^^^^^^^^
2025-08-30T09:58:47.4342736Z                         * FtPrecise(trade.amount)
2025-08-30T09:58:47.4342831Z                         / FtPrecise(trade.stake_amount)
2025-08-30T09:58:47.4342893Z                     )
2025-08-30T09:58:47.4342957Z                 ),
2025-08-30T09:58:47.4343036Z                 trade.amount_precision,
2025-08-30T09:58:47.4343113Z                 self.precision_mode,
2025-08-30T09:58:47.4343188Z                 trade.contract_size,
2025-08-30T09:58:47.4343244Z             )
2025-08-30T09:58:47.4343505Z E           NameError: name 'FtPrecise' is not defined
2025-08-30T09:58:47.4343515Z 
2025-08-30T09:58:47.4343679Z freqtrade/optimize/backtesting.py:711: NameError
2025-08-30T09:58:47.4343826Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4343975Z 2025-08-30 09:57:10,516 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4344220Z 2025-08-30 09:57:10,517 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4344389Z 2025-08-30 09:57:10,517 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4344575Z 2025-08-30 09:57:10,518 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4344803Z 2025-08-30 09:57:10,518 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4345061Z 2025-08-30 09:57:10,544 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4345506Z 2025-08-30 09:57:10,544 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4346051Z 2025-08-30 09:57:10,546 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4346202Z 'nonexiting_module''
2025-08-30T09:58:47.4346745Z 2025-08-30 09:57:10,546 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4346926Z 2025-08-30 09:57:10,547 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4347418Z 2025-08-30 09:57:10,547 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4347753Z 2025-08-30 09:57:10,548 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4348086Z 2025-08-30 09:57:10,548 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4348426Z 2025-08-30 09:57:10,548 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4348762Z 2025-08-30 09:57:10,549 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.4349176Z 2025-08-30 09:57:10,549 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4349574Z 2025-08-30 09:57:10,549 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.4349902Z 2025-08-30 09:57:10,550 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4350244Z 2025-08-30 09:57:10,550 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4350473Z 2025-08-30 09:57:10,550 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4350761Z 2025-08-30 09:57:10,551 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4351017Z 2025-08-30 09:57:10,551 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4351311Z 2025-08-30 09:57:10,551 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4351608Z 2025-08-30 09:57:10,551 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4351876Z 2025-08-30 09:57:10,552 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4352152Z 2025-08-30 09:57:10,552 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4352608Z 2025-08-30 09:57:10,552 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4352952Z 2025-08-30 09:57:10,553 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4353203Z 2025-08-30 09:57:10,553 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4353548Z 2025-08-30 09:57:10,553 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 100.0
2025-08-30T09:58:47.4353812Z 2025-08-30 09:57:10,554 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4354120Z 2025-08-30 09:57:10,554 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4354372Z 2025-08-30 09:57:10,554 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: False
2025-08-30T09:58:47.4354718Z 2025-08-30 09:57:10,554 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4355002Z 2025-08-30 09:57:10,555 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4355255Z 2025-08-30 09:57:10,555 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4355591Z 2025-08-30 09:57:10,555 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4355885Z 2025-08-30 09:57:10,556 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4356166Z 2025-08-30 09:57:10,556 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4356451Z 2025-08-30 09:57:10,556 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4356694Z 2025-08-30 09:57:10,557 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4356942Z 2025-08-30 09:57:10,557 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4357421Z 2025-08-30 09:57:10,559 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4357908Z 2025-08-30 09:57:10,560 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4358462Z 2025-08-30 09:57:10,563 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4358799Z 2025-08-30 09:57:10,564 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4359154Z 2025-08-30 09:57:10,564 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4359390Z 2025-08-30 09:57:10,567 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4359600Z 2025-08-30 09:57:10,567 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4359926Z 2025-08-30 09:57:10,568 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4360131Z 2025-08-30 09:57:10,568 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4360384Z 2025-08-30 09:57:10,568 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4360809Z 2025-08-30 09:57:10,569 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4361215Z 2025-08-30 09:57:10,569 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4361681Z 2025-08-30 09:57:10,570 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4361891Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4362152Z 2025-08-30 09:57:10,570 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4362577Z 2025-08-30 09:57:10,571 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4362777Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4363194Z 2025-08-30 09:57:10,571 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4363683Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4363949Z 2025-08-30 09:57:10,572 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4364755Z 2025-08-30 09:57:10,572 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4364989Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4365258Z 2025-08-30 09:57:10,573 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4365683Z 2025-08-30 09:57:10,574 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4365895Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4366152Z 2025-08-30 09:57:10,574 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4366573Z 2025-08-30 09:57:10,574 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4366843Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4374915Z 2025-08-30 09:57:10,575 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4375442Z 2025-08-30 09:57:10,575 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4375670Z initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4375929Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4376052Z 2025-08-30 09:57:10 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4376182Z 2025-08-30 09:57:10 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4376271Z 2025-08-30 09:57:10 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4376372Z 2025-08-30 09:57:10 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4376498Z 2025-08-30 09:57:10 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4376624Z 2025-08-30 09:57:10 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4376956Z 2025-08-30 09:57:10 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4377453Z 2025-08-30 09:57:10 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4377893Z 2025-08-30 09:57:10 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4377990Z 2025-08-30 09:57:10 INFO Found no parameter file.
2025-08-30T09:58:47.4378281Z 2025-08-30 09:57:10 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4378464Z 2025-08-30 09:57:10 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4378643Z 2025-08-30 09:57:10 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4378836Z 2025-08-30 09:57:10 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4379028Z 2025-08-30 09:57:10 INFO Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.4379289Z 2025-08-30 09:57:10 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4379563Z 2025-08-30 09:57:10 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.4379750Z 2025-08-30 09:57:10 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4379949Z 2025-08-30 09:57:10 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4380110Z 2025-08-30 09:57:10 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4380219Z 2025-08-30 09:57:10 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4380340Z 2025-08-30 09:57:10 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4380492Z 2025-08-30 09:57:10 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4380648Z 2025-08-30 09:57:10 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4380784Z 2025-08-30 09:57:10 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4380929Z 2025-08-30 09:57:10 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4381235Z 2025-08-30 09:57:10 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4381428Z 2025-08-30 09:57:10 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4381606Z 2025-08-30 09:57:10 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4381715Z 2025-08-30 09:57:10 INFO Strategy using stake_amount: 100.0
2025-08-30T09:58:47.4381842Z 2025-08-30 09:57:10 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4382007Z 2025-08-30 09:57:10 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4382125Z 2025-08-30 09:57:10 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.4382244Z 2025-08-30 09:57:10 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4382391Z 2025-08-30 09:57:10 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4382509Z 2025-08-30 09:57:10 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4382690Z 2025-08-30 09:57:10 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4382846Z 2025-08-30 09:57:10 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4382986Z 2025-08-30 09:57:10 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4383129Z 2025-08-30 09:57:10 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4383245Z 2025-08-30 09:57:10 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4383455Z 2025-08-30 09:57:10 INFO Validating configuration ...
2025-08-30T09:58:47.4383807Z 2025-08-30 09:57:10 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4384099Z 2025-08-30 09:57:10 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4384540Z 2025-08-30 09:57:10 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4384739Z 2025-08-30 09:57:10 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4384919Z 2025-08-30 09:57:10 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4385060Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4385279Z 2025-08-30 09:57:10 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4385718Z 2025-08-30 09:57:10 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4385848Z 2025-08-30 09:57:10 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4386008Z 2025-08-30 09:57:10 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4386197Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4386454Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4387001Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4387203Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4387733Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4388261Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4388398Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4388926Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4389054Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4389973Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4390119Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4390645Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4390785Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4391387Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.99500000, stop_loss=1.99500000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4391542Z ______________________ test_backtest_position_adjustment _______________________
2025-08-30T09:58:47.4391554Z 
2025-08-30T09:58:47.4391719Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4391782Z key = 'date'
2025-08-30T09:58:47.4391787Z 
2025-08-30T09:58:47.4391863Z     def get_loc(self, key):
2025-08-30T09:58:47.4391926Z         """
2025-08-30T09:58:47.4392075Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4392131Z     
2025-08-30T09:58:47.4392198Z         Parameters
2025-08-30T09:58:47.4392260Z         ----------
2025-08-30T09:58:47.4392321Z         key : label
2025-08-30T09:58:47.4392379Z     
2025-08-30T09:58:47.4392440Z         Returns
2025-08-30T09:58:47.4392500Z         -------
2025-08-30T09:58:47.4392627Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4392687Z     
2025-08-30T09:58:47.4392749Z         Examples
2025-08-30T09:58:47.4392810Z         --------
2025-08-30T09:58:47.4392902Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4392987Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4393045Z         1
2025-08-30T09:58:47.4393100Z     
2025-08-30T09:58:47.4393200Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4393279Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4393456Z         slice(1, 3, None)
2025-08-30T09:58:47.4393514Z     
2025-08-30T09:58:47.4393622Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4393707Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4393788Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4393921Z         """
2025-08-30T09:58:47.4394015Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4394076Z         try:
2025-08-30T09:58:47.4394166Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4394241Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4394249Z 
2025-08-30T09:58:47.4394497Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4394606Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4394776Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4394835Z     ???
2025-08-30T09:58:47.4394992Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4395052Z     ???
2025-08-30T09:58:47.4395319Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4395374Z     ???
2025-08-30T09:58:47.4395476Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4395487Z 
2025-08-30T09:58:47.4395542Z >   ???
2025-08-30T09:58:47.4395613Z E   KeyError: 'date'
2025-08-30T09:58:47.4395618Z 
2025-08-30T09:58:47.4395736Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4395805Z 
2025-08-30T09:58:47.4395963Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4395968Z 
2025-08-30T09:58:47.4396410Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4396492Z fee = <MagicMock id='140071136720016'>
2025-08-30T09:58:47.4396645Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65943f1bd0>
2025-08-30T09:58:47.4396844Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.4396849Z 
2025-08-30T09:58:47.4397067Z     def test_backtest_position_adjustment(default_conf, fee, mocker, testdatadir) -> None:
2025-08-30T09:58:47.4397216Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.4397305Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.4397391Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4397467Z         mocker.patch(
2025-08-30T09:58:47.4397637Z             "freqtrade.optimize.backtesting.amount_to_contract_precision",
2025-08-30T09:58:47.4397726Z             lambda x, *args, **kwargs: round(x, 8),
2025-08-30T09:58:47.4397790Z         )
2025-08-30T09:58:47.4397961Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.4398134Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.4398215Z         patch_exchange(mocker)
2025-08-30T09:58:47.4398290Z         default_conf.update(
2025-08-30T09:58:47.4398458Z             {"stake_amount": 100.0, "dry_run_wallet": 1000.0, "strategy": "StrategyTestV3"}
2025-08-30T09:58:47.4398518Z         )
2025-08-30T09:58:47.4398614Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.4398749Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.4398823Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.4398932Z         timerange = TimeRange("date", None, 1517227800, 0)
2025-08-30T09:58:47.4399012Z         data = history.load_data(
2025-08-30T09:58:47.4399209Z             datadir=testdatadir, timeframe="5m", pairs=["UNITTEST/BTC"], timerange=timerange
2025-08-30T09:58:47.4399266Z         )
2025-08-30T09:58:47.4399405Z         backtesting.strategy.position_adjustment_enable = True
2025-08-30T09:58:47.4399551Z >       processed = backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.4399633Z                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4399637Z 
2025-08-30T09:58:47.4399772Z tests/optimize/test_backtesting_adjust_position.py:40: 
2025-08-30T09:58:47.4399921Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4400070Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.4400166Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.4400299Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.4400409Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.4400523Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4400712Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4400797Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4400863Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4400967Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4400972Z 
2025-08-30T09:58:47.4401130Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4401190Z key = 'date'
2025-08-30T09:58:47.4401194Z 
2025-08-30T09:58:47.4401266Z     def get_loc(self, key):
2025-08-30T09:58:47.4401322Z         """
2025-08-30T09:58:47.4401472Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4401533Z     
2025-08-30T09:58:47.4401596Z         Parameters
2025-08-30T09:58:47.4401705Z         ----------
2025-08-30T09:58:47.4401767Z         key : label
2025-08-30T09:58:47.4401828Z     
2025-08-30T09:58:47.4401886Z         Returns
2025-08-30T09:58:47.4401946Z         -------
2025-08-30T09:58:47.4402075Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4402130Z     
2025-08-30T09:58:47.4402191Z         Examples
2025-08-30T09:58:47.4402251Z         --------
2025-08-30T09:58:47.4402346Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4402423Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4402477Z         1
2025-08-30T09:58:47.4402533Z     
2025-08-30T09:58:47.4402626Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4402704Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4402816Z         slice(1, 3, None)
2025-08-30T09:58:47.4402872Z     
2025-08-30T09:58:47.4402973Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4403054Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4403142Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4403200Z         """
2025-08-30T09:58:47.4403290Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4403515Z         try:
2025-08-30T09:58:47.4403658Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4403737Z         except KeyError as err:
2025-08-30T09:58:47.4403825Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4403923Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4404033Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4404094Z             ):
2025-08-30T09:58:47.4404184Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4404263Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4404334Z E           KeyError: 'date'
2025-08-30T09:58:47.4404340Z 
2025-08-30T09:58:47.4404532Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4404676Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4404826Z 2025-08-30 09:57:10,614 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4405071Z 2025-08-30 09:57:10,614 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4405231Z 2025-08-30 09:57:10,615 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4405417Z 2025-08-30 09:57:10,616 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4405642Z 2025-08-30 09:57:10,616 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4405980Z 2025-08-30 09:57:10,617 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4406433Z 2025-08-30 09:57:10,618 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4407029Z 2025-08-30 09:57:10,619 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4407104Z 'nonexiting_module''
2025-08-30T09:58:47.4407636Z 2025-08-30 09:57:10,620 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4407816Z 2025-08-30 09:57:10,620 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4408253Z 2025-08-30 09:57:10,620 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4408578Z 2025-08-30 09:57:10,621 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4408958Z 2025-08-30 09:57:10,621 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4409300Z 2025-08-30 09:57:10,622 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4409636Z 2025-08-30 09:57:10,622 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.4410311Z 2025-08-30 09:57:10,622 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4410758Z 2025-08-30 09:57:10,623 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.4411099Z 2025-08-30 09:57:10,623 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.4411443Z 2025-08-30 09:57:10,623 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4411675Z 2025-08-30 09:57:10,623 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4411906Z 2025-08-30 09:57:10,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4412156Z 2025-08-30 09:57:10,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4412449Z 2025-08-30 09:57:10,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4412750Z 2025-08-30 09:57:10,625 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4413013Z 2025-08-30 09:57:10,625 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4413306Z 2025-08-30 09:57:10,625 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4413938Z 2025-08-30 09:57:10,626 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4414272Z 2025-08-30 09:57:10,626 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4414725Z 2025-08-30 09:57:10,627 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4415147Z 2025-08-30 09:57:10,627 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 100.0
2025-08-30T09:58:47.4415412Z 2025-08-30 09:57:10,627 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4415725Z 2025-08-30 09:57:10,628 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4416043Z 2025-08-30 09:57:10,628 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: False
2025-08-30T09:58:47.4416305Z 2025-08-30 09:57:10,628 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4416590Z 2025-08-30 09:57:10,629 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4416840Z 2025-08-30 09:57:10,629 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4417119Z 2025-08-30 09:57:10,629 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4417414Z 2025-08-30 09:57:10,630 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4417696Z 2025-08-30 09:57:10,630 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4418036Z 2025-08-30 09:57:10,630 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4418281Z 2025-08-30 09:57:10,630 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 10
2025-08-30T09:58:47.4418527Z 2025-08-30 09:57:10,631 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4419004Z 2025-08-30 09:57:10,633 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4419468Z 2025-08-30 09:57:10,634 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4420029Z 2025-08-30 09:57:10,636 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4420365Z 2025-08-30 09:57:10,637 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4420669Z 2025-08-30 09:57:10,638 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4420902Z 2025-08-30 09:57:10,639 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4421105Z 2025-08-30 09:57:10,640 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4421440Z 2025-08-30 09:57:10,640 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4421642Z 2025-08-30 09:57:10,640 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4421892Z 2025-08-30 09:57:10,641 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4422180Z 2025-08-30 09:57:10,641 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4422433Z 2025-08-30 09:57:10,641 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4422576Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4422692Z 2025-08-30 09:57:10 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4422820Z 2025-08-30 09:57:10 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4422964Z 2025-08-30 09:57:10 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4423067Z 2025-08-30 09:57:10 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4423191Z 2025-08-30 09:57:10 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4423309Z 2025-08-30 09:57:10 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4423924Z 2025-08-30 09:57:10 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4424425Z 2025-08-30 09:57:10 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4424843Z 2025-08-30 09:57:10 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4424943Z 2025-08-30 09:57:10 INFO Found no parameter file.
2025-08-30T09:58:47.4425231Z 2025-08-30 09:57:10 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4425412Z 2025-08-30 09:57:10 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4425594Z 2025-08-30 09:57:10 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4425851Z 2025-08-30 09:57:10 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4426039Z 2025-08-30 09:57:10 INFO Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.4426302Z 2025-08-30 09:57:10 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4426535Z 2025-08-30 09:57:10 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.4426722Z 2025-08-30 09:57:10 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.4426912Z 2025-08-30 09:57:10 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4427021Z 2025-08-30 09:57:10 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4427184Z 2025-08-30 09:57:10 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4427304Z 2025-08-30 09:57:10 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4427455Z 2025-08-30 09:57:10 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4427616Z 2025-08-30 09:57:10 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4427744Z 2025-08-30 09:57:10 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4427889Z 2025-08-30 09:57:10 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4428190Z 2025-08-30 09:57:10 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4428378Z 2025-08-30 09:57:10 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4428501Z 2025-08-30 09:57:10 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4428613Z 2025-08-30 09:57:10 INFO Strategy using stake_amount: 100.0
2025-08-30T09:58:47.4428736Z 2025-08-30 09:57:10 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4428906Z 2025-08-30 09:57:10 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4429024Z 2025-08-30 09:57:10 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.4429146Z 2025-08-30 09:57:10 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4429289Z 2025-08-30 09:57:10 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4429410Z 2025-08-30 09:57:10 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4429549Z 2025-08-30 09:57:10 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4429699Z 2025-08-30 09:57:10 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4429844Z 2025-08-30 09:57:10 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4430047Z 2025-08-30 09:57:10 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4430159Z 2025-08-30 09:57:10 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.4430265Z 2025-08-30 09:57:10 INFO Validating configuration ...
2025-08-30T09:58:47.4430649Z 2025-08-30 09:57:10 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4430933Z 2025-08-30 09:57:10 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4431369Z 2025-08-30 09:57:10 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4431561Z 2025-08-30 09:57:10 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4431732Z 2025-08-30 09:57:10 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4431876Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4431991Z 2025-08-30 09:57:10 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4432217Z 2025-08-30 09:57:10 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4432374Z 2025-08-30 09:57:10 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4432527Z 2025-08-30 09:57:10 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4432710Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4432870Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4433035Z ________________ test_backtest_position_adjustment_detailed[1] _________________
2025-08-30T09:58:47.4433040Z 
2025-08-30T09:58:47.4433606Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.FUTURES: 'futures'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4433780Z fee = <MagicMock id='140075127967184'>
2025-08-30T09:58:47.4433943Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da9998d0>
2025-08-30T09:58:47.4434006Z leverage = 1
2025-08-30T09:58:47.4434011Z 
2025-08-30T09:58:47.4434120Z     @pytest.mark.parametrize("leverage", [1, 2])
2025-08-30T09:58:47.4434356Z     def test_backtest_position_adjustment_detailed(default_conf, fee, mocker, leverage) -> None:
2025-08-30T09:58:47.4434446Z         default_conf["use_exit_signal"] = False
2025-08-30T09:58:47.4434536Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4434687Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=10)
2025-08-30T09:58:47.4434853Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.4434983Z         mocker.patch(f"{EXMS}.get_max_leverage", return_value=10)
2025-08-30T09:58:47.4435159Z         mocker.patch(f"{EXMS}.get_maintenance_ratio_and_amt", return_value=(0.1, 0.1))
2025-08-30T09:58:47.4435369Z         mocker.patch("freqtrade.optimize.backtesting.Backtesting._run_funding_fees")
2025-08-30T09:58:47.4435425Z     
2025-08-30T09:58:47.4435505Z         patch_exchange(mocker)
2025-08-30T09:58:47.4435580Z         default_conf.update(
2025-08-30T09:58:47.4435639Z             {
2025-08-30T09:58:47.4435736Z                 "stake_amount": 100.0,
2025-08-30T09:58:47.4435876Z                 "dry_run_wallet": 1000.0,
2025-08-30T09:58:47.4436034Z                 "strategy": "StrategyTestV3",
2025-08-30T09:58:47.4436181Z                 "trading_mode": "futures",
2025-08-30T09:58:47.4436302Z                 "margin_mode": "isolated",
2025-08-30T09:58:47.4436361Z             }
2025-08-30T09:58:47.4436419Z         )
2025-08-30T09:58:47.4436611Z         default_conf["pairlists"] = [{"method": "StaticPairList", "allow_inactive": True}]
2025-08-30T09:58:47.4436702Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.4436866Z         backtesting._can_short = True
2025-08-30T09:58:47.4437006Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.4437079Z         pair = "XRP/USDT:USDT"
2025-08-30T09:58:47.4437143Z         row_enter = [
2025-08-30T09:58:47.4437271Z             pd.Timestamp(year=2020, month=1, day=1, hour=4, minute=0),
2025-08-30T09:58:47.4437401Z             2.1,  # Open
2025-08-30T09:58:47.4437466Z             2.2,  # High
2025-08-30T09:58:47.4437531Z             1.9,  # Low
2025-08-30T09:58:47.4437597Z             2.1,  # Close
2025-08-30T09:58:47.4437662Z             1,  # enter_long
2025-08-30T09:58:47.4437726Z             0,  # exit_long
2025-08-30T09:58:47.4437792Z             0,  # enter_short
2025-08-30T09:58:47.4437858Z             0,  # exit_short
2025-08-30T09:58:47.4437920Z             "",  # enter_tag
2025-08-30T09:58:47.4437982Z             "",  # exit_tag
2025-08-30T09:58:47.4438042Z         ]
2025-08-30T09:58:47.4438145Z         # Exit row - with slightly different values
2025-08-30T09:58:47.4438208Z         row_exit = [
2025-08-30T09:58:47.4438338Z             pd.Timestamp(year=2020, month=1, day=1, hour=5, minute=0),
2025-08-30T09:58:47.4438400Z             2.2,  # Open
2025-08-30T09:58:47.4438461Z             2.3,  # High
2025-08-30T09:58:47.4438521Z             2.0,  # Low
2025-08-30T09:58:47.4438645Z             2.2,  # Close
2025-08-30T09:58:47.4438709Z             1,  # enter_long
2025-08-30T09:58:47.4438772Z             0,  # exit_long
2025-08-30T09:58:47.4438841Z             0,  # enter_short
2025-08-30T09:58:47.4438902Z             0,  # exit_short
2025-08-30T09:58:47.4438963Z             "",  # enter_tag
2025-08-30T09:58:47.4439023Z             "",  # exit_tag
2025-08-30T09:58:47.4439082Z         ]
2025-08-30T09:58:47.4439368Z         backtesting.strategy.leverage = MagicMock(return_value=leverage)
2025-08-30T09:58:47.4439682Z         trade = backtesting._enter_trade(pair, row=row_enter, direction="long")
2025-08-30T09:58:47.4439808Z         current_time = row_enter[0].to_pydatetime()
2025-08-30T09:58:47.4439875Z         assert trade
2025-08-30T09:58:47.4440045Z         assert pytest.approx(trade.stake_amount) == 100.0
2025-08-30T09:58:47.4440187Z         assert pytest.approx(trade.amount) == 47.61904762 * leverage
2025-08-30T09:58:47.4440266Z         assert len(trade.orders) == 1
2025-08-30T09:58:47.4440458Z         backtesting.strategy.adjust_trade_position = MagicMock(return_value=None)
2025-08-30T09:58:47.4440688Z         assert pytest.approx(trade.liquidation_price) == (0.10278333 if leverage == 1 else 1.2122249)
2025-08-30T09:58:47.4440748Z     
2025-08-30T09:58:47.4440944Z         trade = backtesting._check_adjust_trade_for_candle(trade, row_enter, current_time)
2025-08-30T09:58:47.4441007Z         assert trade
2025-08-30T09:58:47.4441118Z         assert pytest.approx(trade.stake_amount) == 100.0
2025-08-30T09:58:47.4441247Z         assert pytest.approx(trade.amount) == 47.61904762 * leverage
2025-08-30T09:58:47.4441326Z         assert len(trade.orders) == 1
2025-08-30T09:58:47.4441411Z         # Increase position by 100
2025-08-30T09:58:47.4441648Z         backtesting.strategy.adjust_trade_position = MagicMock(return_value=(100, "PartIncrease"))
2025-08-30T09:58:47.4441703Z     
2025-08-30T09:58:47.4441895Z         trade = backtesting._check_adjust_trade_for_candle(trade, row_enter, current_time)
2025-08-30T09:58:47.4441956Z     
2025-08-30T09:58:47.4442063Z         liq_price = 0.1038916 if leverage == 1 else 1.2127791
2025-08-30T09:58:47.4442125Z         assert trade
2025-08-30T09:58:47.4442234Z         assert pytest.approx(trade.stake_amount) == 200.0
2025-08-30T09:58:47.4442365Z         assert pytest.approx(trade.amount) == 95.23809524 * leverage
2025-08-30T09:58:47.4442441Z         assert len(trade.orders) == 2
2025-08-30T09:58:47.4442563Z         assert trade.orders[-1].ft_order_tag == "PartIncrease"
2025-08-30T09:58:47.4442696Z         assert pytest.approx(trade.liquidation_price) == liq_price
2025-08-30T09:58:47.4442801Z     
2025-08-30T09:58:47.4442907Z         # Reduce by more than amount - no change to trade.
2025-08-30T09:58:47.4443098Z         backtesting.strategy.adjust_trade_position = MagicMock(return_value=-500)
2025-08-30T09:58:47.4443190Z         current_time = row_exit[0].to_pydatetime()
2025-08-30T09:58:47.4443245Z     
2025-08-30T09:58:47.4443730Z >       trade = backtesting._check_adjust_trade_for_candle(trade, row_exit, current_time)
2025-08-30T09:58:47.4443824Z                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4443831Z 
2025-08-30T09:58:47.4443968Z tests/optimize/test_backtesting_adjust_position.py:188: 
2025-08-30T09:58:47.4444073Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4444078Z 
2025-08-30T09:58:47.4444274Z self = <freqtrade.optimize.backtesting.Backtesting object at 0x7f64da7606d0>
2025-08-30T09:58:47.4444607Z trade = Trade(id=1, pair=XRP/USDT:USDT, amount=95.23809524, is_short=False, leverage=1, open_rate=2.10000000, open_since=2020-01-01 04:00:00)
2025-08-30T09:58:47.4444741Z row = [Timestamp('2020-01-01 05:00:00'), 2.2, 2.3, 2.0, 2.2, 1, ...]
2025-08-30T09:58:47.4444842Z current_time = datetime.datetime(2020, 1, 1, 5, 0)
2025-08-30T09:58:47.4444847Z 
2025-08-30T09:58:47.4444927Z     def _check_adjust_trade_for_candle(
2025-08-30T09:58:47.4445130Z         self, trade: LocalTrade, row: tuple, current_time: datetime
2025-08-30T09:58:47.4445197Z     ) -> LocalTrade:
2025-08-30T09:58:47.4445282Z         current_rate: float = row[OPEN_IDX]
2025-08-30T09:58:47.4445401Z         current_profit = trade.calc_profit_ratio(current_rate)
2025-08-30T09:58:47.4445603Z         min_stake = self.exchange.get_min_pair_stake_amount(trade.pair, current_rate, -0.1)
2025-08-30T09:58:47.4445782Z         max_stake = self.exchange.get_max_pair_stake_amount(trade.pair, current_rate)
2025-08-30T09:58:47.4445913Z         stake_available = self.wallets.get_available_stake_amount()
2025-08-30T09:58:47.4446082Z         stake_amount, order_tag = self.strategy._adjust_trade_position_internal(
2025-08-30T09:58:47.4446168Z             trade=trade,  # type: ignore[arg-type]
2025-08-30T09:58:47.4446321Z             current_time=current_time,
2025-08-30T09:58:47.4446404Z             current_rate=current_rate,
2025-08-30T09:58:47.4446487Z             current_profit=current_profit,
2025-08-30T09:58:47.4446561Z             min_stake=min_stake,
2025-08-30T09:58:47.4446662Z             max_stake=min(max_stake, stake_available),
2025-08-30T09:58:47.4446746Z             current_entry_rate=current_rate,
2025-08-30T09:58:47.4446825Z             current_exit_rate=current_rate,
2025-08-30T09:58:47.4446912Z             current_entry_profit=current_profit,
2025-08-30T09:58:47.4447000Z             current_exit_profit=current_profit,
2025-08-30T09:58:47.4447057Z         )
2025-08-30T09:58:47.4447111Z     
2025-08-30T09:58:47.4447203Z         # Check if we should increase our position
2025-08-30T09:58:47.4447311Z         if stake_amount is not None and stake_amount > 0.0:
2025-08-30T09:58:47.4447388Z             check_adjust_entry = True
2025-08-30T09:58:47.4447510Z             if self.strategy.max_entry_position_adjustment > -1:
2025-08-30T09:58:47.4447614Z                 entry_count = trade.nr_of_successful_entries
2025-08-30T09:58:47.4447800Z                 check_adjust_entry = entry_count <= self.strategy.max_entry_position_adjustment
2025-08-30T09:58:47.4447877Z             if check_adjust_entry:
2025-08-30T09:58:47.4447961Z                 pos_trade = self._enter_trade(
2025-08-30T09:58:47.4448032Z                     trade.pair,
2025-08-30T09:58:47.4448094Z                     row,
2025-08-30T09:58:47.4448186Z                     "short" if trade.is_short else "long",
2025-08-30T09:58:47.4448254Z                     stake_amount,
2025-08-30T09:58:47.4448319Z                     trade,
2025-08-30T09:58:47.4448395Z                     entry_tag1=order_tag,
2025-08-30T09:58:47.4448457Z                 )
2025-08-30T09:58:47.4448600Z                 if pos_trade is not None:
2025-08-30T09:58:47.4448679Z                     self.wallets.update()
2025-08-30T09:58:47.4448757Z                     return pos_trade
2025-08-30T09:58:47.4448811Z     
2025-08-30T09:58:47.4448917Z         if stake_amount is not None and stake_amount < 0.0:
2025-08-30T09:58:47.4449011Z             amount = amount_to_contract_precision(
2025-08-30T09:58:47.4449073Z                 abs(
2025-08-30T09:58:47.4449175Z                     float(
2025-08-30T09:58:47.4449259Z >                       FtPrecise(stake_amount)
2025-08-30T09:58:47.4449330Z                         ^^^^^^^^^
2025-08-30T09:58:47.4449415Z                         * FtPrecise(trade.amount)
2025-08-30T09:58:47.4449502Z                         / FtPrecise(trade.stake_amount)
2025-08-30T09:58:47.4449566Z                     )
2025-08-30T09:58:47.4449623Z                 ),
2025-08-30T09:58:47.4449699Z                 trade.amount_precision,
2025-08-30T09:58:47.4449773Z                 self.precision_mode,
2025-08-30T09:58:47.4449853Z                 trade.contract_size,
2025-08-30T09:58:47.4449909Z             )
2025-08-30T09:58:47.4450011Z E           NameError: name 'FtPrecise' is not defined
2025-08-30T09:58:47.4450016Z 
2025-08-30T09:58:47.4450126Z freqtrade/optimize/backtesting.py:711: NameError
2025-08-30T09:58:47.4450265Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4450460Z 2025-08-30 09:57:10,862 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4450704Z 2025-08-30 09:57:10,862 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4450864Z 2025-08-30 09:57:10,863 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4451048Z 2025-08-30 09:57:10,864 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4451278Z 2025-08-30 09:57:10,864 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4451531Z 2025-08-30 09:57:10,890 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4452016Z 2025-08-30 09:57:10,890 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4452564Z 2025-08-30 09:57:10,892 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4452635Z 'nonexiting_module''
2025-08-30T09:58:47.4453170Z 2025-08-30 09:57:10,892 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4453456Z 2025-08-30 09:57:10,893 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4453895Z 2025-08-30 09:57:10,893 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4454221Z 2025-08-30 09:57:10,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4454546Z 2025-08-30 09:57:10,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4454885Z 2025-08-30 09:57:10,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4455217Z 2025-08-30 09:57:10,895 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.4455628Z 2025-08-30 09:57:10,895 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4455966Z 2025-08-30 09:57:10,895 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.4456362Z 2025-08-30 09:57:10,896 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4456756Z 2025-08-30 09:57:10,896 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4456990Z 2025-08-30 09:57:10,896 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4457220Z 2025-08-30 09:57:10,896 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4457474Z 2025-08-30 09:57:10,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4457762Z 2025-08-30 09:57:10,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4458059Z 2025-08-30 09:57:10,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4458326Z 2025-08-30 09:57:10,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4458602Z 2025-08-30 09:57:10,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4459107Z 2025-08-30 09:57:10,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4459476Z 2025-08-30 09:57:10,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4459943Z 2025-08-30 09:57:10,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4460201Z 2025-08-30 09:57:10,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 100.0
2025-08-30T09:58:47.4460544Z 2025-08-30 09:57:10,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4460908Z 2025-08-30 09:57:10,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4461349Z 2025-08-30 09:57:10,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: False
2025-08-30T09:58:47.4461812Z 2025-08-30 09:57:10,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4462329Z 2025-08-30 09:57:10,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4462695Z 2025-08-30 09:57:10,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4462984Z 2025-08-30 09:57:10,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4463282Z 2025-08-30 09:57:10,902 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4463671Z 2025-08-30 09:57:10,902 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4463961Z 2025-08-30 09:57:10,902 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4464201Z 2025-08-30 09:57:10,902 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4464447Z 2025-08-30 09:57:10,903 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4464923Z 2025-08-30 09:57:10,905 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4465421Z 2025-08-30 09:57:10,906 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4465976Z 2025-08-30 09:57:10,908 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4466373Z 2025-08-30 09:57:10,909 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4466675Z 2025-08-30 09:57:10,910 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4466907Z 2025-08-30 09:57:10,912 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4467116Z 2025-08-30 09:57:10,912 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4467441Z 2025-08-30 09:57:10,913 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4467648Z 2025-08-30 09:57:10,913 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4467900Z 2025-08-30 09:57:10,914 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4468243Z 2025-08-30 09:57:10,914 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4468499Z 2025-08-30 09:57:10,914 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4468937Z 2025-08-30 09:57:10,915 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4469143Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4469403Z 2025-08-30 09:57:10,916 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4469877Z 2025-08-30 09:57:10,916 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4470082Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4470505Z 2025-08-30 09:57:10,916 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4470702Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4470958Z 2025-08-30 09:57:10,917 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4471376Z 2025-08-30 09:57:10,917 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4471577Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4471831Z 2025-08-30 09:57:10,919 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4472253Z 2025-08-30 09:57:10,919 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4472449Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4472703Z 2025-08-30 09:57:10,920 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4473121Z 2025-08-30 09:57:10,920 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4473458Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4473716Z 2025-08-30 09:57:10,920 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4474190Z 2025-08-30 09:57:10,921 - freqtrade.persistence.trade_model - DEBUG - XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, 
2025-08-30T09:58:47.4474393Z initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4474534Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4474648Z 2025-08-30 09:57:10 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4474777Z 2025-08-30 09:57:10 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4474857Z 2025-08-30 09:57:10 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4474951Z 2025-08-30 09:57:10 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4475080Z 2025-08-30 09:57:10 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4475199Z 2025-08-30 09:57:10 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4475524Z 2025-08-30 09:57:10 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4476103Z 2025-08-30 09:57:10 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4476517Z 2025-08-30 09:57:10 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4476610Z 2025-08-30 09:57:10 INFO Found no parameter file.
2025-08-30T09:58:47.4476896Z 2025-08-30 09:57:10 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4477074Z 2025-08-30 09:57:10 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4477307Z 2025-08-30 09:57:10 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4477503Z 2025-08-30 09:57:10 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4477689Z 2025-08-30 09:57:10 INFO Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.4477951Z 2025-08-30 09:57:10 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4478154Z 2025-08-30 09:57:10 INFO Override strategy 'use_exit_signal' with value in config file: False.
2025-08-30T09:58:47.4478341Z 2025-08-30 09:57:10 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4478534Z 2025-08-30 09:57:10 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4478640Z 2025-08-30 09:57:10 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4478748Z 2025-08-30 09:57:10 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4478866Z 2025-08-30 09:57:10 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4479022Z 2025-08-30 09:57:10 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4479178Z 2025-08-30 09:57:10 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4479308Z 2025-08-30 09:57:10 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4479445Z 2025-08-30 09:57:10 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4479746Z 2025-08-30 09:57:10 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4479932Z 2025-08-30 09:57:10 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4480049Z 2025-08-30 09:57:10 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4480160Z 2025-08-30 09:57:10 INFO Strategy using stake_amount: 100.0
2025-08-30T09:58:47.4480347Z 2025-08-30 09:57:10 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4480516Z 2025-08-30 09:57:10 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4480636Z 2025-08-30 09:57:10 INFO Strategy using use_exit_signal: False
2025-08-30T09:58:47.4480760Z 2025-08-30 09:57:10 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4480939Z 2025-08-30 09:57:10 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4481062Z 2025-08-30 09:57:10 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4481199Z 2025-08-30 09:57:10 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4481351Z 2025-08-30 09:57:10 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4481495Z 2025-08-30 09:57:10 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4481634Z 2025-08-30 09:57:10 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4481746Z 2025-08-30 09:57:10 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4481850Z 2025-08-30 09:57:10 INFO Validating configuration ...
2025-08-30T09:58:47.4482201Z 2025-08-30 09:57:10 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4482525Z 2025-08-30 09:57:10 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4483181Z 2025-08-30 09:57:10 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4483624Z 2025-08-30 09:57:10 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4483813Z 2025-08-30 09:57:10 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4483957Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4484073Z 2025-08-30 09:57:10 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4484391Z 2025-08-30 09:57:10 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4484507Z 2025-08-30 09:57:10 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4484665Z 2025-08-30 09:57:10 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4484856Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4485017Z 2025-08-30 09:57:10 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4485562Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4485700Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4486229Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4486758Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4486892Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4487413Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4487548Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4488070Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4488541Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4489130Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4489266Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Keeping current stoploss...
2025-08-30T09:58:47.4489794Z 2025-08-30 09:57:10 DEBUG XRP/USDT:USDT - Stoploss adjusted. current_price=2.10000000, open_rate=2.10000000, max_rate=2.10000000, initial_stop_loss=1.89000000, stop_loss=1.89000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4489967Z ________________________ test_trade_custom_data[False] _________________________
2025-08-30T09:58:47.4489976Z 
2025-08-30T09:58:47.4490148Z fee = <MagicMock id='140073986199952'>, use_db = False
2025-08-30T09:58:47.4490159Z 
2025-08-30T09:58:47.4490331Z     @pytest.mark.usefixtures("init_persistence")
2025-08-30T09:58:47.4490510Z     @pytest.mark.parametrize("use_db", [True, False])
2025-08-30T09:58:47.4490656Z     def test_trade_custom_data(fee, use_db):
2025-08-30T09:58:47.4490780Z         Trade.reset_trades()
2025-08-30T09:58:47.4491051Z         CustomDataWrapper.reset_custom_data()
2025-08-30T09:58:47.4491154Z     
2025-08-30T09:58:47.4491309Z         create_mock_trades_usdt(fee, use_db=use_db)
2025-08-30T09:58:47.4491412Z     
2025-08-30T09:58:47.4491563Z >       trade1 = Trade.get_trades_proxy()[0]
2025-08-30T09:58:47.4491674Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4491827Z E       IndexError: list index out of range
2025-08-30T09:58:47.4491836Z 
2025-08-30T09:58:47.4492084Z tests/persistence/test_trade_custom_data.py:27: IndexError
2025-08-30T09:58:47.4492345Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.4492714Z 2025-08-30 09:57:16,681 - freqtrade.persistence.migrations - DEBUG - trying trades_bak0
2025-08-30T09:58:47.4493149Z 2025-08-30 09:57:16,682 - freqtrade.persistence.migrations - DEBUG - trying orders_bak0
2025-08-30T09:58:47.4493701Z 2025-08-30 09:57:16,682 - freqtrade.persistence.migrations - DEBUG - trying pairlocks_bak0
2025-08-30T09:58:47.4493979Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.4494128Z 2025-08-30 09:57:16 DEBUG trying trades_bak0
2025-08-30T09:58:47.4494274Z 2025-08-30 09:57:16 DEBUG trying orders_bak0
2025-08-30T09:58:47.4494444Z 2025-08-30 09:57:16 DEBUG trying pairlocks_bak0
2025-08-30T09:58:47.4494844Z _ TestHyperoptSharedMemoryIntegration.test_resource_optimization_with_shared_memory _
2025-08-30T09:58:47.4494853Z 
2025-08-30T09:58:47.4495525Z self = <tests.optimize.test_hyperopt_shared_memory_integration.TestHyperoptSharedMemoryIntegration object at 0x7f66e8d14990>
2025-08-30T09:58:47.4495820Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6574d74fd0>
2025-08-30T09:58:47.4495830Z 
2025-08-30T09:58:47.4496112Z     def test_resource_optimization_with_shared_memory(self, mocker):
2025-08-30T09:58:47.4496344Z         """Test resource optimization when using shared memory"""
2025-08-30T09:58:47.4496457Z         config = {
2025-08-30T09:58:47.4496624Z             'datadir': Path('/tmp/test_data'),
2025-08-30T09:58:47.4496779Z             'hyperopt_parallel': 'auto',
2025-08-30T09:58:47.4496903Z             'hyperopt': {
2025-08-30T09:58:47.4497048Z                 'use_shared_memory': True,
2025-08-30T09:58:47.4497229Z                 'dynamic_resource_optimization': True
2025-08-30T09:58:47.4497338Z             }
2025-08-30T09:58:47.4497446Z         }
2025-08-30T09:58:47.4497552Z     
2025-08-30T09:58:47.4497634Z         # Mock system resources
2025-08-30T09:58:47.4497757Z         mocker.patch('psutil.cpu_count', return_value=8)
2025-08-30T09:58:47.4497917Z         mocker.patch('psutil.virtual_memory', return_value=MagicMock(
2025-08-30T09:58:47.4498122Z             available=16 * 1024 * 1024 * 1024  # 16GB
2025-08-30T09:58:47.4498179Z         ))
2025-08-30T09:58:47.4498236Z     
2025-08-30T09:58:47.4498363Z >       hyperopt_integration = HyperoptIntegration(config)
2025-08-30T09:58:47.4498438Z                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4498445Z 
2025-08-30T09:58:47.4498666Z tests/optimize/test_hyperopt_shared_memory_integration.py:170: 
2025-08-30T09:58:47.4498781Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4498920Z freqtrade/optimize/hyperopt_integration.py:44: in __init__
2025-08-30T09:58:47.4499040Z     self.resource_optimizer = ResourceOptimizer(config)
2025-08-30T09:58:47.4499115Z                               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4499275Z freqtrade/optimize/hyperopt_resource_optimizer.py:38: in __init__
2025-08-30T09:58:47.4499348Z     self._log_system_info()
2025-08-30T09:58:47.4499448Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4499456Z 
2025-08-30T09:58:47.4499756Z self = <freqtrade.optimize.hyperopt_resource_optimizer.HyperoptResourceOptimizer object at 0x7f65846f7e90>
2025-08-30T09:58:47.4499761Z 
2025-08-30T09:58:47.4499834Z     def _log_system_info(self):
2025-08-30T09:58:47.4499976Z         """Log system information."""
2025-08-30T09:58:47.4500053Z         info = self.system_info
2025-08-30T09:58:47.4500215Z >       logger.info(f"System Resources: {info['cpu_count']} physical CPUs "
2025-08-30T09:58:47.4500310Z                    f"({info['cpu_count_logical']} logical), "
2025-08-30T09:58:47.4500422Z                    f"{info['memory_total_mb']:.0f}MB total memory, "
2025-08-30T09:58:47.4500522Z                    f"{info['memory_available_mb']:.0f}MB available")
2025-08-30T09:58:47.4500685Z E       TypeError: unsupported format string passed to MagicMock.__format__
2025-08-30T09:58:47.4500692Z 
2025-08-30T09:58:47.4500852Z freqtrade/optimize/hyperopt_resource_optimizer.py:58: TypeError
2025-08-30T09:58:47.4501125Z ____ TestHyperoptSharedMemoryIntegration.test_memory_estimation_and_limits _____
2025-08-30T09:58:47.4501130Z 
2025-08-30T09:58:47.4501501Z self = <tests.optimize.test_hyperopt_shared_memory_integration.TestHyperoptSharedMemoryIntegration object at 0x7f66e8d16f90>
2025-08-30T09:58:47.4501663Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f657412c810>
2025-08-30T09:58:47.4501667Z 
2025-08-30T09:58:47.4501779Z     def test_memory_estimation_and_limits(self, mocker):
2025-08-30T09:58:47.4501877Z         """Test memory estimation and limit checking"""
2025-08-30T09:58:47.4501942Z         config = {
2025-08-30T09:58:47.4502027Z             'datadir': Path('/tmp/test_data'),
2025-08-30T09:58:47.4502096Z             'hyperopt': {
2025-08-30T09:58:47.4502179Z                 'use_shared_memory': True,
2025-08-30T09:58:47.4502264Z                 'shared_memory_threshold_mb': 100
2025-08-30T09:58:47.4502323Z             }
2025-08-30T09:58:47.4502378Z         }
2025-08-30T09:58:47.4502444Z     
2025-08-30T09:58:47.4502515Z         # Mock available memory
2025-08-30T09:58:47.4502663Z         mocker.patch('psutil.virtual_memory', return_value=MagicMock(
2025-08-30T09:58:47.4502747Z             available=500 * 1024 * 1024  # 500MB
2025-08-30T09:58:47.4502806Z         ))
2025-08-30T09:58:47.4502861Z     
2025-08-30T09:58:47.4502979Z >       hyperopt_integration = HyperoptIntegration(config)
2025-08-30T09:58:47.4503057Z                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4503061Z 
2025-08-30T09:58:47.4503212Z tests/optimize/test_hyperopt_shared_memory_integration.py:250: 
2025-08-30T09:58:47.4503309Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4503653Z freqtrade/optimize/hyperopt_integration.py:44: in __init__
2025-08-30T09:58:47.4503772Z     self.resource_optimizer = ResourceOptimizer(config)
2025-08-30T09:58:47.4503926Z                               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4504089Z freqtrade/optimize/hyperopt_resource_optimizer.py:38: in __init__
2025-08-30T09:58:47.4504162Z     self._log_system_info()
2025-08-30T09:58:47.4504258Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4504262Z 
2025-08-30T09:58:47.4504658Z self = <freqtrade.optimize.hyperopt_resource_optimizer.HyperoptResourceOptimizer object at 0x7f64da9e9f90>
2025-08-30T09:58:47.4504664Z 
2025-08-30T09:58:47.4504738Z     def _log_system_info(self):
2025-08-30T09:58:47.4504817Z         """Log system information."""
2025-08-30T09:58:47.4504891Z         info = self.system_info
2025-08-30T09:58:47.4505050Z >       logger.info(f"System Resources: {info['cpu_count']} physical CPUs "
2025-08-30T09:58:47.4505149Z                    f"({info['cpu_count_logical']} logical), "
2025-08-30T09:58:47.4505252Z                    f"{info['memory_total_mb']:.0f}MB total memory, "
2025-08-30T09:58:47.4505359Z                    f"{info['memory_available_mb']:.0f}MB available")
2025-08-30T09:58:47.4505522Z E       TypeError: unsupported format string passed to MagicMock.__format__
2025-08-30T09:58:47.4505529Z 
2025-08-30T09:58:47.4505763Z freqtrade/optimize/hyperopt_resource_optimizer.py:58: TypeError
2025-08-30T09:58:47.4506201Z _ TestHyperoptSharedMemoryIntegration.test_parallel_worker_shared_memory_access _
2025-08-30T09:58:47.4506323Z 
2025-08-30T09:58:47.4506700Z self = <tests.optimize.test_hyperopt_shared_memory_integration.TestHyperoptSharedMemoryIntegration object at 0x7f66e8d16410>
2025-08-30T09:58:47.4506864Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da9e8690>
2025-08-30T09:58:47.4506868Z 
2025-08-30T09:58:47.4507010Z     def test_parallel_worker_shared_memory_access(self, mocker):
2025-08-30T09:58:47.4507123Z         """Test parallel workers can access shared memory"""
2025-08-30T09:58:47.4507185Z         config = {
2025-08-30T09:58:47.4507279Z             'datadir': Path('/tmp/test_data'),
2025-08-30T09:58:47.4507350Z             'hyperopt': {
2025-08-30T09:58:47.4507428Z                 'use_shared_memory': True
2025-08-30T09:58:47.4507486Z             }
2025-08-30T09:58:47.4507601Z         }
2025-08-30T09:58:47.4507659Z     
2025-08-30T09:58:47.4507729Z         # Create test data
2025-08-30T09:58:47.4507812Z         test_df = pd.DataFrame({
2025-08-30T09:58:47.4507960Z             'date': pd.date_range(start='2021-01-01', periods=100, freq='5min'),
2025-08-30T09:58:47.4508047Z             'close': np.random.randn(100) + 100
2025-08-30T09:58:47.4508107Z         })
2025-08-30T09:58:47.4508162Z     
2025-08-30T09:58:47.4508240Z         # Create temp file with test data
2025-08-30T09:58:47.4508318Z         data_dict = {'TEST/USDT': test_df}
2025-08-30T09:58:47.4508376Z     
2025-08-30T09:58:47.4508569Z         with tempfile.NamedTemporaryFile(suffix='.pkl', delete=False) as tmp_file:
2025-08-30T09:58:47.4508655Z             pickle.dump(data_dict, tmp_file)
2025-08-30T09:58:47.4508749Z             tmp_file_path = Path(tmp_file.name)
2025-08-30T09:58:47.4508802Z     
2025-08-30T09:58:47.4508859Z         try:
2025-08-30T09:58:47.4508926Z             # Initialize
2025-08-30T09:58:47.4509056Z             hyperopt_integration = HyperoptIntegration(config)
2025-08-30T09:58:47.4509110Z     
2025-08-30T09:58:47.4509298Z             hyperopt_integration.resource_optimizer.get_recommendations = MagicMock(
2025-08-30T09:58:47.4509404Z                 return_value={'use_shared_memory': True}
2025-08-30T09:58:47.4509462Z             )
2025-08-30T09:58:47.4509517Z     
2025-08-30T09:58:47.4509587Z             # Share data
2025-08-30T09:58:47.4509760Z             shared_result = hyperopt_integration.setup_shared_memory(tmp_file_path)
2025-08-30T09:58:47.4509815Z     
2025-08-30T09:58:47.4509897Z >           assert shared_result is not None
2025-08-30T09:58:47.4509978Z E           assert None is not None
2025-08-30T09:58:47.4509983Z 
2025-08-30T09:58:47.4510181Z tests/optimize/test_hyperopt_shared_memory_integration.py:132: AssertionError
2025-08-30T09:58:47.4510376Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4510816Z 2025-08-30 09:57:22,863 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 14044MB available
2025-08-30T09:58:47.4511068Z 2025-08-30 09:57:22,865 - freqtrade.optimize.hyperopt_integration - INFO - Data size: 0.00MB
2025-08-30T09:58:47.4511385Z 2025-08-30 09:57:22,865 - freqtrade.optimize.hyperopt_integration - INFO - Shared memory not recommended for current dataset size
2025-08-30T09:58:47.4511528Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4511773Z 2025-08-30 09:57:22 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 14044MB available
2025-08-30T09:58:47.4511855Z 2025-08-30 09:57:22 INFO Data size: 0.00MB
2025-08-30T09:58:47.4512020Z 2025-08-30 09:57:22 INFO Shared memory not recommended for current dataset size
2025-08-30T09:58:47.4512158Z ________________________ test_backtest_results[data57] _________________________
2025-08-30T09:58:47.4512162Z 
2025-08-30T09:58:47.4512606Z default_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4512823Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64dff54090>
2025-08-30T09:58:47.4512989Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f64fb809bd0>
2025-08-30T09:58:47.4513673Z data = BTContainer(data=[[0, 5000, 5050, 4950, 5000, 6172, 1, 0, 0, 0], [1, 4598, 5200, 4498, 5000, 6172, 0, 0, 0, 0], [2, 49...=1000, adjust_entry_price=None, adjust_exit_price=None, adjust_trade_position=[None, 0.001, None, -0.0001, None, None])
2025-08-30T09:58:47.4513681Z 
2025-08-30T09:58:47.4513786Z     @pytest.mark.parametrize("data", TESTS)
2025-08-30T09:58:47.4513994Z     def test_backtest_results(default_conf, mocker, caplog, data: BTContainer) -> None:
2025-08-30T09:58:47.4514055Z         """
2025-08-30T09:58:47.4514134Z         run functional tests
2025-08-30T09:58:47.4514262Z         """
2025-08-30T09:58:47.4514364Z         default_conf["stoploss"] = data.stop_loss
2025-08-30T09:58:47.4514449Z         default_conf["minimal_roi"] = data.roi
2025-08-30T09:58:47.4514548Z         default_conf["timeframe"] = tests_timeframe
2025-08-30T09:58:47.4514664Z         default_conf["trailing_stop"] = data.trailing_stop
2025-08-30T09:58:47.4514872Z         default_conf["trailing_only_offset_is_reached"] = data.trailing_only_offset_is_reached
2025-08-30T09:58:47.4514946Z         if data.timeout:
2025-08-30T09:58:47.4515038Z             default_conf["unfilledtimeout"].update(
2025-08-30T09:58:47.4515096Z                 {
2025-08-30T09:58:47.4515177Z                     "entry": data.timeout,
2025-08-30T09:58:47.4515251Z                     "exit": data.timeout,
2025-08-30T09:58:47.4515308Z                 }
2025-08-30T09:58:47.4515366Z             )
2025-08-30T09:58:47.4515476Z         # Only add this to configuration If it's necessary
2025-08-30T09:58:47.4515570Z         if data.trailing_stop_positive is not None:
2025-08-30T09:58:47.4515728Z             default_conf["trailing_stop_positive"] = data.trailing_stop_positive
2025-08-30T09:58:47.4515928Z         default_conf["trailing_stop_positive_offset"] = data.trailing_stop_positive_offset
2025-08-30T09:58:47.4516050Z         default_conf["use_exit_signal"] = data.use_exit_signal
2025-08-30T09:58:47.4516137Z         default_conf["max_open_trades"] = 10
2025-08-30T09:58:47.4516196Z     
2025-08-30T09:58:47.4516271Z         patch_exchange(mocker)
2025-08-30T09:58:47.4516385Z         mocker.patch(f"{EXMS}.get_fee", return_value=0.0)
2025-08-30T09:58:47.4516547Z         mocker.patch(f"{EXMS}.get_min_pair_stake_amount", return_value=0.00001)
2025-08-30T09:58:47.4516718Z         mocker.patch(f"{EXMS}.get_max_pair_stake_amount", return_value=float("inf"))
2025-08-30T09:58:47.4516913Z         mocker.patch(f"{EXMS}.get_max_leverage", return_value=100)
2025-08-30T09:58:47.4517055Z         mocker.patch(f"{EXMS}.calculate_funding_fees", return_value=0)
2025-08-30T09:58:47.4517162Z         frame = _build_backtest_dataframe(data.data)
2025-08-30T09:58:47.4517253Z         backtesting = Backtesting(default_conf)
2025-08-30T09:58:47.4517350Z         # TODO: Should we initialize this properly??
2025-08-30T09:58:47.4517514Z         backtesting.trading_mode = TradingMode.MARGIN
2025-08-30T09:58:47.4517646Z         backtesting._set_strategy(backtesting.strategylist[0])
2025-08-30T09:58:47.4517728Z         backtesting._can_short = True
2025-08-30T09:58:47.4517817Z         backtesting.required_startup = 0
2025-08-30T09:58:47.4517942Z         backtesting.strategy.advise_entry = lambda a, m: frame
2025-08-30T09:58:47.4518065Z         backtesting.strategy.advise_exit = lambda a, m: frame
2025-08-30T09:58:47.4518142Z         if data.custom_entry_price:
2025-08-30T09:58:47.4518385Z             backtesting.strategy.custom_entry_price = MagicMock(return_value=data.custom_entry_price)
2025-08-30T09:58:47.4518464Z         if data.custom_exit_price:
2025-08-30T09:58:47.4518692Z             backtesting.strategy.custom_exit_price = MagicMock(return_value=data.custom_exit_price)
2025-08-30T09:58:47.4518779Z         if data.adjust_trade_position:
2025-08-30T09:58:47.4518916Z             backtesting.strategy.position_adjustment_enable = True
2025-08-30T09:58:47.4519112Z             backtesting.strategy.adjust_trade_position = MagicMock(
2025-08-30T09:58:47.4519211Z                 side_effect=data.adjust_trade_position
2025-08-30T09:58:47.4519268Z             )
2025-08-30T09:58:47.4519343Z         if data.adjust_entry_price:
2025-08-30T09:58:47.4519574Z             backtesting.strategy.adjust_entry_price = MagicMock(return_value=data.adjust_entry_price)
2025-08-30T09:58:47.4519652Z         if data.adjust_exit_price:
2025-08-30T09:58:47.4519871Z             backtesting.strategy.adjust_exit_price = MagicMock(return_value=data.adjust_exit_price)
2025-08-30T09:58:47.4519928Z     
2025-08-30T09:58:47.4520104Z         backtesting.strategy.use_custom_stoploss = data.use_custom_stoploss
2025-08-30T09:58:47.4520299Z         backtesting.strategy.leverage = lambda **kwargs: data.leverage
2025-08-30T09:58:47.4520385Z         caplog.set_level(logging.DEBUG)
2025-08-30T09:58:47.4520442Z     
2025-08-30T09:58:47.4520516Z         pair = "UNITTEST/BTC"
2025-08-30T09:58:47.4520612Z         # Dummy data as we mock the analyze functions
2025-08-30T09:58:47.4520701Z         data_processed = {pair: frame.copy()}
2025-08-30T09:58:47.4520810Z         min_date, max_date = get_timerange({pair: frame})
2025-08-30T09:58:47.4520893Z >       result = backtesting.backtest(
2025-08-30T09:58:47.4520972Z             processed=data_processed,
2025-08-30T09:58:47.4521047Z             start_date=min_date,
2025-08-30T09:58:47.4521116Z             end_date=max_date,
2025-08-30T09:58:47.4521172Z         )
2025-08-30T09:58:47.4521177Z 
2025-08-30T09:58:47.4521284Z tests/optimize/test_backtest_detail.py:1386: 
2025-08-30T09:58:47.4521387Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4521501Z freqtrade/optimize/backtesting.py:1733: in backtest
2025-08-30T09:58:47.4521668Z     self.backtest_loop(row, pair, current_time, trade_dir, not is_last_row)
2025-08-30T09:58:47.4521805Z freqtrade/optimize/backtesting.py:1503: in backtest_loop
2025-08-30T09:58:47.4521993Z     self._check_trade_exit(trade, row, current_time)  # Place exit order if necessary
2025-08-30T09:58:47.4522066Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4522206Z freqtrade/optimize/backtesting.py:935: in _check_trade_exit
2025-08-30T09:58:47.4522359Z     trade = self._check_adjust_trade_for_candle(trade, row, current_time)
2025-08-30T09:58:47.4522437Z             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4522539Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4522591Z 
2025-08-30T09:58:47.4522788Z self = <freqtrade.optimize.backtesting.Backtesting object at 0x7f65749baf90>
2025-08-30T09:58:47.4523134Z trade = Trade(id=1, pair=UNITTEST/BTC, amount=0.00000022, is_short=False, leverage=1.0, open_rate=4600.00000000, open_since=2018-10-03 01:00:00)
2025-08-30T09:58:47.4523321Z row = [Timestamp('2018-10-03 04:00:00+0000', tz='UTC'), 4750.0, 4950.0, 4650.0, 4750.0, 0.0, ...]
2025-08-30T09:58:47.4523772Z current_time = datetime.datetime(2018, 10, 3, 4, 0, tzinfo=datetime.timezone.utc)
2025-08-30T09:58:47.4523780Z 
2025-08-30T09:58:47.4523869Z     def _check_adjust_trade_for_candle(
2025-08-30T09:58:47.4524014Z         self, trade: LocalTrade, row: tuple, current_time: datetime
2025-08-30T09:58:47.4524084Z     ) -> LocalTrade:
2025-08-30T09:58:47.4524169Z         current_rate: float = row[OPEN_IDX]
2025-08-30T09:58:47.4524300Z         current_profit = trade.calc_profit_ratio(current_rate)
2025-08-30T09:58:47.4524507Z         min_stake = self.exchange.get_min_pair_stake_amount(trade.pair, current_rate, -0.1)
2025-08-30T09:58:47.4524686Z         max_stake = self.exchange.get_max_pair_stake_amount(trade.pair, current_rate)
2025-08-30T09:58:47.4524825Z         stake_available = self.wallets.get_available_stake_amount()
2025-08-30T09:58:47.4524991Z         stake_amount, order_tag = self.strategy._adjust_trade_position_internal(
2025-08-30T09:58:47.4525147Z             trade=trade,  # type: ignore[arg-type]
2025-08-30T09:58:47.4525226Z             current_time=current_time,
2025-08-30T09:58:47.4525306Z             current_rate=current_rate,
2025-08-30T09:58:47.4525388Z             current_profit=current_profit,
2025-08-30T09:58:47.4525460Z             min_stake=min_stake,
2025-08-30T09:58:47.4525558Z             max_stake=min(max_stake, stake_available),
2025-08-30T09:58:47.4525640Z             current_entry_rate=current_rate,
2025-08-30T09:58:47.4525720Z             current_exit_rate=current_rate,
2025-08-30T09:58:47.4525805Z             current_entry_profit=current_profit,
2025-08-30T09:58:47.4525895Z             current_exit_profit=current_profit,
2025-08-30T09:58:47.4525951Z         )
2025-08-30T09:58:47.4526005Z     
2025-08-30T09:58:47.4526156Z         # Check if we should increase our position
2025-08-30T09:58:47.4526268Z         if stake_amount is not None and stake_amount > 0.0:
2025-08-30T09:58:47.4526345Z             check_adjust_entry = True
2025-08-30T09:58:47.4526476Z             if self.strategy.max_entry_position_adjustment > -1:
2025-08-30T09:58:47.4526610Z                 entry_count = trade.nr_of_successful_entries
2025-08-30T09:58:47.4526801Z                 check_adjust_entry = entry_count <= self.strategy.max_entry_position_adjustment
2025-08-30T09:58:47.4526934Z             if check_adjust_entry:
2025-08-30T09:58:47.4527095Z                 pos_trade = self._enter_trade(
2025-08-30T09:58:47.4527222Z                     trade.pair,
2025-08-30T09:58:47.4527336Z                     row,
2025-08-30T09:58:47.4527441Z                     "short" if trade.is_short else "long",
2025-08-30T09:58:47.4527515Z                     stake_amount,
2025-08-30T09:58:47.4527580Z                     trade,
2025-08-30T09:58:47.4527664Z                     entry_tag1=order_tag,
2025-08-30T09:58:47.4527723Z                 )
2025-08-30T09:58:47.4527800Z                 if pos_trade is not None:
2025-08-30T09:58:47.4527881Z                     self.wallets.update()
2025-08-30T09:58:47.4527959Z                     return pos_trade
2025-08-30T09:58:47.4528017Z     
2025-08-30T09:58:47.4528126Z         if stake_amount is not None and stake_amount < 0.0:
2025-08-30T09:58:47.4528220Z             amount = amount_to_contract_precision(
2025-08-30T09:58:47.4528281Z                 abs(
2025-08-30T09:58:47.4528346Z                     float(
2025-08-30T09:58:47.4528455Z >                       FtPrecise(stake_amount)
2025-08-30T09:58:47.4528584Z                         ^^^^^^^^^
2025-08-30T09:58:47.4528741Z                         * FtPrecise(trade.amount)
2025-08-30T09:58:47.4529016Z                         / FtPrecise(trade.stake_amount)
2025-08-30T09:58:47.4529134Z                     )
2025-08-30T09:58:47.4529236Z                 ),
2025-08-30T09:58:47.4529383Z                 trade.amount_precision,
2025-08-30T09:58:47.4529476Z                 self.precision_mode,
2025-08-30T09:58:47.4529551Z                 trade.contract_size,
2025-08-30T09:58:47.4529612Z             )
2025-08-30T09:58:47.4529767Z E           NameError: name 'FtPrecise' is not defined
2025-08-30T09:58:47.4529773Z 
2025-08-30T09:58:47.4529890Z freqtrade/optimize/backtesting.py:711: NameError
2025-08-30T09:58:47.4530043Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4530198Z 2025-08-30 09:57:27,293 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4530445Z 2025-08-30 09:57:27,293 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4530610Z 2025-08-30 09:57:27,294 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4530800Z 2025-08-30 09:57:27,295 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4531046Z 2025-08-30 09:57:27,295 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4531300Z 2025-08-30 09:57:27,296 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4531800Z 2025-08-30 09:57:27,297 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4532376Z 2025-08-30 09:57:27,298 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4532448Z 'nonexiting_module''
2025-08-30T09:58:47.4532991Z 2025-08-30 09:57:27,299 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4533223Z 2025-08-30 09:57:27,299 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4533781Z 2025-08-30 09:57:27,300 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'0': 0.5}.
2025-08-30T09:58:47.4534113Z 2025-08-30 09:57:27,300 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.4534440Z 2025-08-30 09:57:27,300 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.2.
2025-08-30T09:58:47.4534780Z 2025-08-30 09:57:27,301 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.4535163Z 2025-08-30 09:57:27,301 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.4535560Z 2025-08-30 09:57:27,301 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.4535894Z 2025-08-30 09:57:27,302 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4536230Z 2025-08-30 09:57:27,302 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4536649Z 2025-08-30 09:57:27,302 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 1000, 'exit': 1000}.
2025-08-30T09:58:47.4536989Z 2025-08-30 09:57:27,302 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4537318Z 2025-08-30 09:57:27,303 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.4537656Z 2025-08-30 09:57:27,303 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'0': 0.5}
2025-08-30T09:58:47.4537884Z 2025-08-30 09:57:27,303 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 1h
2025-08-30T09:58:47.4538172Z 2025-08-30 09:57:27,304 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.2
2025-08-30T09:58:47.4538428Z 2025-08-30 09:57:27,304 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4538720Z 2025-08-30 09:57:27,304 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4539015Z 2025-08-30 09:57:27,304 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4539282Z 2025-08-30 09:57:27,305 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4539563Z 2025-08-30 09:57:27,305 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4540013Z 2025-08-30 09:57:27,305 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4540413Z 2025-08-30 09:57:27,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4540656Z 2025-08-30 09:57:27,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4540896Z 2025-08-30 09:57:27,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4541159Z 2025-08-30 09:57:27,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4541476Z 2025-08-30 09:57:27,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 1000, 'exit': 1000}
2025-08-30T09:58:47.4541783Z 2025-08-30 09:57:27,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4542042Z 2025-08-30 09:57:27,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4542326Z 2025-08-30 09:57:27,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4542581Z 2025-08-30 09:57:27,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4542864Z 2025-08-30 09:57:27,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4543156Z 2025-08-30 09:57:27,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4543630Z 2025-08-30 09:57:27,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4543924Z 2025-08-30 09:57:27,309 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4544168Z 2025-08-30 09:57:27,309 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 10
2025-08-30T09:58:47.4544421Z 2025-08-30 09:57:27,309 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4544899Z 2025-08-30 09:57:27,311 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4545301Z 2025-08-30 09:57:27,312 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4545857Z 2025-08-30 09:57:27,315 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4546274Z 2025-08-30 09:57:27,316 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4546630Z 2025-08-30 09:57:27,316 - freqtrade.optimize.backtesting - INFO - Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4546878Z 2025-08-30 09:57:27,318 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4547086Z 2025-08-30 09:57:27,318 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4547418Z 2025-08-30 09:57:27,318 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4547627Z 2025-08-30 09:57:27,319 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4547881Z 2025-08-30 09:57:27,319 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4548166Z 2025-08-30 09:57:27,319 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4548425Z 2025-08-30 09:57:27,320 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4548940Z 2025-08-30 09:57:27,324 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, 
2025-08-30T09:58:47.4549191Z initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4549643Z 2025-08-30 09:57:27,324 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Keeping current stoploss...
2025-08-30T09:58:47.4550102Z 2025-08-30 09:57:27,325 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, 
2025-08-30T09:58:47.4550396Z initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4550852Z 2025-08-30 09:57:27,325 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, 
2025-08-30T09:58:47.4551073Z initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4551538Z 2025-08-30 09:57:27,325 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Keeping current stoploss...
2025-08-30T09:58:47.4552014Z 2025-08-30 09:57:27,326 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, 
2025-08-30T09:58:47.4552231Z initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4552488Z 2025-08-30 09:57:27,327 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Keeping current stoploss...
2025-08-30T09:58:47.4552937Z 2025-08-30 09:57:27,327 - freqtrade.persistence.trade_model - DEBUG - UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=5200.00000000, 
2025-08-30T09:58:47.4553156Z initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4553301Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4553577Z 2025-08-30 09:57:27 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4553714Z 2025-08-30 09:57:27 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4553797Z 2025-08-30 09:57:27 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4553897Z 2025-08-30 09:57:27 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4554022Z 2025-08-30 09:57:27 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4554230Z 2025-08-30 09:57:27 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4554562Z 2025-08-30 09:57:27 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4555112Z 2025-08-30 09:57:27 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.4555534Z 2025-08-30 09:57:27 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4555631Z 2025-08-30 09:57:27 INFO Found no parameter file.
2025-08-30T09:58:47.4555841Z 2025-08-30 09:57:27 INFO Override strategy 'minimal_roi' with value in config file: {'0': 0.5}.
2025-08-30T09:58:47.4556020Z 2025-08-30 09:57:27 INFO Override strategy 'timeframe' with value in config file: 1h.
2025-08-30T09:58:47.4556200Z 2025-08-30 09:57:27 INFO Override strategy 'stoploss' with value in config file: -0.2.
2025-08-30T09:58:47.4556405Z 2025-08-30 09:57:27 INFO Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.4556646Z 2025-08-30 09:57:27 INFO Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.4556892Z 2025-08-30 09:57:27 INFO Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.4557153Z 2025-08-30 09:57:27 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4557343Z 2025-08-30 09:57:27 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4557615Z 2025-08-30 09:57:27 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 1000, 'exit': 1000}.
2025-08-30T09:58:47.4557818Z 2025-08-30 09:57:27 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4558005Z 2025-08-30 09:57:27 INFO Override strategy 'max_open_trades' with value in config file: 10.
2025-08-30T09:58:47.4558128Z 2025-08-30 09:57:27 INFO Strategy using minimal_roi: {'0': 0.5}
2025-08-30T09:58:47.4558314Z 2025-08-30 09:57:27 INFO Strategy using timeframe: 1h
2025-08-30T09:58:47.4558425Z 2025-08-30 09:57:27 INFO Strategy using stoploss: -0.2
2025-08-30T09:58:47.4558542Z 2025-08-30 09:57:27 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4558699Z 2025-08-30 09:57:27 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4558856Z 2025-08-30 09:57:27 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4558985Z 2025-08-30 09:57:27 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4559123Z 2025-08-30 09:57:27 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4559430Z 2025-08-30 09:57:27 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4559623Z 2025-08-30 09:57:27 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4559737Z 2025-08-30 09:57:27 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4559855Z 2025-08-30 09:57:27 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4559980Z 2025-08-30 09:57:27 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4560160Z 2025-08-30 09:57:27 INFO Strategy using unfilledtimeout: {'entry': 1000, 'exit': 1000}
2025-08-30T09:58:47.4560283Z 2025-08-30 09:57:27 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4560402Z 2025-08-30 09:57:27 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4560543Z 2025-08-30 09:57:27 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4560664Z 2025-08-30 09:57:27 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4560803Z 2025-08-30 09:57:27 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4560956Z 2025-08-30 09:57:27 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4561151Z 2025-08-30 09:57:27 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4561295Z 2025-08-30 09:57:27 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4561405Z 2025-08-30 09:57:27 INFO Strategy using max_open_trades: 10
2025-08-30T09:58:47.4561511Z 2025-08-30 09:57:27 INFO Validating configuration ...
2025-08-30T09:58:47.4561901Z 2025-08-30 09:57:27 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4562185Z 2025-08-30 09:57:27 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4562617Z 2025-08-30 09:57:27 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4562816Z 2025-08-30 09:57:27 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4562992Z 2025-08-30 09:57:27 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4563132Z 2025-08-30 09:57:27 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4563245Z 2025-08-30 09:57:27 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4563652Z 2025-08-30 09:57:27 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4563855Z 2025-08-30 09:57:27 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4564017Z 2025-08-30 09:57:27 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4564204Z 2025-08-30 09:57:27 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4564365Z 2025-08-30 09:57:27 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4564954Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4565151Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Keeping current stoploss...
2025-08-30T09:58:47.4565733Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4566312Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4566446Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Keeping current stoploss...
2025-08-30T09:58:47.4567015Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=4600.00000000, initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4567150Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Keeping current stoploss...
2025-08-30T09:58:47.4567717Z 2025-08-30 09:57:27 DEBUG UNITTEST/BTC - Stoploss adjusted. current_price=4600.00000000, open_rate=4600.00000000, max_rate=5200.00000000, initial_stop_loss=3680.00000000, stop_loss=3680.00000000. Trailing stoploss saved us: 0.00000000.
2025-08-30T09:58:47.4567866Z _______________________ test_ohlcv_fill_up_missing_data ________________________
2025-08-30T09:58:47.4567872Z 
2025-08-30T09:58:47.4568073Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.4568242Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f64db096d50>
2025-08-30T09:58:47.4568247Z 
2025-08-30T09:58:47.4568382Z     def test_ohlcv_fill_up_missing_data(testdatadir, caplog):
2025-08-30T09:58:47.4568461Z         data = load_pair_history(
2025-08-30T09:58:47.4568661Z             datadir=testdatadir, timeframe="1m", pair="UNITTEST/BTC", fill_up_missing=False
2025-08-30T09:58:47.4568781Z         )
2025-08-30T09:58:47.4568873Z         caplog.set_level(logging.DEBUG)
2025-08-30T09:58:47.4569011Z         data2 = ohlcv_fill_up_missing_data(data, "1m", "UNITTEST/BTC")
2025-08-30T09:58:47.4569089Z         assert len(data2) > len(data)
2025-08-30T09:58:47.4569179Z         # Column names should not change
2025-08-30T09:58:47.4569335Z >       assert (data.columns == data2.columns).all()
2025-08-30T09:58:47.4569424Z E       AssertionError: assert np.False_
2025-08-30T09:58:47.4569625Z E        +  where np.False_ = <built-in method all of numpy.ndarray object at 0x7f64da7e65b0>()
2025-08-30T09:58:47.4569971Z E        +    where <built-in method all of numpy.ndarray object at 0x7f64da7e65b0> = Index(['date'...type='object') == Index(['index...type='object')
2025-08-30T09:58:47.4570036Z E             
2025-08-30T09:58:47.4570104Z E             Full diff:
2025-08-30T09:58:47.4570270Z E             - Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4570361Z E             ?         --  -
2025-08-30T09:58:47.4570513Z E             + Index(['date', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4570586Z E             ?          ++.all
2025-08-30T09:58:47.4570591Z 
2025-08-30T09:58:47.4570700Z tests/data/test_converter.py:120: AssertionError
2025-08-30T09:58:47.4570895Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4571268Z 2025-08-30 09:57:29,896 - freqtrade.data.converter.converter - INFO - Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4571406Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4571630Z 2025-08-30 09:57:29 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4571762Z _____________________________ test_trim_dataframe ______________________________
2025-08-30T09:58:47.4571768Z 
2025-08-30T09:58:47.4571925Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4572027Z key = 'date'
2025-08-30T09:58:47.4572032Z 
2025-08-30T09:58:47.4572113Z     def get_loc(self, key):
2025-08-30T09:58:47.4572174Z         """
2025-08-30T09:58:47.4572331Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4572396Z     
2025-08-30T09:58:47.4572461Z         Parameters
2025-08-30T09:58:47.4572525Z         ----------
2025-08-30T09:58:47.4572585Z         key : label
2025-08-30T09:58:47.4572645Z     
2025-08-30T09:58:47.4572704Z         Returns
2025-08-30T09:58:47.4572763Z         -------
2025-08-30T09:58:47.4572890Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4572951Z     
2025-08-30T09:58:47.4573011Z         Examples
2025-08-30T09:58:47.4573071Z         --------
2025-08-30T09:58:47.4573165Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4573245Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4573303Z         1
2025-08-30T09:58:47.4573524Z     
2025-08-30T09:58:47.4573636Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4573722Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4573792Z         slice(1, 3, None)
2025-08-30T09:58:47.4573854Z     
2025-08-30T09:58:47.4573958Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4574042Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4574128Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4574185Z         """
2025-08-30T09:58:47.4574277Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4574334Z         try:
2025-08-30T09:58:47.4574428Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4574497Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4574502Z 
2025-08-30T09:58:47.4574753Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4574858Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4575029Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4575089Z     ???
2025-08-30T09:58:47.4575255Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4575314Z     ???
2025-08-30T09:58:47.4575644Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4575702Z     ???
2025-08-30T09:58:47.4575805Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4575810Z 
2025-08-30T09:58:47.4575864Z >   ???
2025-08-30T09:58:47.4575931Z E   KeyError: 'date'
2025-08-30T09:58:47.4575936Z 
2025-08-30T09:58:47.4576057Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4576062Z 
2025-08-30T09:58:47.4576218Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4576225Z 
2025-08-30T09:58:47.4576423Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.4576433Z 
2025-08-30T09:58:47.4576539Z     def test_trim_dataframe(testdatadir) -> None:
2025-08-30T09:58:47.4576768Z         data = load_data(datadir=testdatadir, timeframe="1m", pairs=["UNITTEST/BTC"])["UNITTEST/BTC"]
2025-08-30T09:58:47.4576937Z >       min_date = int(data.iloc[0]["date"].timestamp())
2025-08-30T09:58:47.4577014Z                        ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4577019Z 
2025-08-30T09:58:47.4577106Z tests/data/test_converter.py:356: 
2025-08-30T09:58:47.4577204Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4577402Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1130: in __getitem__
2025-08-30T09:58:47.4577478Z     return self._get_value(key)
2025-08-30T09:58:47.4577540Z            ^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4577727Z .venv/lib/python3.11/site-packages/pandas/core/series.py:1246: in _get_value
2025-08-30T09:58:47.4577807Z     loc = self.index.get_loc(label)
2025-08-30T09:58:47.4577926Z           ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4578025Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4578035Z 
2025-08-30T09:58:47.4578197Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4578258Z key = 'date'
2025-08-30T09:58:47.4578262Z 
2025-08-30T09:58:47.4578335Z     def get_loc(self, key):
2025-08-30T09:58:47.4578396Z         """
2025-08-30T09:58:47.4578548Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4578604Z     
2025-08-30T09:58:47.4578672Z         Parameters
2025-08-30T09:58:47.4578737Z         ----------
2025-08-30T09:58:47.4578797Z         key : label
2025-08-30T09:58:47.4578852Z     
2025-08-30T09:58:47.4578914Z         Returns
2025-08-30T09:58:47.4578978Z         -------
2025-08-30T09:58:47.4579102Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4579161Z     
2025-08-30T09:58:47.4579222Z         Examples
2025-08-30T09:58:47.4579283Z         --------
2025-08-30T09:58:47.4579372Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4579457Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4579514Z         1
2025-08-30T09:58:47.4579571Z     
2025-08-30T09:58:47.4579669Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4579748Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4579815Z         slice(1, 3, None)
2025-08-30T09:58:47.4579870Z     
2025-08-30T09:58:47.4579975Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4580059Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4580141Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4580203Z         """
2025-08-30T09:58:47.4580345Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4580404Z         try:
2025-08-30T09:58:47.4580497Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4580573Z         except KeyError as err:
2025-08-30T09:58:47.4580659Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4580750Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4580904Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4580964Z             ):
2025-08-30T09:58:47.4581051Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4581135Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4581207Z E           KeyError: 'date'
2025-08-30T09:58:47.4581212Z 
2025-08-30T09:58:47.4581398Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4581542Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4581914Z 2025-08-30 09:57:33,272 - freqtrade.data.converter.converter - INFO - Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4582057Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4582286Z 2025-08-30 09:57:33 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4582485Z ___________________________ test_populate_indicators ___________________________
2025-08-30T09:58:47.4582490Z 
2025-08-30T09:58:47.4582646Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4582711Z key = 'date'
2025-08-30T09:58:47.4582716Z 
2025-08-30T09:58:47.4582787Z     def get_loc(self, key):
2025-08-30T09:58:47.4582844Z         """
2025-08-30T09:58:47.4582995Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4583056Z     
2025-08-30T09:58:47.4583120Z         Parameters
2025-08-30T09:58:47.4583181Z         ----------
2025-08-30T09:58:47.4583248Z         key : label
2025-08-30T09:58:47.4583302Z     
2025-08-30T09:58:47.4583521Z         Returns
2025-08-30T09:58:47.4583700Z         -------
2025-08-30T09:58:47.4583837Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4583892Z     
2025-08-30T09:58:47.4583953Z         Examples
2025-08-30T09:58:47.4584020Z         --------
2025-08-30T09:58:47.4584111Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4584189Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4584246Z         1
2025-08-30T09:58:47.4584306Z     
2025-08-30T09:58:47.4584398Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4584478Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4584551Z         slice(1, 3, None)
2025-08-30T09:58:47.4584606Z     
2025-08-30T09:58:47.4584709Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4584790Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4584877Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4584936Z         """
2025-08-30T09:58:47.4585032Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4585093Z         try:
2025-08-30T09:58:47.4585179Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4585247Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4585254Z 
2025-08-30T09:58:47.4585431Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4585529Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4585694Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4585756Z     ???
2025-08-30T09:58:47.4585916Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4585973Z     ???
2025-08-30T09:58:47.4586232Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4586359Z     ???
2025-08-30T09:58:47.4586456Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4586462Z 
2025-08-30T09:58:47.4586518Z >   ???
2025-08-30T09:58:47.4586590Z E   KeyError: 'date'
2025-08-30T09:58:47.4586594Z 
2025-08-30T09:58:47.4586712Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4586719Z 
2025-08-30T09:58:47.4586928Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4586934Z 
2025-08-30T09:58:47.4587163Z hyperopt = <freqtrade.optimize.hyperopt.hyperopt.Hyperopt object at 0x7f656447d190>
2025-08-30T09:58:47.4587362Z testdatadir = PosixPath('/home/runner/work/freqtrade/freqtrade/tests/testdata')
2025-08-30T09:58:47.4587366Z 
2025-08-30T09:58:47.4587505Z     def test_populate_indicators(hyperopt, testdatadir) -> None:
2025-08-30T09:58:47.4587676Z         data = load_data(testdatadir, "1m", ["UNITTEST/BTC"], fill_up_missing=True)
2025-08-30T09:58:47.4587909Z >       dataframes = hyperopt.hyperopter.backtesting.strategy.advise_all_indicators(data)
2025-08-30T09:58:47.4587997Z                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4588002Z 
2025-08-30T09:58:47.4588095Z tests/optimize/test_hyperopt.py:514: 
2025-08-30T09:58:47.4588193Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4588404Z freqtrade/strategy/interface.py:1745: in advise_all_indicators
2025-08-30T09:58:47.4588498Z     validator = StrategyResultValidator(
2025-08-30T09:58:47.4588632Z freqtrade/strategy/strategy_validation.py:17: in __init__
2025-08-30T09:58:47.4588737Z     self._date: datetime = dataframe["date"].iloc[-1]
2025-08-30T09:58:47.4588806Z                            ^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4588994Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4589080Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4589149Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4589248Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4589291Z 
2025-08-30T09:58:47.4589451Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4589510Z key = 'date'
2025-08-30T09:58:47.4589517Z 
2025-08-30T09:58:47.4589593Z     def get_loc(self, key):
2025-08-30T09:58:47.4589651Z         """
2025-08-30T09:58:47.4589800Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4589860Z     
2025-08-30T09:58:47.4589922Z         Parameters
2025-08-30T09:58:47.4589983Z         ----------
2025-08-30T09:58:47.4590045Z         key : label
2025-08-30T09:58:47.4590105Z     
2025-08-30T09:58:47.4590163Z         Returns
2025-08-30T09:58:47.4590221Z         -------
2025-08-30T09:58:47.4590347Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4590401Z     
2025-08-30T09:58:47.4590464Z         Examples
2025-08-30T09:58:47.4590524Z         --------
2025-08-30T09:58:47.4590616Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4590695Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4590754Z         1
2025-08-30T09:58:47.4590814Z     
2025-08-30T09:58:47.4590908Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4590988Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4591057Z         slice(1, 3, None)
2025-08-30T09:58:47.4591117Z     
2025-08-30T09:58:47.4591215Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4591297Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4591383Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4591440Z         """
2025-08-30T09:58:47.4591530Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4591591Z         try:
2025-08-30T09:58:47.4591683Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4591810Z         except KeyError as err:
2025-08-30T09:58:47.4591897Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4591993Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4592103Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4592161Z             ):
2025-08-30T09:58:47.4592249Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4592366Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4592444Z E           KeyError: 'date'
2025-08-30T09:58:47.4592448Z 
2025-08-30T09:58:47.4592636Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4592780Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.4592927Z 2025-08-30 09:57:43,554 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4593165Z 2025-08-30 09:57:43,554 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4593331Z 2025-08-30 09:57:43,555 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4593742Z 2025-08-30 09:57:43,555 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4593974Z 2025-08-30 09:57:43,556 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4594319Z 2025-08-30 09:57:43,557 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4594797Z 2025-08-30 09:57:43,557 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4595069Z 2025-08-30 09:57:43,558 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4595324Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4595504Z 2025-08-30 09:57:43,559 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4595995Z 2025-08-30 09:57:43,559 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4596324Z 2025-08-30 09:57:43,560 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4596652Z 2025-08-30 09:57:43,560 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4596990Z 2025-08-30 09:57:43,560 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4597329Z 2025-08-30 09:57:43,561 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4597736Z 2025-08-30 09:57:43,561 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4598082Z 2025-08-30 09:57:43,561 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4598418Z 2025-08-30 09:57:43,562 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4598761Z 2025-08-30 09:57:43,562 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4598989Z 2025-08-30 09:57:43,562 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4599227Z 2025-08-30 09:57:43,562 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4599476Z 2025-08-30 09:57:43,563 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4599826Z 2025-08-30 09:57:43,563 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4600132Z 2025-08-30 09:57:43,563 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4600395Z 2025-08-30 09:57:43,563 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4600727Z 2025-08-30 09:57:43,564 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4601189Z 2025-08-30 09:57:43,564 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4601264Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4601599Z 2025-08-30 09:57:43,564 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4601849Z 2025-08-30 09:57:43,565 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4602091Z 2025-08-30 09:57:43,565 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4602348Z 2025-08-30 09:57:43,565 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4602705Z 2025-08-30 09:57:43,565 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4602954Z 2025-08-30 09:57:43,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4603206Z 2025-08-30 09:57:43,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4603704Z 2025-08-30 09:57:43,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4603972Z 2025-08-30 09:57:43,566 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4604323Z 2025-08-30 09:57:43,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4604627Z 2025-08-30 09:57:43,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4604915Z 2025-08-30 09:57:43,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4605195Z 2025-08-30 09:57:43,567 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4605440Z 2025-08-30 09:57:43,568 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4605687Z 2025-08-30 09:57:43,568 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4606164Z 2025-08-30 09:57:43,570 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4606579Z 2025-08-30 09:57:43,571 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4607146Z 2025-08-30 09:57:43,574 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4607732Z 2025-08-30 09:57:43,575 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4608039Z 2025-08-30 09:57:43,575 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4608274Z 2025-08-30 09:57:43,577 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4608562Z 2025-08-30 09:57:43,577 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4608997Z 2025-08-30 09:57:43,578 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4609418Z 2025-08-30 09:57:43,578 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4609687Z 2025-08-30 09:57:43,578 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4609972Z 2025-08-30 09:57:43,579 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4610229Z 2025-08-30 09:57:43,579 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4610968Z 2025-08-30 09:57:43,579 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4611386Z 2025-08-30 09:57:43,580 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4611806Z 2025-08-30 09:57:43,580 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in 'user_data/hyperopts'
2025-08-30T09:58:47.4612276Z 2025-08-30 09:57:43,580 - freqtrade.resolvers.iresolver - DEBUG - Ignoring user_data/hyperopts/.gitkeep
2025-08-30T09:58:47.4612835Z 2025-08-30 09:57:43,581 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4613260Z 2025-08-30 09:57:43,581 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4613676Z 2025-08-30 09:57:43,582 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4614077Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4614510Z 2025-08-30 09:57:43,583 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13456MB available
2025-08-30T09:58:47.4614663Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.4614776Z 2025-08-30 09:57:43 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4614906Z 2025-08-30 09:57:43 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4614990Z 2025-08-30 09:57:43 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4615086Z 2025-08-30 09:57:43 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4615211Z 2025-08-30 09:57:43 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4615331Z 2025-08-30 09:57:43 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4615686Z 2025-08-30 09:57:43 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4616151Z 2025-08-30 09:57:43 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4616253Z 2025-08-30 09:57:43 INFO Found no parameter file.
2025-08-30T09:58:47.4616546Z 2025-08-30 09:57:43 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4616724Z 2025-08-30 09:57:43 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4616906Z 2025-08-30 09:57:43 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4617109Z 2025-08-30 09:57:43 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4617363Z 2025-08-30 09:57:43 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4617627Z 2025-08-30 09:57:43 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4617832Z 2025-08-30 09:57:43 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4618079Z 2025-08-30 09:57:43 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4618277Z 2025-08-30 09:57:43 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4618388Z 2025-08-30 09:57:43 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4618494Z 2025-08-30 09:57:43 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4618611Z 2025-08-30 09:57:43 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4618762Z 2025-08-30 09:57:43 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4618920Z 2025-08-30 09:57:43 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4619054Z 2025-08-30 09:57:43 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4619198Z 2025-08-30 09:57:43 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4619573Z 2025-08-30 09:57:43 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4619824Z 2025-08-30 09:57:43 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4619943Z 2025-08-30 09:57:43 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4620054Z 2025-08-30 09:57:43 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4620180Z 2025-08-30 09:57:43 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4620348Z 2025-08-30 09:57:43 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4620472Z 2025-08-30 09:57:43 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4620597Z 2025-08-30 09:57:43 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4620781Z 2025-08-30 09:57:43 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4620906Z 2025-08-30 09:57:43 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4621046Z 2025-08-30 09:57:43 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4621202Z 2025-08-30 09:57:43 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4621351Z 2025-08-30 09:57:43 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4621492Z 2025-08-30 09:57:43 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4621600Z 2025-08-30 09:57:43 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4621710Z 2025-08-30 09:57:43 INFO Validating configuration ...
2025-08-30T09:58:47.4622061Z 2025-08-30 09:57:43 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4622350Z 2025-08-30 09:57:43 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4622788Z 2025-08-30 09:57:43 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4622983Z 2025-08-30 09:57:43 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4623157Z 2025-08-30 09:57:43 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4623299Z 2025-08-30 09:57:43 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4623508Z 2025-08-30 09:57:43 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4623738Z 2025-08-30 09:57:43 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4623849Z 2025-08-30 09:57:43 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4624074Z 2025-08-30 09:57:43 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4624262Z 2025-08-30 09:57:43 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4624423Z 2025-08-30 09:57:43 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4624877Z 2025-08-30 09:57:43 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4625164Z 2025-08-30 09:57:43 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4625410Z 2025-08-30 09:57:43 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in 'user_data/hyperopts'
2025-08-30T09:58:47.4625536Z 2025-08-30 09:57:43 DEBUG Ignoring user_data/hyperopts/.gitkeep
2025-08-30T09:58:47.4625959Z 2025-08-30 09:57:43 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4626263Z 2025-08-30 09:57:43 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4626877Z 2025-08-30 09:57:43 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4627516Z 2025-08-30 09:57:43 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13456MB available
2025-08-30T09:58:47.4627660Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4628034Z 2025-08-30 09:57:43,606 - freqtrade.data.converter.converter - INFO - Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4628169Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4628387Z 2025-08-30 09:57:43 INFO Missing data fillup for UNITTEST/BTC, 1m: before: 13681 - after: 14398 - 5.24%
2025-08-30T09:58:47.4628546Z _________________ test_stake_amount_unlimited_max_open_trades __________________
2025-08-30T09:58:47.4628613Z 
2025-08-30T09:58:47.4628775Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4628838Z key = 'date'
2025-08-30T09:58:47.4628845Z 
2025-08-30T09:58:47.4628923Z     def get_loc(self, key):
2025-08-30T09:58:47.4628982Z         """
2025-08-30T09:58:47.4629135Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4629196Z     
2025-08-30T09:58:47.4629260Z         Parameters
2025-08-30T09:58:47.4629321Z         ----------
2025-08-30T09:58:47.4629382Z         key : label
2025-08-30T09:58:47.4629442Z     
2025-08-30T09:58:47.4629501Z         Returns
2025-08-30T09:58:47.4629560Z         -------
2025-08-30T09:58:47.4629689Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4629745Z     
2025-08-30T09:58:47.4629807Z         Examples
2025-08-30T09:58:47.4629868Z         --------
2025-08-30T09:58:47.4629963Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4630043Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4630101Z         1
2025-08-30T09:58:47.4630159Z     
2025-08-30T09:58:47.4630253Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4630335Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4630404Z         slice(1, 3, None)
2025-08-30T09:58:47.4630465Z     
2025-08-30T09:58:47.4630567Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4630656Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4630746Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4630803Z         """
2025-08-30T09:58:47.4630896Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4630959Z         try:
2025-08-30T09:58:47.4631049Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4631172Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4631177Z 
2025-08-30T09:58:47.4631350Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4631458Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4631626Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4631687Z     ???
2025-08-30T09:58:47.4631892Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4631951Z     ???
2025-08-30T09:58:47.4632213Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4632272Z     ???
2025-08-30T09:58:47.4632373Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4632377Z 
2025-08-30T09:58:47.4632433Z >   ???
2025-08-30T09:58:47.4632506Z E   KeyError: 'date'
2025-08-30T09:58:47.4632511Z 
2025-08-30T09:58:47.4632630Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4632634Z 
2025-08-30T09:58:47.4632792Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4632797Z 
2025-08-30T09:58:47.4632955Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6594f57350>
2025-08-30T09:58:47.4633598Z hyperopt_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4633904Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_stake_amount_unlimited_ma0')
2025-08-30T09:58:47.4633988Z fee = <MagicMock id='140073992208592'>
2025-08-30T09:58:47.4633994Z 
2025-08-30T09:58:47.4634232Z     def test_stake_amount_unlimited_max_open_trades(mocker, hyperopt_conf, tmp_path, fee) -> None:
2025-08-30T09:58:47.4634432Z         # This test is to ensure that unlimited max_open_trades are ignored for the backtesting
2025-08-30T09:58:47.4634528Z         # if we have an unlimited stake amount
2025-08-30T09:58:47.4634605Z         patch_exchange(mocker)
2025-08-30T09:58:47.4634752Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4634868Z         (tmp_path / "hyperopt_results").mkdir(parents=True)
2025-08-30T09:58:47.4634951Z         hyperopt_conf.update(
2025-08-30T09:58:47.4635011Z             {
2025-08-30T09:58:47.4635108Z                 "strategy": "HyperoptableStrategy",
2025-08-30T09:58:47.4635194Z                 "user_data_dir": tmp_path,
2025-08-30T09:58:47.4635277Z                 "hyperopt_random_state": 42,
2025-08-30T09:58:47.4635352Z                 "spaces": ["trades"],
2025-08-30T09:58:47.4635431Z                 "stake_amount": "unlimited",
2025-08-30T09:58:47.4635494Z             }
2025-08-30T09:58:47.4635550Z         )
2025-08-30T09:58:47.4635635Z         hyperopt = Hyperopt(hyperopt_conf)
2025-08-30T09:58:47.4635695Z     
2025-08-30T09:58:47.4635874Z         assert isinstance(hyperopt.hyperopter.custom_hyperopt, HyperOptAuto)
2025-08-30T09:58:47.4635931Z     
2025-08-30T09:58:47.4636117Z         assert hyperopt.hyperopter.backtesting.strategy.max_open_trades == 1
2025-08-30T09:58:47.4636177Z     
2025-08-30T09:58:47.4636249Z >       hyperopt.start()
2025-08-30T09:58:47.4636253Z 
2025-08-30T09:58:47.4636342Z tests/optimize/test_hyperopt.py:1272: 
2025-08-30T09:58:47.4636450Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4636576Z freqtrade/optimize/hyperopt/hyperopt.py:256: in start
2025-08-30T09:58:47.4636668Z     self.hyperopter.prepare_hyperopt()
2025-08-30T09:58:47.4636868Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:121: in prepare_hyperopt
2025-08-30T09:58:47.4636950Z     self.prepare_hyperopt_data()
2025-08-30T09:58:47.4637159Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:466: in prepare_hyperopt_data
2025-08-30T09:58:47.4637289Z     data, self.timerange = self.backtesting.load_bt_data()
2025-08-30T09:58:47.4637365Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4637575Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.4637683Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.4637762Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4637909Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.4637977Z     timeranges = [
2025-08-30T09:58:47.4638167Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.4638322Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.4638381Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.4647912Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4648042Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4648114Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4648232Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4648246Z 
2025-08-30T09:58:47.4648427Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4648492Z key = 'date'
2025-08-30T09:58:47.4648500Z 
2025-08-30T09:58:47.4648576Z     def get_loc(self, key):
2025-08-30T09:58:47.4648641Z         """
2025-08-30T09:58:47.4648804Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4648981Z     
2025-08-30T09:58:47.4649056Z         Parameters
2025-08-30T09:58:47.4649122Z         ----------
2025-08-30T09:58:47.4649189Z         key : label
2025-08-30T09:58:47.4649246Z     
2025-08-30T09:58:47.4649312Z         Returns
2025-08-30T09:58:47.4649372Z         -------
2025-08-30T09:58:47.4649501Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4649562Z     
2025-08-30T09:58:47.4649624Z         Examples
2025-08-30T09:58:47.4649684Z         --------
2025-08-30T09:58:47.4649779Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4649862Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4649921Z         1
2025-08-30T09:58:47.4649977Z     
2025-08-30T09:58:47.4650149Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4650234Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4650304Z         slice(1, 3, None)
2025-08-30T09:58:47.4650365Z     
2025-08-30T09:58:47.4650470Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4650556Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4650637Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4650696Z         """
2025-08-30T09:58:47.4650790Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4650851Z         try:
2025-08-30T09:58:47.4650950Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4651027Z         except KeyError as err:
2025-08-30T09:58:47.4651116Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4651208Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4651334Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4651391Z             ):
2025-08-30T09:58:47.4651482Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4651570Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4651643Z E           KeyError: 'date'
2025-08-30T09:58:47.4651650Z 
2025-08-30T09:58:47.4651856Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4652005Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4652153Z 2025-08-30 09:57:43,963 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4652394Z 2025-08-30 09:57:43,964 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4652557Z 2025-08-30 09:57:43,964 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4652742Z 2025-08-30 09:57:43,965 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4653059Z 2025-08-30 09:57:43,965 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4653321Z 2025-08-30 09:57:43,966 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4654049Z 2025-08-30 09:57:43,967 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4654336Z 2025-08-30 09:57:43,968 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4654598Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4654779Z 2025-08-30 09:57:43,968 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4655218Z 2025-08-30 09:57:43,969 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4655551Z 2025-08-30 09:57:43,969 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4655876Z 2025-08-30 09:57:43,969 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4656282Z 2025-08-30 09:57:43,969 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4656636Z 2025-08-30 09:57:43,970 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2025-08-30T09:58:47.4657045Z 2025-08-30 09:57:43,970 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4657379Z 2025-08-30 09:57:43,970 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4657778Z 2025-08-30 09:57:43,971 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4658015Z 2025-08-30 09:57:43,971 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4658266Z 2025-08-30 09:57:43,971 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4658525Z 2025-08-30 09:57:43,971 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4658822Z 2025-08-30 09:57:43,972 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4659125Z 2025-08-30 09:57:43,972 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4659401Z 2025-08-30 09:57:43,972 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4659689Z 2025-08-30 09:57:43,972 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4660156Z 2025-08-30 09:57:43,973 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4660242Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4660591Z 2025-08-30 09:57:43,973 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4660845Z 2025-08-30 09:57:43,973 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4661108Z 2025-08-30 09:57:43,974 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2025-08-30T09:58:47.4661371Z 2025-08-30 09:57:43,974 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4661749Z 2025-08-30 09:57:43,974 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4662005Z 2025-08-30 09:57:43,974 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4662300Z 2025-08-30 09:57:43,975 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4662586Z 2025-08-30 09:57:43,975 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4662842Z 2025-08-30 09:57:43,975 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4663123Z 2025-08-30 09:57:43,975 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4663534Z 2025-08-30 09:57:43,976 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4663837Z 2025-08-30 09:57:43,976 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4664119Z 2025-08-30 09:57:43,976 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4664430Z 2025-08-30 09:57:43,976 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4664682Z 2025-08-30 09:57:43,977 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4665158Z 2025-08-30 09:57:43,979 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4665564Z 2025-08-30 09:57:43,980 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4666185Z 2025-08-30 09:57:43,982 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4666527Z 2025-08-30 09:57:43,983 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4666831Z 2025-08-30 09:57:43,983 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4667073Z 2025-08-30 09:57:43,985 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4667279Z 2025-08-30 09:57:43,985 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4667608Z 2025-08-30 09:57:43,986 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4667821Z 2025-08-30 09:57:43,986 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4668076Z 2025-08-30 09:57:43,986 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4668362Z 2025-08-30 09:57:43,987 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4668629Z 2025-08-30 09:57:43,987 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4669153Z 2025-08-30 09:57:43,987 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4669560Z 2025-08-30 09:57:43,988 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4670116Z 2025-08-30 09:57:43,988 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_stake_amount_unlimited_ma0/hyperopts'
2025-08-30T09:58:47.4670607Z 2025-08-30 09:57:43,988 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_stake_amount_unlimited_ma0/hyperopts" does not exist.
2025-08-30T09:58:47.4671209Z 2025-08-30 09:57:43,989 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4671639Z 2025-08-30 09:57:43,989 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4671940Z 2025-08-30 09:57:43,990 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4672270Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4672694Z 2025-08-30 09:57:43,991 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13410MB available
2025-08-30T09:58:47.4672941Z 2025-08-30 09:57:43,991 - freqtrade.optimize.hyperopt.hyperopt - INFO - Using optimizer random state: 42
2025-08-30T09:58:47.4673256Z 2025-08-30 09:57:43,992 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trades' space
2025-08-30T09:58:47.4673714Z 2025-08-30 09:57:43,992 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.4674186Z 2025-08-30 09:57:44,027 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4674640Z 2025-08-30 09:57:44,028 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4674791Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4674975Z 2025-08-30 09:57:43 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4675115Z 2025-08-30 09:57:43 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4675196Z 2025-08-30 09:57:43 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4675297Z 2025-08-30 09:57:43 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4675422Z 2025-08-30 09:57:43 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4675546Z 2025-08-30 09:57:43 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4675898Z 2025-08-30 09:57:43 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4676362Z 2025-08-30 09:57:43 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4676465Z 2025-08-30 09:57:43 INFO Found no parameter file.
2025-08-30T09:58:47.4676758Z 2025-08-30 09:57:43 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4676937Z 2025-08-30 09:57:43 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4677130Z 2025-08-30 09:57:43 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4677325Z 2025-08-30 09:57:43 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4677531Z 2025-08-30 09:57:43 INFO Override strategy 'stake_amount' with value in config file: unlimited.
2025-08-30T09:58:47.4677798Z 2025-08-30 09:57:43 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4677987Z 2025-08-30 09:57:43 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4678181Z 2025-08-30 09:57:43 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4678376Z 2025-08-30 09:57:43 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4678486Z 2025-08-30 09:57:43 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4678605Z 2025-08-30 09:57:43 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4678764Z 2025-08-30 09:57:43 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4678973Z 2025-08-30 09:57:43 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4679106Z 2025-08-30 09:57:43 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4679246Z 2025-08-30 09:57:43 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4679622Z 2025-08-30 09:57:43 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4679814Z 2025-08-30 09:57:43 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4679932Z 2025-08-30 09:57:43 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4680061Z 2025-08-30 09:57:43 INFO Strategy using stake_amount: unlimited
2025-08-30T09:58:47.4680190Z 2025-08-30 09:57:43 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4680355Z 2025-08-30 09:57:43 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4680537Z 2025-08-30 09:57:43 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4680656Z 2025-08-30 09:57:43 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4680799Z 2025-08-30 09:57:43 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4680922Z 2025-08-30 09:57:43 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4681062Z 2025-08-30 09:57:43 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4681325Z 2025-08-30 09:57:43 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4681565Z 2025-08-30 09:57:43 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4681770Z 2025-08-30 09:57:43 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4681886Z 2025-08-30 09:57:43 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4681992Z 2025-08-30 09:57:43 INFO Validating configuration ...
2025-08-30T09:58:47.4682354Z 2025-08-30 09:57:43 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4682638Z 2025-08-30 09:57:43 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4683073Z 2025-08-30 09:57:43 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4683274Z 2025-08-30 09:57:43 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4683665Z 2025-08-30 09:57:43 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4683817Z 2025-08-30 09:57:43 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4683937Z 2025-08-30 09:57:43 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4684170Z 2025-08-30 09:57:43 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4684287Z 2025-08-30 09:57:43 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4684479Z 2025-08-30 09:57:43 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4684776Z 2025-08-30 09:57:43 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4684943Z 2025-08-30 09:57:43 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4685354Z 2025-08-30 09:57:43 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4685722Z 2025-08-30 09:57:43 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4686152Z 2025-08-30 09:57:43 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_stake_amount_unlimited_ma0/hyperopts'
2025-08-30T09:58:47.4686513Z 2025-08-30 09:57:43 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_stake_amount_unlimited_ma0/hyperopts" does not exist.
2025-08-30T09:58:47.4686947Z 2025-08-30 09:57:43 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4687248Z 2025-08-30 09:57:43 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4687826Z 2025-08-30 09:57:43 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4688071Z 2025-08-30 09:57:43 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13410MB available
2025-08-30T09:58:47.4688185Z 2025-08-30 09:57:43 INFO Using optimizer random state: 42
2025-08-30T09:58:47.4688300Z 2025-08-30 09:57:43 DEBUG Hyperopt has 'trades' space
2025-08-30T09:58:47.4688430Z 2025-08-30 09:57:43 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.4688756Z 2025-08-30 09:57:44 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4689016Z 2025-08-30 09:57:44 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4689160Z __________________________ test_max_open_trades_dump ___________________________
2025-08-30T09:58:47.4689167Z 
2025-08-30T09:58:47.4689328Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4689401Z key = 'date'
2025-08-30T09:58:47.4689406Z 
2025-08-30T09:58:47.4689485Z     def get_loc(self, key):
2025-08-30T09:58:47.4689543Z         """
2025-08-30T09:58:47.4689766Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4689828Z     
2025-08-30T09:58:47.4689898Z         Parameters
2025-08-30T09:58:47.4689963Z         ----------
2025-08-30T09:58:47.4690024Z         key : label
2025-08-30T09:58:47.4690094Z     
2025-08-30T09:58:47.4690153Z         Returns
2025-08-30T09:58:47.4690214Z         -------
2025-08-30T09:58:47.4690338Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4690397Z     
2025-08-30T09:58:47.4690455Z         Examples
2025-08-30T09:58:47.4690512Z         --------
2025-08-30T09:58:47.4690606Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4690685Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4690742Z         1
2025-08-30T09:58:47.4690797Z     
2025-08-30T09:58:47.4690897Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4690986Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4691059Z         slice(1, 3, None)
2025-08-30T09:58:47.4691122Z     
2025-08-30T09:58:47.4691226Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4691310Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4691391Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4691456Z         """
2025-08-30T09:58:47.4691549Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4691608Z         try:
2025-08-30T09:58:47.4691700Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4691768Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4691773Z 
2025-08-30T09:58:47.4691946Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4692052Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4692217Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4692327Z     ???
2025-08-30T09:58:47.4692485Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4692549Z     ???
2025-08-30T09:58:47.4692810Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4692866Z     ???
2025-08-30T09:58:47.4693012Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4693017Z 
2025-08-30T09:58:47.4693074Z >   ???
2025-08-30T09:58:47.4693141Z E   KeyError: 'date'
2025-08-30T09:58:47.4693146Z 
2025-08-30T09:58:47.4693268Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4693273Z 
2025-08-30T09:58:47.4693577Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4693583Z 
2025-08-30T09:58:47.4693740Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64da82f210>
2025-08-30T09:58:47.4694189Z hyperopt_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4694389Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_max_open_trades_dump0')
2025-08-30T09:58:47.4694468Z fee = <MagicMock id='140075134789520'>
2025-08-30T09:58:47.4694630Z capsys = <_pytest.capture.CaptureFixture object at 0x7f64db99de90>
2025-08-30T09:58:47.4694723Z 
2025-08-30T09:58:47.4694931Z     def test_max_open_trades_dump(mocker, hyperopt_conf, tmp_path, fee, capsys) -> None:
2025-08-30T09:58:47.4695089Z         # This test is to ensure that after hyperopting, max_open_trades is never
2025-08-30T09:58:47.4695185Z         # saved as inf in the output json params
2025-08-30T09:58:47.4695260Z         patch_exchange(mocker)
2025-08-30T09:58:47.4695358Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4695469Z         (tmp_path / "hyperopt_results").mkdir(parents=True)
2025-08-30T09:58:47.4695552Z         hyperopt_conf.update(
2025-08-30T09:58:47.4695612Z             {
2025-08-30T09:58:47.4695706Z                 "strategy": "HyperoptableStrategy",
2025-08-30T09:58:47.4695859Z                 "user_data_dir": tmp_path,
2025-08-30T09:58:47.4695942Z                 "hyperopt_random_state": 42,
2025-08-30T09:58:47.4696016Z                 "spaces": ["trades"],
2025-08-30T09:58:47.4696081Z             }
2025-08-30T09:58:47.4696141Z         )
2025-08-30T09:58:47.4696232Z         hyperopt = Hyperopt(hyperopt_conf)
2025-08-30T09:58:47.4696288Z     
2025-08-30T09:58:47.4696384Z         def optuna_mock(hyperopt, *args, **kwargs):
2025-08-30T09:58:47.4696503Z             a = hyperopt.get_optuna_asked_points(*args, **kwargs)
2025-08-30T09:58:47.4696624Z             a[0]._cached_frozen_trial.params["max_open_trades"] = -1
2025-08-30T09:58:47.4696700Z             return a, [True]
2025-08-30T09:58:47.4696755Z     
2025-08-30T09:58:47.4696824Z         mocker.patch(
2025-08-30T09:58:47.4696969Z             "freqtrade.optimize.hyperopt.Hyperopt.get_asked_points",
2025-08-30T09:58:47.4697080Z             side_effect=partial(optuna_mock, hyperopt),
2025-08-30T09:58:47.4697137Z         )
2025-08-30T09:58:47.4697195Z     
2025-08-30T09:58:47.4697376Z         assert isinstance(hyperopt.hyperopter.custom_hyperopt, HyperOptAuto)
2025-08-30T09:58:47.4697431Z     
2025-08-30T09:58:47.4697502Z >       hyperopt.start()
2025-08-30T09:58:47.4697510Z 
2025-08-30T09:58:47.4697606Z tests/optimize/test_hyperopt.py:1305: 
2025-08-30T09:58:47.4697706Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4697830Z freqtrade/optimize/hyperopt/hyperopt.py:256: in start
2025-08-30T09:58:47.4697921Z     self.hyperopter.prepare_hyperopt()
2025-08-30T09:58:47.4698119Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:121: in prepare_hyperopt
2025-08-30T09:58:47.4698200Z     self.prepare_hyperopt_data()
2025-08-30T09:58:47.4698405Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:466: in prepare_hyperopt_data
2025-08-30T09:58:47.4698601Z     data, self.timerange = self.backtesting.load_bt_data()
2025-08-30T09:58:47.4698676Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4698800Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.4698907Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.4698979Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4699181Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.4699248Z     timeranges = [
2025-08-30T09:58:47.4699381Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.4699536Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.4699597Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.4699788Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4699872Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4699937Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4700043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4700047Z 
2025-08-30T09:58:47.4700208Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4700270Z key = 'date'
2025-08-30T09:58:47.4700274Z 
2025-08-30T09:58:47.4700396Z     def get_loc(self, key):
2025-08-30T09:58:47.4700454Z         """
2025-08-30T09:58:47.4700606Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4700661Z     
2025-08-30T09:58:47.4700728Z         Parameters
2025-08-30T09:58:47.4700789Z         ----------
2025-08-30T09:58:47.4700851Z         key : label
2025-08-30T09:58:47.4700911Z     
2025-08-30T09:58:47.4700969Z         Returns
2025-08-30T09:58:47.4701029Z         -------
2025-08-30T09:58:47.4701152Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4701214Z     
2025-08-30T09:58:47.4701275Z         Examples
2025-08-30T09:58:47.4701337Z         --------
2025-08-30T09:58:47.4701431Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4701573Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4701633Z         1
2025-08-30T09:58:47.4701687Z     
2025-08-30T09:58:47.4701784Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4701867Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4701946Z         slice(1, 3, None)
2025-08-30T09:58:47.4702002Z     
2025-08-30T09:58:47.4702104Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4702187Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4702277Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4702333Z         """
2025-08-30T09:58:47.4702426Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4702489Z         try:
2025-08-30T09:58:47.4702579Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4702654Z         except KeyError as err:
2025-08-30T09:58:47.4702743Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4702843Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4702954Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4703014Z             ):
2025-08-30T09:58:47.4703103Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4703183Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4703257Z E           KeyError: 'date'
2025-08-30T09:58:47.4703263Z 
2025-08-30T09:58:47.4703591Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4703733Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4703880Z 2025-08-30 09:57:45,500 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4704125Z 2025-08-30 09:57:45,500 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4704356Z 2025-08-30 09:57:45,501 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4704546Z 2025-08-30 09:57:45,501 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4704772Z 2025-08-30 09:57:45,502 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4705086Z 2025-08-30 09:57:45,503 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4705569Z 2025-08-30 09:57:45,503 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4705847Z 2025-08-30 09:57:45,504 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4706096Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4706275Z 2025-08-30 09:57:45,505 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4706716Z 2025-08-30 09:57:45,505 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4707042Z 2025-08-30 09:57:45,505 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4707428Z 2025-08-30 09:57:45,506 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4707772Z 2025-08-30 09:57:45,506 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4708105Z 2025-08-30 09:57:45,506 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4708511Z 2025-08-30 09:57:45,507 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4708906Z 2025-08-30 09:57:45,507 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4709247Z 2025-08-30 09:57:45,507 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4709480Z 2025-08-30 09:57:45,507 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4709715Z 2025-08-30 09:57:45,508 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4709963Z 2025-08-30 09:57:45,508 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4710255Z 2025-08-30 09:57:45,508 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4710556Z 2025-08-30 09:57:45,509 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4710826Z 2025-08-30 09:57:45,509 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4711106Z 2025-08-30 09:57:45,509 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4711572Z 2025-08-30 09:57:45,509 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4711648Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4711983Z 2025-08-30 09:57:45,510 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4712231Z 2025-08-30 09:57:45,510 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4712472Z 2025-08-30 09:57:45,510 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4712777Z 2025-08-30 09:57:45,510 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4713092Z 2025-08-30 09:57:45,511 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4713494Z 2025-08-30 09:57:45,511 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4713755Z 2025-08-30 09:57:45,511 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4714041Z 2025-08-30 09:57:45,511 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4714291Z 2025-08-30 09:57:45,512 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4714566Z 2025-08-30 09:57:45,512 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4714871Z 2025-08-30 09:57:45,512 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4715153Z 2025-08-30 09:57:45,513 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4715496Z 2025-08-30 09:57:45,513 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4715749Z 2025-08-30 09:57:45,513 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4715997Z 2025-08-30 09:57:45,513 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4716469Z 2025-08-30 09:57:45,515 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4716882Z 2025-08-30 09:57:45,516 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4717488Z 2025-08-30 09:57:45,519 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4717826Z 2025-08-30 09:57:45,520 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4718130Z 2025-08-30 09:57:45,520 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4718364Z 2025-08-30 09:57:45,522 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4718569Z 2025-08-30 09:57:45,522 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4718900Z 2025-08-30 09:57:45,523 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4719110Z 2025-08-30 09:57:45,523 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4719359Z 2025-08-30 09:57:45,523 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4719646Z 2025-08-30 09:57:45,524 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4719901Z 2025-08-30 09:57:45,524 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4720420Z 2025-08-30 09:57:45,524 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4720832Z 2025-08-30 09:57:45,525 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4721451Z 2025-08-30 09:57:45,525 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_max_open_trades_dump0/hyperopts'
2025-08-30T09:58:47.4721895Z 2025-08-30 09:57:45,525 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_max_open_trades_dump0/hyperopts" does not exist.
2025-08-30T09:58:47.4722451Z 2025-08-30 09:57:45,526 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4722868Z 2025-08-30 09:57:45,526 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4723172Z 2025-08-30 09:57:45,527 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4723714Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4724142Z 2025-08-30 09:57:45,528 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13475MB available
2025-08-30T09:58:47.4724469Z 2025-08-30 09:57:45,529 - freqtrade.optimize.hyperopt.hyperopt - INFO - Using optimizer random state: 42
2025-08-30T09:58:47.4724742Z 2025-08-30 09:57:45,529 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trades' space
2025-08-30T09:58:47.4724997Z 2025-08-30 09:57:45,529 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.4725241Z 2025-08-30 09:57:45,535 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.4725704Z 2025-08-30 09:57:45,573 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4726236Z 2025-08-30 09:57:45,574 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4726386Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4726502Z 2025-08-30 09:57:45 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4726668Z 2025-08-30 09:57:45 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4726748Z 2025-08-30 09:57:45 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4726848Z 2025-08-30 09:57:45 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4726972Z 2025-08-30 09:57:45 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4727092Z 2025-08-30 09:57:45 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4727447Z 2025-08-30 09:57:45 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4727914Z 2025-08-30 09:57:45 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4728011Z 2025-08-30 09:57:45 INFO Found no parameter file.
2025-08-30T09:58:47.4728303Z 2025-08-30 09:57:45 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4728482Z 2025-08-30 09:57:45 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4728660Z 2025-08-30 09:57:45 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4728858Z 2025-08-30 09:57:45 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4729051Z 2025-08-30 09:57:45 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4729313Z 2025-08-30 09:57:45 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4729572Z 2025-08-30 09:57:45 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4729769Z 2025-08-30 09:57:45 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4729877Z 2025-08-30 09:57:45 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4730041Z 2025-08-30 09:57:45 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4730160Z 2025-08-30 09:57:45 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4730311Z 2025-08-30 09:57:45 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4730468Z 2025-08-30 09:57:45 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4730603Z 2025-08-30 09:57:45 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4730743Z 2025-08-30 09:57:45 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4731119Z 2025-08-30 09:57:45 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4731315Z 2025-08-30 09:57:45 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4731430Z 2025-08-30 09:57:45 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4731608Z 2025-08-30 09:57:45 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4731739Z 2025-08-30 09:57:45 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4731906Z 2025-08-30 09:57:45 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4732024Z 2025-08-30 09:57:45 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4732150Z 2025-08-30 09:57:45 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4732293Z 2025-08-30 09:57:45 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4732411Z 2025-08-30 09:57:45 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4732557Z 2025-08-30 09:57:45 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4732748Z 2025-08-30 09:57:45 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4732893Z 2025-08-30 09:57:45 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4733038Z 2025-08-30 09:57:45 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4733155Z 2025-08-30 09:57:45 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4733259Z 2025-08-30 09:57:45 INFO Validating configuration ...
2025-08-30T09:58:47.4733715Z 2025-08-30 09:57:45 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4734003Z 2025-08-30 09:57:45 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4734435Z 2025-08-30 09:57:45 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4734633Z 2025-08-30 09:57:45 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4734811Z 2025-08-30 09:57:45 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4734947Z 2025-08-30 09:57:45 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4735063Z 2025-08-30 09:57:45 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4735294Z 2025-08-30 09:57:45 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4735405Z 2025-08-30 09:57:45 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4735557Z 2025-08-30 09:57:45 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4735748Z 2025-08-30 09:57:45 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4735910Z 2025-08-30 09:57:45 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4736394Z 2025-08-30 09:57:45 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4736679Z 2025-08-30 09:57:45 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4737138Z 2025-08-30 09:57:45 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_max_open_trades_dump0/hyperopts'
2025-08-30T09:58:47.4737424Z 2025-08-30 09:57:45 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_max_open_trades_dump0/hyperopts" does not exist.
2025-08-30T09:58:47.4737856Z 2025-08-30 09:57:45 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4738155Z 2025-08-30 09:57:45 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4738730Z 2025-08-30 09:57:45 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4738973Z 2025-08-30 09:57:45 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13475MB available
2025-08-30T09:58:47.4739142Z 2025-08-30 09:57:45 INFO Using optimizer random state: 42
2025-08-30T09:58:47.4739245Z 2025-08-30 09:57:45 DEBUG Hyperopt has 'trades' space
2025-08-30T09:58:47.4739376Z 2025-08-30 09:57:45 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.4739515Z 2025-08-30 09:57:45 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.4739772Z 2025-08-30 09:57:45 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4740025Z 2025-08-30 09:57:45 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4740177Z ___________________ test_in_strategy_auto_hyperopt_per_epoch ___________________
2025-08-30T09:58:47.4740182Z 
2025-08-30T09:58:47.4740399Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4740469Z key = 'date'
2025-08-30T09:58:47.4740474Z 
2025-08-30T09:58:47.4740547Z     def get_loc(self, key):
2025-08-30T09:58:47.4740607Z         """
2025-08-30T09:58:47.4740759Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4740820Z     
2025-08-30T09:58:47.4740883Z         Parameters
2025-08-30T09:58:47.4740945Z         ----------
2025-08-30T09:58:47.4741010Z         key : label
2025-08-30T09:58:47.4741067Z     
2025-08-30T09:58:47.4741124Z         Returns
2025-08-30T09:58:47.4741184Z         -------
2025-08-30T09:58:47.4741313Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4741369Z     
2025-08-30T09:58:47.4741428Z         Examples
2025-08-30T09:58:47.4741497Z         --------
2025-08-30T09:58:47.4741586Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4741665Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4741725Z         1
2025-08-30T09:58:47.4741786Z     
2025-08-30T09:58:47.4741880Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4741960Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4742034Z         slice(1, 3, None)
2025-08-30T09:58:47.4742091Z     
2025-08-30T09:58:47.4742194Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4742278Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4742366Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4742422Z         """
2025-08-30T09:58:47.4742514Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4742576Z         try:
2025-08-30T09:58:47.4742666Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4742736Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4742800Z 
2025-08-30T09:58:47.4742976Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4743080Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4743245Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4743309Z     ???
2025-08-30T09:58:47.4743643Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4743704Z     ???
2025-08-30T09:58:47.4743966Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4744027Z     ???
2025-08-30T09:58:47.4744127Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4744133Z 
2025-08-30T09:58:47.4744188Z >   ???
2025-08-30T09:58:47.4744260Z E   KeyError: 'date'
2025-08-30T09:58:47.4744265Z 
2025-08-30T09:58:47.4744381Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4744388Z 
2025-08-30T09:58:47.4744543Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4744547Z 
2025-08-30T09:58:47.4744709Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65dc277bd0>
2025-08-30T09:58:47.4745120Z hyperopt_conf = {'amend_last_stake_amount': False, 'analyze_per_epoch': True, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.4745396Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt0')
2025-08-30T09:58:47.4745480Z fee = <MagicMock id='140073992055184'>
2025-08-30T09:58:47.4745485Z 
2025-08-30T09:58:47.4745707Z     def test_in_strategy_auto_hyperopt_per_epoch(mocker, hyperopt_conf, tmp_path, fee) -> None:
2025-08-30T09:58:47.4745785Z         patch_exchange(mocker)
2025-08-30T09:58:47.4745877Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4745990Z         (tmp_path / "hyperopt_results").mkdir(parents=True)
2025-08-30T09:58:47.4746047Z     
2025-08-30T09:58:47.4746125Z         hyperopt_conf.update(
2025-08-30T09:58:47.4746187Z             {
2025-08-30T09:58:47.4746333Z                 "strategy": "HyperoptableStrategy",
2025-08-30T09:58:47.4746416Z                 "user_data_dir": tmp_path,
2025-08-30T09:58:47.4746503Z                 "hyperopt_random_state": 42,
2025-08-30T09:58:47.4746577Z                 "spaces": ["all"],
2025-08-30T09:58:47.4746648Z                 "epochs": 3,
2025-08-30T09:58:47.4746731Z                 "analyze_per_epoch": True,
2025-08-30T09:58:47.4746788Z             }
2025-08-30T09:58:47.4746843Z         )
2025-08-30T09:58:47.4746916Z         go = mocker.patch(
2025-08-30T09:58:47.4747169Z             "freqtrade.optimize.hyperopt.hyperopt_optimizer.HyperOptimizer.generate_optimizer",
2025-08-30T09:58:47.4747237Z             return_value={
2025-08-30T09:58:47.4747303Z                 "loss": 0.05,
2025-08-30T09:58:47.4747401Z                 "results_explanation": "foo result",
2025-08-30T09:58:47.4747471Z                 "params": {},
2025-08-30T09:58:47.4747576Z                 "results_metrics": generate_result_metrics(),
2025-08-30T09:58:47.4747636Z             },
2025-08-30T09:58:47.4747696Z         )
2025-08-30T09:58:47.4747781Z         hyperopt = Hyperopt(hyperopt_conf)
2025-08-30T09:58:47.4747861Z         opt = hyperopt.hyperopter
2025-08-30T09:58:47.4748051Z         opt.backtesting.exchange.get_max_leverage = MagicMock(return_value=1.0)
2025-08-30T09:58:47.4748173Z         assert isinstance(opt.custom_hyperopt, HyperOptAuto)
2025-08-30T09:58:47.4748334Z         assert isinstance(opt.backtesting.strategy.buy_rsi, IntParameter)
2025-08-30T09:58:47.4748476Z         assert opt.backtesting.strategy.bot_loop_started is False
2025-08-30T09:58:47.4748595Z         assert opt.backtesting.strategy.bot_started is True
2025-08-30T09:58:47.4748649Z     
2025-08-30T09:58:47.4748782Z         assert opt.backtesting.strategy.buy_rsi.in_space is True
2025-08-30T09:58:47.4748902Z         assert opt.backtesting.strategy.buy_rsi.value == 35
2025-08-30T09:58:47.4749091Z         assert opt.backtesting.strategy.sell_rsi.value == 74
2025-08-30T09:58:47.4749285Z         assert opt.backtesting.strategy.protection_cooldown_lookback.value == 30
2025-08-30T09:58:47.4749412Z         buy_rsi_range = opt.backtesting.strategy.buy_rsi.range
2025-08-30T09:58:47.4749506Z         assert isinstance(buy_rsi_range, range)
2025-08-30T09:58:47.4749623Z         # Range from 0 - 50 (inclusive)
2025-08-30T09:58:47.4749714Z         assert len(list(buy_rsi_range)) == 51
2025-08-30T09:58:47.4749769Z     
2025-08-30T09:58:47.4749843Z >       hyperopt.start()
2025-08-30T09:58:47.4749848Z 
2025-08-30T09:58:47.4749937Z tests/optimize/test_hyperopt.py:1221: 
2025-08-30T09:58:47.4750043Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4750165Z freqtrade/optimize/hyperopt/hyperopt.py:256: in start
2025-08-30T09:58:47.4750255Z     self.hyperopter.prepare_hyperopt()
2025-08-30T09:58:47.4750454Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:121: in prepare_hyperopt
2025-08-30T09:58:47.4750534Z     self.prepare_hyperopt_data()
2025-08-30T09:58:47.4750744Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:466: in prepare_hyperopt_data
2025-08-30T09:58:47.4750878Z     data, self.timerange = self.backtesting.load_bt_data()
2025-08-30T09:58:47.4750996Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4751126Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.4751235Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.4751304Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4751450Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.4751514Z     timeranges = [
2025-08-30T09:58:47.4751649Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.4751802Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.4751862Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.4752056Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4752187Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4752255Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4752358Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4752365Z 
2025-08-30T09:58:47.4752528Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4752588Z key = 'date'
2025-08-30T09:58:47.4752593Z 
2025-08-30T09:58:47.4752669Z     def get_loc(self, key):
2025-08-30T09:58:47.4752725Z         """
2025-08-30T09:58:47.4752874Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4752928Z     
2025-08-30T09:58:47.4752994Z         Parameters
2025-08-30T09:58:47.4753055Z         ----------
2025-08-30T09:58:47.4753116Z         key : label
2025-08-30T09:58:47.4753174Z     
2025-08-30T09:58:47.4753234Z         Returns
2025-08-30T09:58:47.4753293Z         -------
2025-08-30T09:58:47.4753520Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4753583Z     
2025-08-30T09:58:47.4753644Z         Examples
2025-08-30T09:58:47.4753704Z         --------
2025-08-30T09:58:47.4753797Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4753878Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4753935Z         1
2025-08-30T09:58:47.4753992Z     
2025-08-30T09:58:47.4754086Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4754167Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4754234Z         slice(1, 3, None)
2025-08-30T09:58:47.4754293Z     
2025-08-30T09:58:47.4754391Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4754475Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4754556Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4754689Z         """
2025-08-30T09:58:47.4754781Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4754838Z         try:
2025-08-30T09:58:47.4754934Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4755008Z         except KeyError as err:
2025-08-30T09:58:47.4755105Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4755206Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4755388Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4755449Z             ):
2025-08-30T09:58:47.4755540Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4755625Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4755698Z E           KeyError: 'date'
2025-08-30T09:58:47.4755703Z 
2025-08-30T09:58:47.4755897Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4756046Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4756197Z 2025-08-30 09:57:48,823 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4756438Z 2025-08-30 09:57:48,823 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4756604Z 2025-08-30 09:57:48,824 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4756856Z 2025-08-30 09:57:48,824 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4757083Z 2025-08-30 09:57:48,825 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4757341Z 2025-08-30 09:57:48,826 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4757818Z 2025-08-30 09:57:48,826 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4758089Z 2025-08-30 09:57:48,828 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4758345Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4758580Z 2025-08-30 09:57:48,828 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4759018Z 2025-08-30 09:57:48,829 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4759348Z 2025-08-30 09:57:48,829 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4759673Z 2025-08-30 09:57:48,829 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4760013Z 2025-08-30 09:57:48,830 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4760353Z 2025-08-30 09:57:48,830 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4760766Z 2025-08-30 09:57:48,830 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4761112Z 2025-08-30 09:57:48,831 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4761450Z 2025-08-30 09:57:48,831 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4761791Z 2025-08-30 09:57:48,831 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4762021Z 2025-08-30 09:57:48,831 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4762258Z 2025-08-30 09:57:48,832 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4762556Z 2025-08-30 09:57:48,832 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4762846Z 2025-08-30 09:57:48,832 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4763188Z 2025-08-30 09:57:48,832 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4763660Z 2025-08-30 09:57:48,833 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4763950Z 2025-08-30 09:57:48,833 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4764410Z 2025-08-30 09:57:48,833 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4764493Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4764832Z 2025-08-30 09:57:48,834 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4765085Z 2025-08-30 09:57:48,834 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4765407Z 2025-08-30 09:57:48,834 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4765667Z 2025-08-30 09:57:48,834 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4765979Z 2025-08-30 09:57:48,835 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4766228Z 2025-08-30 09:57:48,835 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4766484Z 2025-08-30 09:57:48,835 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4766830Z 2025-08-30 09:57:48,835 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4767085Z 2025-08-30 09:57:48,836 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4767366Z 2025-08-30 09:57:48,836 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4767661Z 2025-08-30 09:57:48,836 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4767944Z 2025-08-30 09:57:48,837 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4768223Z 2025-08-30 09:57:48,837 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4768467Z 2025-08-30 09:57:48,837 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4768716Z 2025-08-30 09:57:48,837 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4769189Z 2025-08-30 09:57:48,840 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4769601Z 2025-08-30 09:57:48,841 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4770157Z 2025-08-30 09:57:48,844 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4770489Z 2025-08-30 09:57:48,845 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4770849Z 2025-08-30 09:57:48,846 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4771085Z 2025-08-30 09:57:48,848 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4771291Z 2025-08-30 09:57:48,848 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4771678Z 2025-08-30 09:57:48,848 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4771885Z 2025-08-30 09:57:48,849 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4772135Z 2025-08-30 09:57:48,849 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4772424Z 2025-08-30 09:57:48,849 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4772681Z 2025-08-30 09:57:48,850 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4773206Z 2025-08-30 09:57:48,850 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4773739Z 2025-08-30 09:57:48,850 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4774352Z 2025-08-30 09:57:48,851 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt0/hyperopts'
2025-08-30T09:58:47.4774774Z 2025-08-30 09:57:48,851 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt0/hyperopts" does not exist.
2025-08-30T09:58:47.4775325Z 2025-08-30 09:57:48,851 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4775800Z 2025-08-30 09:57:48,852 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4776111Z 2025-08-30 09:57:48,853 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4776436Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4776854Z 2025-08-30 09:57:48,854 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13287MB available
2025-08-30T09:58:47.4777103Z 2025-08-30 09:57:48,855 - freqtrade.optimize.hyperopt.hyperopt - INFO - Using optimizer random state: 42
2025-08-30T09:58:47.4777382Z 2025-08-30 09:57:48,855 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'protection' space
2025-08-30T09:58:47.4777638Z 2025-08-30 09:57:48,855 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'buy' space
2025-08-30T09:58:47.4777894Z 2025-08-30 09:57:48,856 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'sell' space
2025-08-30T09:58:47.4778143Z 2025-08-30 09:57:48,856 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'roi' space
2025-08-30T09:58:47.4778610Z 2025-08-30 09:57:48,856 - freqtrade.optimize.hyperopt.hyperopt_interface - DEBUG - Using roi space limits: {'roi_t1_min': 10, 'roi_t1_max': 120, 'roi_t2_min': 10, 'roi_t2_max': 60, 'roi_t3_min': 10, 
2025-08-30T09:58:47.4778840Z 'roi_t3_max': 40, 'roi_p1_min': 0.01, 'roi_p1_max': 0.04, 'roi_p2_min': 0.01, 'roi_p2_max': 0.07, 'roi_p3_min': 0.01, 'roi_p3_max': 0.2}
2025-08-30T09:58:47.4779156Z 2025-08-30 09:57:48,857 - freqtrade.optimize.hyperopt.hyperopt_interface - INFO - Min roi table: {0: 0.03, 10: 0.02, 20: 0.01, 30: 0}
2025-08-30T09:58:47.4779526Z 2025-08-30 09:57:48,857 - freqtrade.optimize.hyperopt.hyperopt_interface - INFO - Max roi table: {0: 0.31, 40: 0.11, 100: 0.04, 220: 0}
2025-08-30T09:58:47.4779800Z 2025-08-30 09:57:48,857 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'stoploss' space
2025-08-30T09:58:47.4780065Z 2025-08-30 09:57:48,858 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trailing' space
2025-08-30T09:58:47.4780376Z 2025-08-30 09:57:48,858 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trades' space
2025-08-30T09:58:47.4780635Z 2025-08-30 09:57:48,858 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.4781098Z 2025-08-30 09:57:48,900 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4781547Z 2025-08-30 09:57:48,901 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4781703Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4781814Z 2025-08-30 09:57:48 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4782004Z 2025-08-30 09:57:48 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4782238Z 2025-08-30 09:57:48 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4782352Z 2025-08-30 09:57:48 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4782484Z 2025-08-30 09:57:48 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4782607Z 2025-08-30 09:57:48 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4782963Z 2025-08-30 09:57:48 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4783529Z 2025-08-30 09:57:48 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4783636Z 2025-08-30 09:57:48 INFO Found no parameter file.
2025-08-30T09:58:47.4784007Z 2025-08-30 09:57:48 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4784192Z 2025-08-30 09:57:48 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4784379Z 2025-08-30 09:57:48 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4784580Z 2025-08-30 09:57:48 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4784771Z 2025-08-30 09:57:48 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4785033Z 2025-08-30 09:57:48 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4785237Z 2025-08-30 09:57:48 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4785428Z 2025-08-30 09:57:48 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4785624Z 2025-08-30 09:57:48 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4785734Z 2025-08-30 09:57:48 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4785842Z 2025-08-30 09:57:48 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4785963Z 2025-08-30 09:57:48 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4786119Z 2025-08-30 09:57:48 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4786275Z 2025-08-30 09:57:48 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4786405Z 2025-08-30 09:57:48 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4786548Z 2025-08-30 09:57:48 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4786919Z 2025-08-30 09:57:48 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4787196Z 2025-08-30 09:57:48 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4787315Z 2025-08-30 09:57:48 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4787423Z 2025-08-30 09:57:48 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4787603Z 2025-08-30 09:57:48 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4787775Z 2025-08-30 09:57:48 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4787898Z 2025-08-30 09:57:48 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4788020Z 2025-08-30 09:57:48 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4788165Z 2025-08-30 09:57:48 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4788288Z 2025-08-30 09:57:48 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4788431Z 2025-08-30 09:57:48 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4788585Z 2025-08-30 09:57:48 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4788734Z 2025-08-30 09:57:48 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4788875Z 2025-08-30 09:57:48 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4789047Z 2025-08-30 09:57:48 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4789157Z 2025-08-30 09:57:48 INFO Validating configuration ...
2025-08-30T09:58:47.4789507Z 2025-08-30 09:57:48 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4789790Z 2025-08-30 09:57:48 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4790231Z 2025-08-30 09:57:48 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4790429Z 2025-08-30 09:57:48 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4790648Z 2025-08-30 09:57:48 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4790796Z 2025-08-30 09:57:48 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4790913Z 2025-08-30 09:57:48 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4791145Z 2025-08-30 09:57:48 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4791254Z 2025-08-30 09:57:48 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4791413Z 2025-08-30 09:57:48 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4791600Z 2025-08-30 09:57:48 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4791761Z 2025-08-30 09:57:48 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4792171Z 2025-08-30 09:57:48 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4792454Z 2025-08-30 09:57:48 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4792880Z 2025-08-30 09:57:48 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt0/hyperopts'
2025-08-30T09:58:47.4793185Z 2025-08-30 09:57:48 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt0/hyperopts" does not exist.
2025-08-30T09:58:47.4793710Z 2025-08-30 09:57:48 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4794014Z 2025-08-30 09:57:48 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4794662Z 2025-08-30 09:57:48 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4794904Z 2025-08-30 09:57:48 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13287MB available
2025-08-30T09:58:47.4795014Z 2025-08-30 09:57:48 INFO Using optimizer random state: 42
2025-08-30T09:58:47.4795182Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'protection' space
2025-08-30T09:58:47.4795284Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'buy' space
2025-08-30T09:58:47.4795382Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'sell' space
2025-08-30T09:58:47.4795482Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'roi' space
2025-08-30T09:58:47.4795967Z 2025-08-30 09:57:48 DEBUG Using roi space limits: {'roi_t1_min': 10, 'roi_t1_max': 120, 'roi_t2_min': 10, 'roi_t2_max': 60, 'roi_t3_min': 10, 'roi_t3_max': 40, 'roi_p1_min': 0.01, 'roi_p1_max': 0.04, 'roi_p2_min': 0.01, 'roi_p2_max': 0.07, 'roi_p3_min': 0.01, 'roi_p3_max': 0.2}
2025-08-30T09:58:47.4796103Z 2025-08-30 09:57:48 INFO Min roi table: {0: 0.03, 10: 0.02, 20: 0.01, 30: 0}
2025-08-30T09:58:47.4796246Z 2025-08-30 09:57:48 INFO Max roi table: {0: 0.31, 40: 0.11, 100: 0.04, 220: 0}
2025-08-30T09:58:47.4796354Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'stoploss' space
2025-08-30T09:58:47.4796457Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'trailing' space
2025-08-30T09:58:47.4796643Z 2025-08-30 09:57:48 DEBUG Hyperopt has 'trades' space
2025-08-30T09:58:47.4796771Z 2025-08-30 09:57:48 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.4797032Z 2025-08-30 09:57:48 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4797286Z 2025-08-30 09:57:48 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4797433Z ________________________ test_in_strategy_auto_hyperopt ________________________
2025-08-30T09:58:47.4797440Z 
2025-08-30T09:58:47.4797606Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4797673Z key = 'date'
2025-08-30T09:58:47.4797734Z 
2025-08-30T09:58:47.4797812Z     def get_loc(self, key):
2025-08-30T09:58:47.4797870Z         """
2025-08-30T09:58:47.4798022Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4798111Z     
2025-08-30T09:58:47.4798178Z         Parameters
2025-08-30T09:58:47.4798241Z         ----------
2025-08-30T09:58:47.4798309Z         key : label
2025-08-30T09:58:47.4798366Z     
2025-08-30T09:58:47.4798426Z         Returns
2025-08-30T09:58:47.4798485Z         -------
2025-08-30T09:58:47.4798616Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4798672Z     
2025-08-30T09:58:47.4798731Z         Examples
2025-08-30T09:58:47.4798796Z         --------
2025-08-30T09:58:47.4798885Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4798965Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4799025Z         1
2025-08-30T09:58:47.4799086Z     
2025-08-30T09:58:47.4799183Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4799264Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4799338Z         slice(1, 3, None)
2025-08-30T09:58:47.4799394Z     
2025-08-30T09:58:47.4799496Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4799580Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4799673Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4799730Z         """
2025-08-30T09:58:47.4799820Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4799883Z         try:
2025-08-30T09:58:47.4799972Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4800042Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4800047Z 
2025-08-30T09:58:47.4800222Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4800376Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4800546Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4800609Z     ???
2025-08-30T09:58:47.4800770Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4800828Z     ???
2025-08-30T09:58:47.4801133Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4801196Z     ???
2025-08-30T09:58:47.4801295Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4801300Z 
2025-08-30T09:58:47.4801355Z >   ???
2025-08-30T09:58:47.4801428Z E   KeyError: 'date'
2025-08-30T09:58:47.4801433Z 
2025-08-30T09:58:47.4801554Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4801559Z 
2025-08-30T09:58:47.4801714Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4801721Z 
2025-08-30T09:58:47.4801883Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f65c8832d50>
2025-08-30T09:58:47.4802330Z hyperopt_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4802546Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt1')
2025-08-30T09:58:47.4802677Z fee = <MagicMock id='140073717509712'>
2025-08-30T09:58:47.4802682Z 
2025-08-30T09:58:47.4802875Z     def test_in_strategy_auto_hyperopt(mocker, hyperopt_conf, tmp_path, fee) -> None:
2025-08-30T09:58:47.4802950Z         patch_exchange(mocker)
2025-08-30T09:58:47.4803042Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4803222Z         # Dummy-reduce points to ensure scikit-learn is forced to generate new values
2025-08-30T09:58:47.4803610Z         mocker.patch("freqtrade.optimize.hyperopt.hyperopt.INITIAL_POINTS", 2)
2025-08-30T09:58:47.4803745Z         (tmp_path / "hyperopt_results").mkdir(parents=True)
2025-08-30T09:58:47.4803822Z         # No hyperopt needed
2025-08-30T09:58:47.4803973Z         hyperopt_conf.update(
2025-08-30T09:58:47.4804034Z             {
2025-08-30T09:58:47.4804134Z                 "strategy": "HyperoptableStrategy",
2025-08-30T09:58:47.4804214Z                 "user_data_dir": tmp_path,
2025-08-30T09:58:47.4804304Z                 "hyperopt_random_state": 42,
2025-08-30T09:58:47.4804381Z                 "spaces": ["all"],
2025-08-30T09:58:47.4804441Z             }
2025-08-30T09:58:47.4804499Z         )
2025-08-30T09:58:47.4804585Z         hyperopt = Hyperopt(hyperopt_conf)
2025-08-30T09:58:47.4804670Z         opt = hyperopt.hyperopter
2025-08-30T09:58:47.4804853Z         opt.backtesting.exchange.get_max_leverage = MagicMock(return_value=1.0)
2025-08-30T09:58:47.4804977Z         assert isinstance(opt.custom_hyperopt, HyperOptAuto)
2025-08-30T09:58:47.4805146Z         assert isinstance(opt.backtesting.strategy.buy_rsi, IntParameter)
2025-08-30T09:58:47.4805268Z         assert opt.backtesting.strategy.bot_started is True
2025-08-30T09:58:47.4805407Z         assert opt.backtesting.strategy.bot_loop_started is False
2025-08-30T09:58:47.4805469Z     
2025-08-30T09:58:47.4805600Z         assert opt.backtesting.strategy.buy_rsi.in_space is True
2025-08-30T09:58:47.4805720Z         assert opt.backtesting.strategy.buy_rsi.value == 35
2025-08-30T09:58:47.4805845Z         assert opt.backtesting.strategy.sell_rsi.value == 74
2025-08-30T09:58:47.4806046Z         assert opt.backtesting.strategy.protection_cooldown_lookback.value == 30
2025-08-30T09:58:47.4806171Z         assert opt.backtesting.strategy.max_open_trades == 1
2025-08-30T09:58:47.4806293Z         buy_rsi_range = opt.backtesting.strategy.buy_rsi.range
2025-08-30T09:58:47.4806392Z         assert isinstance(buy_rsi_range, range)
2025-08-30T09:58:47.4806471Z         # Range from 0 - 50 (inclusive)
2025-08-30T09:58:47.4806556Z         assert len(list(buy_rsi_range)) == 51
2025-08-30T09:58:47.4806681Z     
2025-08-30T09:58:47.4806756Z >       hyperopt.start()
2025-08-30T09:58:47.4806761Z 
2025-08-30T09:58:47.4806852Z tests/optimize/test_hyperopt.py:1122: 
2025-08-30T09:58:47.4806959Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4807083Z freqtrade/optimize/hyperopt/hyperopt.py:256: in start
2025-08-30T09:58:47.4807229Z     self.hyperopter.prepare_hyperopt()
2025-08-30T09:58:47.4807427Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:121: in prepare_hyperopt
2025-08-30T09:58:47.4807514Z     self.prepare_hyperopt_data()
2025-08-30T09:58:47.4807718Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:466: in prepare_hyperopt_data
2025-08-30T09:58:47.4807845Z     data, self.timerange = self.backtesting.load_bt_data()
2025-08-30T09:58:47.4807926Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4808047Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.4808154Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.4808229Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4808376Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.4808440Z     timeranges = [
2025-08-30T09:58:47.4808569Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.4808787Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.4808846Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.4809034Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4809124Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4809190Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4809291Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4809295Z 
2025-08-30T09:58:47.4809458Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4809523Z key = 'date'
2025-08-30T09:58:47.4809528Z 
2025-08-30T09:58:47.4809600Z     def get_loc(self, key):
2025-08-30T09:58:47.4809665Z         """
2025-08-30T09:58:47.4809939Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4810000Z     
2025-08-30T09:58:47.4810065Z         Parameters
2025-08-30T09:58:47.4810134Z         ----------
2025-08-30T09:58:47.4810194Z         key : label
2025-08-30T09:58:47.4810251Z     
2025-08-30T09:58:47.4810313Z         Returns
2025-08-30T09:58:47.4810371Z         -------
2025-08-30T09:58:47.4810497Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4810553Z     
2025-08-30T09:58:47.4810619Z         Examples
2025-08-30T09:58:47.4810679Z         --------
2025-08-30T09:58:47.4810768Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4810850Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4810907Z         1
2025-08-30T09:58:47.4810963Z     
2025-08-30T09:58:47.4811056Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4811142Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4811212Z         slice(1, 3, None)
2025-08-30T09:58:47.4811268Z     
2025-08-30T09:58:47.4811374Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4811457Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4811541Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4811600Z         """
2025-08-30T09:58:47.4811700Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4811758Z         try:
2025-08-30T09:58:47.4811850Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4811928Z         except KeyError as err:
2025-08-30T09:58:47.4812014Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4812104Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4812220Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4812333Z             ):
2025-08-30T09:58:47.4812418Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4812496Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4812575Z E           KeyError: 'date'
2025-08-30T09:58:47.4812579Z 
2025-08-30T09:58:47.4812770Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4812952Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4813105Z 2025-08-30 09:57:49,186 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4813452Z 2025-08-30 09:57:49,186 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4813616Z 2025-08-30 09:57:49,187 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4813808Z 2025-08-30 09:57:49,188 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4814032Z 2025-08-30 09:57:49,188 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4814289Z 2025-08-30 09:57:49,189 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4814770Z 2025-08-30 09:57:49,190 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4815112Z 2025-08-30 09:57:49,191 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4815362Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4815547Z 2025-08-30 09:57:49,191 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4815986Z 2025-08-30 09:57:49,191 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4816309Z 2025-08-30 09:57:49,192 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4816692Z 2025-08-30 09:57:49,192 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4817034Z 2025-08-30 09:57:49,192 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4817371Z 2025-08-30 09:57:49,193 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4817785Z 2025-08-30 09:57:49,193 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4818130Z 2025-08-30 09:57:49,193 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4818462Z 2025-08-30 09:57:49,194 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4818812Z 2025-08-30 09:57:49,194 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4819043Z 2025-08-30 09:57:49,194 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4819281Z 2025-08-30 09:57:49,194 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4819536Z 2025-08-30 09:57:49,195 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4819828Z 2025-08-30 09:57:49,195 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4820126Z 2025-08-30 09:57:49,195 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4820453Z 2025-08-30 09:57:49,196 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4820749Z 2025-08-30 09:57:49,196 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4821265Z 2025-08-30 09:57:49,196 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4821351Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4821696Z 2025-08-30 09:57:49,196 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4821947Z 2025-08-30 09:57:49,197 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4822192Z 2025-08-30 09:57:49,197 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4822452Z 2025-08-30 09:57:49,197 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4822763Z 2025-08-30 09:57:49,197 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4823018Z 2025-08-30 09:57:49,198 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4823320Z 2025-08-30 09:57:49,198 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4823700Z 2025-08-30 09:57:49,198 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4823980Z 2025-08-30 09:57:49,199 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4824261Z 2025-08-30 09:57:49,199 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4824560Z 2025-08-30 09:57:49,199 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4824911Z 2025-08-30 09:57:49,199 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4825200Z 2025-08-30 09:57:49,200 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4825448Z 2025-08-30 09:57:49,200 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4825700Z 2025-08-30 09:57:49,200 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4826176Z 2025-08-30 09:57:49,202 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4826609Z 2025-08-30 09:57:49,203 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4827179Z 2025-08-30 09:57:49,206 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4827518Z 2025-08-30 09:57:49,207 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4827822Z 2025-08-30 09:57:49,207 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4828062Z 2025-08-30 09:57:49,209 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4828269Z 2025-08-30 09:57:49,209 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4828596Z 2025-08-30 09:57:49,209 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4828868Z 2025-08-30 09:57:49,210 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4829118Z 2025-08-30 09:57:49,210 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4829404Z 2025-08-30 09:57:49,210 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4829719Z 2025-08-30 09:57:49,211 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4830265Z 2025-08-30 09:57:49,211 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4830672Z 2025-08-30 09:57:49,212 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4831228Z 2025-08-30 09:57:49,212 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt1/hyperopts'
2025-08-30T09:58:47.4831657Z 2025-08-30 09:57:49,212 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt1/hyperopts" does not exist.
2025-08-30T09:58:47.4832272Z 2025-08-30 09:57:49,212 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4832697Z 2025-08-30 09:57:49,213 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4833004Z 2025-08-30 09:57:49,214 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4833335Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4833912Z 2025-08-30 09:57:49,215 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13232MB available
2025-08-30T09:58:47.4834164Z 2025-08-30 09:57:49,215 - freqtrade.optimize.hyperopt.hyperopt - INFO - Using optimizer random state: 42
2025-08-30T09:58:47.4834451Z 2025-08-30 09:57:49,216 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'protection' space
2025-08-30T09:58:47.4834703Z 2025-08-30 09:57:49,216 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'buy' space
2025-08-30T09:58:47.4834958Z 2025-08-30 09:57:49,216 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'sell' space
2025-08-30T09:58:47.4835209Z 2025-08-30 09:57:49,216 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'roi' space
2025-08-30T09:58:47.4835671Z 2025-08-30 09:57:49,217 - freqtrade.optimize.hyperopt.hyperopt_interface - DEBUG - Using roi space limits: {'roi_t1_min': 10, 'roi_t1_max': 120, 'roi_t2_min': 10, 'roi_t2_max': 60, 'roi_t3_min': 10, 
2025-08-30T09:58:47.4835903Z 'roi_t3_max': 40, 'roi_p1_min': 0.01, 'roi_p1_max': 0.04, 'roi_p2_min': 0.01, 'roi_p2_max': 0.07, 'roi_p3_min': 0.01, 'roi_p3_max': 0.2}
2025-08-30T09:58:47.4836222Z 2025-08-30 09:57:49,217 - freqtrade.optimize.hyperopt.hyperopt_interface - INFO - Min roi table: {0: 0.03, 10: 0.02, 20: 0.01, 30: 0}
2025-08-30T09:58:47.4836537Z 2025-08-30 09:57:49,217 - freqtrade.optimize.hyperopt.hyperopt_interface - INFO - Max roi table: {0: 0.31, 40: 0.11, 100: 0.04, 220: 0}
2025-08-30T09:58:47.4836806Z 2025-08-30 09:57:49,218 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'stoploss' space
2025-08-30T09:58:47.4837076Z 2025-08-30 09:57:49,218 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trailing' space
2025-08-30T09:58:47.4837334Z 2025-08-30 09:57:49,218 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trades' space
2025-08-30T09:58:47.4837649Z 2025-08-30 09:57:49,219 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.4838113Z 2025-08-30 09:57:49,252 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4838612Z 2025-08-30 09:57:49,253 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4838757Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4838875Z 2025-08-30 09:57:49 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4839006Z 2025-08-30 09:57:49 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4839087Z 2025-08-30 09:57:49 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4839187Z 2025-08-30 09:57:49 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4839314Z 2025-08-30 09:57:49 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4839436Z 2025-08-30 09:57:49 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4839791Z 2025-08-30 09:57:49 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4840340Z 2025-08-30 09:57:49 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4840437Z 2025-08-30 09:57:49 INFO Found no parameter file.
2025-08-30T09:58:47.4840728Z 2025-08-30 09:57:49 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4840906Z 2025-08-30 09:57:49 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4841083Z 2025-08-30 09:57:49 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4841280Z 2025-08-30 09:57:49 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4841518Z 2025-08-30 09:57:49 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4841781Z 2025-08-30 09:57:49 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4841983Z 2025-08-30 09:57:49 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4842178Z 2025-08-30 09:57:49 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4842379Z 2025-08-30 09:57:49 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4842485Z 2025-08-30 09:57:49 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4842600Z 2025-08-30 09:57:49 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4842717Z 2025-08-30 09:57:49 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4842868Z 2025-08-30 09:57:49 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4843035Z 2025-08-30 09:57:49 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4843165Z 2025-08-30 09:57:49 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4843304Z 2025-08-30 09:57:49 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4843915Z 2025-08-30 09:57:49 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4844116Z 2025-08-30 09:57:49 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4844231Z 2025-08-30 09:57:49 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4844362Z 2025-08-30 09:57:49 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4844492Z 2025-08-30 09:57:49 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4844740Z 2025-08-30 09:57:49 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4844859Z 2025-08-30 09:57:49 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4844994Z 2025-08-30 09:57:49 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4845155Z 2025-08-30 09:57:49 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4845345Z 2025-08-30 09:57:49 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4845491Z 2025-08-30 09:57:49 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4845645Z 2025-08-30 09:57:49 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4845790Z 2025-08-30 09:57:49 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4845937Z 2025-08-30 09:57:49 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4846047Z 2025-08-30 09:57:49 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4846159Z 2025-08-30 09:57:49 INFO Validating configuration ...
2025-08-30T09:58:47.4846518Z 2025-08-30 09:57:49 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4846800Z 2025-08-30 09:57:49 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4847238Z 2025-08-30 09:57:49 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4847498Z 2025-08-30 09:57:49 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4847671Z 2025-08-30 09:57:49 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4847810Z 2025-08-30 09:57:49 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4847927Z 2025-08-30 09:57:49 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4848154Z 2025-08-30 09:57:49 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4848266Z 2025-08-30 09:57:49 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4848472Z 2025-08-30 09:57:49 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4848664Z 2025-08-30 09:57:49 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4848830Z 2025-08-30 09:57:49 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4849231Z 2025-08-30 09:57:49 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4849515Z 2025-08-30 09:57:49 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4849940Z 2025-08-30 09:57:49 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt1/hyperopts'
2025-08-30T09:58:47.4850239Z 2025-08-30 09:57:49 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt1/hyperopts" does not exist.
2025-08-30T09:58:47.4850674Z 2025-08-30 09:57:49 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4850976Z 2025-08-30 09:57:49 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4851555Z 2025-08-30 09:57:49 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4851802Z 2025-08-30 09:57:49 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13232MB available
2025-08-30T09:58:47.4851915Z 2025-08-30 09:57:49 INFO Using optimizer random state: 42
2025-08-30T09:58:47.4852026Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'protection' space
2025-08-30T09:58:47.4852131Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'buy' space
2025-08-30T09:58:47.4852275Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'sell' space
2025-08-30T09:58:47.4852372Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'roi' space
2025-08-30T09:58:47.4852897Z 2025-08-30 09:57:49 DEBUG Using roi space limits: {'roi_t1_min': 10, 'roi_t1_max': 120, 'roi_t2_min': 10, 'roi_t2_max': 60, 'roi_t3_min': 10, 'roi_t3_max': 40, 'roi_p1_min': 0.01, 'roi_p1_max': 0.04, 'roi_p2_min': 0.01, 'roi_p2_max': 0.07, 'roi_p3_min': 0.01, 'roi_p3_max': 0.2}
2025-08-30T09:58:47.4853038Z 2025-08-30 09:57:49 INFO Min roi table: {0: 0.03, 10: 0.02, 20: 0.01, 30: 0}
2025-08-30T09:58:47.4853176Z 2025-08-30 09:57:49 INFO Max roi table: {0: 0.31, 40: 0.11, 100: 0.04, 220: 0}
2025-08-30T09:58:47.4853292Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'stoploss' space
2025-08-30T09:58:47.4853500Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'trailing' space
2025-08-30T09:58:47.4853607Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'trades' space
2025-08-30T09:58:47.4853739Z 2025-08-30 09:57:49 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.4854008Z 2025-08-30 09:57:49 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4854258Z 2025-08-30 09:57:49 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4854476Z _______________________ test_max_open_trades_consistency _______________________
2025-08-30T09:58:47.4854483Z 
2025-08-30T09:58:47.4854645Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4854707Z key = 'date'
2025-08-30T09:58:47.4854711Z 
2025-08-30T09:58:47.4854789Z     def get_loc(self, key):
2025-08-30T09:58:47.4854848Z         """
2025-08-30T09:58:47.4855000Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4855057Z     
2025-08-30T09:58:47.4855125Z         Parameters
2025-08-30T09:58:47.4855187Z         ----------
2025-08-30T09:58:47.4855251Z         key : label
2025-08-30T09:58:47.4855315Z     
2025-08-30T09:58:47.4855375Z         Returns
2025-08-30T09:58:47.4855435Z         -------
2025-08-30T09:58:47.4855617Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4855680Z     
2025-08-30T09:58:47.4855741Z         Examples
2025-08-30T09:58:47.4855802Z         --------
2025-08-30T09:58:47.4855902Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4855984Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4856042Z         1
2025-08-30T09:58:47.4856098Z     
2025-08-30T09:58:47.4856198Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4856288Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4856356Z         slice(1, 3, None)
2025-08-30T09:58:47.4856416Z     
2025-08-30T09:58:47.4856516Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4856599Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4856685Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4856744Z         """
2025-08-30T09:58:47.4856836Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4856898Z         try:
2025-08-30T09:58:47.4856993Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4857065Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4857071Z 
2025-08-30T09:58:47.4857246Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4857353Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4857521Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4857581Z     ???
2025-08-30T09:58:47.4857746Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4857803Z     ???
2025-08-30T09:58:47.4858060Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4858182Z     ???
2025-08-30T09:58:47.4858287Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4858292Z 
2025-08-30T09:58:47.4858351Z >   ???
2025-08-30T09:58:47.4858419Z E   KeyError: 'date'
2025-08-30T09:58:47.4858424Z 
2025-08-30T09:58:47.4858547Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4858554Z 
2025-08-30T09:58:47.4858770Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4858776Z 
2025-08-30T09:58:47.4858938Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64dbbcff10>
2025-08-30T09:58:47.4859348Z hyperopt_conf = {'amend_last_stake_amount': False, 'available_capital': 8, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, ...}
2025-08-30T09:58:47.4859563Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_max_open_trades_consisten0')
2025-08-30T09:58:47.4859642Z fee = <MagicMock id='140071225685584'>
2025-08-30T09:58:47.4859647Z 
2025-08-30T09:58:47.4859853Z     def test_max_open_trades_consistency(mocker, hyperopt_conf, tmp_path, fee) -> None:
2025-08-30T09:58:47.4860057Z         # This test is to ensure that max_open_trades is the same across all functions needing it
2025-08-30T09:58:47.4860156Z         # after it has been changed from the hyperopt
2025-08-30T09:58:47.4860238Z         patch_exchange(mocker)
2025-08-30T09:58:47.4860390Z         mocker.patch(f"{EXMS}.get_fee", return_value=0)
2025-08-30T09:58:47.4860449Z     
2025-08-30T09:58:47.4860564Z         (tmp_path / "hyperopt_results").mkdir(parents=True)
2025-08-30T09:58:47.4860642Z         hyperopt_conf.update(
2025-08-30T09:58:47.4860700Z             {
2025-08-30T09:58:47.4860794Z                 "strategy": "HyperoptableStrategy",
2025-08-30T09:58:47.4860881Z                 "user_data_dir": tmp_path,
2025-08-30T09:58:47.4860964Z                 "hyperopt_random_state": 42,
2025-08-30T09:58:47.4861041Z                 "spaces": ["trades"],
2025-08-30T09:58:47.4861124Z                 "stake_amount": "unlimited",
2025-08-30T09:58:47.4861198Z                 "dry_run_wallet": 8,
2025-08-30T09:58:47.4861277Z                 "available_capital": 8,
2025-08-30T09:58:47.4861391Z                 "dry_run": True,
2025-08-30T09:58:47.4861470Z                 "epochs": 1,
2025-08-30T09:58:47.4861527Z             }
2025-08-30T09:58:47.4861585Z         )
2025-08-30T09:58:47.4861678Z         hyperopt = Hyperopt(hyperopt_conf)
2025-08-30T09:58:47.4861735Z     
2025-08-30T09:58:47.4861916Z         assert isinstance(hyperopt.hyperopter.custom_hyperopt, HyperOptAuto)
2025-08-30T09:58:47.4861972Z     
2025-08-30T09:58:47.4862153Z         hyperopt.hyperopter.custom_hyperopt.max_open_trades_space = lambda: [
2025-08-30T09:58:47.4862253Z             ft_IntDistribution(1, 10, "max_open_trades")
2025-08-30T09:58:47.4862310Z         ]
2025-08-30T09:58:47.4862370Z     
2025-08-30T09:58:47.4862447Z         first_time_evaluated = False
2025-08-30T09:58:47.4862502Z     
2025-08-30T09:58:47.4862590Z         def stake_amount_interceptor(func):
2025-08-30T09:58:47.4862663Z             @wraps(func)
2025-08-30T09:58:47.4862743Z             def wrapper(*args, **kwargs):
2025-08-30T09:58:47.4862828Z                 nonlocal first_time_evaluated
2025-08-30T09:58:47.4862889Z     
2025-08-30T09:58:47.4862975Z                 stake_amount = func(*args, **kwargs)
2025-08-30T09:58:47.4863064Z                 if first_time_evaluated is False:
2025-08-30T09:58:47.4863148Z                     assert stake_amount == 2
2025-08-30T09:58:47.4863233Z                     first_time_evaluated = True
2025-08-30T09:58:47.4863306Z                 return stake_amount
2025-08-30T09:58:47.4863456Z     
2025-08-30T09:58:47.4863533Z             return wrapper
2025-08-30T09:58:47.4863588Z     
2025-08-30T09:58:47.4863804Z         hyperopt.hyperopter.backtesting.wallets._calculate_unlimited_stake_amount = (
2025-08-30T09:58:47.4863889Z             stake_amount_interceptor(
2025-08-30T09:58:47.4864093Z                 hyperopt.hyperopter.backtesting.wallets._calculate_unlimited_stake_amount
2025-08-30T09:58:47.4864220Z             )
2025-08-30T09:58:47.4864281Z         )
2025-08-30T09:58:47.4864336Z     
2025-08-30T09:58:47.4864410Z >       hyperopt.start()
2025-08-30T09:58:47.4864415Z 
2025-08-30T09:58:47.4864504Z tests/optimize/test_hyperopt.py:1380: 
2025-08-30T09:58:47.4864610Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4864826Z freqtrade/optimize/hyperopt/hyperopt.py:256: in start
2025-08-30T09:58:47.4864921Z     self.hyperopter.prepare_hyperopt()
2025-08-30T09:58:47.4865119Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:121: in prepare_hyperopt
2025-08-30T09:58:47.4865201Z     self.prepare_hyperopt_data()
2025-08-30T09:58:47.4865407Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:466: in prepare_hyperopt_data
2025-08-30T09:58:47.4865537Z     data, self.timerange = self.backtesting.load_bt_data()
2025-08-30T09:58:47.4865613Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4865736Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.4865837Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.4865916Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4866061Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.4866134Z     timeranges = [
2025-08-30T09:58:47.4866333Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.4866486Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.4866545Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.4866738Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4866822Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4866888Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4866985Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4866994Z 
2025-08-30T09:58:47.4867154Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4867215Z key = 'date'
2025-08-30T09:58:47.4867220Z 
2025-08-30T09:58:47.4867348Z     def get_loc(self, key):
2025-08-30T09:58:47.4867414Z         """
2025-08-30T09:58:47.4867566Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4867624Z     
2025-08-30T09:58:47.4867691Z         Parameters
2025-08-30T09:58:47.4867754Z         ----------
2025-08-30T09:58:47.4867816Z         key : label
2025-08-30T09:58:47.4867871Z     
2025-08-30T09:58:47.4867934Z         Returns
2025-08-30T09:58:47.4867994Z         -------
2025-08-30T09:58:47.4868118Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4868181Z     
2025-08-30T09:58:47.4868241Z         Examples
2025-08-30T09:58:47.4868301Z         --------
2025-08-30T09:58:47.4868390Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4868472Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4868531Z         1
2025-08-30T09:58:47.4868586Z     
2025-08-30T09:58:47.4868682Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4868765Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4868834Z         slice(1, 3, None)
2025-08-30T09:58:47.4868889Z     
2025-08-30T09:58:47.4868993Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4869080Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4869162Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4869225Z         """
2025-08-30T09:58:47.4869317Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4869375Z         try:
2025-08-30T09:58:47.4869472Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4869548Z         except KeyError as err:
2025-08-30T09:58:47.4869635Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4869723Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4869893Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4869951Z             ):
2025-08-30T09:58:47.4870036Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4870119Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4870190Z E           KeyError: 'date'
2025-08-30T09:58:47.4870197Z 
2025-08-30T09:58:47.4870427Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4870574Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4870721Z 2025-08-30 09:57:49,816 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4870962Z 2025-08-30 09:57:49,816 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4871129Z 2025-08-30 09:57:49,816 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4871315Z 2025-08-30 09:57:49,817 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4871544Z 2025-08-30 09:57:49,818 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4871799Z 2025-08-30 09:57:49,819 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4872278Z 2025-08-30 09:57:49,819 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4872596Z 2025-08-30 09:57:49,820 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4872845Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4873029Z 2025-08-30 09:57:49,821 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4873560Z 2025-08-30 09:57:49,821 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4873956Z 2025-08-30 09:57:49,822 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4874283Z 2025-08-30 09:57:49,822 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4874625Z 2025-08-30 09:57:49,822 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4874976Z 2025-08-30 09:57:49,822 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: unlimited.
2025-08-30T09:58:47.4875383Z 2025-08-30 09:57:49,823 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4875713Z 2025-08-30 09:57:49,823 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4876063Z 2025-08-30 09:57:49,823 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4876299Z 2025-08-30 09:57:49,824 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4876535Z 2025-08-30 09:57:49,824 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4876788Z 2025-08-30 09:57:49,824 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4877080Z 2025-08-30 09:57:49,824 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4877375Z 2025-08-30 09:57:49,825 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4877642Z 2025-08-30 09:57:49,825 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4877981Z 2025-08-30 09:57:49,825 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4878432Z 2025-08-30 09:57:49,826 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4878566Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4878902Z 2025-08-30 09:57:49,826 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4879148Z 2025-08-30 09:57:49,826 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4879410Z 2025-08-30 09:57:49,826 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: unlimited
2025-08-30T09:58:47.4879666Z 2025-08-30 09:57:49,827 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4879977Z 2025-08-30 09:57:49,827 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4880247Z 2025-08-30 09:57:49,827 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4880594Z 2025-08-30 09:57:49,827 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4880874Z 2025-08-30 09:57:49,828 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4881130Z 2025-08-30 09:57:49,828 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4881408Z 2025-08-30 09:57:49,828 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4881698Z 2025-08-30 09:57:49,829 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4882026Z 2025-08-30 09:57:49,829 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4882310Z 2025-08-30 09:57:49,829 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4882553Z 2025-08-30 09:57:49,829 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4882803Z 2025-08-30 09:57:49,830 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4883272Z 2025-08-30 09:57:49,832 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4883893Z 2025-08-30 09:57:49,833 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4884468Z 2025-08-30 09:57:49,836 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4884805Z 2025-08-30 09:57:49,837 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4885110Z 2025-08-30 09:57:49,838 - freqtrade.optimize.backtesting - INFO - Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4885351Z 2025-08-30 09:57:49,839 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4885554Z 2025-08-30 09:57:49,839 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4885884Z 2025-08-30 09:57:49,840 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4886097Z 2025-08-30 09:57:49,840 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4886424Z 2025-08-30 09:57:49,841 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4886711Z 2025-08-30 09:57:49,841 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4887028Z 2025-08-30 09:57:49,841 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4887558Z 2025-08-30 09:57:49,842 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4887961Z 2025-08-30 09:57:49,842 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4888512Z 2025-08-30 09:57:49,842 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_max_open_trades_consisten0/hyperopts'
2025-08-30T09:58:47.4888935Z 2025-08-30 09:57:49,843 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_max_open_trades_consisten0/hyperopts" does not exist.
2025-08-30T09:58:47.4889485Z 2025-08-30 09:57:49,843 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4889970Z 2025-08-30 09:57:49,843 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4890274Z 2025-08-30 09:57:49,844 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4890598Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4891076Z 2025-08-30 09:57:49,845 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13240MB available
2025-08-30T09:58:47.4891327Z 2025-08-30 09:57:49,846 - freqtrade.optimize.hyperopt.hyperopt - INFO - Using optimizer random state: 42
2025-08-30T09:58:47.4891593Z 2025-08-30 09:57:49,846 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trades' space
2025-08-30T09:58:47.4891857Z 2025-08-30 09:57:49,846 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.4892318Z 2025-08-30 09:57:49,880 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4892768Z 2025-08-30 09:57:49,881 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4892912Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4893027Z 2025-08-30 09:57:49 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4893158Z 2025-08-30 09:57:49 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4893245Z 2025-08-30 09:57:49 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4893442Z 2025-08-30 09:57:49 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4893574Z 2025-08-30 09:57:49 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.4893698Z 2025-08-30 09:57:49 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4894050Z 2025-08-30 09:57:49 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4894508Z 2025-08-30 09:57:49 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4894608Z 2025-08-30 09:57:49 INFO Found no parameter file.
2025-08-30T09:58:47.4894984Z 2025-08-30 09:57:49 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4895162Z 2025-08-30 09:57:49 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4895347Z 2025-08-30 09:57:49 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4895598Z 2025-08-30 09:57:49 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4895805Z 2025-08-30 09:57:49 INFO Override strategy 'stake_amount' with value in config file: unlimited.
2025-08-30T09:58:47.4896074Z 2025-08-30 09:57:49 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4896263Z 2025-08-30 09:57:49 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4896458Z 2025-08-30 09:57:49 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4896571Z 2025-08-30 09:57:49 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4896679Z 2025-08-30 09:57:49 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4896797Z 2025-08-30 09:57:49 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4896947Z 2025-08-30 09:57:49 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4897170Z 2025-08-30 09:57:49 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4897300Z 2025-08-30 09:57:49 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4897441Z 2025-08-30 09:57:49 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4897819Z 2025-08-30 09:57:49 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4898012Z 2025-08-30 09:57:49 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4898130Z 2025-08-30 09:57:49 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4898315Z 2025-08-30 09:57:49 INFO Strategy using stake_amount: unlimited
2025-08-30T09:58:47.4898441Z 2025-08-30 09:57:49 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4898609Z 2025-08-30 09:57:49 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4898736Z 2025-08-30 09:57:49 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4898857Z 2025-08-30 09:57:49 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4899002Z 2025-08-30 09:57:49 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4899125Z 2025-08-30 09:57:49 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4899265Z 2025-08-30 09:57:49 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4899416Z 2025-08-30 09:57:49 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4899560Z 2025-08-30 09:57:49 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4899708Z 2025-08-30 09:57:49 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4899823Z 2025-08-30 09:57:49 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4899928Z 2025-08-30 09:57:49 INFO Validating configuration ...
2025-08-30T09:58:47.4900284Z 2025-08-30 09:57:49 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4900566Z 2025-08-30 09:57:49 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4900999Z 2025-08-30 09:57:49 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4901198Z 2025-08-30 09:57:49 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4901373Z 2025-08-30 09:57:49 INFO Using fee 0.0000% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.4901558Z 2025-08-30 09:57:49 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4901681Z 2025-08-30 09:57:49 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4901912Z 2025-08-30 09:57:49 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4902026Z 2025-08-30 09:57:49 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4902221Z 2025-08-30 09:57:49 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4902409Z 2025-08-30 09:57:49 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4902572Z 2025-08-30 09:57:49 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4902977Z 2025-08-30 09:57:49 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4903257Z 2025-08-30 09:57:49 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4903784Z 2025-08-30 09:57:49 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_max_open_trades_consisten0/hyperopts'
2025-08-30T09:58:47.4904084Z 2025-08-30 09:57:49 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_max_open_trades_consisten0/hyperopts" does not exist.
2025-08-30T09:58:47.4904580Z 2025-08-30 09:57:49 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4904880Z 2025-08-30 09:57:49 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4905459Z 2025-08-30 09:57:49 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4905699Z 2025-08-30 09:57:49 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13240MB available
2025-08-30T09:58:47.4905866Z 2025-08-30 09:57:49 INFO Using optimizer random state: 42
2025-08-30T09:58:47.4905976Z 2025-08-30 09:57:49 DEBUG Hyperopt has 'trades' space
2025-08-30T09:58:47.4906103Z 2025-08-30 09:57:49 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.4906369Z 2025-08-30 09:57:49 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4906623Z 2025-08-30 09:57:49 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4906779Z _________________ test_in_strategy_auto_hyperopt_with_parallel _________________
2025-08-30T09:58:47.4906785Z 
2025-08-30T09:58:47.4906946Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4907014Z key = 'date'
2025-08-30T09:58:47.4907019Z 
2025-08-30T09:58:47.4907092Z     def get_loc(self, key):
2025-08-30T09:58:47.4907153Z         """
2025-08-30T09:58:47.4907306Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4907371Z     
2025-08-30T09:58:47.4907434Z         Parameters
2025-08-30T09:58:47.4907496Z         ----------
2025-08-30T09:58:47.4907561Z         key : label
2025-08-30T09:58:47.4907618Z     
2025-08-30T09:58:47.4907679Z         Returns
2025-08-30T09:58:47.4907741Z         -------
2025-08-30T09:58:47.4907869Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4907926Z     
2025-08-30T09:58:47.4907987Z         Examples
2025-08-30T09:58:47.4908052Z         --------
2025-08-30T09:58:47.4908142Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4908222Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4908280Z         1
2025-08-30T09:58:47.4908339Z     
2025-08-30T09:58:47.4908434Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4908514Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4908657Z         slice(1, 3, None)
2025-08-30T09:58:47.4908712Z     
2025-08-30T09:58:47.4908816Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4908906Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4908990Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4909049Z         """
2025-08-30T09:58:47.4909197Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4909263Z         try:
2025-08-30T09:58:47.4909354Z >           return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4909425Z                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4909430Z 
2025-08-30T09:58:47.4909606Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3812: 
2025-08-30T09:58:47.4909709Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4909875Z pandas/_libs/index.pyx:167: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4909941Z     ???
2025-08-30T09:58:47.4910100Z pandas/_libs/index.pyx:196: in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.4910157Z     ???
2025-08-30T09:58:47.4910416Z pandas/_libs/hashtable_class_helper.pxi:7088: in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.4910479Z     ???
2025-08-30T09:58:47.4910579Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4910631Z 
2025-08-30T09:58:47.4910688Z >   ???
2025-08-30T09:58:47.4910765Z E   KeyError: 'date'
2025-08-30T09:58:47.4910770Z 
2025-08-30T09:58:47.4910888Z pandas/_libs/hashtable_class_helper.pxi:7096: KeyError
2025-08-30T09:58:47.4910892Z 
2025-08-30T09:58:47.4911049Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.4911054Z 
2025-08-30T09:58:47.4911213Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6564a37890>
2025-08-30T09:58:47.4911661Z hyperopt_conf = {'amend_last_stake_amount': False, 'cancel_open_orders_on_exit': False, 'candle_type_def': <CandleType.SPOT: 'spot'>, 'custom_price_max_distance_ratio': 0.02, ...}
2025-08-30T09:58:47.4911916Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt2')
2025-08-30T09:58:47.4912002Z fee = <MagicMock id='140071202481424'>
2025-08-30T09:58:47.4912007Z 
2025-08-30T09:58:47.4912184Z     @pytest.mark.filterwarnings("ignore::DeprecationWarning")
2025-08-30T09:58:47.4912421Z     def test_in_strategy_auto_hyperopt_with_parallel(mocker, hyperopt_conf, tmp_path, fee) -> None:
2025-08-30T09:58:47.4912547Z         mocker.patch(f"{EXMS}.validate_config", MagicMock())
2025-08-30T09:58:47.4912635Z         mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4912723Z         mocker.patch(f"{EXMS}.reload_markets")
2025-08-30T09:58:47.4912899Z         mocker.patch(f"{EXMS}.markets", PropertyMock(return_value=get_markets()))
2025-08-30T09:58:47.4913010Z         (tmp_path / "hyperopt_results").mkdir(parents=True)
2025-08-30T09:58:47.4913194Z         # Dummy-reduce points to ensure scikit-learn is forced to generate new values
2025-08-30T09:58:47.4913492Z         mocker.patch("freqtrade.optimize.hyperopt.hyperopt.INITIAL_POINTS", 2)
2025-08-30T09:58:47.4913573Z         # No hyperopt needed
2025-08-30T09:58:47.4913652Z         hyperopt_conf.update(
2025-08-30T09:58:47.4913710Z             {
2025-08-30T09:58:47.4913812Z                 "strategy": "HyperoptableStrategy",
2025-08-30T09:58:47.4913894Z                 "user_data_dir": tmp_path,
2025-08-30T09:58:47.4913976Z                 "hyperopt_random_state": 42,
2025-08-30T09:58:47.4914053Z                 "spaces": ["all"],
2025-08-30T09:58:47.4914130Z                 # Enforce parallelity
2025-08-30T09:58:47.4914197Z                 "epochs": 2,
2025-08-30T09:58:47.4914273Z                 "hyperopt_jobs": 2,
2025-08-30T09:58:47.4914355Z                 "fee": fee.return_value,
2025-08-30T09:58:47.4914412Z             }
2025-08-30T09:58:47.4914469Z         )
2025-08-30T09:58:47.4914560Z         hyperopt = Hyperopt(hyperopt_conf)
2025-08-30T09:58:47.4914709Z         opt = hyperopt.hyperopter
2025-08-30T09:58:47.4914874Z         opt.backtesting.exchange.get_max_leverage = lambda *x, **xx: 1.0
2025-08-30T09:58:47.4915071Z         opt.backtesting.exchange.get_min_pair_stake_amount = lambda *x, **xx: 0.00001
2025-08-30T09:58:47.4915254Z         opt.backtesting.exchange.get_max_pair_stake_amount = lambda *x, **xx: 100.0
2025-08-30T09:58:47.4915425Z         opt.backtesting.exchange._markets = get_markets()
2025-08-30T09:58:47.4915484Z     
2025-08-30T09:58:47.4915626Z         assert isinstance(opt.custom_hyperopt, HyperOptAuto)
2025-08-30T09:58:47.4915789Z         assert isinstance(opt.backtesting.strategy.buy_rsi, IntParameter)
2025-08-30T09:58:47.4915911Z         assert opt.backtesting.strategy.bot_started is True
2025-08-30T09:58:47.4916055Z         assert opt.backtesting.strategy.bot_loop_started is False
2025-08-30T09:58:47.4916111Z     
2025-08-30T09:58:47.4916251Z         assert opt.backtesting.strategy.buy_rsi.in_space is True
2025-08-30T09:58:47.4916375Z         assert opt.backtesting.strategy.buy_rsi.value == 35
2025-08-30T09:58:47.4916498Z         assert opt.backtesting.strategy.sell_rsi.value == 74
2025-08-30T09:58:47.4916688Z         assert opt.backtesting.strategy.protection_cooldown_lookback.value == 30
2025-08-30T09:58:47.4916810Z         buy_rsi_range = opt.backtesting.strategy.buy_rsi.range
2025-08-30T09:58:47.4916969Z         assert isinstance(buy_rsi_range, range)
2025-08-30T09:58:47.4917050Z         # Range from 0 - 50 (inclusive)
2025-08-30T09:58:47.4917135Z         assert len(list(buy_rsi_range)) == 51
2025-08-30T09:58:47.4917195Z     
2025-08-30T09:58:47.4917267Z >       hyperopt.start()
2025-08-30T09:58:47.4917272Z 
2025-08-30T09:58:47.4917359Z tests/optimize/test_hyperopt.py:1177: 
2025-08-30T09:58:47.4917465Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4917587Z freqtrade/optimize/hyperopt/hyperopt.py:256: in start
2025-08-30T09:58:47.4917679Z     self.hyperopter.prepare_hyperopt()
2025-08-30T09:58:47.4917872Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:121: in prepare_hyperopt
2025-08-30T09:58:47.4918032Z     self.prepare_hyperopt_data()
2025-08-30T09:58:47.4918246Z freqtrade/optimize/hyperopt/hyperopt_optimizer.py:466: in prepare_hyperopt_data
2025-08-30T09:58:47.4918370Z     data, self.timerange = self.backtesting.load_bt_data()
2025-08-30T09:58:47.4918456Z                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4918577Z freqtrade/optimize/backtesting.py:328: in load_bt_data
2025-08-30T09:58:47.4918684Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.4918764Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4918911Z freqtrade/data/history/history_utils.py:688: in get_timerange
2025-08-30T09:58:47.4918976Z     timeranges = [
2025-08-30T09:58:47.4919113Z freqtrade/data/history/history_utils.py:689: in <listcomp>
2025-08-30T09:58:47.4919268Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.4919332Z      ^^^^^^^^^^^^^
2025-08-30T09:58:47.4919523Z .venv/lib/python3.11/site-packages/pandas/core/frame.py:4107: in __getitem__
2025-08-30T09:58:47.4919612Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.4919678Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.4919780Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.4919787Z 
2025-08-30T09:58:47.4919952Z self = Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:47.4920013Z key = 'date'
2025-08-30T09:58:47.4920017Z 
2025-08-30T09:58:47.4920091Z     def get_loc(self, key):
2025-08-30T09:58:47.4920156Z         """
2025-08-30T09:58:47.4920310Z         Get integer location, slice or boolean mask for requested label.
2025-08-30T09:58:47.4920366Z     
2025-08-30T09:58:47.4920430Z         Parameters
2025-08-30T09:58:47.4920498Z         ----------
2025-08-30T09:58:47.4920612Z         key : label
2025-08-30T09:58:47.4920668Z     
2025-08-30T09:58:47.4920734Z         Returns
2025-08-30T09:58:47.4920795Z         -------
2025-08-30T09:58:47.4920924Z         int if unique index, slice if monotonic index, else mask
2025-08-30T09:58:47.4920980Z     
2025-08-30T09:58:47.4921045Z         Examples
2025-08-30T09:58:47.4921105Z         --------
2025-08-30T09:58:47.4921196Z         >>> unique_index = pd.Index(list('abc'))
2025-08-30T09:58:47.4921319Z         >>> unique_index.get_loc('b')
2025-08-30T09:58:47.4921380Z         1
2025-08-30T09:58:47.4921436Z     
2025-08-30T09:58:47.4921528Z         >>> monotonic_index = pd.Index(list('abbc'))
2025-08-30T09:58:47.4921614Z         >>> monotonic_index.get_loc('b')
2025-08-30T09:58:47.4921682Z         slice(1, 3, None)
2025-08-30T09:58:47.4921738Z     
2025-08-30T09:58:47.4921841Z         >>> non_monotonic_index = pd.Index(list('abcb'))
2025-08-30T09:58:47.4921923Z         >>> non_monotonic_index.get_loc('b')
2025-08-30T09:58:47.4922005Z         array([False,  True, False,  True])
2025-08-30T09:58:47.4922070Z         """
2025-08-30T09:58:47.4922163Z         casted_key = self._maybe_cast_indexer(key)
2025-08-30T09:58:47.4922224Z         try:
2025-08-30T09:58:47.4922314Z             return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.4922393Z         except KeyError as err:
2025-08-30T09:58:47.4922480Z             if isinstance(casted_key, slice) or (
2025-08-30T09:58:47.4922616Z                 isinstance(casted_key, abc.Iterable)
2025-08-30T09:58:47.4922734Z                 and any(isinstance(x, slice) for x in casted_key)
2025-08-30T09:58:47.4922791Z             ):
2025-08-30T09:58:47.4922876Z                 raise InvalidIndexError(key)
2025-08-30T09:58:47.4922954Z >           raise KeyError(key) from err
2025-08-30T09:58:47.4923031Z E           KeyError: 'date'
2025-08-30T09:58:47.4923035Z 
2025-08-30T09:58:47.4923225Z .venv/lib/python3.11/site-packages/pandas/core/indexes/base.py:3819: KeyError
2025-08-30T09:58:47.4923522Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.4923731Z 2025-08-30 09:57:50,597 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4924045Z 2025-08-30 09:57:50,597 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4924216Z 2025-08-30 09:57:50,598 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4924413Z 2025-08-30 09:57:50,616 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4924667Z 2025-08-30 09:57:50,616 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4925138Z 2025-08-30 09:57:50,617 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4925418Z 2025-08-30 09:57:50,618 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy HyperoptableStrategy from 
2025-08-30T09:58:47.4925671Z '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4925854Z 2025-08-30 09:57:50,618 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4926291Z 2025-08-30 09:57:50,619 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4926643Z 2025-08-30 09:57:50,619 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4926968Z 2025-08-30 09:57:50,619 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4927314Z 2025-08-30 09:57:50,620 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4927647Z 2025-08-30 09:57:50,620 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4928123Z 2025-08-30 09:57:50,620 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4928474Z 2025-08-30 09:57:50,620 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4928863Z 2025-08-30 09:57:50,621 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4929296Z 2025-08-30 09:57:50,621 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4929601Z 2025-08-30 09:57:50,621 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4929873Z 2025-08-30 09:57:50,621 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4930183Z 2025-08-30 09:57:50,622 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4930726Z 2025-08-30 09:57:50,622 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4931079Z 2025-08-30 09:57:50,622 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4931447Z 2025-08-30 09:57:50,623 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4931819Z 2025-08-30 09:57:50,623 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4932304Z 2025-08-30 09:57:50,623 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.4932413Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.4932873Z 2025-08-30 09:57:50,623 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4933214Z 2025-08-30 09:57:50,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4933656Z 2025-08-30 09:57:50,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4934015Z 2025-08-30 09:57:50,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4934361Z 2025-08-30 09:57:50,624 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4934644Z 2025-08-30 09:57:50,625 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4935009Z 2025-08-30 09:57:50,625 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4943609Z 2025-08-30 09:57:50,625 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4943948Z 2025-08-30 09:57:50,626 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4944259Z 2025-08-30 09:57:50,626 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4944571Z 2025-08-30 09:57:50,626 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4944875Z 2025-08-30 09:57:50,626 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4945165Z 2025-08-30 09:57:50,627 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4945413Z 2025-08-30 09:57:50,627 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4945812Z 2025-08-30 09:57:50,627 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4946301Z 2025-08-30 09:57:50,629 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4946782Z 2025-08-30 09:57:50,630 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4947353Z 2025-08-30 09:57:50,633 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4947695Z 2025-08-30 09:57:50,633 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4947915Z 2025-08-30 09:57:50,634 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% from config.
2025-08-30T09:58:47.4948161Z 2025-08-30 09:57:50,634 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4948370Z 2025-08-30 09:57:50,634 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4948700Z 2025-08-30 09:57:50,635 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4948977Z 2025-08-30 09:57:50,635 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4949227Z 2025-08-30 09:57:50,635 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4949513Z 2025-08-30 09:57:50,636 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4949773Z 2025-08-30 09:57:50,636 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4950352Z 2025-08-30 09:57:50,637 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4950762Z 2025-08-30 09:57:50,637 - freqtrade.resolvers.iresolver - WARNING - Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4951322Z 2025-08-30 09:57:50,637 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt2/hyperopts'
2025-08-30T09:58:47.4951746Z 2025-08-30 09:57:50,638 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt2/hyperopts" does not exist.
2025-08-30T09:58:47.4952292Z 2025-08-30 09:57:50,638 - freqtrade.resolvers.iresolver - DEBUG - Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4952723Z 2025-08-30 09:57:50,638 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4953026Z 2025-08-30 09:57:50,639 - freqtrade.resolvers.iresolver - INFO - Using resolved hyperoptloss ShortTradeDurHyperOptLoss from 
2025-08-30T09:58:47.4953468Z '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4953895Z 2025-08-30 09:57:50,640 - freqtrade.optimize.hyperopt_resource_optimizer - INFO - System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13238MB available
2025-08-30T09:58:47.4954144Z 2025-08-30 09:57:50,641 - freqtrade.optimize.hyperopt.hyperopt - INFO - Using optimizer random state: 42
2025-08-30T09:58:47.4954425Z 2025-08-30 09:57:50,641 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'protection' space
2025-08-30T09:58:47.4954679Z 2025-08-30 09:57:50,641 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'buy' space
2025-08-30T09:58:47.4955005Z 2025-08-30 09:57:50,641 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'sell' space
2025-08-30T09:58:47.4955259Z 2025-08-30 09:57:50,642 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'roi' space
2025-08-30T09:58:47.4955802Z 2025-08-30 09:57:50,642 - freqtrade.optimize.hyperopt.hyperopt_interface - DEBUG - Using roi space limits: {'roi_t1_min': 10, 'roi_t1_max': 120, 'roi_t2_min': 10, 'roi_t2_max': 60, 'roi_t3_min': 10, 
2025-08-30T09:58:47.4956033Z 'roi_t3_max': 40, 'roi_p1_min': 0.01, 'roi_p1_max': 0.04, 'roi_p2_min': 0.01, 'roi_p2_max': 0.07, 'roi_p3_min': 0.01, 'roi_p3_max': 0.2}
2025-08-30T09:58:47.4956350Z 2025-08-30 09:57:50,642 - freqtrade.optimize.hyperopt.hyperopt_interface - INFO - Min roi table: {0: 0.03, 10: 0.02, 20: 0.01, 30: 0}
2025-08-30T09:58:47.4956664Z 2025-08-30 09:57:50,643 - freqtrade.optimize.hyperopt.hyperopt_interface - INFO - Max roi table: {0: 0.31, 40: 0.11, 100: 0.04, 220: 0}
2025-08-30T09:58:47.4956936Z 2025-08-30 09:57:50,643 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'stoploss' space
2025-08-30T09:58:47.4957206Z 2025-08-30 09:57:50,643 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trailing' space
2025-08-30T09:58:47.4957531Z 2025-08-30 09:57:50,644 - freqtrade.optimize.hyperopt.hyperopt_optimizer - DEBUG - Hyperopt has 'trades' space
2025-08-30T09:58:47.4957784Z 2025-08-30 09:57:50,644 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.4958247Z 2025-08-30 09:57:50,677 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4958693Z 2025-08-30 09:57:50,678 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4958841Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.4959014Z 2025-08-30 09:57:50 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4959148Z 2025-08-30 09:57:50 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.4959231Z 2025-08-30 09:57:50 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.4959329Z 2025-08-30 09:57:50 INFO Using Exchange "Binance"
2025-08-30T09:58:47.4959457Z 2025-08-30 09:57:50 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4959805Z 2025-08-30 09:57:50 DEBUG Searching for IStrategy HyperoptableStrategy in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4960267Z 2025-08-30 09:57:50 INFO Using resolved strategy HyperoptableStrategy from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/hyperoptable_strategy.py'...
2025-08-30T09:58:47.4960375Z 2025-08-30 09:57:50 INFO Found no parameter file.
2025-08-30T09:58:47.4960665Z 2025-08-30 09:57:50 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4960850Z 2025-08-30 09:57:50 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4961035Z 2025-08-30 09:57:50 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4961234Z 2025-08-30 09:57:50 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4961425Z 2025-08-30 09:57:50 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4961693Z 2025-08-30 09:57:50 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4961890Z 2025-08-30 09:57:50 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.4962077Z 2025-08-30 09:57:50 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4962276Z 2025-08-30 09:57:50 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4962431Z 2025-08-30 09:57:50 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.4962542Z 2025-08-30 09:57:50 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.4962665Z 2025-08-30 09:57:50 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.4962816Z 2025-08-30 09:57:50 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4963014Z 2025-08-30 09:57:50 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4963153Z 2025-08-30 09:57:50 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4963292Z 2025-08-30 09:57:50 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4963919Z 2025-08-30 09:57:50 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.4964123Z 2025-08-30 09:57:50 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4964245Z 2025-08-30 09:57:50 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.4964359Z 2025-08-30 09:57:50 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4964487Z 2025-08-30 09:57:50 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4964661Z 2025-08-30 09:57:50 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4964867Z 2025-08-30 09:57:50 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.4964989Z 2025-08-30 09:57:50 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.4965140Z 2025-08-30 09:57:50 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4965258Z 2025-08-30 09:57:50 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4965402Z 2025-08-30 09:57:50 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4965558Z 2025-08-30 09:57:50 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4965703Z 2025-08-30 09:57:50 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4965905Z 2025-08-30 09:57:50 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4966026Z 2025-08-30 09:57:50 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.4966131Z 2025-08-30 09:57:50 INFO Validating configuration ...
2025-08-30T09:58:47.4966487Z 2025-08-30 09:57:50 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4966774Z 2025-08-30 09:57:50 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4967209Z 2025-08-30 09:57:50 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4967406Z 2025-08-30 09:57:50 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.4967516Z 2025-08-30 09:57:50 INFO Using fee 0.2500% from config.
2025-08-30T09:58:47.4967655Z 2025-08-30 09:57:50 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4967768Z 2025-08-30 09:57:50 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4967998Z 2025-08-30 09:57:50 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4968117Z 2025-08-30 09:57:50 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4968270Z 2025-08-30 09:57:50 INFO No params for protection found, using default values.
2025-08-30T09:58:47.4968454Z 2025-08-30 09:57:50 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4968622Z 2025-08-30 09:57:50 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4969024Z 2025-08-30 09:57:50 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts'
2025-08-30T09:58:47.4969306Z 2025-08-30 09:57:50 WARNING Path "/home/runner/work/freqtrade/freqtrade/tests/optimize/hyperopts" does not exist.
2025-08-30T09:58:47.4969801Z 2025-08-30 09:57:50 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt2/hyperopts'
2025-08-30T09:58:47.4970104Z 2025-08-30 09:57:50 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_in_strategy_auto_hyperopt2/hyperopts" does not exist.
2025-08-30T09:58:47.4970584Z 2025-08-30 09:57:50 DEBUG Searching for IHyperOptLoss ShortTradeDurHyperOptLoss in '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss'
2025-08-30T09:58:47.4970891Z 2025-08-30 09:57:50 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/__pycache__
2025-08-30T09:58:47.4971466Z 2025-08-30 09:57:50 INFO Using resolved hyperoptloss ShortTradeDurHyperOptLoss from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_loss/hyperopt_loss_short_trade_dur.py'...
2025-08-30T09:58:47.4971708Z 2025-08-30 09:57:50 INFO System Resources: 2 physical CPUs (4 logical), 15996MB total memory, 13238MB available
2025-08-30T09:58:47.4971828Z 2025-08-30 09:57:50 INFO Using optimizer random state: 42
2025-08-30T09:58:47.4971936Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'protection' space
2025-08-30T09:58:47.4972036Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'buy' space
2025-08-30T09:58:47.4972184Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'sell' space
2025-08-30T09:58:47.4972280Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'roi' space
2025-08-30T09:58:47.4972767Z 2025-08-30 09:57:50 DEBUG Using roi space limits: {'roi_t1_min': 10, 'roi_t1_max': 120, 'roi_t2_min': 10, 'roi_t2_max': 60, 'roi_t3_min': 10, 'roi_t3_max': 40, 'roi_p1_min': 0.01, 'roi_p1_max': 0.04, 'roi_p2_min': 0.01, 'roi_p2_max': 0.07, 'roi_p3_min': 0.01, 'roi_p3_max': 0.2}
2025-08-30T09:58:47.4972909Z 2025-08-30 09:57:50 INFO Min roi table: {0: 0.03, 10: 0.02, 20: 0.01, 30: 0}
2025-08-30T09:58:47.4973043Z 2025-08-30 09:57:50 INFO Max roi table: {0: 0.31, 40: 0.11, 100: 0.04, 220: 0}
2025-08-30T09:58:47.4973152Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'stoploss' space
2025-08-30T09:58:47.4973300Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'trailing' space
2025-08-30T09:58:47.4973519Z 2025-08-30 09:57:50 DEBUG Hyperopt has 'trades' space
2025-08-30T09:58:47.4973650Z 2025-08-30 09:57:50 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.4973922Z 2025-08-30 09:57:50 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4974172Z 2025-08-30 09:57:50 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.4974305Z _____________________________ test_api_backtesting _____________________________
2025-08-30T09:58:47.4974313Z 
2025-08-30T09:58:47.4974705Z botclient = (<freqtrade.freqtradebot.FreqtradeBot object at 0x7f6574a5f110>, <starlette.testclient.TestClient object at 0x7f65940edcd0>)
2025-08-30T09:58:47.4974867Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64de840790>
2025-08-30T09:58:47.4974951Z fee = <MagicMock id='140073459944528'>
2025-08-30T09:58:47.4975112Z caplog = <_pytest.logging.LogCaptureFixture object at 0x7f65946b3590>
2025-08-30T09:58:47.4975306Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_api_backtesting0')
2025-08-30T09:58:47.4975312Z 
2025-08-30T09:58:47.4975472Z     def test_api_backtesting(botclient, mocker, fee, caplog, tmp_path):
2025-08-30T09:58:47.4975538Z         try:
2025-08-30T09:58:47.4975623Z             ftbot, client = botclient
2025-08-30T09:58:47.4975714Z             mocker.patch(f"{EXMS}.get_fee", fee)
2025-08-30T09:58:47.4975770Z     
2025-08-30T09:58:47.4975879Z             rc = client_get(client, f"{BASE_URI}/backtest")
2025-08-30T09:58:47.4975966Z             # Backtest prevented in default mode
2025-08-30T09:58:47.4976042Z             assert_response(rc, 503)
2025-08-30T09:58:47.4976186Z             assert rc.json()["detail"] == "Bot is not in the correct state."
2025-08-30T09:58:47.4976311Z     
2025-08-30T09:58:47.4976412Z             ftbot.config["runmode"] = RunMode.WEBSERVER
2025-08-30T09:58:47.4976495Z             # Backtesting not started yet
2025-08-30T09:58:47.4976601Z             rc = client_get(client, f"{BASE_URI}/backtest")
2025-08-30T09:58:47.4976676Z             assert_response(rc)
2025-08-30T09:58:47.4976732Z     
2025-08-30T09:58:47.4976812Z             result = rc.json()
2025-08-30T09:58:47.4976959Z             assert result["status"] == "not_started"
2025-08-30T09:58:47.4977043Z             assert not result["running"]
2025-08-30T09:58:47.4977173Z             assert result["status_msg"] == "Backtest not yet executed"
2025-08-30T09:58:47.4977263Z             assert result["progress"] == 0
2025-08-30T09:58:47.4977321Z     
2025-08-30T09:58:47.4977393Z             # Reset backtesting
2025-08-30T09:58:47.4977507Z             rc = client_delete(client, f"{BASE_URI}/backtest")
2025-08-30T09:58:47.4977580Z             assert_response(rc)
2025-08-30T09:58:47.4977649Z             result = rc.json()
2025-08-30T09:58:47.4977742Z             assert result["status"] == "reset"
2025-08-30T09:58:47.4977819Z             assert not result["running"]
2025-08-30T09:58:47.4977921Z             assert result["status_msg"] == "Backtest reset"
2025-08-30T09:58:47.4978005Z             ftbot.config["export"] = "trades"
2025-08-30T09:58:47.4978099Z             ftbot.config["backtest_cache"] = "day"
2025-08-30T09:58:47.4978250Z             ftbot.config["user_data_dir"] = tmp_path
2025-08-30T09:58:47.4978400Z             ftbot.config["exportdirectory"] = tmp_path / "backtest_results"
2025-08-30T09:58:47.4978497Z             ftbot.config["exportdirectory"].mkdir()
2025-08-30T09:58:47.4978553Z     
2025-08-30T09:58:47.4978622Z             # start backtesting
2025-08-30T09:58:47.4978684Z             data = {
2025-08-30T09:58:47.4978775Z                 "strategy": CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.4978849Z                 "timeframe": "5m",
2025-08-30T09:58:47.4978928Z                 "timerange": "20180110-20180111",
2025-08-30T09:58:47.4979011Z                 "max_open_trades": 3,
2025-08-30T09:58:47.4979084Z                 "stake_amount": 100,
2025-08-30T09:58:47.4979213Z                 "dry_run_wallet": 1000,
2025-08-30T09:58:47.4979306Z                 "enable_protections": False,
2025-08-30T09:58:47.4979365Z             }
2025-08-30T09:58:47.4979495Z             rc = client_post(client, f"{BASE_URI}/backtest", data=data)
2025-08-30T09:58:47.4979569Z             assert_response(rc)
2025-08-30T09:58:47.4979651Z             result = rc.json()
2025-08-30T09:58:47.4979709Z     
2025-08-30T09:58:47.4979793Z             assert result["status"] == "running"
2025-08-30T09:58:47.4979884Z             assert result["progress"] == 0
2025-08-30T09:58:47.4979955Z             assert result["running"]
2025-08-30T09:58:47.4980069Z             assert result["status_msg"] == "Backtest started"
2025-08-30T09:58:47.4980124Z     
2025-08-30T09:58:47.4980224Z             rc = client_get(client, f"{BASE_URI}/backtest")
2025-08-30T09:58:47.4980298Z             assert_response(rc)
2025-08-30T09:58:47.4980353Z     
2025-08-30T09:58:47.4980427Z             result = rc.json()
2025-08-30T09:58:47.4980509Z >           assert result["status"] == "ended"
2025-08-30T09:58:47.4980607Z E           AssertionError: assert 'error' == 'ended'
2025-08-30T09:58:47.4980669Z E             
2025-08-30T09:58:47.4980739Z E             - ended
2025-08-30T09:58:47.4980807Z E             + error
2025-08-30T09:58:47.4980812Z 
2025-08-30T09:58:47.4980929Z tests/rpc/test_rpc_apiserver.py:2831: AssertionError
2025-08-30T09:58:47.4981073Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.4981241Z 2025-08-30 09:57:54,782 - freqtrade.loggers - INFO - Enabling colorized output.
2025-08-30T09:58:47.4981378Z 2025-08-30 09:57:54,782 - freqtrade.loggers - INFO - Logfile configured
2025-08-30T09:58:47.4981508Z 2025-08-30 09:57:54,783 - freqtrade.loggers - INFO - Verbosity set to 3
2025-08-30T09:58:47.4981729Z 2025-08-30 09:57:54,789 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4981967Z 2025-08-30 09:57:54,790 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.4982125Z 2025-08-30 09:57:54,790 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.4982313Z 2025-08-30 09:57:54,791 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.4982581Z 2025-08-30 09:57:54,791 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.4982835Z 2025-08-30 09:57:54,792 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.4983280Z 2025-08-30 09:57:54,793 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.4983959Z 2025-08-30 09:57:54,794 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.4984033Z 'nonexiting_module''
2025-08-30T09:58:47.4984574Z 2025-08-30 09:57:54,795 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.4984844Z 2025-08-30 09:57:54,795 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.4985282Z 2025-08-30 09:57:54,795 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.4985612Z 2025-08-30 09:57:54,796 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.4985931Z 2025-08-30 09:57:54,796 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.4986270Z 2025-08-30 09:57:54,796 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.4986660Z 2025-08-30 09:57:54,797 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.4987075Z 2025-08-30 09:57:54,797 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.4987408Z 2025-08-30 09:57:54,797 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.4987750Z 2025-08-30 09:57:54,797 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.4987978Z 2025-08-30 09:57:54,798 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.4988209Z 2025-08-30 09:57:54,798 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.4988463Z 2025-08-30 09:57:54,798 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.4988755Z 2025-08-30 09:57:54,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.4989056Z 2025-08-30 09:57:54,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.4989325Z 2025-08-30 09:57:54,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.4989599Z 2025-08-30 09:57:54,799 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.4990044Z 2025-08-30 09:57:54,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.4990442Z 2025-08-30 09:57:54,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.4990690Z 2025-08-30 09:57:54,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.4990983Z 2025-08-30 09:57:54,800 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.4991248Z 2025-08-30 09:57:54,801 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.4991555Z 2025-08-30 09:57:54,801 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.4991801Z 2025-08-30 09:57:54,801 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.4992059Z 2025-08-30 09:57:54,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.4992342Z 2025-08-30 09:57:54,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.4992597Z 2025-08-30 09:57:54,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.4992880Z 2025-08-30 09:57:54,802 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.4993218Z 2025-08-30 09:57:54,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.4993604Z 2025-08-30 09:57:54,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.4993888Z 2025-08-30 09:57:54,803 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.4994129Z 2025-08-30 09:57:54,804 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.4994438Z 2025-08-30 09:57:54,804 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.4994639Z 2025-08-30 09:57:54,811 - freqtrade.persistence.migrations - DEBUG - trying trades_bak0
2025-08-30T09:58:47.4994824Z 2025-08-30 09:57:54,812 - freqtrade.persistence.migrations - DEBUG - trying orders_bak0
2025-08-30T09:58:47.4995030Z 2025-08-30 09:57:54,812 - freqtrade.persistence.migrations - DEBUG - trying pairlocks_bak0
2025-08-30T09:58:47.4995170Z 2025-08-30 09:57:54,817 - freqtrade.wallets - INFO - Wallets synced.
2025-08-30T09:58:47.4995644Z 2025-08-30 09:57:54,818 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.4996048Z 2025-08-30 09:57:54,819 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.4996608Z 2025-08-30 09:57:54,822 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.4996809Z 2025-08-30 09:57:54,822 - freqtrade.freqtradebot - INFO - Starting initial pairlist refresh
2025-08-30T09:58:47.4997021Z 2025-08-30 09:57:54,822 - freqtrade.freqtradebot - INFO - Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.4997263Z 2025-08-30 09:57:54,823 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.4997462Z 2025-08-30 09:57:54,823 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.4997792Z 2025-08-30 09:57:54,824 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.4997996Z 2025-08-30 09:57:54,824 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.4998307Z 2025-08-30 09:57:54,824 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.4998592Z 2025-08-30 09:57:54,824 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.4998852Z 2025-08-30 09:57:54,825 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.4999151Z 2025-08-30 09:57:54,825 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2025-08-30T09:58:47.4999297Z 2025-08-30 09:57:54,874 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.4999442Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.4999543Z 2025-08-30 09:57:54 INFO Enabling colorized output.
2025-08-30T09:58:47.4999630Z 2025-08-30 09:57:54 INFO Logfile configured
2025-08-30T09:58:47.4999710Z 2025-08-30 09:57:54 INFO Verbosity set to 3
2025-08-30T09:58:47.4999827Z 2025-08-30 09:57:54 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.4999954Z 2025-08-30 09:57:54 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5000036Z 2025-08-30 09:57:54 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5000135Z 2025-08-30 09:57:54 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5000259Z 2025-08-30 09:57:54 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.5000438Z 2025-08-30 09:57:54 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5000766Z 2025-08-30 09:57:54 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5001258Z 2025-08-30 09:57:54 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5001676Z 2025-08-30 09:57:54 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5001779Z 2025-08-30 09:57:54 INFO Found no parameter file.
2025-08-30T09:58:47.5002096Z 2025-08-30 09:57:54 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5002275Z 2025-08-30 09:57:54 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5002464Z 2025-08-30 09:57:54 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5002660Z 2025-08-30 09:57:54 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5002849Z 2025-08-30 09:57:54 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5003115Z 2025-08-30 09:57:54 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5003303Z 2025-08-30 09:57:54 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5003709Z 2025-08-30 09:57:54 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5003828Z 2025-08-30 09:57:54 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5003938Z 2025-08-30 09:57:54 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5004056Z 2025-08-30 09:57:54 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5004207Z 2025-08-30 09:57:54 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5004371Z 2025-08-30 09:57:54 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5004501Z 2025-08-30 09:57:54 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5004639Z 2025-08-30 09:57:54 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5004946Z 2025-08-30 09:57:54 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5005134Z 2025-08-30 09:57:54 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5005328Z 2025-08-30 09:57:54 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5005444Z 2025-08-30 09:57:54 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5005568Z 2025-08-30 09:57:54 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5005732Z 2025-08-30 09:57:54 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5005908Z 2025-08-30 09:57:54 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5006034Z 2025-08-30 09:57:54 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5006176Z 2025-08-30 09:57:54 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5006298Z 2025-08-30 09:57:54 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5006437Z 2025-08-30 09:57:54 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5006597Z 2025-08-30 09:57:54 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5006741Z 2025-08-30 09:57:54 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5006884Z 2025-08-30 09:57:54 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5006998Z 2025-08-30 09:57:54 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.5007102Z 2025-08-30 09:57:54 INFO Validating configuration ...
2025-08-30T09:58:47.5007252Z 2025-08-30 09:57:54 DEBUG trying trades_bak0
2025-08-30T09:58:47.5007337Z 2025-08-30 09:57:54 DEBUG trying orders_bak0
2025-08-30T09:58:47.5007432Z 2025-08-30 09:57:54 DEBUG trying pairlocks_bak0
2025-08-30T09:58:47.5007512Z 2025-08-30 09:57:54 INFO Wallets synced.
2025-08-30T09:58:47.5007866Z 2025-08-30 09:57:54 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5008145Z 2025-08-30 09:57:54 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5008583Z 2025-08-30 09:57:54 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5008773Z 2025-08-30 09:57:54 INFO Starting initial pairlist refresh
2025-08-30T09:58:47.5008894Z 2025-08-30 09:57:54 INFO Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5009041Z 2025-08-30 09:57:54 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5009153Z 2025-08-30 09:57:54 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5009381Z 2025-08-30 09:57:54 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5009494Z 2025-08-30 09:57:54 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5009645Z 2025-08-30 09:57:54 INFO No params for protection found, using default values.
2025-08-30T09:58:47.5009828Z 2025-08-30 09:57:54 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5009992Z 2025-08-30 09:57:54 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5010104Z 2025-08-30 09:57:54 INFO No protection Handlers defined.
2025-08-30T09:58:47.5010211Z 2025-08-30 09:57:54 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5010358Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.5010501Z 2025-08-30 09:57:54,886 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5010947Z 2025-08-30 09:57:54,886 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5011485Z 2025-08-30 09:57:54,887 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5011555Z 'nonexiting_module''
2025-08-30T09:58:47.5012088Z 2025-08-30 09:57:54,888 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5012319Z 2025-08-30 09:57:54,888 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5012748Z 2025-08-30 09:57:54,889 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5013107Z 2025-08-30 09:57:54,889 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5013548Z 2025-08-30 09:57:54,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5013890Z 2025-08-30 09:57:54,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.5014272Z 2025-08-30 09:57:54,890 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5014668Z 2025-08-30 09:57:54,891 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.5015019Z 2025-08-30 09:57:54,891 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.5015456Z 2025-08-30 09:57:54,891 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.5015918Z 2025-08-30 09:57:54,891 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 
2025-08-30T09:58:47.5016053Z 'stoploss_on_exchange': False, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.5016472Z 2025-08-30 09:57:54,892 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'order_time_in_force' with value in config file: {'entry': 'gtc', 'exit': 'gtc'}.
2025-08-30T09:58:47.5016893Z 2025-08-30 09:57:54,892 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5017231Z 2025-08-30 09:57:54,892 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.5017585Z 2025-08-30 09:57:54,893 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'startup_candle_count' with value in config file: 20.
2025-08-30T09:58:47.5018072Z 2025-08-30 09:57:54,893 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 
2025-08-30T09:58:47.5018134Z 'minutes'}.
2025-08-30T09:58:47.5018472Z 2025-08-30 09:57:54,893 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.5018820Z 2025-08-30 09:57:54,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.5019193Z 2025-08-30 09:57:54,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.5019535Z 2025-08-30 09:57:54,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5019909Z 2025-08-30 09:57:54,894 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.5020298Z 2025-08-30 09:57:54,895 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.5020676Z 2025-08-30 09:57:54,895 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.5021111Z 2025-08-30 09:57:54,895 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.5021446Z 2025-08-30 09:57:54,896 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 3.0.
2025-08-30T09:58:47.5021839Z 2025-08-30 09:57:54,896 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5022072Z 2025-08-30 09:57:54,896 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5022304Z 2025-08-30 09:57:54,896 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5022556Z 2025-08-30 09:57:54,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5022843Z 2025-08-30 09:57:54,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5023144Z 2025-08-30 09:57:54,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5023538Z 2025-08-30 09:57:54,897 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5023885Z 2025-08-30 09:57:54,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5024334Z 2025-08-30 09:57:54,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.5024414Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.5024746Z 2025-08-30 09:57:54,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5024993Z 2025-08-30 09:57:54,898 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5025287Z 2025-08-30 09:57:54,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 100.0
2025-08-30T09:58:47.5025553Z 2025-08-30 09:57:54,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5025972Z 2025-08-30 09:57:54,899 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.5026227Z 2025-08-30 09:57:54,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5026480Z 2025-08-30 09:57:54,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5026793Z 2025-08-30 09:57:54,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5027052Z 2025-08-30 09:57:54,900 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5027329Z 2025-08-30 09:57:54,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5027622Z 2025-08-30 09:57:54,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5027912Z 2025-08-30 09:57:54,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5028189Z 2025-08-30 09:57:54,901 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5028433Z 2025-08-30 09:57:54,902 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 3.0
2025-08-30T09:58:47.5028686Z 2025-08-30 09:57:54,902 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5028893Z 2025-08-30 09:57:54,904 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5029128Z 2025-08-30 09:57:54,905 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.5029292Z 2025-08-30 09:57:54,905 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.5029537Z 2025-08-30 09:57:54,905 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.5029765Z 2025-08-30 09:57:54,905 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.5030021Z 2025-08-30 09:57:54,906 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5030471Z 2025-08-30 09:57:54,906 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5031010Z 2025-08-30 09:57:54,907 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5031083Z 'nonexiting_module''
2025-08-30T09:58:47.5031623Z 2025-08-30 09:57:54,908 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5031850Z 2025-08-30 09:57:54,908 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5032281Z 2025-08-30 09:57:54,909 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5032608Z 2025-08-30 09:57:54,909 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5032928Z 2025-08-30 09:57:54,910 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5033315Z 2025-08-30 09:57:54,910 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.5033797Z 2025-08-30 09:57:54,910 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5034191Z 2025-08-30 09:57:54,910 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.5034550Z 2025-08-30 09:57:54,911 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.5034920Z 2025-08-30 09:57:54,911 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.5035380Z 2025-08-30 09:57:54,911 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 
2025-08-30T09:58:47.5035523Z 'stoploss_on_exchange': False, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.5035945Z 2025-08-30 09:57:54,912 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'order_time_in_force' with value in config file: {'entry': 'gtc', 'exit': 'gtc'}.
2025-08-30T09:58:47.5036285Z 2025-08-30 09:57:54,912 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5036621Z 2025-08-30 09:57:54,912 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.5036974Z 2025-08-30 09:57:54,912 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'startup_candle_count' with value in config file: 20.
2025-08-30T09:58:47.5037454Z 2025-08-30 09:57:54,913 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 
2025-08-30T09:58:47.5037590Z 'minutes'}.
2025-08-30T09:58:47.5037931Z 2025-08-30 09:57:54,913 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.5038324Z 2025-08-30 09:57:54,913 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.5038706Z 2025-08-30 09:57:54,913 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.5039050Z 2025-08-30 09:57:54,914 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5039421Z 2025-08-30 09:57:54,914 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.5039816Z 2025-08-30 09:57:54,914 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.5040193Z 2025-08-30 09:57:54,915 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.5040643Z 2025-08-30 09:57:54,915 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.5040981Z 2025-08-30 09:57:54,915 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 3.0.
2025-08-30T09:58:47.5041319Z 2025-08-30 09:57:54,915 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5041547Z 2025-08-30 09:57:54,916 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5041790Z 2025-08-30 09:57:54,916 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5042091Z 2025-08-30 09:57:54,916 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5042383Z 2025-08-30 09:57:54,916 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5042688Z 2025-08-30 09:57:54,917 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5042953Z 2025-08-30 09:57:54,917 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5043230Z 2025-08-30 09:57:54,917 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5043894Z 2025-08-30 09:57:54,917 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.5043977Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.5044313Z 2025-08-30 09:57:54,918 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5044566Z 2025-08-30 09:57:54,918 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5044811Z 2025-08-30 09:57:54,920 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 100.0
2025-08-30T09:58:47.5045068Z 2025-08-30 09:57:54,920 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5045491Z 2025-08-30 09:57:54,920 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.5045740Z 2025-08-30 09:57:54,920 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5046074Z 2025-08-30 09:57:54,921 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5046363Z 2025-08-30 09:57:54,921 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5046671Z 2025-08-30 09:57:54,921 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5046953Z 2025-08-30 09:57:54,921 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5047249Z 2025-08-30 09:57:54,922 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5047532Z 2025-08-30 09:57:54,922 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5047809Z 2025-08-30 09:57:54,922 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5048065Z 2025-08-30 09:57:54,923 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 3.0
2025-08-30T09:58:47.5048313Z 2025-08-30 09:57:54,923 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5048842Z 2025-08-30 09:57:54,925 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5049250Z 2025-08-30 09:57:54,926 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5049805Z 2025-08-30 09:57:54,928 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5050145Z 2025-08-30 09:57:54,929 - freqtrade.plugins.pairlistmanager - DEBUG - Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.5050500Z 2025-08-30 09:57:54,930 - freqtrade.optimize.backtesting - INFO - Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.5050757Z 2025-08-30 09:57:54,931 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.5051116Z 2025-08-30 09:57:54,937 - freqtrade.data.history.datahandlers.idatahandler - WARNING - ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.5051459Z 2025-08-30 09:57:54,953 - freqtrade.data.history.datahandlers.idatahandler - WARNING - LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.5051916Z 2025-08-30 09:57:54,963 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.5052365Z 2025-08-30 09:57:54,964 - freqtrade.data.history.datahandlers.idatahandler - WARNING - No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.5052607Z 2025-08-30 09:57:54,964 - freqtrade.rpc.api_server.api_backtest - ERROR - Backtesting caused an error: 'date'
2025-08-30T09:58:47.5052692Z Traceback (most recent call last):
2025-08-30T09:58:47.5058649Z   File "/home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
2025-08-30T09:58:47.5058805Z     return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.5058876Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5059164Z   File "pandas/_libs/index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.5059430Z   File "pandas/_libs/index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.5059780Z   File "pandas/_libs/hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.5060236Z   File "pandas/_libs/hashtable_class_helper.pxi", line 7096, in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.5060307Z KeyError: 'date'
2025-08-30T09:58:47.5060317Z 
2025-08-30T09:58:47.5060489Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.5060496Z 
2025-08-30T09:58:47.5060580Z Traceback (most recent call last):
2025-08-30T09:58:47.5061034Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/rpc/api_server/api_backtest.py", line 75, in __run_backtest_bg
2025-08-30T09:58:47.5061198Z     ApiBG.bt["data"], ApiBG.bt["timerange"] = ApiBG.bt["bt"].load_bt_data()
2025-08-30T09:58:47.5061280Z                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5061642Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py", line 328, in load_bt_data
2025-08-30T09:58:47.5061758Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.5061833Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5062202Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/data/history/history_utils.py", line 688, in get_timerange
2025-08-30T09:58:47.5062274Z     timeranges = [
2025-08-30T09:58:47.5062332Z                  ^
2025-08-30T09:58:47.5062673Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/data/history/history_utils.py", line 689, in <listcomp>
2025-08-30T09:58:47.5062905Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.5062963Z      ~~~~~^^^^^^^^
2025-08-30T09:58:47.5063521Z   File "/home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/pandas/core/frame.py", line 4107, in __getitem__
2025-08-30T09:58:47.5063615Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.5063682Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5064113Z   File "/home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py", line 3819, in get_loc
2025-08-30T09:58:47.5064216Z     raise KeyError(key) from err
2025-08-30T09:58:47.5064283Z KeyError: 'date'
2025-08-30T09:58:47.5064507Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.5064628Z 2025-08-30 09:57:54 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5064958Z 2025-08-30 09:57:54 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5065459Z 2025-08-30 09:57:54 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5065879Z 2025-08-30 09:57:54 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5065980Z 2025-08-30 09:57:54 INFO Found no parameter file.
2025-08-30T09:58:47.5066268Z 2025-08-30 09:57:54 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5066447Z 2025-08-30 09:57:54 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5066625Z 2025-08-30 09:57:54 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5066825Z 2025-08-30 09:57:54 INFO Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.5067066Z 2025-08-30 09:57:54 INFO Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5067312Z 2025-08-30 09:57:54 INFO Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.5067524Z 2025-08-30 09:57:54 INFO Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.5067747Z 2025-08-30 09:57:54 INFO Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.5068206Z 2025-08-30 09:57:54 INFO Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.5068550Z 2025-08-30 09:57:54 INFO Override strategy 'order_time_in_force' with value in config file: {'entry': 'gtc', 'exit': 'gtc'}.
2025-08-30T09:58:47.5068743Z 2025-08-30 09:57:54 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5068982Z 2025-08-30 09:57:54 INFO Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.5069199Z 2025-08-30 09:57:54 INFO Override strategy 'startup_candle_count' with value in config file: 20.
2025-08-30T09:58:47.5069563Z 2025-08-30 09:57:54 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.5069757Z 2025-08-30 09:57:54 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.5069965Z 2025-08-30 09:57:54 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.5070195Z 2025-08-30 09:57:54 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.5070392Z 2025-08-30 09:57:54 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5070681Z 2025-08-30 09:57:54 INFO Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.5070923Z 2025-08-30 09:57:54 INFO Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.5071155Z 2025-08-30 09:57:54 INFO Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.5071383Z 2025-08-30 09:57:54 INFO Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.5071573Z 2025-08-30 09:57:54 INFO Override strategy 'max_open_trades' with value in config file: 3.0.
2025-08-30T09:58:47.5071769Z 2025-08-30 09:57:54 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5071914Z 2025-08-30 09:57:54 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5072030Z 2025-08-30 09:57:54 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5072147Z 2025-08-30 09:57:54 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5072302Z 2025-08-30 09:57:54 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5072461Z 2025-08-30 09:57:54 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5072589Z 2025-08-30 09:57:54 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5072728Z 2025-08-30 09:57:54 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5073105Z 2025-08-30 09:57:54 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.5073292Z 2025-08-30 09:57:54 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5073515Z 2025-08-30 09:57:54 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5073633Z 2025-08-30 09:57:54 INFO Strategy using stake_amount: 100.0
2025-08-30T09:58:47.5073758Z 2025-08-30 09:57:54 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5074035Z 2025-08-30 09:57:54 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.5074159Z 2025-08-30 09:57:54 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5074279Z 2025-08-30 09:57:54 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5074421Z 2025-08-30 09:57:54 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5074545Z 2025-08-30 09:57:54 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5074684Z 2025-08-30 09:57:54 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5074904Z 2025-08-30 09:57:54 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5075049Z 2025-08-30 09:57:54 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5075196Z 2025-08-30 09:57:54 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5075312Z 2025-08-30 09:57:54 INFO Strategy using max_open_trades: 3.0
2025-08-30T09:58:47.5075420Z 2025-08-30 09:57:54 INFO Validating configuration ...
2025-08-30T09:58:47.5075584Z 2025-08-30 09:57:54 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5075714Z 2025-08-30 09:57:54 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5075794Z 2025-08-30 09:57:54 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5075893Z 2025-08-30 09:57:54 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5076015Z 2025-08-30 09:57:54 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.5076131Z 2025-08-30 09:57:54 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5076458Z 2025-08-30 09:57:54 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5076951Z 2025-08-30 09:57:54 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5077367Z 2025-08-30 09:57:54 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5077547Z 2025-08-30 09:57:54 INFO Found no parameter file.
2025-08-30T09:58:47.5077829Z 2025-08-30 09:57:54 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5078005Z 2025-08-30 09:57:54 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5078188Z 2025-08-30 09:57:54 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5078391Z 2025-08-30 09:57:54 INFO Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.5078684Z 2025-08-30 09:57:54 INFO Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5078933Z 2025-08-30 09:57:54 INFO Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.5079148Z 2025-08-30 09:57:54 INFO Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.5079373Z 2025-08-30 09:57:54 INFO Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.5079831Z 2025-08-30 09:57:54 INFO Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.5080113Z 2025-08-30 09:57:54 INFO Override strategy 'order_time_in_force' with value in config file: {'entry': 'gtc', 'exit': 'gtc'}.
2025-08-30T09:58:47.5080306Z 2025-08-30 09:57:54 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5080495Z 2025-08-30 09:57:54 INFO Override strategy 'stake_amount' with value in config file: 100.0.
2025-08-30T09:58:47.5080704Z 2025-08-30 09:57:54 INFO Override strategy 'startup_candle_count' with value in config file: 20.
2025-08-30T09:58:47.5081063Z 2025-08-30 09:57:54 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.5081259Z 2025-08-30 09:57:54 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.5081464Z 2025-08-30 09:57:54 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.5081693Z 2025-08-30 09:57:54 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.5081889Z 2025-08-30 09:57:54 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5082167Z 2025-08-30 09:57:54 INFO Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.5082412Z 2025-08-30 09:57:54 INFO Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.5082646Z 2025-08-30 09:57:54 INFO Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.5082913Z 2025-08-30 09:57:54 INFO Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.5083107Z 2025-08-30 09:57:54 INFO Override strategy 'max_open_trades' with value in config file: 3.0.
2025-08-30T09:58:47.5083304Z 2025-08-30 09:57:54 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5083624Z 2025-08-30 09:57:54 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5083760Z 2025-08-30 09:57:54 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5083883Z 2025-08-30 09:57:54 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5084041Z 2025-08-30 09:57:54 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5084200Z 2025-08-30 09:57:54 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5084329Z 2025-08-30 09:57:54 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5084484Z 2025-08-30 09:57:54 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5085029Z 2025-08-30 09:57:54 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.5085218Z 2025-08-30 09:57:54 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5085339Z 2025-08-30 09:57:54 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5085447Z 2025-08-30 09:57:54 INFO Strategy using stake_amount: 100.0
2025-08-30T09:58:47.5085570Z 2025-08-30 09:57:54 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5085842Z 2025-08-30 09:57:54 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.5086030Z 2025-08-30 09:57:54 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5086154Z 2025-08-30 09:57:54 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5086295Z 2025-08-30 09:57:54 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5086421Z 2025-08-30 09:57:54 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5086559Z 2025-08-30 09:57:54 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5086718Z 2025-08-30 09:57:54 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5086863Z 2025-08-30 09:57:54 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5087003Z 2025-08-30 09:57:54 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5087116Z 2025-08-30 09:57:54 INFO Strategy using max_open_trades: 3.0
2025-08-30T09:58:47.5087226Z 2025-08-30 09:57:54 INFO Validating configuration ...
2025-08-30T09:58:47.5087574Z 2025-08-30 09:57:54 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5087857Z 2025-08-30 09:57:54 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5088295Z 2025-08-30 09:57:54 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5088490Z 2025-08-30 09:57:54 DEBUG Whitelist with 4 pairs: ['ETH/BTC', 'LTC/BTC', 'XRP/BTC', 'NEO/BTC']
2025-08-30T09:58:47.5088664Z 2025-08-30 09:57:54 INFO Using fee 0.2500% - worst case fee from exchange (lowest tier).
2025-08-30T09:58:47.5088795Z 2025-08-30 09:57:54 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.5088952Z 2025-08-30 09:57:54 WARNING ETH/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.5089168Z 2025-08-30 09:57:54 WARNING LTC/BTC, spot, 5m, data starts at 2018-01-10 04:55:00
2025-08-30T09:58:47.5089432Z 2025-08-30 09:57:54 WARNING No history for XRP/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.5089685Z 2025-08-30 09:57:54 WARNING No history for NEO/BTC, spot, 5m found. Use `freqtrade download-data` to download the data
2025-08-30T09:58:47.5089860Z 2025-08-30 09:57:54 ERROR Backtesting caused an error: 'date'
2025-08-30T09:58:47.5089946Z Traceback (most recent call last):
2025-08-30T09:58:47.5090375Z   File "/home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
2025-08-30T09:58:47.5090470Z     return self._engine.get_loc(casted_key)
2025-08-30T09:58:47.5090537Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5090785Z   File "pandas/_libs/index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.5091011Z   File "pandas/_libs/index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
2025-08-30T09:58:47.5091362Z   File "pandas/_libs/hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.5091688Z   File "pandas/_libs/hashtable_class_helper.pxi", line 7096, in pandas._libs.hashtable.PyObjectHashTable.get_item
2025-08-30T09:58:47.5091804Z KeyError: 'date'
2025-08-30T09:58:47.5091815Z 
2025-08-30T09:58:47.5091983Z The above exception was the direct cause of the following exception:
2025-08-30T09:58:47.5091988Z 
2025-08-30T09:58:47.5092070Z Traceback (most recent call last):
2025-08-30T09:58:47.5092447Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/rpc/api_server/api_backtest.py", line 75, in __run_backtest_bg
2025-08-30T09:58:47.5092609Z     ApiBG.bt["data"], ApiBG.bt["timerange"] = ApiBG.bt["bt"].load_bt_data()
2025-08-30T09:58:47.5092691Z                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5093032Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py", line 328, in load_bt_data
2025-08-30T09:58:47.5093185Z     min_date, max_date = history.get_timerange(data)
2025-08-30T09:58:47.5093261Z                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5093727Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/data/history/history_utils.py", line 688, in get_timerange
2025-08-30T09:58:47.5093814Z     timeranges = [
2025-08-30T09:58:47.5093873Z                  ^
2025-08-30T09:58:47.5094215Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/data/history/history_utils.py", line 689, in <listcomp>
2025-08-30T09:58:47.5094375Z     (frame["date"].min().to_pydatetime(), frame["date"].max().to_pydatetime())
2025-08-30T09:58:47.5094433Z      ~~~~~^^^^^^^^
2025-08-30T09:58:47.5094839Z   File "/home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/pandas/core/frame.py", line 4107, in __getitem__
2025-08-30T09:58:47.5094926Z     indexer = self.columns.get_loc(key)
2025-08-30T09:58:47.5094995Z               ^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5095398Z   File "/home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/pandas/core/indexes/base.py", line 3819, in get_loc
2025-08-30T09:58:47.5095492Z     raise KeyError(key) from err
2025-08-30T09:58:47.5095556Z KeyError: 'date'
2025-08-30T09:58:47.5095710Z _________________________ test_api_pairlists_evaluate __________________________
2025-08-30T09:58:47.5095718Z 
2025-08-30T09:58:47.5096105Z botclient = (<freqtrade.freqtradebot.FreqtradeBot object at 0x7f6574ceb490>, <starlette.testclient.TestClient object at 0x7f64da5830d0>)
2025-08-30T09:58:47.5096314Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_api_pairlists_evaluate0')
2025-08-30T09:58:47.5096479Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64de2f6250>
2025-08-30T09:58:47.5096484Z 
2025-08-30T09:58:47.5096624Z     def test_api_pairlists_evaluate(botclient, tmp_path, mocker):
2025-08-30T09:58:47.5096773Z         ftbot, client = botclient
2025-08-30T09:58:47.5096871Z         ftbot.config["user_data_dir"] = tmp_path
2025-08-30T09:58:47.5096926Z     
2025-08-30T09:58:47.5097076Z         rc = client_get(client, f"{BASE_URI}/pairlists/evaluate/randomJob")
2025-08-30T09:58:47.5097136Z     
2025-08-30T09:58:47.5097210Z         assert_response(rc, 503)
2025-08-30T09:58:47.5097348Z         assert rc.json()["detail"] == "Bot is not in the correct state."
2025-08-30T09:58:47.5097458Z     
2025-08-30T09:58:47.5097563Z         ftbot.config["runmode"] = RunMode.WEBSERVER
2025-08-30T09:58:47.5097619Z     
2025-08-30T09:58:47.5097761Z         rc = client_get(client, f"{BASE_URI}/pairlists/evaluate/randomJob")
2025-08-30T09:58:47.5097839Z         assert_response(rc, 404)
2025-08-30T09:58:47.5097941Z         assert rc.json()["detail"] == "Job not found."
2025-08-30T09:58:47.5097997Z     
2025-08-30T09:58:47.5098057Z         body = {
2025-08-30T09:58:47.5098134Z             "pairlists": [
2025-08-30T09:58:47.5098192Z                 {
2025-08-30T09:58:47.5098283Z                     "method": "StaticPairList",
2025-08-30T09:58:47.5098346Z                 },
2025-08-30T09:58:47.5098403Z             ],
2025-08-30T09:58:47.5098476Z             "blacklist": [],
2025-08-30T09:58:47.5098554Z             "stake_currency": "BTC",
2025-08-30T09:58:47.5098617Z         }
2025-08-30T09:58:47.5098693Z         # Fail, already running
2025-08-30T09:58:47.5098866Z         ApiBG.pairlist_running = True
2025-08-30T09:58:47.5099013Z         rc = client_post(client, f"{BASE_URI}/pairlists/evaluate", body)
2025-08-30T09:58:47.5099087Z         assert_response(rc, 400)
2025-08-30T09:58:47.5099240Z         assert rc.json()["detail"] == "Pairlist evaluation is already running."
2025-08-30T09:58:47.5099302Z     
2025-08-30T09:58:47.5099375Z         # should start the run
2025-08-30T09:58:47.5099457Z         ApiBG.pairlist_running = False
2025-08-30T09:58:47.5099594Z         rc = client_post(client, f"{BASE_URI}/pairlists/evaluate", body)
2025-08-30T09:58:47.5099672Z         assert_response(rc)
2025-08-30T09:58:47.5099832Z         assert rc.json()["status"] == "Pairlist evaluation started in background."
2025-08-30T09:58:47.5099965Z         job_id = rc.json()["job_id"]
2025-08-30T09:58:47.5100027Z     
2025-08-30T09:58:47.5100156Z         rc = client_get(client, f"{BASE_URI}/background/RandomJob")
2025-08-30T09:58:47.5100232Z         assert_response(rc, 404)
2025-08-30T09:58:47.5100333Z         assert rc.json()["detail"] == "Job not found."
2025-08-30T09:58:47.5100393Z     
2025-08-30T09:58:47.5100463Z         # Background list
2025-08-30T09:58:47.5100568Z         rc = client_get(client, f"{BASE_URI}/background")
2025-08-30T09:58:47.5100643Z         assert_response(rc)
2025-08-30T09:58:47.5100716Z         response = rc.json()
2025-08-30T09:58:47.5100802Z         assert isinstance(response, list)
2025-08-30T09:58:47.5100880Z         assert len(response) == 1
2025-08-30T09:58:47.5100966Z         assert response[0]["job_id"] == job_id
2025-08-30T09:58:47.5101020Z     
2025-08-30T09:58:47.5101092Z         # Get individual job
2025-08-30T09:58:47.5101220Z         rc = client_get(client, f"{BASE_URI}/background/{job_id}")
2025-08-30T09:58:47.5101291Z         assert_response(rc)
2025-08-30T09:58:47.5101362Z         response = rc.json()
2025-08-30T09:58:47.5101448Z         assert response["job_id"] == job_id
2025-08-30T09:58:47.5101549Z         assert response["job_category"] == "pairlist"
2025-08-30T09:58:47.5101604Z     
2025-08-30T09:58:47.5101748Z         rc = client_get(client, f"{BASE_URI}/pairlists/evaluate/{job_id}")
2025-08-30T09:58:47.5101822Z         assert_response(rc)
2025-08-30T09:58:47.5101898Z         response = rc.json()
2025-08-30T09:58:47.5102097Z >       assert response["result"]["whitelist"] == ["ETH/BTC", "LTC/BTC", "XRP/BTC", "NEO/BTC"]
2025-08-30T09:58:47.5102175Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-08-30T09:58:47.5102292Z E       TypeError: 'NoneType' object is not subscriptable
2025-08-30T09:58:47.5102297Z 
2025-08-30T09:58:47.5102453Z tests/rpc/test_rpc_apiserver.py:2685: TypeError
2025-08-30T09:58:47.5102607Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.5102779Z 2025-08-30 09:57:55,717 - freqtrade.loggers - INFO - Enabling colorized output.
2025-08-30T09:58:47.5102920Z 2025-08-30 09:57:55,717 - freqtrade.loggers - INFO - Logfile configured
2025-08-30T09:58:47.5103118Z 2025-08-30 09:57:55,718 - freqtrade.loggers - INFO - Verbosity set to 3
2025-08-30T09:58:47.5103262Z 2025-08-30 09:57:55,723 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5103603Z 2025-08-30 09:57:55,724 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.5103772Z 2025-08-30 09:57:55,724 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.5103956Z 2025-08-30 09:57:55,725 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.5104180Z 2025-08-30 09:57:55,725 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.5104437Z 2025-08-30 09:57:55,727 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5104893Z 2025-08-30 09:57:55,727 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5105508Z 2025-08-30 09:57:55,729 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5105583Z 'nonexiting_module''
2025-08-30T09:58:47.5106118Z 2025-08-30 09:57:55,729 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5106299Z 2025-08-30 09:57:55,730 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5106744Z 2025-08-30 09:57:55,730 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5107122Z 2025-08-30 09:57:55,731 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5107448Z 2025-08-30 09:57:55,731 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5107789Z 2025-08-30 09:57:55,731 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5108120Z 2025-08-30 09:57:55,732 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5108529Z 2025-08-30 09:57:55,732 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5108863Z 2025-08-30 09:57:55,732 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5109199Z 2025-08-30 09:57:55,732 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5109430Z 2025-08-30 09:57:55,733 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5109666Z 2025-08-30 09:57:55,733 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5109915Z 2025-08-30 09:57:55,733 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5110203Z 2025-08-30 09:57:55,734 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5110503Z 2025-08-30 09:57:55,734 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5110828Z 2025-08-30 09:57:55,734 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5111104Z 2025-08-30 09:57:55,734 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5111606Z 2025-08-30 09:57:55,735 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5111943Z 2025-08-30 09:57:55,735 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5112188Z 2025-08-30 09:57:55,735 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5112434Z 2025-08-30 09:57:55,735 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5112688Z 2025-08-30 09:57:55,736 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5113002Z 2025-08-30 09:57:55,736 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5113255Z 2025-08-30 09:57:55,736 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5113658Z 2025-08-30 09:57:55,737 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5113941Z 2025-08-30 09:57:55,737 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5114198Z 2025-08-30 09:57:55,737 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5114475Z 2025-08-30 09:57:55,737 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5114767Z 2025-08-30 09:57:55,738 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5115116Z 2025-08-30 09:57:55,738 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5115399Z 2025-08-30 09:57:55,738 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5115642Z 2025-08-30 09:57:55,738 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.5115892Z 2025-08-30 09:57:55,739 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5116084Z 2025-08-30 09:57:55,746 - freqtrade.persistence.migrations - DEBUG - trying trades_bak0
2025-08-30T09:58:47.5116269Z 2025-08-30 09:57:55,747 - freqtrade.persistence.migrations - DEBUG - trying orders_bak0
2025-08-30T09:58:47.5116475Z 2025-08-30 09:57:55,747 - freqtrade.persistence.migrations - DEBUG - trying pairlocks_bak0
2025-08-30T09:58:47.5116613Z 2025-08-30 09:57:55,753 - freqtrade.wallets - INFO - Wallets synced.
2025-08-30T09:58:47.5117090Z 2025-08-30 09:57:55,753 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5117499Z 2025-08-30 09:57:55,755 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5118056Z 2025-08-30 09:57:55,757 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5118257Z 2025-08-30 09:57:55,758 - freqtrade.freqtradebot - INFO - Starting initial pairlist refresh
2025-08-30T09:58:47.5118469Z 2025-08-30 09:57:55,758 - freqtrade.freqtradebot - INFO - Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5118702Z 2025-08-30 09:57:55,758 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5118962Z 2025-08-30 09:57:55,759 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5119296Z 2025-08-30 09:57:55,759 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5119552Z 2025-08-30 09:57:55,759 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5119805Z 2025-08-30 09:57:55,760 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.5120095Z 2025-08-30 09:57:55,760 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5120353Z 2025-08-30 09:57:55,760 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5120596Z 2025-08-30 09:57:55,761 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2025-08-30T09:58:47.5120745Z 2025-08-30 09:57:55,810 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5120888Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.5120989Z 2025-08-30 09:57:55 INFO Enabling colorized output.
2025-08-30T09:58:47.5121073Z 2025-08-30 09:57:55 INFO Logfile configured
2025-08-30T09:58:47.5121218Z 2025-08-30 09:57:55 INFO Verbosity set to 3
2025-08-30T09:58:47.5121327Z 2025-08-30 09:57:55 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5121453Z 2025-08-30 09:57:55 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5121536Z 2025-08-30 09:57:55 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5121632Z 2025-08-30 09:57:55 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5121754Z 2025-08-30 09:57:55 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.5121880Z 2025-08-30 09:57:55 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5122205Z 2025-08-30 09:57:55 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5122730Z 2025-08-30 09:57:55 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5123154Z 2025-08-30 09:57:55 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5123251Z 2025-08-30 09:57:55 INFO Found no parameter file.
2025-08-30T09:58:47.5123746Z 2025-08-30 09:57:55 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5123932Z 2025-08-30 09:57:55 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5124113Z 2025-08-30 09:57:55 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5124306Z 2025-08-30 09:57:55 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5124506Z 2025-08-30 09:57:55 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5124768Z 2025-08-30 09:57:55 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5124959Z 2025-08-30 09:57:55 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5125157Z 2025-08-30 09:57:55 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5125262Z 2025-08-30 09:57:55 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5125369Z 2025-08-30 09:57:55 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5125488Z 2025-08-30 09:57:55 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5125653Z 2025-08-30 09:57:55 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5125819Z 2025-08-30 09:57:55 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5126034Z 2025-08-30 09:57:55 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5126187Z 2025-08-30 09:57:55 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5126495Z 2025-08-30 09:57:55 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5126787Z 2025-08-30 09:57:55 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5126911Z 2025-08-30 09:57:55 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5127022Z 2025-08-30 09:57:55 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5127154Z 2025-08-30 09:57:55 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5127333Z 2025-08-30 09:57:55 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5127451Z 2025-08-30 09:57:55 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5127576Z 2025-08-30 09:57:55 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5127722Z 2025-08-30 09:57:55 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5127842Z 2025-08-30 09:57:55 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5127983Z 2025-08-30 09:57:55 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5128196Z 2025-08-30 09:57:55 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5128343Z 2025-08-30 09:57:55 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5128483Z 2025-08-30 09:57:55 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5128593Z 2025-08-30 09:57:55 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.5128703Z 2025-08-30 09:57:55 INFO Validating configuration ...
2025-08-30T09:58:47.5128789Z 2025-08-30 09:57:55 DEBUG trying trades_bak0
2025-08-30T09:58:47.5128872Z 2025-08-30 09:57:55 DEBUG trying orders_bak0
2025-08-30T09:58:47.5128973Z 2025-08-30 09:57:55 DEBUG trying pairlocks_bak0
2025-08-30T09:58:47.5129051Z 2025-08-30 09:57:55 INFO Wallets synced.
2025-08-30T09:58:47.5129456Z 2025-08-30 09:57:55 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5129746Z 2025-08-30 09:57:55 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5130187Z 2025-08-30 09:57:55 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5130300Z 2025-08-30 09:57:55 INFO Starting initial pairlist refresh
2025-08-30T09:58:47.5130421Z 2025-08-30 09:57:55 INFO Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5130560Z 2025-08-30 09:57:55 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5130669Z 2025-08-30 09:57:55 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5130896Z 2025-08-30 09:57:55 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5131013Z 2025-08-30 09:57:55 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5131167Z 2025-08-30 09:57:55 INFO No params for protection found, using default values.
2025-08-30T09:58:47.5131352Z 2025-08-30 09:57:55 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5131521Z 2025-08-30 09:57:55 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5131631Z 2025-08-30 09:57:55 INFO No protection Handlers defined.
2025-08-30T09:58:47.5131739Z 2025-08-30 09:57:55 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5131885Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.5132239Z 2025-08-30 09:57:55,821 - freqtrade.rpc.api_server.api_pairlists - ERROR - 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5132323Z Traceback (most recent call last):
2025-08-30T09:58:47.5132769Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/rpc/api_server/api_pairlists.py", line 55, in __run_pairlist
2025-08-30T09:58:47.5132852Z     with FtNoDBContext():
2025-08-30T09:58:47.5133045Z TypeError: 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5133187Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.5133569Z 2025-08-30 09:57:55 ERROR 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5133658Z Traceback (most recent call last):
2025-08-30T09:58:47.5134019Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/rpc/api_server/api_pairlists.py", line 55, in __run_pairlist
2025-08-30T09:58:47.5134096Z     with FtNoDBContext():
2025-08-30T09:58:47.5134288Z TypeError: 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5134423Z ____________________________ test_api_download_data ____________________________
2025-08-30T09:58:47.5134432Z 
2025-08-30T09:58:47.5134818Z botclient = (<freqtrade.freqtradebot.FreqtradeBot object at 0x7f64de9aca50>, <starlette.testclient.TestClient object at 0x7f6574c04290>)
2025-08-30T09:58:47.5134978Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f6564209c10>
2025-08-30T09:58:47.5135167Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_api_download_data0')
2025-08-30T09:58:47.5135231Z 
2025-08-30T09:58:47.5135360Z     def test_api_download_data(botclient, mocker, tmp_path):
2025-08-30T09:58:47.5135438Z         ftbot, client = botclient
2025-08-30T09:58:47.5135499Z     
2025-08-30T09:58:47.5135636Z         rc = client_post(client, f"{BASE_URI}/download_data", data={})
2025-08-30T09:58:47.5135713Z         assert_response(rc, 503)
2025-08-30T09:58:47.5135848Z         assert rc.json()["detail"] == "Bot is not in the correct state."
2025-08-30T09:58:47.5135908Z     
2025-08-30T09:58:47.5136006Z         ftbot.config["runmode"] = RunMode.WEBSERVER
2025-08-30T09:58:47.5136098Z         ftbot.config["user_data_dir"] = tmp_path
2025-08-30T09:58:47.5136157Z     
2025-08-30T09:58:47.5136216Z         body = {
2025-08-30T09:58:47.5136355Z             "pairs": ["ETH/BTC", "XRP/BTC"],
2025-08-30T09:58:47.5136430Z             "timeframes": ["5m"],
2025-08-30T09:58:47.5136493Z         }
2025-08-30T09:58:47.5136548Z     
2025-08-30T09:58:47.5136622Z         # Fail, already running
2025-08-30T09:58:47.5136716Z         ApiBG.download_data_running = True
2025-08-30T09:58:47.5136840Z         rc = client_post(client, f"{BASE_URI}/download_data", body)
2025-08-30T09:58:47.5136916Z         assert_response(rc, 400)
2025-08-30T09:58:47.5137059Z         assert rc.json()["detail"] == "Data Download is already running."
2025-08-30T09:58:47.5137114Z     
2025-08-30T09:58:47.5137186Z         # Reset running state
2025-08-30T09:58:47.5137273Z         ApiBG.download_data_running = False
2025-08-30T09:58:47.5137333Z     
2025-08-30T09:58:47.5137408Z         # Test successful download
2025-08-30T09:58:47.5137480Z         mocker.patch(
2025-08-30T09:58:47.5137619Z             "freqtrade.data.history.history_utils.download_data",
2025-08-30T09:58:47.5137692Z             return_value=None,
2025-08-30T09:58:47.5137749Z         )
2025-08-30T09:58:47.5137803Z     
2025-08-30T09:58:47.5137930Z         rc = client_post(client, f"{BASE_URI}/download_data", body)
2025-08-30T09:58:47.5138005Z         assert_response(rc)
2025-08-30T09:58:47.5138151Z         assert rc.json()["status"] == "Data Download started in background."
2025-08-30T09:58:47.5138229Z         job_id = rc.json()["job_id"]
2025-08-30T09:58:47.5138284Z     
2025-08-30T09:58:47.5138404Z         rc = client_get(client, f"{BASE_URI}/background/{job_id}")
2025-08-30T09:58:47.5138473Z         assert_response(rc)
2025-08-30T09:58:47.5138551Z         response = rc.json()
2025-08-30T09:58:47.5138634Z         assert response["job_id"] == job_id
2025-08-30T09:58:47.5138742Z         assert response["job_category"] == "download_data"
2025-08-30T09:58:47.5138904Z         # Job finishes immediately due to mock.
2025-08-30T09:58:47.5138989Z >       assert response["status"] == "success"
2025-08-30T09:58:47.5139094Z E       AssertionError: assert 'failed' == 'success'
2025-08-30T09:58:47.5139158Z E         
2025-08-30T09:58:47.5139223Z E         - success
2025-08-30T09:58:47.5139282Z E         + failed
2025-08-30T09:58:47.5139289Z 
2025-08-30T09:58:47.5139410Z tests/rpc/test_rpc_apiserver.py:3253: AssertionError
2025-08-30T09:58:47.5139599Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.5139766Z 2025-08-30 09:57:59,847 - freqtrade.loggers - INFO - Enabling colorized output.
2025-08-30T09:58:47.5139908Z 2025-08-30 09:57:59,847 - freqtrade.loggers - INFO - Logfile configured
2025-08-30T09:58:47.5140046Z 2025-08-30 09:57:59,848 - freqtrade.loggers - INFO - Verbosity set to 3
2025-08-30T09:58:47.5140185Z 2025-08-30 09:57:59,853 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5140423Z 2025-08-30 09:57:59,853 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.5140589Z 2025-08-30 09:57:59,854 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.5140774Z 2025-08-30 09:57:59,854 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.5140999Z 2025-08-30 09:57:59,855 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.5141304Z 2025-08-30 09:57:59,856 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5141750Z 2025-08-30 09:57:59,856 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5142290Z 2025-08-30 09:57:59,857 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5142367Z 'nonexiting_module''
2025-08-30T09:58:47.5142938Z 2025-08-30 09:57:59,858 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5143123Z 2025-08-30 09:57:59,859 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5143676Z 2025-08-30 09:57:59,859 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5143998Z 2025-08-30 09:57:59,859 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5144321Z 2025-08-30 09:57:59,860 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5144661Z 2025-08-30 09:57:59,860 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5144997Z 2025-08-30 09:57:59,860 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5145405Z 2025-08-30 09:57:59,861 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5145743Z 2025-08-30 09:57:59,861 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5146081Z 2025-08-30 09:57:59,861 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5146313Z 2025-08-30 09:57:59,862 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5146556Z 2025-08-30 09:57:59,862 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5146872Z 2025-08-30 09:57:59,862 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5147165Z 2025-08-30 09:57:59,862 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5147468Z 2025-08-30 09:57:59,863 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5147782Z 2025-08-30 09:57:59,863 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5148061Z 2025-08-30 09:57:59,863 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5148510Z 2025-08-30 09:57:59,863 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5148842Z 2025-08-30 09:57:59,864 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5149089Z 2025-08-30 09:57:59,864 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5149334Z 2025-08-30 09:57:59,864 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5149651Z 2025-08-30 09:57:59,864 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5149960Z 2025-08-30 09:57:59,865 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5150212Z 2025-08-30 09:57:59,865 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5150470Z 2025-08-30 09:57:59,865 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5150755Z 2025-08-30 09:57:59,866 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5151067Z 2025-08-30 09:57:59,866 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5151348Z 2025-08-30 09:57:59,866 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5151646Z 2025-08-30 09:57:59,866 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5151932Z 2025-08-30 09:57:59,867 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5152209Z 2025-08-30 09:57:59,867 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5152450Z 2025-08-30 09:57:59,867 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.5152704Z 2025-08-30 09:57:59,868 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5152899Z 2025-08-30 09:57:59,875 - freqtrade.persistence.migrations - DEBUG - trying trades_bak0
2025-08-30T09:58:47.5153085Z 2025-08-30 09:57:59,875 - freqtrade.persistence.migrations - DEBUG - trying orders_bak0
2025-08-30T09:58:47.5153291Z 2025-08-30 09:57:59,875 - freqtrade.persistence.migrations - DEBUG - trying pairlocks_bak0
2025-08-30T09:58:47.5153526Z 2025-08-30 09:57:59,881 - freqtrade.wallets - INFO - Wallets synced.
2025-08-30T09:58:47.5154000Z 2025-08-30 09:57:59,881 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5154409Z 2025-08-30 09:57:59,882 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5154964Z 2025-08-30 09:57:59,886 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5155232Z 2025-08-30 09:57:59,887 - freqtrade.freqtradebot - INFO - Starting initial pairlist refresh
2025-08-30T09:58:47.5155440Z 2025-08-30 09:57:59,887 - freqtrade.freqtradebot - INFO - Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5155730Z 2025-08-30 09:57:59,887 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5155933Z 2025-08-30 09:57:59,888 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5156269Z 2025-08-30 09:57:59,888 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5156470Z 2025-08-30 09:57:59,888 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5156718Z 2025-08-30 09:57:59,889 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.5157009Z 2025-08-30 09:57:59,889 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5157265Z 2025-08-30 09:57:59,889 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5157507Z 2025-08-30 09:57:59,890 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2025-08-30T09:58:47.5157719Z 2025-08-30 09:57:59,938 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5157862Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.5157965Z 2025-08-30 09:57:59 INFO Enabling colorized output.
2025-08-30T09:58:47.5158054Z 2025-08-30 09:57:59 INFO Logfile configured
2025-08-30T09:58:47.5158135Z 2025-08-30 09:57:59 INFO Verbosity set to 3
2025-08-30T09:58:47.5158244Z 2025-08-30 09:57:59 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5158377Z 2025-08-30 09:57:59 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5158459Z 2025-08-30 09:57:59 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5158626Z 2025-08-30 09:57:59 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5158753Z 2025-08-30 09:57:59 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.5158875Z 2025-08-30 09:57:59 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5159202Z 2025-08-30 09:57:59 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5159691Z 2025-08-30 09:57:59 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5160115Z 2025-08-30 09:57:59 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5160211Z 2025-08-30 09:57:59 INFO Found no parameter file.
2025-08-30T09:58:47.5160496Z 2025-08-30 09:57:59 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5160679Z 2025-08-30 09:57:59 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5160856Z 2025-08-30 09:57:59 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5161054Z 2025-08-30 09:57:59 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5161244Z 2025-08-30 09:57:59 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5161508Z 2025-08-30 09:57:59 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5161697Z 2025-08-30 09:57:59 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5161904Z 2025-08-30 09:57:59 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5162133Z 2025-08-30 09:57:59 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5162244Z 2025-08-30 09:57:59 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5162369Z 2025-08-30 09:57:59 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5162516Z 2025-08-30 09:57:59 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5162673Z 2025-08-30 09:57:59 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5162846Z 2025-08-30 09:57:59 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5162988Z 2025-08-30 09:57:59 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5163288Z 2025-08-30 09:57:59 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5163694Z 2025-08-30 09:57:59 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5163819Z 2025-08-30 09:57:59 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5163933Z 2025-08-30 09:57:59 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5164058Z 2025-08-30 09:57:59 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5164231Z 2025-08-30 09:57:59 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5164349Z 2025-08-30 09:57:59 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5164550Z 2025-08-30 09:57:59 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5164698Z 2025-08-30 09:57:59 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5164816Z 2025-08-30 09:57:59 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5164954Z 2025-08-30 09:57:59 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5165110Z 2025-08-30 09:57:59 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5165252Z 2025-08-30 09:57:59 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5165392Z 2025-08-30 09:57:59 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5165513Z 2025-08-30 09:57:59 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.5165676Z 2025-08-30 09:57:59 INFO Validating configuration ...
2025-08-30T09:58:47.5165767Z 2025-08-30 09:57:59 DEBUG trying trades_bak0
2025-08-30T09:58:47.5165850Z 2025-08-30 09:57:59 DEBUG trying orders_bak0
2025-08-30T09:58:47.5165952Z 2025-08-30 09:57:59 DEBUG trying pairlocks_bak0
2025-08-30T09:58:47.5166031Z 2025-08-30 09:57:59 INFO Wallets synced.
2025-08-30T09:58:47.5166382Z 2025-08-30 09:57:59 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5166668Z 2025-08-30 09:57:59 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5167108Z 2025-08-30 09:57:59 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5167230Z 2025-08-30 09:57:59 INFO Starting initial pairlist refresh
2025-08-30T09:58:47.5167365Z 2025-08-30 09:57:59 INFO Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5167511Z 2025-08-30 09:57:59 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5167622Z 2025-08-30 09:57:59 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5167863Z 2025-08-30 09:57:59 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5167973Z 2025-08-30 09:57:59 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5168129Z 2025-08-30 09:57:59 INFO No params for protection found, using default values.
2025-08-30T09:58:47.5168321Z 2025-08-30 09:57:59 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5168483Z 2025-08-30 09:57:59 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5168594Z 2025-08-30 09:57:59 INFO No protection Handlers defined.
2025-08-30T09:58:47.5168772Z 2025-08-30 09:57:59 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5168923Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.5169297Z 2025-08-30 09:57:59,947 - freqtrade.rpc.api_server.api_download_data - ERROR - 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5169385Z Traceback (most recent call last):
2025-08-30T09:58:47.5169849Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/rpc/api_server/api_download_data.py", line 28, in __run_download
2025-08-30T09:58:47.5169933Z     with FtNoDBContext():
2025-08-30T09:58:47.5170129Z TypeError: 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5170272Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.5170485Z 2025-08-30 09:57:59 ERROR 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5170566Z Traceback (most recent call last):
2025-08-30T09:58:47.5170936Z   File "/home/runner/work/freqtrade/freqtrade/freqtrade/rpc/api_server/api_download_data.py", line 28, in __run_download
2025-08-30T09:58:47.5171013Z     with FtNoDBContext():
2025-08-30T09:58:47.5171204Z TypeError: 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5171338Z ____________________________ test_api_pair_history _____________________________
2025-08-30T09:58:47.5171387Z 
2025-08-30T09:58:47.5171776Z botclient = (<freqtrade.freqtradebot.FreqtradeBot object at 0x7f6574b40610>, <starlette.testclient.TestClient object at 0x7f64dbbec590>)
2025-08-30T09:58:47.5171965Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_api_pair_history0')
2025-08-30T09:58:47.5172133Z mocker = <pytest_mock.plugin.MockerFixture object at 0x7f64dcdebc50>
2025-08-30T09:58:47.5172138Z 
2025-08-30T09:58:47.5172259Z     def test_api_pair_history(botclient, tmp_path, mocker):
2025-08-30T09:58:47.5172334Z         _ftbot, client = botclient
2025-08-30T09:58:47.5172434Z         _ftbot.config["user_data_dir"] = tmp_path
2025-08-30T09:58:47.5172489Z     
2025-08-30T09:58:47.5172559Z         timeframe = "5m"
2025-08-30T09:58:47.5172813Z         lfm = mocker.patch("freqtrade.strategy.interface.IStrategy.load_freqAI_model")
2025-08-30T09:58:47.5172879Z         # Wrong mode
2025-08-30T09:58:47.5172945Z         rc = client_get(
2025-08-30T09:58:47.5173007Z             client,
2025-08-30T09:58:47.5173121Z             f"{BASE_URI}/pair_history?timeframe={timeframe}"
2025-08-30T09:58:47.5173264Z             f"&timerange=20180111-20180112&strategy={CURRENT_TEST_STRATEGY}",
2025-08-30T09:58:47.5173323Z         )
2025-08-30T09:58:47.5173512Z         assert_response(rc, 503)
2025-08-30T09:58:47.5173615Z         _ftbot.config["runmode"] = RunMode.WEBSERVER
2025-08-30T09:58:47.5173670Z     
2025-08-30T09:58:47.5173730Z         # No pair
2025-08-30T09:58:47.5173800Z         rc = client_get(
2025-08-30T09:58:47.5173858Z             client,
2025-08-30T09:58:47.5173962Z             f"{BASE_URI}/pair_history?timeframe={timeframe}"
2025-08-30T09:58:47.5174108Z             f"&timerange=20180111-20180112&strategy={CURRENT_TEST_STRATEGY}",
2025-08-30T09:58:47.5174167Z         )
2025-08-30T09:58:47.5174241Z         assert_response(rc, 422)
2025-08-30T09:58:47.5174303Z     
2025-08-30T09:58:47.5174368Z         # No Timeframe
2025-08-30T09:58:47.5174435Z         rc = client_get(
2025-08-30T09:58:47.5174492Z             client,
2025-08-30T09:58:47.5174601Z             f"{BASE_URI}/pair_history?pair=UNITTEST%2FBTC"
2025-08-30T09:58:47.5174737Z             f"&timerange=20180111-20180112&strategy={CURRENT_TEST_STRATEGY}",
2025-08-30T09:58:47.5174794Z         )
2025-08-30T09:58:47.5174871Z         assert_response(rc, 422)
2025-08-30T09:58:47.5174925Z     
2025-08-30T09:58:47.5174992Z         # No timerange
2025-08-30T09:58:47.5175056Z         rc = client_get(
2025-08-30T09:58:47.5175118Z             client,
2025-08-30T09:58:47.5175290Z             f"{BASE_URI}/pair_history?pair=UNITTEST%2FBTC&timeframe={timeframe}"
2025-08-30T09:58:47.5175449Z             f"&strategy={CURRENT_TEST_STRATEGY}",
2025-08-30T09:58:47.5175511Z         )
2025-08-30T09:58:47.5175586Z         assert_response(rc, 422)
2025-08-30T09:58:47.5175641Z     
2025-08-30T09:58:47.5175704Z         # No strategy
2025-08-30T09:58:47.5175775Z         rc = client_get(
2025-08-30T09:58:47.5175833Z             client,
2025-08-30T09:58:47.5176036Z             f"{BASE_URI}/pair_history?pair=UNITTEST%2FBTC&timeframe={timeframe}"
2025-08-30T09:58:47.5176122Z             "&timerange=20180111-20180112",
2025-08-30T09:58:47.5176177Z         )
2025-08-30T09:58:47.5176249Z         assert_response(rc, 422)
2025-08-30T09:58:47.5176303Z     
2025-08-30T09:58:47.5176378Z         # Invalid strategy
2025-08-30T09:58:47.5176443Z         rc = client_get(
2025-08-30T09:58:47.5176500Z             client,
2025-08-30T09:58:47.5176652Z             f"{BASE_URI}/pair_history?pair=UNITTEST%2FBTC&timeframe={timeframe}"
2025-08-30T09:58:47.5176807Z             "&timerange=20180111-20180112&strategy={CURRENT_TEST_STRATEGY}11",
2025-08-30T09:58:47.5176866Z         )
2025-08-30T09:58:47.5176945Z         assert_response(rc, 502)
2025-08-30T09:58:47.5177001Z     
2025-08-30T09:58:47.5177060Z         # Working
2025-08-30T09:58:47.5177135Z         for call in ("get", "post"):
2025-08-30T09:58:47.5177209Z             if call == "get":
2025-08-30T09:58:47.5177352Z                 rc = client_get(
2025-08-30T09:58:47.5177419Z                     client,
2025-08-30T09:58:47.5177582Z                     f"{BASE_URI}/pair_history?pair=UNITTEST%2FBTC&timeframe={timeframe}"
2025-08-30T09:58:47.5177728Z                     f"&timerange=20180111-20180112&strategy={CURRENT_TEST_STRATEGY}",
2025-08-30T09:58:47.5177786Z                 )
2025-08-30T09:58:47.5177844Z             else:
2025-08-30T09:58:47.5177921Z                 rc = client_post(
2025-08-30T09:58:47.5177985Z                     client,
2025-08-30T09:58:47.5178069Z                     f"{BASE_URI}/pair_history",
2025-08-30T09:58:47.5178140Z                     data={
2025-08-30T09:58:47.5178219Z                         "pair": "UNITTEST/BTC",
2025-08-30T09:58:47.5178358Z                         "timeframe": timeframe,
2025-08-30T09:58:47.5178451Z                         "timerange": "20180111-20180112",
2025-08-30T09:58:47.5178541Z                         "strategy": CURRENT_TEST_STRATEGY,
2025-08-30T09:58:47.5178632Z                         "columns": ["rsi", "fastd", "fastk"],
2025-08-30T09:58:47.5178695Z                     },
2025-08-30T09:58:47.5178757Z                 )
2025-08-30T09:58:47.5178811Z     
2025-08-30T09:58:47.5178887Z >           assert_response(rc, 200)
2025-08-30T09:58:47.5178892Z 
2025-08-30T09:58:47.5178987Z tests/rpc/test_rpc_apiserver.py:2256: 
2025-08-30T09:58:47.5179087Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
2025-08-30T09:58:47.5179092Z 
2025-08-30T09:58:47.5179265Z response = <Response [502 Bad Gateway]>, expected_code = 200, needs_cors = True
2025-08-30T09:58:47.5179272Z 
2025-08-30T09:58:47.5179432Z     def assert_response(response, expected_code=200, needs_cors=True):
2025-08-30T09:58:47.5179536Z >       assert response.status_code == expected_code
2025-08-30T09:58:47.5179606Z E       assert 502 == 200
2025-08-30T09:58:47.5179725Z E        +  where 502 = <Response [502 Bad Gateway]>.status_code
2025-08-30T09:58:47.5179731Z 
2025-08-30T09:58:47.5179844Z tests/rpc/test_rpc_apiserver.py:142: AssertionError
2025-08-30T09:58:47.5179984Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.5180152Z 2025-08-30 09:58:00,290 - freqtrade.loggers - INFO - Enabling colorized output.
2025-08-30T09:58:47.5180293Z 2025-08-30 09:58:00,291 - freqtrade.loggers - INFO - Logfile configured
2025-08-30T09:58:47.5180424Z 2025-08-30 09:58:00,291 - freqtrade.loggers - INFO - Verbosity set to 3
2025-08-30T09:58:47.5180563Z 2025-08-30 09:58:00,296 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5180804Z 2025-08-30 09:58:00,297 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.5181011Z 2025-08-30 09:58:00,297 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.5181196Z 2025-08-30 09:58:00,298 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.5181425Z 2025-08-30 09:58:00,298 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.5181716Z 2025-08-30 09:58:00,299 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5182167Z 2025-08-30 09:58:00,300 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5182711Z 2025-08-30 09:58:00,301 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5182785Z 'nonexiting_module''
2025-08-30T09:58:47.5183320Z 2025-08-30 09:58:00,302 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5183608Z 2025-08-30 09:58:00,302 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5184128Z 2025-08-30 09:58:00,303 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5184450Z 2025-08-30 09:58:00,303 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5184778Z 2025-08-30 09:58:00,303 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5185118Z 2025-08-30 09:58:00,304 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5185505Z 2025-08-30 09:58:00,304 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5185920Z 2025-08-30 09:58:00,304 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5186253Z 2025-08-30 09:58:00,304 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5186597Z 2025-08-30 09:58:00,305 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5186825Z 2025-08-30 09:58:00,305 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5187056Z 2025-08-30 09:58:00,305 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5187312Z 2025-08-30 09:58:00,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5187602Z 2025-08-30 09:58:00,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5187898Z 2025-08-30 09:58:00,306 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5188169Z 2025-08-30 09:58:00,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5188445Z 2025-08-30 09:58:00,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5188896Z 2025-08-30 09:58:00,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5189234Z 2025-08-30 09:58:00,307 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5189544Z 2025-08-30 09:58:00,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5189786Z 2025-08-30 09:58:00,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5190107Z 2025-08-30 09:58:00,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5190419Z 2025-08-30 09:58:00,308 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5190670Z 2025-08-30 09:58:00,309 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5190928Z 2025-08-30 09:58:00,309 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5191214Z 2025-08-30 09:58:00,309 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5191469Z 2025-08-30 09:58:00,309 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5191750Z 2025-08-30 09:58:00,310 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5192090Z 2025-08-30 09:58:00,310 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5192371Z 2025-08-30 09:58:00,310 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5192656Z 2025-08-30 09:58:00,311 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5192897Z 2025-08-30 09:58:00,311 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.5193143Z 2025-08-30 09:58:00,311 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5193494Z 2025-08-30 09:58:00,318 - freqtrade.persistence.migrations - DEBUG - trying trades_bak0
2025-08-30T09:58:47.5193689Z 2025-08-30 09:58:00,319 - freqtrade.persistence.migrations - DEBUG - trying orders_bak0
2025-08-30T09:58:47.5193894Z 2025-08-30 09:58:00,319 - freqtrade.persistence.migrations - DEBUG - trying pairlocks_bak0
2025-08-30T09:58:47.5194030Z 2025-08-30 09:58:00,324 - freqtrade.wallets - INFO - Wallets synced.
2025-08-30T09:58:47.5194506Z 2025-08-30 09:58:00,325 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5194908Z 2025-08-30 09:58:00,326 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5195467Z 2025-08-30 09:58:00,329 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5195671Z 2025-08-30 09:58:00,329 - freqtrade.freqtradebot - INFO - Starting initial pairlist refresh
2025-08-30T09:58:47.5195874Z 2025-08-30 09:58:00,329 - freqtrade.freqtradebot - INFO - Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5196115Z 2025-08-30 09:58:00,330 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5196316Z 2025-08-30 09:58:00,330 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5196643Z 2025-08-30 09:58:00,331 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5196847Z 2025-08-30 09:58:00,332 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5197095Z 2025-08-30 09:58:00,333 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.5197437Z 2025-08-30 09:58:00,333 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5197701Z 2025-08-30 09:58:00,334 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5197942Z 2025-08-30 09:58:00,334 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2025-08-30T09:58:47.5198141Z 2025-08-30 09:58:00,383 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5198283Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.5198388Z 2025-08-30 09:58:00 INFO Enabling colorized output.
2025-08-30T09:58:47.5198474Z 2025-08-30 09:58:00 INFO Logfile configured
2025-08-30T09:58:47.5198553Z 2025-08-30 09:58:00 INFO Verbosity set to 3
2025-08-30T09:58:47.5198666Z 2025-08-30 09:58:00 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5198792Z 2025-08-30 09:58:00 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5198873Z 2025-08-30 09:58:00 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5198974Z 2025-08-30 09:58:00 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5199097Z 2025-08-30 09:58:00 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.5199213Z 2025-08-30 09:58:00 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5199597Z 2025-08-30 09:58:00 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5200087Z 2025-08-30 09:58:00 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5200502Z 2025-08-30 09:58:00 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5200600Z 2025-08-30 09:58:00 INFO Found no parameter file.
2025-08-30T09:58:47.5200883Z 2025-08-30 09:58:00 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5201099Z 2025-08-30 09:58:00 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5201281Z 2025-08-30 09:58:00 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5201482Z 2025-08-30 09:58:00 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5201670Z 2025-08-30 09:58:00 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5201930Z 2025-08-30 09:58:00 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5202123Z 2025-08-30 09:58:00 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5202316Z 2025-08-30 09:58:00 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5202422Z 2025-08-30 09:58:00 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5202531Z 2025-08-30 09:58:00 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5202648Z 2025-08-30 09:58:00 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5202795Z 2025-08-30 09:58:00 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5202957Z 2025-08-30 09:58:00 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5203090Z 2025-08-30 09:58:00 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5203227Z 2025-08-30 09:58:00 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5203737Z 2025-08-30 09:58:00 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5203949Z 2025-08-30 09:58:00 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5204074Z 2025-08-30 09:58:00 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5204270Z 2025-08-30 09:58:00 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5204405Z 2025-08-30 09:58:00 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5204576Z 2025-08-30 09:58:00 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5204695Z 2025-08-30 09:58:00 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5204877Z 2025-08-30 09:58:00 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5205024Z 2025-08-30 09:58:00 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5205142Z 2025-08-30 09:58:00 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5205288Z 2025-08-30 09:58:00 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5205439Z 2025-08-30 09:58:00 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5205580Z 2025-08-30 09:58:00 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5205725Z 2025-08-30 09:58:00 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5205836Z 2025-08-30 09:58:00 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.5205942Z 2025-08-30 09:58:00 INFO Validating configuration ...
2025-08-30T09:58:47.5206033Z 2025-08-30 09:58:00 DEBUG trying trades_bak0
2025-08-30T09:58:47.5206117Z 2025-08-30 09:58:00 DEBUG trying orders_bak0
2025-08-30T09:58:47.5206271Z 2025-08-30 09:58:00 DEBUG trying pairlocks_bak0
2025-08-30T09:58:47.5206350Z 2025-08-30 09:58:00 INFO Wallets synced.
2025-08-30T09:58:47.5206704Z 2025-08-30 09:58:00 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5206987Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5207424Z 2025-08-30 09:58:00 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5207544Z 2025-08-30 09:58:00 INFO Starting initial pairlist refresh
2025-08-30T09:58:47.5207662Z 2025-08-30 09:58:00 INFO Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5207853Z 2025-08-30 09:58:00 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5207970Z 2025-08-30 09:58:00 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5208200Z 2025-08-30 09:58:00 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5208308Z 2025-08-30 09:58:00 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5208465Z 2025-08-30 09:58:00 INFO No params for protection found, using default values.
2025-08-30T09:58:47.5208651Z 2025-08-30 09:58:00 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5208811Z 2025-08-30 09:58:00 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5208924Z 2025-08-30 09:58:00 INFO No protection Handlers defined.
2025-08-30T09:58:47.5209035Z 2025-08-30 09:58:00 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5209174Z ----------------------------- Captured stderr call -----------------------------
2025-08-30T09:58:47.5209318Z 2025-08-30 09:58:00,388 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5209547Z 2025-08-30 09:58:00,389 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.5209708Z 2025-08-30 09:58:00,389 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.5209889Z 2025-08-30 09:58:00,390 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.5210144Z 2025-08-30 09:58:00,390 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5210394Z 2025-08-30 09:58:00,397 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5210861Z 2025-08-30 09:58:00,399 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy {CURRENT_TEST_STRATEGY}11 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5211450Z 2025-08-30 09:58:00,401 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5211521Z 'nonexiting_module''
2025-08-30T09:58:47.5211968Z 2025-08-30 09:58:00,402 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/__pycache__
2025-08-30T09:58:47.5212363Z 2025-08-30 09:58:00,403 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/broken_strats
2025-08-30T09:58:47.5212751Z 2025-08-30 09:58:00,405 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias
2025-08-30T09:58:47.5213214Z 2025-08-30 09:58:00,405 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy {CURRENT_TEST_STRATEGY}11 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5213857Z 2025-08-30 09:58:00,406 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5213926Z 'nonexiting_module''
2025-08-30T09:58:47.5214375Z 2025-08-30 09:58:00,407 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/__pycache__
2025-08-30T09:58:47.5214757Z 2025-08-30 09:58:00,408 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/broken_strats
2025-08-30T09:58:47.5215141Z 2025-08-30 09:58:00,410 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias
2025-08-30T09:58:47.5215617Z 2025-08-30 09:58:00,410 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy {CURRENT_TEST_STRATEGY}11 in '/tmp/pytest-of-runner/pytest-0/test_api_pair_history0/strategies'
2025-08-30T09:58:47.5216068Z 2025-08-30 09:58:00,410 - freqtrade.resolvers.iresolver - WARNING - Path "/tmp/pytest-of-runner/pytest-0/test_api_pair_history0/strategies" does not exist.
2025-08-30T09:58:47.5216318Z 2025-08-30 09:58:00,413 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5216770Z 2025-08-30 09:58:00,415 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5217302Z 2025-08-30 09:58:00,416 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5217370Z 'nonexiting_module''
2025-08-30T09:58:47.5217906Z 2025-08-30 09:58:00,417 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5218086Z 2025-08-30 09:58:00,417 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5218514Z 2025-08-30 09:58:00,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5218838Z 2025-08-30 09:58:00,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5219160Z 2025-08-30 09:58:00,418 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5219498Z 2025-08-30 09:58:00,419 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.5219882Z 2025-08-30 09:58:00,419 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5220330Z 2025-08-30 09:58:00,419 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.5220682Z 2025-08-30 09:58:00,420 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.5221105Z 2025-08-30 09:58:00,420 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.5221569Z 2025-08-30 09:58:00,420 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 
2025-08-30T09:58:47.5221702Z 'stoploss_on_exchange': False, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.5222128Z 2025-08-30 09:58:00,420 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'order_time_in_force' with value in config file: {'entry': 'gtc', 'exit': 'gtc'}.
2025-08-30T09:58:47.5222468Z 2025-08-30 09:58:00,421 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5222800Z 2025-08-30 09:58:00,421 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5223198Z 2025-08-30 09:58:00,421 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'startup_candle_count' with value in config file: 20.
2025-08-30T09:58:47.5223775Z 2025-08-30 09:58:00,422 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 
2025-08-30T09:58:47.5223844Z 'minutes'}.
2025-08-30T09:58:47.5224182Z 2025-08-30 09:58:00,422 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.5224528Z 2025-08-30 09:58:00,422 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.5224969Z 2025-08-30 09:58:00,422 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.5225319Z 2025-08-30 09:58:00,423 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5225690Z 2025-08-30 09:58:00,423 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.5226085Z 2025-08-30 09:58:00,423 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.5226461Z 2025-08-30 09:58:00,423 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.5226864Z 2025-08-30 09:58:00,424 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.5227199Z 2025-08-30 09:58:00,424 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5227538Z 2025-08-30 09:58:00,424 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5227767Z 2025-08-30 09:58:00,425 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5228002Z 2025-08-30 09:58:00,425 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5228251Z 2025-08-30 09:58:00,425 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5228543Z 2025-08-30 09:58:00,425 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5228918Z 2025-08-30 09:58:00,426 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5229184Z 2025-08-30 09:58:00,426 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5229515Z 2025-08-30 09:58:00,426 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5229968Z 2025-08-30 09:58:00,426 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 
2025-08-30T09:58:47.5230043Z 'emergency_exit': 'market'}
2025-08-30T09:58:47.5230374Z 2025-08-30 09:58:00,427 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5230627Z 2025-08-30 09:58:00,427 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5230871Z 2025-08-30 09:58:00,427 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5231128Z 2025-08-30 09:58:00,428 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5231611Z 2025-08-30 09:58:00,428 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.5231860Z 2025-08-30 09:58:00,428 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5232112Z 2025-08-30 09:58:00,429 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5232398Z 2025-08-30 09:58:00,429 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5232652Z 2025-08-30 09:58:00,429 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5232965Z 2025-08-30 09:58:00,430 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5233263Z 2025-08-30 09:58:00,430 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5233645Z 2025-08-30 09:58:00,430 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5233930Z 2025-08-30 09:58:00,430 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5234174Z 2025-08-30 09:58:00,431 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.5234426Z 2025-08-30 09:58:00,431 - freqtrade.data.history.history_utils - DEBUG - Using indicator startup period: 20 ...
2025-08-30T09:58:47.5234659Z 2025-08-30 09:58:00,447 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5234868Z 2025-08-30 09:58:00,447 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5235199Z 2025-08-30 09:58:00,447 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5235408Z 2025-08-30 09:58:00,448 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5235660Z 2025-08-30 09:58:00,448 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.5235940Z 2025-08-30 09:58:00,448 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5236194Z 2025-08-30 09:58:00,449 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5236448Z 2025-08-30 09:58:00,449 - freqtrade.strategy.interface - DEBUG - TA Analysis Launched
2025-08-30T09:58:47.5236700Z 2025-08-30 09:58:00,449 - freqtrade.strategy.interface - DEBUG - Populating indicators for pair UNITTEST/BTC.
2025-08-30T09:58:47.5236955Z 2025-08-30 09:58:00,454 - freqtrade.strategy.interface - DEBUG - Populating enter signals for pair UNITTEST/BTC.
2025-08-30T09:58:47.5237264Z 2025-08-30 09:58:00,458 - freqtrade.strategy.interface - DEBUG - Populating exit signals for pair UNITTEST/BTC.
2025-08-30T09:58:47.5237441Z 2025-08-30 09:58:00,462 - freqtrade.strategy.interface - DEBUG - TA Analysis Ended
2025-08-30T09:58:47.5237581Z ------------------------------ Captured log call -------------------------------
2025-08-30T09:58:47.5237698Z 2025-08-30 09:58:00 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5237824Z 2025-08-30 09:58:00 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5237905Z 2025-08-30 09:58:00 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5238001Z 2025-08-30 09:58:00 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5238127Z 2025-08-30 09:58:00 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5238234Z 2025-08-30 09:58:00 INFO Validating configuration ...
2025-08-30T09:58:47.5238576Z 2025-08-30 09:58:00 DEBUG Searching for IStrategy {CURRENT_TEST_STRATEGY}11 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5239126Z 2025-08-30 09:58:00 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5239384Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/__pycache__
2025-08-30T09:58:47.5239644Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/broken_strats
2025-08-30T09:58:47.5239914Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias
2025-08-30T09:58:47.5240247Z 2025-08-30 09:58:00 DEBUG Searching for IStrategy {CURRENT_TEST_STRATEGY}11 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5240789Z 2025-08-30 09:58:00 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5241051Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/__pycache__
2025-08-30T09:58:47.5241312Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/broken_strats
2025-08-30T09:58:47.5241574Z 2025-08-30 09:58:00 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/lookahead_bias
2025-08-30T09:58:47.5241932Z 2025-08-30 09:58:00 DEBUG Searching for IStrategy {CURRENT_TEST_STRATEGY}11 in '/tmp/pytest-of-runner/pytest-0/test_api_pair_history0/strategies'
2025-08-30T09:58:47.5242207Z 2025-08-30 09:58:00 WARNING Path "/tmp/pytest-of-runner/pytest-0/test_api_pair_history0/strategies" does not exist.
2025-08-30T09:58:47.5242313Z 2025-08-30 09:58:00 INFO Validating configuration ...
2025-08-30T09:58:47.5242639Z 2025-08-30 09:58:00 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5243121Z 2025-08-30 09:58:00 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5243740Z 2025-08-30 09:58:00 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5243856Z 2025-08-30 09:58:00 INFO Found no parameter file.
2025-08-30T09:58:47.5244144Z 2025-08-30 09:58:00 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5244323Z 2025-08-30 09:58:00 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5244623Z 2025-08-30 09:58:00 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5244824Z 2025-08-30 09:58:00 INFO Override strategy 'trailing_stop' with value in config file: False.
2025-08-30T09:58:47.5245058Z 2025-08-30 09:58:00 INFO Override strategy 'trailing_stop_positive_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5245363Z 2025-08-30 09:58:00 INFO Override strategy 'trailing_only_offset_is_reached' with value in config file: False.
2025-08-30T09:58:47.5245575Z 2025-08-30 09:58:00 INFO Override strategy 'use_custom_stoploss' with value in config file: False.
2025-08-30T09:58:47.5245799Z 2025-08-30 09:58:00 INFO Override strategy 'process_only_new_candles' with value in config file: True.
2025-08-30T09:58:47.5246268Z 2025-08-30 09:58:00 INFO Override strategy 'order_types' with value in config file: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}.
2025-08-30T09:58:47.5246547Z 2025-08-30 09:58:00 INFO Override strategy 'order_time_in_force' with value in config file: {'entry': 'gtc', 'exit': 'gtc'}.
2025-08-30T09:58:47.5246741Z 2025-08-30 09:58:00 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5246933Z 2025-08-30 09:58:00 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5247200Z 2025-08-30 09:58:00 INFO Override strategy 'startup_candle_count' with value in config file: 20.
2025-08-30T09:58:47.5247559Z 2025-08-30 09:58:00 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}.
2025-08-30T09:58:47.5247760Z 2025-08-30 09:58:00 INFO Override strategy 'use_exit_signal' with value in config file: True.
2025-08-30T09:58:47.5247961Z 2025-08-30 09:58:00 INFO Override strategy 'exit_profit_only' with value in config file: False.
2025-08-30T09:58:47.5248190Z 2025-08-30 09:58:00 INFO Override strategy 'ignore_roi_if_entry_signal' with value in config file: False.
2025-08-30T09:58:47.5248406Z 2025-08-30 09:58:00 INFO Override strategy 'exit_profit_offset' with value in config file: 0.0.
2025-08-30T09:58:47.5248687Z 2025-08-30 09:58:00 INFO Override strategy 'disable_dataframe_checks' with value in config file: False.
2025-08-30T09:58:47.5248931Z 2025-08-30 09:58:00 INFO Override strategy 'ignore_buying_expired_candle_after' with value in config file: 0.
2025-08-30T09:58:47.5249175Z 2025-08-30 09:58:00 INFO Override strategy 'position_adjustment_enable' with value in config file: False.
2025-08-30T09:58:47.5249401Z 2025-08-30 09:58:00 INFO Override strategy 'max_entry_position_adjustment' with value in config file: -1.
2025-08-30T09:58:47.5249589Z 2025-08-30 09:58:00 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5249788Z 2025-08-30 09:58:00 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5249893Z 2025-08-30 09:58:00 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5250004Z 2025-08-30 09:58:00 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5250128Z 2025-08-30 09:58:00 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5250278Z 2025-08-30 09:58:00 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5250431Z 2025-08-30 09:58:00 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5250568Z 2025-08-30 09:58:00 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5250710Z 2025-08-30 09:58:00 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5251079Z 2025-08-30 09:58:00 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False, 'emergency_exit': 'market'}
2025-08-30T09:58:47.5251269Z 2025-08-30 09:58:00 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5251389Z 2025-08-30 09:58:00 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5251543Z 2025-08-30 09:58:00 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5251667Z 2025-08-30 09:58:00 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5251946Z 2025-08-30 09:58:00 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30, 'exit_timeout_count': 0, 'unit': 'minutes'}
2025-08-30T09:58:47.5252064Z 2025-08-30 09:58:00 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5252226Z 2025-08-30 09:58:00 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5252377Z 2025-08-30 09:58:00 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5252494Z 2025-08-30 09:58:00 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5252632Z 2025-08-30 09:58:00 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5252790Z 2025-08-30 09:58:00 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5252932Z 2025-08-30 09:58:00 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5253073Z 2025-08-30 09:58:00 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5253184Z 2025-08-30 09:58:00 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.5253312Z 2025-08-30 09:58:00 DEBUG Using indicator startup period: 20 ...
2025-08-30T09:58:47.5253547Z 2025-08-30 09:58:00 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5253728Z 2025-08-30 09:58:00 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5253959Z 2025-08-30 09:58:00 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5254070Z 2025-08-30 09:58:00 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5254221Z 2025-08-30 09:58:00 INFO No params for protection found, using default values.
2025-08-30T09:58:47.5254410Z 2025-08-30 09:58:00 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5254568Z 2025-08-30 09:58:00 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5254662Z 2025-08-30 09:58:00 DEBUG TA Analysis Launched
2025-08-30T09:58:47.5254812Z 2025-08-30 09:58:00 DEBUG Populating indicators for pair UNITTEST/BTC.
2025-08-30T09:58:47.5255012Z 2025-08-30 09:58:00 DEBUG Populating enter signals for pair UNITTEST/BTC.
2025-08-30T09:58:47.5255156Z 2025-08-30 09:58:00 DEBUG Populating exit signals for pair UNITTEST/BTC.
2025-08-30T09:58:47.5255246Z 2025-08-30 09:58:00 DEBUG TA Analysis Ended
2025-08-30T09:58:47.5255390Z --------------------------- Captured stderr teardown ---------------------------
2025-08-30T09:58:47.5255644Z 2025-08-30 09:58:01,204 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5255780Z ---------------------------- Captured log teardown -----------------------------
2025-08-30T09:58:47.5255921Z 2025-08-30 09:58:01 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5256064Z ____________________ test_api_patch_backtest_market_change _____________________
2025-08-30T09:58:47.5256071Z 
2025-08-30T09:58:47.5256461Z botclient = (<freqtrade.freqtradebot.FreqtradeBot object at 0x7f64fb7d5d10>, <starlette.testclient.TestClient object at 0x7f64fb8d3c50>)
2025-08-30T09:58:47.5256679Z tmp_path = PosixPath('/tmp/pytest-of-runner/pytest-0/test_api_patch_backtest_market0')
2025-08-30T09:58:47.5256684Z 
2025-08-30T09:58:47.5256844Z     def test_api_patch_backtest_market_change(botclient, tmp_path: Path):
2025-08-30T09:58:47.5256923Z         ftbot, client = botclient
2025-08-30T09:58:47.5256984Z     
2025-08-30T09:58:47.5257075Z         # Create a temporary directory and file
2025-08-30T09:58:47.5257178Z         bt_results_base = tmp_path / "backtest_results"
2025-08-30T09:58:47.5257259Z         bt_results_base.mkdir()
2025-08-30T09:58:47.5257392Z         file_path = bt_results_base / "test_22_market_change.feather"
2025-08-30T09:58:47.5257464Z         df = pd.DataFrame(
2025-08-30T09:58:47.5257527Z             {
2025-08-30T09:58:47.5257635Z                 "date": ["2018-01-01T00:00:00Z", "2018-01-01T00:05:00Z"],
2025-08-30T09:58:47.5257769Z                 "count": [2, 4],
2025-08-30T09:58:47.5257841Z                 "mean": [2555, 2556],
2025-08-30T09:58:47.5257921Z                 "rel_mean": [0, 0.022],
2025-08-30T09:58:47.5257979Z             }
2025-08-30T09:58:47.5258036Z         )
2025-08-30T09:58:47.5258128Z         df["date"] = pd.to_datetime(df["date"])
2025-08-30T09:58:47.5258330Z         df.to_feather(file_path, compression_level=9, compression="lz4")
2025-08-30T09:58:47.5258402Z         # Nonexisting file
2025-08-30T09:58:47.5258595Z         rc = client_get(client, f"{BASE_URI}/backtest/history/randomFile.json/market_change")
2025-08-30T09:58:47.5258676Z         assert_response(rc, 503)
2025-08-30T09:58:47.5258732Z     
2025-08-30T09:58:47.5258822Z         ftbot.config["user_data_dir"] = tmp_path
2025-08-30T09:58:47.5258922Z         ftbot.config["runmode"] = RunMode.WEBSERVER
2025-08-30T09:58:47.5258979Z     
2025-08-30T09:58:47.5259165Z         rc = client_get(client, f"{BASE_URI}/backtest/history/randomFile.json/market_change")
2025-08-30T09:58:47.5259246Z         assert_response(rc, 404)
2025-08-30T09:58:47.5259301Z     
2025-08-30T09:58:47.5259467Z         rc = client_get(client, f"{BASE_URI}/backtest/history/test_22/market_change")
2025-08-30T09:58:47.5259538Z         assert_response(rc, 200)
2025-08-30T09:58:47.5259656Z         result = rc.json()
2025-08-30T09:58:47.5259734Z         assert result["length"] == 2
2025-08-30T09:58:47.5259897Z >       assert result["columns"] == ["date", "count", "mean", "rel_mean", "__date_ts"]
2025-08-30T09:58:47.5260096Z E       AssertionError: assert ['date', 'cou...', 'rel_mean'] == ['date', 'cou..., '__date_ts']
2025-08-30T09:58:47.5260156Z E         
2025-08-30T09:58:47.5260250Z E         Right contains one more item: '__date_ts'
2025-08-30T09:58:47.5260314Z E         
2025-08-30T09:58:47.5260378Z E         Full diff:
2025-08-30T09:58:47.5260436Z E           [
2025-08-30T09:58:47.5260499Z E               'date',
2025-08-30T09:58:47.5260571Z E               'count',
2025-08-30T09:58:47.5260632Z E               'mean',
2025-08-30T09:58:47.5260697Z E               'rel_mean',
2025-08-30T09:58:47.5260814Z E         -     '__date_ts',
2025-08-30T09:58:47.5260874Z E           ]
2025-08-30T09:58:47.5260879Z 
2025-08-30T09:58:47.5260997Z tests/rpc/test_rpc_apiserver.py:3102: AssertionError
2025-08-30T09:58:47.5261153Z ---------------------------- Captured stderr setup -----------------------------
2025-08-30T09:58:47.5261422Z 2025-08-30 09:58:03,461 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5261669Z 2025-08-30 09:58:03,464 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5261910Z 2025-08-30 09:58:03,465 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5262158Z 2025-08-30 09:58:03,466 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5262400Z 2025-08-30 09:58:03,468 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5262641Z 2025-08-30 09:58:03,470 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5262892Z 2025-08-30 09:58:03,471 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5263138Z 2025-08-30 09:58:03,473 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5263480Z 2025-08-30 09:58:03,474 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5263735Z 2025-08-30 09:58:03,476 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5263980Z 2025-08-30 09:58:03,477 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5264220Z 2025-08-30 09:58:03,478 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5264538Z 2025-08-30 09:58:03,480 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5264781Z 2025-08-30 09:58:03,481 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5265079Z 2025-08-30 09:58:03,482 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5265330Z 2025-08-30 09:58:03,483 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5265491Z 2025-08-30 09:58:03,589 - freqtrade.loggers - INFO - Enabling colorized output.
2025-08-30T09:58:47.5265631Z 2025-08-30 09:58:03,589 - freqtrade.loggers - INFO - Logfile configured
2025-08-30T09:58:47.5265772Z 2025-08-30 09:58:03,590 - freqtrade.loggers - INFO - Verbosity set to 3
2025-08-30T09:58:47.5265913Z 2025-08-30 09:58:03,595 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5266147Z 2025-08-30 09:58:03,596 - freqtrade.exchange.exchange - INFO - Instance is running with dry_run enabled
2025-08-30T09:58:47.5266314Z 2025-08-30 09:58:03,596 - freqtrade.exchange.exchange - INFO - Using CCXT 4.5.2
2025-08-30T09:58:47.5266498Z 2025-08-30 09:58:03,597 - freqtrade.exchange.exchange - INFO - Using Exchange "Binance"
2025-08-30T09:58:47.5266784Z 2025-08-30 09:58:03,597 - freqtrade.exchange.exchange - DEBUG - Performing scheduled market reload..
2025-08-30T09:58:47.5267039Z 2025-08-30 09:58:03,599 - freqtrade.resolvers.exchange_resolver - INFO - Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5267484Z 2025-08-30 09:58:03,599 - freqtrade.resolvers.iresolver - DEBUG - Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5268026Z 2025-08-30 09:58:03,600 - freqtrade.resolvers.iresolver - WARNING - Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 
2025-08-30T09:58:47.5268105Z 'nonexiting_module''
2025-08-30T09:58:47.5268718Z 2025-08-30 09:58:03,601 - freqtrade.resolvers.iresolver - INFO - Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5268901Z 2025-08-30 09:58:03,602 - freqtrade.strategy.hyper - INFO - Found no parameter file.
2025-08-30T09:58:47.5269357Z 2025-08-30 09:58:03,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5269679Z 2025-08-30 09:58:03,602 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5269997Z 2025-08-30 09:58:03,603 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5270338Z 2025-08-30 09:58:03,603 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5270673Z 2025-08-30 09:58:03,603 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5271079Z 2025-08-30 09:58:03,604 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5271413Z 2025-08-30 09:58:03,604 - freqtrade.resolvers.strategy_resolver - INFO - Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5271751Z 2025-08-30 09:58:03,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5271980Z 2025-08-30 09:58:03,604 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using timeframe: 5m
2025-08-30T09:58:47.5272214Z 2025-08-30 09:58:03,605 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stoploss: -0.1
2025-08-30T09:58:47.5272510Z 2025-08-30 09:58:03,605 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop: False
2025-08-30T09:58:47.5272803Z 2025-08-30 09:58:03,605 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5273146Z 2025-08-30 09:58:03,605 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5273513Z 2025-08-30 09:58:03,606 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5273804Z 2025-08-30 09:58:03,606 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5274268Z 2025-08-30 09:58:03,606 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5274605Z 2025-08-30 09:58:03,607 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5274851Z 2025-08-30 09:58:03,607 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_currency: BTC
2025-08-30T09:58:47.5275095Z 2025-08-30 09:58:03,607 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5275421Z 2025-08-30 09:58:03,607 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5275729Z 2025-08-30 09:58:03,608 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5275979Z 2025-08-30 09:58:03,608 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using use_exit_signal: True
2025-08-30T09:58:47.5276232Z 2025-08-30 09:58:03,608 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_only: False
2025-08-30T09:58:47.5276516Z 2025-08-30 09:58:03,608 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5276833Z 2025-08-30 09:58:03,609 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5277114Z 2025-08-30 09:58:03,609 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5277412Z 2025-08-30 09:58:03,609 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5277702Z 2025-08-30 09:58:03,609 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5277985Z 2025-08-30 09:58:03,610 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5278227Z 2025-08-30 09:58:03,610 - freqtrade.resolvers.strategy_resolver - INFO - Strategy using max_open_trades: 1
2025-08-30T09:58:47.5278482Z 2025-08-30 09:58:03,610 - freqtrade.configuration.config_validation - INFO - Validating configuration ...
2025-08-30T09:58:47.5278677Z 2025-08-30 09:58:03,618 - freqtrade.persistence.migrations - DEBUG - trying trades_bak0
2025-08-30T09:58:47.5278864Z 2025-08-30 09:58:03,619 - freqtrade.persistence.migrations - DEBUG - trying orders_bak0
2025-08-30T09:58:47.5279075Z 2025-08-30 09:58:03,619 - freqtrade.persistence.migrations - DEBUG - trying pairlocks_bak0
2025-08-30T09:58:47.5279208Z 2025-08-30 09:58:03,625 - freqtrade.wallets - INFO - Wallets synced.
2025-08-30T09:58:47.5279676Z 2025-08-30 09:58:03,625 - freqtrade.resolvers.iresolver - DEBUG - Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5280085Z 2025-08-30 09:58:03,626 - freqtrade.resolvers.iresolver - DEBUG - Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5280643Z 2025-08-30 09:58:03,629 - freqtrade.resolvers.iresolver - INFO - Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5280904Z 2025-08-30 09:58:03,629 - freqtrade.freqtradebot - INFO - Starting initial pairlist refresh
2025-08-30T09:58:47.5281110Z 2025-08-30 09:58:03,630 - freqtrade.freqtradebot - INFO - Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5281399Z 2025-08-30 09:58:03,630 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5281602Z 2025-08-30 09:58:03,631 - freqtrade.strategy.hyper - INFO - Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5281938Z 2025-08-30 09:58:03,631 - freqtrade.strategy.hyper - WARNING - Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5282141Z 2025-08-30 09:58:03,631 - freqtrade.strategy.hyper - INFO - Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5282389Z 2025-08-30 09:58:03,632 - freqtrade.strategy.hyper - INFO - No params for protection found, using default values.
2025-08-30T09:58:47.5282684Z 2025-08-30 09:58:03,632 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5282938Z 2025-08-30 09:58:03,632 - freqtrade.strategy.hyper - INFO - Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5283225Z 2025-08-30 09:58:03,633 - freqtrade.plugins.protectionmanager - INFO - No protection Handlers defined.
2025-08-30T09:58:47.5283541Z 2025-08-30 09:58:03,684 - asyncio - DEBUG - Using selector: EpollSelector
2025-08-30T09:58:47.5283719Z ------------------------------ Captured log setup ------------------------------
2025-08-30T09:58:47.5283867Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5284010Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5284146Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5284280Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5292749Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5292929Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5293075Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5293225Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5293506Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5293643Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5293781Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5293915Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5294046Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5294187Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5294322Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5294456Z 2025-08-30 09:58:03 DEBUG Exchange object destroyed, closing async loop
2025-08-30T09:58:47.5294561Z 2025-08-30 09:58:03 INFO Enabling colorized output.
2025-08-30T09:58:47.5294659Z 2025-08-30 09:58:03 INFO Logfile configured
2025-08-30T09:58:47.5294738Z 2025-08-30 09:58:03 INFO Verbosity set to 3
2025-08-30T09:58:47.5294851Z 2025-08-30 09:58:03 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5294988Z 2025-08-30 09:58:03 INFO Instance is running with dry_run enabled
2025-08-30T09:58:47.5295068Z 2025-08-30 09:58:03 INFO Using CCXT 4.5.2
2025-08-30T09:58:47.5295162Z 2025-08-30 09:58:03 INFO Using Exchange "Binance"
2025-08-30T09:58:47.5295301Z 2025-08-30 09:58:03 DEBUG Performing scheduled market reload..
2025-08-30T09:58:47.5295425Z 2025-08-30 09:58:03 INFO Using resolved exchange 'Binance'...
2025-08-30T09:58:47.5295847Z 2025-08-30 09:58:03 DEBUG Searching for IStrategy StrategyTestV3 in '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats'
2025-08-30T09:58:47.5296353Z 2025-08-30 09:58:03 WARNING Could not import /home/runner/work/freqtrade/freqtrade/tests/strategy/strats/failing_strategy.py due to 'No module named 'nonexiting_module''
2025-08-30T09:58:47.5296842Z 2025-08-30 09:58:03 INFO Using resolved strategy StrategyTestV3 from '/home/runner/work/freqtrade/freqtrade/tests/strategy/strats/strategy_test_v3.py'...
2025-08-30T09:58:47.5296946Z 2025-08-30 09:58:03 INFO Found no parameter file.
2025-08-30T09:58:47.5297244Z 2025-08-30 09:58:03 INFO Override strategy 'minimal_roi' with value in config file: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}.
2025-08-30T09:58:47.5297423Z 2025-08-30 09:58:03 INFO Override strategy 'timeframe' with value in config file: 5m.
2025-08-30T09:58:47.5297608Z 2025-08-30 09:58:03 INFO Override strategy 'stoploss' with value in config file: -0.1.
2025-08-30T09:58:47.5297812Z 2025-08-30 09:58:03 INFO Override strategy 'stake_currency' with value in config file: BTC.
2025-08-30T09:58:47.5298003Z 2025-08-30 09:58:03 INFO Override strategy 'stake_amount' with value in config file: 0.001.
2025-08-30T09:58:47.5298266Z 2025-08-30 09:58:03 INFO Override strategy 'unfilledtimeout' with value in config file: {'entry': 10, 'exit': 30}.
2025-08-30T09:58:47.5298521Z 2025-08-30 09:58:03 INFO Override strategy 'max_open_trades' with value in config file: 1.
2025-08-30T09:58:47.5298725Z 2025-08-30 09:58:03 INFO Strategy using minimal_roi: {'40': 0.0, '30': 0.01, '20': 0.02, '0': 0.04}
2025-08-30T09:58:47.5298833Z 2025-08-30 09:58:03 INFO Strategy using timeframe: 5m
2025-08-30T09:58:47.5298940Z 2025-08-30 09:58:03 INFO Strategy using stoploss: -0.1
2025-08-30T09:58:47.5299065Z 2025-08-30 09:58:03 INFO Strategy using trailing_stop: False
2025-08-30T09:58:47.5299218Z 2025-08-30 09:58:03 INFO Strategy using trailing_stop_positive_offset: 0.0
2025-08-30T09:58:47.5299377Z 2025-08-30 09:58:03 INFO Strategy using trailing_only_offset_is_reached: False
2025-08-30T09:58:47.5299565Z 2025-08-30 09:58:03 INFO Strategy using use_custom_stoploss: False
2025-08-30T09:58:47.5299709Z 2025-08-30 09:58:03 INFO Strategy using process_only_new_candles: True
2025-08-30T09:58:47.5300012Z 2025-08-30 09:58:03 INFO Strategy using order_types: {'entry': 'limit', 'exit': 'limit', 'stoploss': 'limit', 'stoploss_on_exchange': False}
2025-08-30T09:58:47.5300210Z 2025-08-30 09:58:03 INFO Strategy using order_time_in_force: {'entry': 'gtc', 'exit': 'gtc'}
2025-08-30T09:58:47.5300325Z 2025-08-30 09:58:03 INFO Strategy using stake_currency: BTC
2025-08-30T09:58:47.5300435Z 2025-08-30 09:58:03 INFO Strategy using stake_amount: 0.001
2025-08-30T09:58:47.5300567Z 2025-08-30 09:58:03 INFO Strategy using startup_candle_count: 20
2025-08-30T09:58:47.5300737Z 2025-08-30 09:58:03 INFO Strategy using unfilledtimeout: {'entry': 10, 'exit': 30}
2025-08-30T09:58:47.5300856Z 2025-08-30 09:58:03 INFO Strategy using use_exit_signal: True
2025-08-30T09:58:47.5300981Z 2025-08-30 09:58:03 INFO Strategy using exit_profit_only: False
2025-08-30T09:58:47.5301133Z 2025-08-30 09:58:03 INFO Strategy using ignore_roi_if_entry_signal: False
2025-08-30T09:58:47.5301253Z 2025-08-30 09:58:03 INFO Strategy using exit_profit_offset: 0.0
2025-08-30T09:58:47.5301392Z 2025-08-30 09:58:03 INFO Strategy using disable_dataframe_checks: False
2025-08-30T09:58:47.5301556Z 2025-08-30 09:58:03 INFO Strategy using ignore_buying_expired_candle_after: 0
2025-08-30T09:58:47.5301701Z 2025-08-30 09:58:03 INFO Strategy using position_adjustment_enable: False
2025-08-30T09:58:47.5301842Z 2025-08-30 09:58:03 INFO Strategy using max_entry_position_adjustment: -1
2025-08-30T09:58:47.5301960Z 2025-08-30 09:58:03 INFO Strategy using max_open_trades: 1
2025-08-30T09:58:47.5302066Z 2025-08-30 09:58:03 INFO Validating configuration ...
2025-08-30T09:58:47.5302156Z 2025-08-30 09:58:03 DEBUG trying trades_bak0
2025-08-30T09:58:47.5302249Z 2025-08-30 09:58:03 DEBUG trying orders_bak0
2025-08-30T09:58:47.5302393Z 2025-08-30 09:58:03 DEBUG trying pairlocks_bak0
2025-08-30T09:58:47.5302471Z 2025-08-30 09:58:03 INFO Wallets synced.
2025-08-30T09:58:47.5302837Z 2025-08-30 09:58:03 DEBUG Searching for IPairList StaticPairList in '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist'
2025-08-30T09:58:47.5303169Z 2025-08-30 09:58:03 DEBUG Ignoring /home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/__pycache__
2025-08-30T09:58:47.5303711Z 2025-08-30 09:58:03 INFO Using resolved pairlist StaticPairList from '/home/runner/work/freqtrade/freqtrade/freqtrade/plugins/pairlist/StaticPairList.py'...
2025-08-30T09:58:47.5303830Z 2025-08-30 09:58:03 INFO Starting initial pairlist refresh
2025-08-30T09:58:47.5303956Z 2025-08-30 09:58:03 INFO Initial Pairlist refresh took 0.00s
2025-08-30T09:58:47.5304101Z 2025-08-30 09:58:03 INFO Strategy Parameter(default): buy_plusdi = 0.5
2025-08-30T09:58:47.5304211Z 2025-08-30 09:58:03 INFO Strategy Parameter: buy_rsi = 35
2025-08-30T09:58:47.5304452Z 2025-08-30 09:58:03 WARNING Parameter "sell_minusdi" exists, but is disabled. Default value "0.5" used.
2025-08-30T09:58:47.5304564Z 2025-08-30 09:58:03 INFO Strategy Parameter: sell_rsi = 74
2025-08-30T09:58:47.5304717Z 2025-08-30 09:58:03 INFO No params for protection found, using default values.
2025-08-30T09:58:47.5305001Z 2025-08-30 09:58:03 INFO Strategy Parameter(default): protection_cooldown_lookback = 30
2025-08-30T09:58:47.5305165Z 2025-08-30 09:58:03 INFO Strategy Parameter(default): protection_enabled = True
2025-08-30T09:58:47.5305276Z 2025-08-30 09:58:03 INFO No protection Handlers defined.
2025-08-30T09:58:47.5305390Z 2025-08-30 09:58:03 DEBUG Using selector: EpollSelector
2025-08-30T09:58:47.5305495Z =============================== warnings summary ===============================
2025-08-30T09:58:47.5305604Z tests/optimize/test_performance_benchmark.py:124
2025-08-30T09:58:47.5305959Z   /home/runner/work/freqtrade/freqtrade/tests/optimize/test_performance_benchmark.py:124: PytestUnknownMarkWarning:
2025-08-30T09:58:47.5306030Z   
2025-08-30T09:58:47.5306533Z   Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
2025-08-30T09:58:47.5306541Z 
2025-08-30T09:58:47.5306656Z tests/optimize/test_performance_benchmark.py:189
2025-08-30T09:58:47.5307013Z   /home/runner/work/freqtrade/freqtrade/tests/optimize/test_performance_benchmark.py:189: PytestUnknownMarkWarning:
2025-08-30T09:58:47.5307072Z   
2025-08-30T09:58:47.5307492Z   Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
2025-08-30T09:58:47.5307503Z 
2025-08-30T09:58:47.5307611Z tests/optimize/test_performance_benchmark.py:253
2025-08-30T09:58:47.5307951Z   /home/runner/work/freqtrade/freqtrade/tests/optimize/test_performance_benchmark.py:253: PytestUnknownMarkWarning:
2025-08-30T09:58:47.5308009Z   
2025-08-30T09:58:47.5308429Z   Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
2025-08-30T09:58:47.5308434Z 
2025-08-30T09:58:47.5308553Z test_ipc_reading.py::test_ipc_reading
2025-08-30T09:58:47.5308927Z   /home/runner/work/freqtrade/freqtrade/.venv/lib/python3.11/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning:
2025-08-30T09:58:47.5308991Z   
2025-08-30T09:58:47.5309241Z   Test functions should return None, but test_ipc_reading.py::test_ipc_reading returned <class 'bool'>.
2025-08-30T09:58:47.5309349Z   Did you mean to use `assert` instead of `return`?
2025-08-30T09:58:47.5309604Z   See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
2025-08-30T09:58:47.5309609Z 
2025-08-30T09:58:47.5309780Z -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
2025-08-30T09:58:47.5309900Z =========================== short test summary info ============================
2025-08-30T09:58:47.5310249Z FAILED tests/test_plotting.py::test_add_areas - AttributeError: 'DataFrame' object has no attribute 'date'
2025-08-30T09:58:47.5310477Z FAILED tests/test_plotting.py::test_add_profit - KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.5310642Z FAILED tests/test_plotting.py::test_add_indicators - KeyError: 'date'
2025-08-30T09:58:47.5311085Z FAILED tests/test_plotting.py::test_generate_candlestick_graph_no_signals_no_trades - AttributeError: 'DataFrame' object has no attribute 'date'
2025-08-30T09:58:47.5311646Z FAILED tests/test_plotting.py::test_generate_profit_graph - freqtrade.exceptions.OperationalException: No data found. Please make sure that data is available for the timerange and pairs selected.
2025-08-30T09:58:47.5311998Z FAILED tests/test_plotting.py::test_generate_candlestick_graph_no_trades - AttributeError: 'DataFrame' object has no attribute 'date'
2025-08-30T09:58:47.5312640Z FAILED tests/data/test_datahandler.py::test_generic_datahandler_ohlcv_load_and_resave[feather-UNITTEST/BTC-5m-spot--2018-01-15-2018-01-19] - TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.5313307Z FAILED tests/data/test_datahandler.py::test_generic_datahandler_ohlcv_load_and_resave[feather-UNITTEST/USDT:USDT-1h-mark--mark-2021-11-16-2021-11-18] - TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.5314122Z FAILED tests/data/test_datahandler.py::test_generic_datahandler_ohlcv_load_and_resave[parquet-UNITTEST/BTC-5m-spot--2018-01-15-2018-01-19] - TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.5314799Z FAILED tests/data/test_datahandler.py::test_generic_datahandler_ohlcv_load_and_resave[parquet-UNITTEST/USDT:USDT-1h-mark--mark-2021-11-16-2021-11-18] - TypeError: Invalid comparison between dtype=timestamp[ns, tz=UTC][pyarrow] and str
2025-08-30T09:58:47.5315057Z FAILED tests/optimize/test_lookahead_analysis.py::test_biased_strategy[no_bias] - KeyError: 'date'
2025-08-30T09:58:47.5315370Z FAILED tests/optimize/test_lookahead_analysis.py::test_biased_strategy[bias1] - KeyError: 'date'
2025-08-30T09:58:47.5315837Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[PyTorchTransformerRegressor-2-freqai_test_strat] - KeyError: 'date'
2025-08-30T09:58:47.5316232Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[PyTorchMLPClassifier-2-freqai_test_classifier] - KeyError: 'date'
2025-08-30T09:58:47.5316605Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[ReinforcementLearner-3-freqai_rl_test_strat] - KeyError: 'date'
2025-08-30T09:58:47.5317101Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_MultiTargets[CatboostRegressorMultiTarget-freqai_test_multimodel_strat] - KeyError: 'date'
2025-08-30T09:58:47.5317585Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_MultiTargets[XGBoostRegressorMultiTarget-freqai_test_multimodel_strat] - KeyError: 'date'
2025-08-30T09:58:47.5317942Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Classifiers[XGBoostRFClassifier] - KeyError: 'date'
2025-08-30T09:58:47.5318474Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_MultiTargets[LightGBMClassifierMultiTarget-freqai_test_multimodel_classifier_strat] - KeyError: 'date'
2025-08-30T09:58:47.5318816Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Classifiers[XGBoostClassifier] - KeyError: 'date'
2025-08-30T09:58:47.5319118Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting_subdaily_backtest_period - KeyError: 'date'
2025-08-30T09:58:47.5319504Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Classifiers[SKLearnRandomForestClassifier] - KeyError: 'date'
2025-08-30T09:58:47.5319766Z FAILED tests/freqai/test_freqai_interface.py::test_backtesting_fit_live_predictions - KeyError: 'date'
2025-08-30T09:58:47.5320188Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Classifiers[PyTorchMLPClassifier] - KeyError: 'date'
2025-08-30T09:58:47.5320658Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[ReinforcementLearner-False-True-False-True-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5321222Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[ReinforcementLearner_multiproc-False-False-False-True-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5321702Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[PyTorchMLPRegressor-False-False-False-False-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5321984Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting_from_existing_folder - KeyError: 'date'
2025-08-30T09:58:47.5322222Z FAILED tests/freqai/test_freqai_interface.py::test_plot_feature_importance - KeyError: 'date'
2025-08-30T09:58:47.5322741Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[PyTorchTransformerRegressor-False-False-False-False-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5323274Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_MultiTargets[CatboostClassifierMultiTarget-freqai_test_multimodel_classifier_strat] - KeyError: 'date'
2025-08-30T09:58:47.5324091Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_MultiTargets[LightGBMRegressorMultiTarget-freqai_test_multimodel_strat] - KeyError: 'date'
2025-08-30T09:58:47.5324454Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[CatboostRegressor-2-freqai_test_strat] - KeyError: 'date'
2025-08-30T09:58:47.5324904Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[LightGBMRegressor-True-False-True-True-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5325273Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[CatboostClassifier-2-freqai_test_classifier] - KeyError: 'date'
2025-08-30T09:58:47.5325723Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Classifiers[CatboostClassifier] - KeyError: 'date'
2025-08-30T09:58:47.5326193Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[XGBoostRFRegressor-False-False-False-True-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5326546Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[XGBoostRegressor-2-freqai_test_strat] - KeyError: 'date'
2025-08-30T09:58:47.5326942Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[XGBoostClassifier-2-freqai_test_classifier] - KeyError: 'date'
2025-08-30T09:58:47.5327312Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[LightGBMClassifier-2-freqai_test_classifier] - KeyError: 'date'
2025-08-30T09:58:47.5327671Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[PyTorchMLPRegressor-2-freqai_test_strat] - KeyError: 'date'
2025-08-30T09:58:47.5328022Z FAILED tests/freqai/test_freqai_interface.py::test_start_backtesting[LightGBMRegressor-2-freqai_test_strat] - KeyError: 'date'
2025-08-30T09:58:47.5328486Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[XGBoostRegressor-False-True-False-True-False-10-0.05] - KeyError: 'date'
2025-08-30T09:58:47.5328977Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[ReinforcementLearner_test_4ac-False-False-False-True-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5329321Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Classifiers[LightGBMClassifier] - KeyError: 'date'
2025-08-30T09:58:47.5329770Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[CatboostRegressor-False-False-False-True-True-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5330253Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[ReinforcementLearner_test_3ac-False-False-False-True-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5330802Z FAILED tests/freqai/test_freqai_interface.py::test_extract_data_and_train_model_Standard[ReinforcementLearner_test_3ac-False-False-False-False-False-0-0] - KeyError: 'date'
2025-08-30T09:58:47.5331086Z FAILED tests/persistence/test_db_context.py::test_FtNoDBContext[1d] - assert False is True
2025-08-30T09:58:47.5331176Z  +  where False = Trade.use_db
2025-08-30T09:58:47.5331404Z FAILED tests/persistence/test_db_context.py::test_FtNoDBContext[5m] - assert False is True
2025-08-30T09:58:47.5331479Z  +  where False = Trade.use_db
2025-08-30T09:58:47.5331704Z FAILED tests/persistence/test_db_context.py::test_FtNoDBContext[] - assert False is True
2025-08-30T09:58:47.5331776Z  +  where False = Trade.use_db
2025-08-30T09:58:47.5332127Z FAILED tests/optimize/test_backtesting.py::test_backtest_multi_pair[30-ADA/BTC] - ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.5333071Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta3-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5334574Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta3-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5335493Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta0-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5336486Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta1-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5337421Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta0-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5337658Z FAILED tests/optimize/test_backtesting.py::test_get_pair_precision_bt - KeyError: 'date'
2025-08-30T09:58:47.5338010Z FAILED tests/optimize/test_backtesting.py::test_backtest_multi_pair[20-ADA/BTC] - ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.5338367Z FAILED tests/optimize/test_backtesting.py::test_backtest_one_detail_futures_funding_fees[False-6-360-11--0.14679994] - KeyError: 'date'
2025-08-30T09:58:47.5338590Z FAILED tests/optimize/test_backtesting.py::test_backtest_only_sell - KeyError: 'date'
2025-08-30T09:58:47.5339486Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta0-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5339751Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_futures_noliq - KeyError: 'date'
2025-08-30T09:58:47.5339956Z FAILED tests/optimize/test_backtesting.py::test_backtest_one - KeyError: 'date'
2025-08-30T09:58:47.5340235Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[None-raise-19_1] - KeyError: 'date'
2025-08-30T09:58:47.5340506Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[None-sine-35_1] - KeyError: 'date'
2025-08-30T09:58:47.5340811Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[protections6-raise-10] - KeyError: 'date'
2025-08-30T09:58:47.5341692Z FAILED tests/optimize/test_backtesting.py::test_backtest_one_detail_futures[False--0.01780296-6] - KeyError: 'date'
2025-08-30T09:58:47.5342036Z FAILED tests/optimize/test_backtesting.py::test_backtest_multi_pair[20-LTC/BTC] - ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.5342367Z FAILED tests/optimize/test_backtesting.py::test_backtest_multi_pair[0-ADA/BTC] - KeyError: 'date'
2025-08-30T09:58:47.5342612Z FAILED tests/optimize/test_backtesting.py::test_backtest_timedout_entry_orders - KeyError: 'date'
2025-08-30T09:58:47.5342848Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat - KeyError: 'date'
2025-08-30T09:58:47.5343862Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta1-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5344230Z FAILED tests/optimize/test_backtesting.py::test_backtest_one_detail_futures_funding_fees[True-50-3000-55--1.18038144] - KeyError: 'date'
2025-08-30T09:58:47.5344451Z FAILED tests/optimize/test_backtesting.py::test_data_to_dataframe_bt - KeyError: 'date'
2025-08-30T09:58:47.5344757Z FAILED tests/optimize/test_backtesting.py::test_backtest_one_detail[True] - KeyError: 'date'
2025-08-30T09:58:47.5344983Z FAILED tests/optimize/test_backtesting.py::test_backtest_clash_buy_sell - KeyError: 'date'
2025-08-30T09:58:47.5345870Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta2-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5346105Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_timerange - KeyError: 'date'
2025-08-30T09:58:47.5346365Z FAILED tests/optimize/test_backtesting.py::test_backtest_dataprovider_analyzed_df - KeyError: 'date'
2025-08-30T09:58:47.5346612Z FAILED tests/optimize/test_backtesting.py::test_processed - KeyError: 'date'
2025-08-30T09:58:47.5346961Z FAILED tests/optimize/test_backtesting.py::test_backtest_multi_pair[30-LTC/BTC] - ValueError: cannot insert level_0, already exists
2025-08-30T09:58:47.5347201Z FAILED tests/optimize/test_backtesting.py::test_backtest_alternate_buy_sell - KeyError: 'date'
2025-08-30T09:58:47.5348120Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta3-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5349043Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta1-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5349300Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_nomock - KeyError: 'date'
2025-08-30T09:58:47.5349600Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[protections7-lower-0] - KeyError: 'date'
2025-08-30T09:58:47.5350023Z FAILED tests/optimize/test_backtesting.py::test_backtesting_initialization - freqtrade.exceptions.OperationalException: No pair in whitelist.
2025-08-30T09:58:47.5350917Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta0-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5351807Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta2-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5352816Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta2-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5353802Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta1-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5354044Z FAILED tests/optimize/test_backtesting.py::test_backtest_one_detail[False] - KeyError: 'date'
2025-08-30T09:58:47.5354341Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[protections8-sine-9] - KeyError: 'date'
2025-08-30T09:58:47.5355257Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta0-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5355574Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_nomock_futures - KeyError: 'date'
2025-08-30T09:58:47.5356459Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta3-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5357437Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta2-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5357726Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_nomock_detail - KeyError: 'date'
2025-08-30T09:58:47.5358644Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta2-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5358886Z FAILED tests/optimize/test_backtesting.py::test_backtest_trim_no_data_left - KeyError: 'date'
2025-08-30T09:58:47.5359777Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta3-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5360061Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[None-sine-35_0] - KeyError: 'date'
2025-08-30T09:58:47.5360961Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta2-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5361189Z FAILED tests/optimize/test_backtesting.py::test_backtest_1min_timeframe - KeyError: 'date'
2025-08-30T09:58:47.5362113Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta2-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5362452Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[None-raise-19_0] - KeyError: 'date'
2025-08-30T09:58:47.5363544Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta3-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5364599Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta2-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5364917Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[protections9-raise-10] - KeyError: 'date'
2025-08-30T09:58:47.5365815Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta0-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5366720Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta1-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5367671Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta3-2] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5368586Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[day-start_delta0-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5369560Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta1-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5369870Z FAILED tests/optimize/test_backtesting.py::test_backtesting_start - KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.5370791Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[week-start_delta1-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5371711Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta0-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5371989Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[None-lower-0] - KeyError: 'date'
2025-08-30T09:58:47.5372915Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[month-start_delta1-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5373215Z FAILED tests/optimize/test_backtesting.py::test_backtest_one_detail_futures[True--0.018054162-10] - KeyError: 'date'
2025-08-30T09:58:47.5373572Z FAILED tests/optimize/test_backtesting.py::test_backtest_multi_pair[0-LTC/BTC] - KeyError: 'date'
2025-08-30T09:58:47.5374559Z FAILED tests/optimize/test_backtesting.py::test_backtest_start_multi_strat_caching[none-start_delta3-changed] - AttributeError: <module 'freqtrade.optimize.backtesting' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/backtesting.py'> does not have the attribute 'get_strategy_run_id'
2025-08-30T09:58:47.5374858Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours[protections5-sine-9] - KeyError: 'date'
2025-08-30T09:58:47.5375179Z FAILED tests/optimize/test_backtesting.py::test_backtest_pricecontours_protections - KeyError: 'date'
2025-08-30T09:58:47.5375524Z FAILED tests/data/test_historic_precision.py::test_get_tick_size_over_time_real_data - KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.5375755Z FAILED tests/strategy/test_interface.py::test_advise_all_indicators_copy - KeyError: 'date'
2025-08-30T09:58:47.5375975Z FAILED tests/strategy/test_interface.py::test_advise_all_indicators - KeyError: 'date'
2025-08-30T09:58:47.5376251Z FAILED tests/optimize/test_recursive_analysis.py::test_recursive_biased_strategy[bias1] - KeyError: 'date'
2025-08-30T09:58:47.5376529Z FAILED tests/optimize/test_recursive_analysis.py::test_recursive_biased_strategy[no_bias] - KeyError: 'date'
2025-08-30T09:58:47.5376804Z FAILED tests/optimize/test_recursive_analysis.py::test_recursive_biased_strategy[bias2] - KeyError: 'date'
2025-08-30T09:58:47.5377152Z FAILED tests/data/test_entryexitanalysis.py::test_backtest_analysis_with_invalid_config - KeyError: 'date'
2025-08-30T09:58:47.5377515Z FAILED tests/data/test_entryexitanalysis.py::test_backtest_analysis_on_entry_and_rejected_signals_only_entry_signals - KeyError: 'date'
2025-08-30T09:58:47.5377848Z FAILED tests/data/test_entryexitanalysis.py::test_backtest_analysis_on_entry_and_rejected_signals_nomock - KeyError: 'date'
2025-08-30T09:58:47.5378246Z FAILED tests/commands/test_commands.py::test_start_test_pairlist - TypeError: 'FtNoDBContext' object does not support the context manager protocol
2025-08-30T09:58:47.5378494Z FAILED tests/optimize/test_optimize_reports.py::test_generate_backtest_stats - KeyError: 'date'
2025-08-30T09:58:47.5378837Z FAILED tests/freqai/test_freqai_backtesting.py::test_freqai_backtest_consistent_timerange - KeyError: 'date'
2025-08-30T09:58:47.5379115Z FAILED tests/optimize/test_hyperopt_integration.py::test_get_shared_data_wrapper - assert None is not None
2025-08-30T09:58:47.5380090Z FAILED tests/optimize/test_hyperopt_integration.py::test_optimize_parallel_settings_configured - AttributeError: <module 'freqtrade.optimize.hyperopt_integration' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_integration.py'> does not have the attribute 'HyperoptResourceOptimizer'
2025-08-30T09:58:47.5381039Z FAILED tests/optimize/test_hyperopt_integration.py::test_optimize_parallel_settings_auto - AttributeError: <module 'freqtrade.optimize.hyperopt_integration' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_integration.py'> does not have the attribute 'HyperoptResourceOptimizer'
2025-08-30T09:58:47.5381390Z FAILED tests/optimize/test_hyperopt_integration.py::test_cleanup - AssertionError: assert <MagicMock id='140073995110288'> is None
2025-08-30T09:58:47.5381811Z  +  where <MagicMock id='140073995110288'> = <freqtrade.optimize.hyperopt_integration.HyperoptIntegration object at 0x7f6584b89750>.shared_memory_manager
2025-08-30T09:58:47.5382086Z FAILED tests/optimize/test_hyperopt_integration.py::test_setup_shared_memory_dict - KeyError: b'MemTotal:'
2025-08-30T09:58:47.5382397Z FAILED tests/optimize/test_hyperopt_integration.py::test_setup_shared_memory_not_recommended - KeyError: b'MemTotal:'
2025-08-30T09:58:47.5383302Z FAILED tests/optimize/test_hyperopt_integration.py::test_log_resource_status - AttributeError: <module 'freqtrade.optimize.hyperopt_integration' from '/home/runner/work/freqtrade/freqtrade/freqtrade/optimize/hyperopt_integration.py'> does not have the attribute 'HyperoptResourceOptimizer'
2025-08-30T09:58:47.5383610Z FAILED tests/data/test_btanalysis.py::test_calculate_market_change - KeyError: 'date'
2025-08-30T09:58:47.5383959Z FAILED tests/data/test_btanalysis.py::test_combine_dataframes_with_mean - ValueError: No data provided.
2025-08-30T09:58:47.5384241Z FAILED tests/data/test_btanalysis.py::test_combined_dataframes_with_rel_mean - ValueError: No data provided.
2025-08-30T09:58:47.5384449Z FAILED tests/data/test_btanalysis.py::test_extract_trades_of_period - KeyError: 'date'
2025-08-30T09:58:47.5384778Z FAILED tests/data/test_btanalysis.py::test_create_cum_profit - KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.5385060Z FAILED tests/data/test_btanalysis.py::test_create_cum_profit1 - KeyError: "None of ['date'] are in the columns"
2025-08-30T09:58:47.5385286Z FAILED tests/freqai/test_freqai_datakitchen.py::test_populate_features - KeyError: 'date'
2025-08-30T09:58:47.5385529Z FAILED tests/freqai/test_freqai_datakitchen.py::test_make_train_test_datasets - KeyError: 'date'
2025-08-30T09:58:47.5385817Z FAILED tests/freqai/test_freqai_datakitchen.py::test_get_full_model_path[LightGBMRegressor] - KeyError: 'date'
2025-08-30T09:58:47.5386036Z FAILED tests/freqai/test_freqai_datakitchen.py::test_filter_features - KeyError: 'date'
2025-08-30T09:58:47.5386342Z FAILED tests/freqai/test_freqai_datakitchen.py::test_get_pair_data_for_features_with_prealoaded_data - KeyError: 'date'
2025-08-30T09:58:47.5386660Z FAILED tests/freqai/test_freqai_datakitchen.py::test_get_pair_data_for_features_without_preloaded_data - KeyError: 'date'
2025-08-30T09:58:47.9930153Z 2025-08-30 09:58:47,992 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.9965628Z 2025-08-30 09:58:47,996 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.9976811Z 2025-08-30 09:58:47,997 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.9986379Z 2025-08-30 09:58:47,998 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:47.9995568Z 2025-08-30 09:58:47,999 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0005439Z 2025-08-30 09:58:48,000 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0009370Z 2025-08-30 09:58:48,000 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0015601Z 2025-08-30 09:58:48,001 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0022020Z 2025-08-30 09:58:48,001 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0025928Z 2025-08-30 09:58:48,002 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0030465Z 2025-08-30 09:58:48,002 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0036503Z 2025-08-30 09:58:48,003 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0040078Z 2025-08-30 09:58:48,003 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0044423Z 2025-08-30 09:58:48,004 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0050036Z 2025-08-30 09:58:48,004 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0054381Z 2025-08-30 09:58:48,005 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0059867Z 2025-08-30 09:58:48,005 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0063687Z 2025-08-30 09:58:48,006 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0071271Z 2025-08-30 09:58:48,006 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0075273Z 2025-08-30 09:58:48,007 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0079491Z 2025-08-30 09:58:48,007 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0085346Z 2025-08-30 09:58:48,008 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0089079Z 2025-08-30 09:58:48,008 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0095393Z 2025-08-30 09:58:48,009 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0099008Z 2025-08-30 09:58:48,009 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0104983Z 2025-08-30 09:58:48,010 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0108557Z 2025-08-30 09:58:48,010 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0117933Z 2025-08-30 09:58:48,011 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0121899Z 2025-08-30 09:58:48,011 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:48.0126950Z 2025-08-30 09:58:48,012 - freqtrade.exchange.exchange - DEBUG - Exchange object destroyed, closing async loop
2025-08-30T09:58:49.8538765Z FAILED tests/optimize/test_performance_benchmark.py::test_vectorized_vs_standard_performance - ZeroDivisionError: float division by zero
2025-08-30T09:58:49.8540171Z FAILED tests/data/test_history.py::test_validate_backtest_data - KeyError: 'date'
2025-08-30T09:58:49.8541002Z FAILED tests/data/test_history.py::test_get_timerange - KeyError: 'date'
2025-08-30T09:58:49.8541797Z FAILED tests/freqai/test_freqai_datadrawer.py::test_update_historic_data - KeyError: 'date'
2025-08-30T09:58:49.8542761Z FAILED tests/freqai/test_freqai_datadrawer.py::test_get_base_and_corr_dataframes - KeyError: 'date'
2025-08-30T09:58:49.8544258Z FAILED tests/freqai/test_freqai_datadrawer.py::test_get_timerange_from_live_historic_predictions - KeyError: 'date'
2025-08-30T09:58:49.8545334Z FAILED tests/freqai/test_freqai_datadrawer.py::test_use_strategy_to_populate_indicators - KeyError: 'date'
2025-08-30T09:58:49.8546401Z FAILED tests/optimize/test_shared_memory_manager.py::test_share_dict - TypeError: unhashable type: 'dict'
2025-08-30T09:58:49.8547506Z FAILED tests/optimize/test_shared_memory_manager.py::test_cleanup_dict_with_subdataframes - TypeError: unhashable type: 'dict'
2025-08-30T09:58:49.8548618Z FAILED tests/optimize/test_shared_memory_manager.py::test_get_dict - TypeError: unhashable type: 'dict'
2025-08-30T09:58:49.8549884Z FAILED tests/optimize/test_shared_memory_manager.py::test_get_dataframe - AttributeError: 'SharedMemoryManager' object has no attribute 'get_dataframe'
2025-08-30T09:58:49.8551612Z FAILED tests/optimize/test_shared_memory_manager.py::test_error_handling_nonexistent_key - AttributeError: 'SharedMemoryManager' object has no attribute 'get_dataframe'
2025-08-30T09:58:49.8553682Z FAILED tests/optimize/test_shared_memory_manager.py::test_custom_key - AttributeError: 'SharedMemoryManager' object has no attribute 'get_dataframe'
2025-08-30T09:58:49.8555325Z FAILED tests/optimize/test_backtesting_adjust_position.py::test_backtest_position_adjustment_detailed[2] - NameError: name 'FtPrecise' is not defined
2025-08-30T09:58:49.8556693Z FAILED tests/optimize/test_backtesting_adjust_position.py::test_backtest_position_adjustment - KeyError: 'date'
2025-08-30T09:58:49.8558149Z FAILED tests/optimize/test_backtesting_adjust_position.py::test_backtest_position_adjustment_detailed[1] - NameError: name 'FtPrecise' is not defined
2025-08-30T09:58:49.8559499Z FAILED tests/persistence/test_trade_custom_data.py::test_trade_custom_data[False] - IndexError: list index out of range
2025-08-30T09:58:49.8561542Z FAILED tests/optimize/test_hyperopt_shared_memory_integration.py::TestHyperoptSharedMemoryIntegration::test_resource_optimization_with_shared_memory - TypeError: unsupported format string passed to MagicMock.__format__
2025-08-30T09:58:49.8564285Z FAILED tests/optimize/test_hyperopt_shared_memory_integration.py::TestHyperoptSharedMemoryIntegration::test_memory_estimation_and_limits - TypeError: unsupported format string passed to MagicMock.__format__
2025-08-30T09:58:49.8566470Z FAILED tests/optimize/test_hyperopt_shared_memory_integration.py::TestHyperoptSharedMemoryIntegration::test_parallel_worker_shared_memory_access - assert None is not None
2025-08-30T09:58:49.8568096Z FAILED tests/optimize/test_backtest_detail.py::test_backtest_results[data57] - NameError: name 'FtPrecise' is not defined
2025-08-30T09:58:49.8569272Z FAILED tests/data/test_converter.py::test_ohlcv_fill_up_missing_data - AssertionError: assert np.False_
2025-08-30T09:58:49.8570227Z  +  where np.False_ = <built-in method all of numpy.ndarray object at 0x7f64da7e65b0>()
2025-08-30T09:58:49.8571303Z  +    where <built-in method all of numpy.ndarray object at 0x7f64da7e65b0> = Index(['date'...type='object') == Index(['index...type='object')
2025-08-30T09:58:49.8572137Z       
2025-08-30T09:58:49.8572398Z       Full diff:
2025-08-30T09:58:49.8572938Z       - Index(['index', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:49.8573622Z       ?         --  -
2025-08-30T09:58:49.8574070Z       + Index(['date', 'open', 'high', 'low', 'close', 'volume'], dtype='object')
2025-08-30T09:58:49.8574587Z       ?          ++.all
2025-08-30T09:58:49.8575117Z FAILED tests/data/test_converter.py::test_trim_dataframe - KeyError: 'date'
2025-08-30T09:58:49.8575959Z FAILED tests/optimize/test_hyperopt.py::test_populate_indicators - KeyError: 'date'
2025-08-30T09:58:49.8576953Z FAILED tests/optimize/test_hyperopt.py::test_stake_amount_unlimited_max_open_trades - KeyError: 'date'
2025-08-30T09:58:49.8577937Z FAILED tests/optimize/test_hyperopt.py::test_max_open_trades_dump - KeyError: 'date'
2025-08-30T09:58:49.8579009Z FAILED tests/optimize/test_hyperopt.py::test_in_strategy_auto_hyperopt_per_epoch - KeyError: 'date'
2025-08-30T09:58:49.8580004Z FAILED tests/optimize/test_hyperopt.py::test_in_strategy_auto_hyperopt - KeyError: 'date'
2025-08-30T09:58:49.8580965Z FAILED tests/optimize/test_hyperopt.py::test_max_open_trades_consistency - KeyError: 'date'
2025-08-30T09:58:49.8582139Z FAILED tests/optimize/test_hyperopt.py::test_in_strategy_auto_hyperopt_with_parallel - KeyError: 'date'
2025-08-30T09:58:49.8583217Z FAILED tests/rpc/test_rpc_apiserver.py::test_api_backtesting - AssertionError: assert 'error' == 'ended'
2025-08-30T09:58:49.8584086Z   
2025-08-30T09:58:49.8584330Z   - ended
2025-08-30T09:58:49.8584588Z   + error
2025-08-30T09:58:49.8585279Z FAILED tests/rpc/test_rpc_apiserver.py::test_api_pairlists_evaluate - TypeError: 'NoneType' object is not subscriptable
2025-08-30T09:58:49.8586482Z FAILED tests/rpc/test_rpc_apiserver.py::test_api_download_data - AssertionError: assert 'failed' == 'success'
2025-08-30T09:58:49.8587218Z   
2025-08-30T09:58:49.8587463Z   - success
2025-08-30T09:58:49.8587741Z   + failed
2025-08-30T09:58:49.8588231Z FAILED tests/rpc/test_rpc_apiserver.py::test_api_pair_history - assert 502 == 200
2025-08-30T09:58:49.8588883Z  +  where 502 = <Response [502 Bad Gateway]>.status_code
2025-08-30T09:58:49.8589926Z FAILED tests/rpc/test_rpc_apiserver.py::test_api_patch_backtest_market_change - AssertionError: assert ['date', 'cou...', 'rel_mean'] == ['date', 'cou..., '__date_ts']
2025-08-30T09:58:49.8590925Z   
2025-08-30T09:58:49.8591207Z   Right contains one more item: '__date_ts'
2025-08-30T09:58:49.8591600Z   
2025-08-30T09:58:49.8591839Z   Full diff:
2025-08-30T09:58:49.8592103Z     [
2025-08-30T09:58:49.8592353Z         'date',
2025-08-30T09:58:49.8592619Z         'count',
2025-08-30T09:58:49.8592891Z         'mean',
2025-08-30T09:58:49.8593155Z         'rel_mean',
2025-08-30T09:58:49.8593746Z   -     '__date_ts',
2025-08-30T09:58:49.8594025Z     ]
2025-08-30T09:58:49.8594503Z = 191 failed, 3979 passed, 14 skipped, 396 deselected, 4 warnings in 296.99s (0:04:56) =
2025-08-30T09:58:52.0748858Z ##[error]Process completed with exit code 1.
2025-08-30T09:58:52.0905314Z ##[group]Run rjstone/discord-webhook-notify@c2597273488aeda841dd1e891321952b51f7996f
2025-08-30T09:58:52.0905727Z with:
2025-08-30T09:58:52.0905886Z   severity: error
2025-08-30T09:58:52.0906094Z   details: Freqtrade CI failed on ubuntu-22.04
2025-08-30T09:58:52.0906359Z   username: Notification (Github Actions)
2025-08-30T09:58:52.0906760Z   avatarUrl: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
2025-08-30T09:58:52.0907137Z   holddownTime: 3000
2025-08-30T09:58:52.0907314Z   lockfileDir: .
2025-08-30T09:58:52.0907471Z env:
2025-08-30T09:58:52.0907684Z   pythonLocation: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:58:52.0908065Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib/pkgconfig
2025-08-30T09:58:52.0908437Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:58:52.0908765Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:58:52.0909120Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.11.13/x64
2025-08-30T09:58:52.0909449Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.11.13/x64/lib
2025-08-30T09:58:52.0909844Z   UV_PYTHON: 3.11
2025-08-30T09:58:52.0910066Z   VIRTUAL_ENV: /home/runner/work/freqtrade/freqtrade/.venv
2025-08-30T09:58:52.0910376Z   UV_CACHE_DIR: /home/runner/work/_temp/setup-uv-cache
2025-08-30T09:58:52.0910630Z ##[endgroup]
2025-08-30T09:58:52.2572282Z ##[warning]The webhookUrl was not provided. For security reasons the secret URL must be provided in the action yaml using a context expression and can not be read as a default.
DISCORD NOTIFICATION NOT SENT
2025-08-30T09:58:52.2706564Z Post job cleanup.
2025-08-30T09:58:52.3478793Z [command]/usr/bin/git version
2025-08-30T09:58:52.3544643Z git version 2.51.0
2025-08-30T09:58:52.3580006Z Temporarily overriding HOME='/home/runner/work/_temp/fec7d4d6-17ae-4a05-87bb-4513b9e4235f' before making global git config changes
2025-08-30T09:58:52.3581207Z Adding repository directory to the temporary git global config as a safe directory
2025-08-30T09:58:52.3585428Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/freqtrade/freqtrade
2025-08-30T09:58:52.3619762Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-08-30T09:58:52.3652879Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-08-30T09:58:52.3882056Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-08-30T09:58:52.3912896Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-08-30T09:58:52.4244062Z Cleaning up orphan processes
